import { Enum, GetEnum, FixedSizeBinary, Binary, SS58String, FixedSizeArray, ResultPayload, TxCallData } from "polkadot-api";
type AnonymousEnum<T extends {}> = T & {
    __anonymous: true;
};
type MyTuple<T> = [T, ...T[]];
type SeparateUndefined<T> = undefined extends T ? undefined | Exclude<T, undefined> : T;
type Anonymize<T> = SeparateUndefined<T extends FixedSizeBinary<infer L> ? number extends L ? Binary : FixedSizeBinary<L> : T extends string | number | bigint | boolean | void | undefined | null | symbol | Uint8Array | Enum<any> ? T : T extends AnonymousEnum<infer V> ? Enum<V> : T extends MyTuple<any> ? {
    [K in keyof T]: T[K];
} : T extends [] ? [] : T extends FixedSizeArray<infer L, infer T> ? number extends L ? Array<T> : FixedSizeArray<L, T> : {
    [K in keyof T & string]: T[K];
}>;
export type I5sesotjlssv2d = {
    "nonce": number;
    "consumers": number;
    "providers": number;
    "sufficients": number;
    "data": Anonymize<I1q8tnt1cluu5j>;
};
export type I1q8tnt1cluu5j = {
    "free": bigint;
    "reserved": bigint;
    "frozen": bigint;
    "flags": bigint;
};
export type Iffmde3ekjedi9 = {
    "normal": Anonymize<I4q39t5hn830vp>;
    "operational": Anonymize<I4q39t5hn830vp>;
    "mandatory": Anonymize<I4q39t5hn830vp>;
};
export type I4q39t5hn830vp = {
    "ref_time": bigint;
    "proof_size": bigint;
};
export type I4mddgoa69c0a2 = Array<DigestItem>;
export type DigestItem = Enum<{
    "PreRuntime": Anonymize<I82jm9g7pufuel>;
    "Consensus": Anonymize<I82jm9g7pufuel>;
    "Seal": Anonymize<I82jm9g7pufuel>;
    "Other": Binary;
    "RuntimeEnvironmentUpdated": undefined;
}>;
export declare const DigestItem: GetEnum<DigestItem>;
export type I82jm9g7pufuel = [FixedSizeBinary<4>, Binary];
export type I3753v7nr5bgjb = Array<Anonymize<Ieabvo24vrh0om>>;
export type Ieabvo24vrh0om = {
    "phase": Phase;
    "event": Anonymize<Iev4ibvj7u3hop>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type Phase = Enum<{
    "ApplyExtrinsic": number;
    "Finalization": undefined;
    "Initialization": undefined;
}>;
export declare const Phase: GetEnum<Phase>;
export type Iev4ibvj7u3hop = AnonymousEnum<{
    "System": Anonymize<Iacdfbu52dlgup>;
    "Scheduler": Anonymize<I7fr5fops97nrq>;
    "Preimage": PreimageEvent;
    "Indices": Anonymize<IndicesEvent>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "Staking": StakingEvent;
    "Offences": OffencesEvent;
    "Session": SessionEvent;
    "Grandpa": GrandpaEvent;
    "Treasury": Anonymize<Iceo3qo846468b>;
    "ConvictionVoting": ConvictionVotingEvent;
    "Referenda": Anonymize<Idfraa3b4eu018>;
    "Whitelist": Anonymize<I2gstma38ipe50>;
    "Claims": CommonClaimsEvent;
    "Vesting": VestingEvent;
    "Utility": Anonymize<Iccg7gpt3h5m62>;
    "Proxy": Anonymize<Iacgvhbqvg5qmh>;
    "Multisig": Anonymize<Ifk4net48mks7q>;
    "Bounties": BountiesEvent;
    "ChildBounties": ChildBountiesEvent;
    "ElectionProviderMultiPhase": ElectionProviderMultiPhaseEvent;
    "VoterList": BagsListEvent;
    "NominationPools": NominationPoolsEvent;
    "FastUnstake": Anonymize<Iajn3dsaap97s9>;
    "ParaInclusion": ParachainsInclusionEvent;
    "Paras": ParachainsParasEvent;
    "Hrmp": ParachainsHrmpEvent;
    "ParasDisputes": ParachainsDisputesEvent;
    "OnDemand": Anonymize<Icuu6jjue8o6eb>;
    "Registrar": CommonParasRegistrarEvent;
    "Slots": CommonSlotsEvent;
    "Auctions": CommonAuctionsEvent;
    "Crowdloan": Anonymize<I4t2u4a27m51ur>;
    "Coretime": PolkadotRuntimeParachainsCoretimeEvent;
    "StateTrieMigration": Anonymize<I61dksvl51aujo>;
    "XcmPallet": Anonymize<I5ce1ru810vv9d>;
    "MessageQueue": Anonymize<I13vul90391uuv>;
    "AssetRate": AssetRateEvent;
}>;
export type Iacdfbu52dlgup = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<Ib63bv3hp3ofab>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type Ia82mnkmeo2rhc = {
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type Ic9s8f85vjtncc = {
    "weight": Anonymize<I4q39t5hn830vp>;
    "class": DispatchClass;
    "pays_fee": Anonymize<Iehg04bj71rkd>;
};
export type DispatchClass = Enum<{
    "Normal": undefined;
    "Operational": undefined;
    "Mandatory": undefined;
}>;
export declare const DispatchClass: GetEnum<DispatchClass>;
export type Iehg04bj71rkd = AnonymousEnum<{
    "Yes": undefined;
    "No": undefined;
}>;
export type Ib63bv3hp3ofab = {
    "dispatch_error": Anonymize<I1ffak8crus5ij>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I1ffak8crus5ij = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I75j1ggu6juar1>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I75j1ggu6juar1 = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Preimage": Anonymize<I1iknkudsdnbks>;
    "Babe": Anonymize<Ib6q602k6o213a>;
    "Timestamp": undefined;
    "Indices": Anonymize<Icq1825fru3di2>;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "Staking": Anonymize<I11137r14aka6n>;
    "Offences": undefined;
    "Historical": undefined;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Grandpa": Anonymize<I7q8i0pp1gkas6>;
    "AuthorityDiscovery": undefined;
    "Treasury": Anonymize<I36uss0m9fpcsf>;
    "ConvictionVoting": Anonymize<Idfa8k8ikssbsf>;
    "Referenda": Anonymize<I84u4ul208g742>;
    "Origins": undefined;
    "Whitelist": Anonymize<I15nctscutpbeh>;
    "Claims": Anonymize<Ijh2jbbqvb176>;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Bounties": Anonymize<Ibfvjqqblobf53>;
    "ChildBounties": Anonymize<I4u5ou5u3tthff>;
    "ElectionProviderMultiPhase": Anonymize<Idb84kfjd998sl>;
    "VoterList": Anonymize<Ic35l5bgiij29p>;
    "NominationPools": Anonymize<Ic4cmf9id3qcei>;
    "FastUnstake": Anonymize<Iau9bur8dc3bec>;
    "ParachainsOrigin": undefined;
    "Configuration": Anonymize<In1jctfv299lm>;
    "ParasShared": undefined;
    "ParaInclusion": Anonymize<Iat8btfaeiq1le>;
    "ParaInherent": Anonymize<Idfqgoii3heb2f>;
    "ParaScheduler": undefined;
    "Paras": Anonymize<Ieo97unb4d08rl>;
    "Initializer": undefined;
    "Dmp": undefined;
    "Hrmp": Anonymize<Ibns95nfmm92df>;
    "ParaSessionInfo": undefined;
    "ParasDisputes": Anonymize<Iakburbqot4g58>;
    "ParasSlashing": Anonymize<I1v70p1j0r2q1j>;
    "OnDemand": Anonymize<I8htscm3ert491>;
    "CoretimeAssignmentProvider": Anonymize<Ie3b9qd0nd59gs>;
    "Registrar": Anonymize<I97vkspnd0b8bh>;
    "Slots": Anonymize<Iers095sa65pbg>;
    "Auctions": Anonymize<I4kgo47o2v3701>;
    "Crowdloan": Anonymize<I9o6l1c4r4qc3s>;
    "Coretime": Anonymize<Ifju0orssp9h7o>;
    "StateTrieMigration": Anonymize<I96objte63brjr>;
    "XcmPallet": Anonymize<I87j95aq93d7dq>;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "AssetRate": Anonymize<I3qgd61cgli6cp>;
    "Beefy": Anonymize<Ib6q602k6o213a>;
    "Mmr": undefined;
    "BeefyMmrLeaf": undefined;
}>;
export type I5o0s7c8q1cc9b = AnonymousEnum<{
    /**
     *The name of specification does not match between the current runtime
     *and the new runtime.
     */
    "InvalidSpecName": undefined;
    /**
     *The specification version is not allowed to decrease between the current runtime
     *and the new runtime.
     */
    "SpecVersionNeedsToIncrease": undefined;
    /**
     *Failed to extract the runtime version from the new runtime.
     *
     *Either calling `Core_version` or decoding `RuntimeVersion` failed.
     */
    "FailedToExtractRuntimeVersion": undefined;
    /**
     *Suicide called when the account has non-default composite data.
     */
    "NonDefaultComposite": undefined;
    /**
     *There is a non-zero reference count preventing the account from being purged.
     */
    "NonZeroRefCount": undefined;
    /**
     *The origin filter prevent the call to be dispatched.
     */
    "CallFiltered": undefined;
    /**
     *A multi-block migration is ongoing and prevents the current code from being replaced.
     */
    "MultiBlockMigrationsOngoing": undefined;
    /**
     *No upgrade authorized.
     */
    "NothingAuthorized": undefined;
    /**
     *The submitted code is not authorized.
     */
    "Unauthorized": undefined;
}>;
export type If7oa8fprnilo5 = AnonymousEnum<{
    /**
     *Failed to schedule a call
     */
    "FailedToSchedule": undefined;
    /**
     *Cannot find the scheduled call.
     */
    "NotFound": undefined;
    /**
     *Given target block number is in the past.
     */
    "TargetBlockNumberInPast": undefined;
    /**
     *Reschedule failed because it does not change scheduled time.
     */
    "RescheduleNoChange": undefined;
    /**
     *Attempt to use a non-named function on a named task.
     */
    "Named": undefined;
}>;
export type I1iknkudsdnbks = AnonymousEnum<{
    /**
     *Preimage is too large to store on-chain.
     */
    "TooBig": undefined;
    /**
     *Preimage has already been noted on-chain.
     */
    "AlreadyNoted": undefined;
    /**
     *The user is not authorized to perform this action.
     */
    "NotAuthorized": undefined;
    /**
     *The preimage cannot be removed since it has not yet been noted.
     */
    "NotNoted": undefined;
    /**
     *A preimage may not be removed when there are outstanding requests.
     */
    "Requested": undefined;
    /**
     *The preimage request cannot be removed since no outstanding requests exist.
     */
    "NotRequested": undefined;
    /**
     *More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
     */
    "TooMany": undefined;
    /**
     *Too few hashes were requested to be upgraded (i.e. zero).
     */
    "TooFew": undefined;
    /**
     *No ticket with a cost was returned by [`Config::Consideration`] to store the preimage.
     */
    "NoCost": undefined;
}>;
export type Ib6q602k6o213a = AnonymousEnum<{
    /**
     *An equivocation proof provided as part of an equivocation report is invalid.
     */
    "InvalidEquivocationProof": undefined;
    /**
     *A key ownership proof provided as part of an equivocation report is invalid.
     */
    "InvalidKeyOwnershipProof": undefined;
    /**
     *A given equivocation report is valid but already previously reported.
     */
    "DuplicateOffenceReport": undefined;
    /**
     *Submitted configuration is invalid.
     */
    "InvalidConfiguration": undefined;
}>;
export type Icq1825fru3di2 = AnonymousEnum<{
    /**
     *The index was not already assigned.
     */
    "NotAssigned": undefined;
    /**
     *The index is assigned to another account.
     */
    "NotOwner": undefined;
    /**
     *The index was not available.
     */
    "InUse": undefined;
    /**
     *The source and destination accounts are identical.
     */
    "NotTransfer": undefined;
    /**
     *The index is permanent and may not be freed/changed.
     */
    "Permanent": undefined;
}>;
export type Idj13i7adlomht = AnonymousEnum<{
    /**
     *Vesting balance too high to send value.
     */
    "VestingBalance": undefined;
    /**
     *Account liquidity restrictions prevent withdrawal.
     */
    "LiquidityRestrictions": undefined;
    /**
     *Balance too low to send value.
     */
    "InsufficientBalance": undefined;
    /**
     *Value too low to create account due to existential deposit.
     */
    "ExistentialDeposit": undefined;
    /**
     *Transfer/payment would kill account.
     */
    "Expendability": undefined;
    /**
     *A vesting schedule already exists for this account.
     */
    "ExistingVestingSchedule": undefined;
    /**
     *Beneficiary account must pre-exist.
     */
    "DeadAccount": undefined;
    /**
     *Number of named reserves exceed `MaxReserves`.
     */
    "TooManyReserves": undefined;
    /**
     *Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`.
     */
    "TooManyHolds": undefined;
    /**
     *Number of freezes exceed `MaxFreezes`.
     */
    "TooManyFreezes": undefined;
    /**
     *The issuance cannot be modified since it is already deactivated.
     */
    "IssuanceDeactivated": undefined;
    /**
     *The delta cannot be zero.
     */
    "DeltaZero": undefined;
}>;
export type I11137r14aka6n = AnonymousEnum<{
    /**
     *Not a controller account.
     */
    "NotController": undefined;
    /**
     *Not a stash account.
     */
    "NotStash": undefined;
    /**
     *Stash is already bonded.
     */
    "AlreadyBonded": undefined;
    /**
     *Controller is already paired.
     */
    "AlreadyPaired": undefined;
    /**
     *Targets cannot be empty.
     */
    "EmptyTargets": undefined;
    /**
     *Duplicate index.
     */
    "DuplicateIndex": undefined;
    /**
     *Slash record index out of bounds.
     */
    "InvalidSlashIndex": undefined;
    /**
     *Cannot have a validator or nominator role, with value less than the minimum defined by
     *governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
     *intention, `chill` first to remove one's role as validator/nominator.
     */
    "InsufficientBond": undefined;
    /**
     *Can not schedule more unlock chunks.
     */
    "NoMoreChunks": undefined;
    /**
     *Can not rebond without unlocking chunks.
     */
    "NoUnlockChunk": undefined;
    /**
     *Attempting to target a stash that still has funds.
     */
    "FundedTarget": undefined;
    /**
     *Invalid era to reward.
     */
    "InvalidEraToReward": undefined;
    /**
     *Invalid number of nominations.
     */
    "InvalidNumberOfNominations": undefined;
    /**
     *Items are not sorted and unique.
     */
    "NotSortedAndUnique": undefined;
    /**
     *Rewards for this era have already been claimed for this validator.
     */
    "AlreadyClaimed": undefined;
    /**
     *No nominators exist on this page.
     */
    "InvalidPage": undefined;
    /**
     *Incorrect previous history depth input provided.
     */
    "IncorrectHistoryDepth": undefined;
    /**
     *Incorrect number of slashing spans provided.
     */
    "IncorrectSlashingSpans": undefined;
    /**
     *Internal state has become somehow corrupted and the operation cannot continue.
     */
    "BadState": undefined;
    /**
     *Too many nomination targets supplied.
     */
    "TooManyTargets": undefined;
    /**
     *A nomination target was supplied that was blocked or otherwise not a validator.
     */
    "BadTarget": undefined;
    /**
     *The user has enough bond and thus cannot be chilled forcefully by an external person.
     */
    "CannotChillOther": undefined;
    /**
     *There are too many nominators in the system. Governance needs to adjust the staking
     *settings to keep things safe for the runtime.
     */
    "TooManyNominators": undefined;
    /**
     *There are too many validator candidates in the system. Governance needs to adjust the
     *staking settings to keep things safe for the runtime.
     */
    "TooManyValidators": undefined;
    /**
     *Commission is too low. Must be at least `MinCommission`.
     */
    "CommissionTooLow": undefined;
    /**
     *Some bound is not met.
     */
    "BoundNotMet": undefined;
    /**
     *Used when attempting to use deprecated controller account logic.
     */
    "ControllerDeprecated": undefined;
    /**
     *Cannot reset a ledger.
     */
    "CannotRestoreLedger": undefined;
    /**
     *Provided reward destination is not allowed.
     */
    "RewardDestinationRestricted": undefined;
    /**
     *Not enough funds available to withdraw.
     */
    "NotEnoughFunds": undefined;
    /**
     *Operation not allowed for virtual stakers.
     */
    "VirtualStakerNotAllowed": undefined;
}>;
export type I1e07dgbaqd1sq = AnonymousEnum<{
    /**
     *Invalid ownership proof.
     */
    "InvalidProof": undefined;
    /**
     *No associated validator ID for account.
     */
    "NoAssociatedValidatorId": undefined;
    /**
     *Registered duplicate key.
     */
    "DuplicatedKey": undefined;
    /**
     *No keys are associated with this account.
     */
    "NoKeys": undefined;
    /**
     *Key setting account is not live, so it's impossible to associate keys.
     */
    "NoAccount": undefined;
}>;
export type I7q8i0pp1gkas6 = AnonymousEnum<{
    /**
     *Attempt to signal GRANDPA pause when the authority set isn't live
     *(either paused or already pending pause).
     */
    "PauseFailed": undefined;
    /**
     *Attempt to signal GRANDPA resume when the authority set isn't paused
     *(either live or already pending resume).
     */
    "ResumeFailed": undefined;
    /**
     *Attempt to signal GRANDPA change with one already pending.
     */
    "ChangePending": undefined;
    /**
     *Cannot signal forced change so soon after last.
     */
    "TooSoon": undefined;
    /**
     *A key ownership proof provided as part of an equivocation report is invalid.
     */
    "InvalidKeyOwnershipProof": undefined;
    /**
     *An equivocation proof provided as part of an equivocation report is invalid.
     */
    "InvalidEquivocationProof": undefined;
    /**
     *A given equivocation report is valid but already previously reported.
     */
    "DuplicateOffenceReport": undefined;
}>;
export type I36uss0m9fpcsf = AnonymousEnum<{
    /**
     *No proposal, bounty or spend at that index.
     */
    "InvalidIndex": undefined;
    /**
     *Too many approvals in the queue.
     */
    "TooManyApprovals": undefined;
    /**
     *The spend origin is valid but the amount it is allowed to spend is lower than the
     *amount to be spent.
     */
    "InsufficientPermission": undefined;
    /**
     *Proposal has not been approved.
     */
    "ProposalNotApproved": undefined;
    /**
     *The balance of the asset kind is not convertible to the balance of the native asset.
     */
    "FailedToConvertBalance": undefined;
    /**
     *The spend has expired and cannot be claimed.
     */
    "SpendExpired": undefined;
    /**
     *The spend is not yet eligible for payout.
     */
    "EarlyPayout": undefined;
    /**
     *The payment has already been attempted.
     */
    "AlreadyAttempted": undefined;
    /**
     *There was some issue with the mechanism of payment.
     */
    "PayoutError": undefined;
    /**
     *The payout was not yet attempted/claimed.
     */
    "NotAttempted": undefined;
    /**
     *The payment has neither failed nor succeeded yet.
     */
    "Inconclusive": undefined;
}>;
export type Idfa8k8ikssbsf = AnonymousEnum<{
    /**
     *Poll is not ongoing.
     */
    "NotOngoing": undefined;
    /**
     *The given account did not vote on the poll.
     */
    "NotVoter": undefined;
    /**
     *The actor has no permission to conduct the action.
     */
    "NoPermission": undefined;
    /**
     *The actor has no permission to conduct the action right now but will do in the future.
     */
    "NoPermissionYet": undefined;
    /**
     *The account is already delegating.
     */
    "AlreadyDelegating": undefined;
    /**
     *The account currently has votes attached to it and the operation cannot succeed until
     *these are removed through `remove_vote`.
     */
    "AlreadyVoting": undefined;
    /**
     *Too high a balance was provided that the account cannot afford.
     */
    "InsufficientFunds": undefined;
    /**
     *The account is not currently delegating.
     */
    "NotDelegating": undefined;
    /**
     *Delegation to oneself makes no sense.
     */
    "Nonsense": undefined;
    /**
     *Maximum number of votes reached.
     */
    "MaxVotesReached": undefined;
    /**
     *The class must be supplied since it is not easily determinable from the state.
     */
    "ClassNeeded": undefined;
    /**
     *The class ID supplied is invalid.
     */
    "BadClass": undefined;
}>;
export type I84u4ul208g742 = AnonymousEnum<{
    /**
     *Referendum is not ongoing.
     */
    "NotOngoing": undefined;
    /**
     *Referendum's decision deposit is already paid.
     */
    "HasDeposit": undefined;
    /**
     *The track identifier given was invalid.
     */
    "BadTrack": undefined;
    /**
     *There are already a full complement of referenda in progress for this track.
     */
    "Full": undefined;
    /**
     *The queue of the track is empty.
     */
    "QueueEmpty": undefined;
    /**
     *The referendum index provided is invalid in this context.
     */
    "BadReferendum": undefined;
    /**
     *There was nothing to do in the advancement.
     */
    "NothingToDo": undefined;
    /**
     *No track exists for the proposal origin.
     */
    "NoTrack": undefined;
    /**
     *Any deposit cannot be refunded until after the decision is over.
     */
    "Unfinished": undefined;
    /**
     *The deposit refunder is not the depositor.
     */
    "NoPermission": undefined;
    /**
     *The deposit cannot be refunded since none was made.
     */
    "NoDeposit": undefined;
    /**
     *The referendum status is invalid for this operation.
     */
    "BadStatus": undefined;
    /**
     *The preimage does not exist.
     */
    "PreimageNotExist": undefined;
    /**
     *The preimage is stored with a different length than the one provided.
     */
    "PreimageStoredWithDifferentLength": undefined;
}>;
export type I15nctscutpbeh = AnonymousEnum<{
    /**
     *The preimage of the call hash could not be loaded.
     */
    "UnavailablePreImage": undefined;
    /**
     *The call could not be decoded.
     */
    "UndecodableCall": undefined;
    /**
     *The weight of the decoded call was higher than the witness.
     */
    "InvalidCallWeightWitness": undefined;
    /**
     *The call was not whitelisted.
     */
    "CallIsNotWhitelisted": undefined;
    /**
     *The call was already whitelisted; No-Op.
     */
    "CallAlreadyWhitelisted": undefined;
}>;
export type Ijh2jbbqvb176 = AnonymousEnum<{
    /**
     *Invalid Ethereum signature.
     */
    "InvalidEthereumSignature": undefined;
    /**
     *Ethereum address has no claim.
     */
    "SignerHasNoClaim": undefined;
    /**
     *Account ID sending transaction has no claim.
     */
    "SenderHasNoClaim": undefined;
    /**
     *There's not enough in the pot to pay out some unvested amount. Generally implies a
     *logic error.
     */
    "PotUnderflow": undefined;
    /**
     *A needed statement was not included.
     */
    "InvalidStatement": undefined;
    /**
     *The account already has a vested balance.
     */
    "VestedBalanceExists": undefined;
}>;
export type Icof2acl69lq3c = AnonymousEnum<{
    /**
     *The account given is not vesting.
     */
    "NotVesting": undefined;
    /**
     *The account already has `MaxVestingSchedules` count of schedules and thus
     *cannot add another one. Consider merging existing schedules in order to add another.
     */
    "AtMaxVestingSchedules": undefined;
    /**
     *Amount being transferred is too low to create a vesting schedule.
     */
    "AmountLow": undefined;
    /**
     *An index was out of bounds of the vesting schedules.
     */
    "ScheduleIndexOutOfBounds": undefined;
    /**
     *Failed to create a new schedule because some parameter was invalid.
     */
    "InvalidScheduleParams": undefined;
}>;
export type I8dt2g2hcrgh36 = AnonymousEnum<{
    /**
     *Too many calls batched.
     */
    "TooManyCalls": undefined;
}>;
export type Iuvt54ei4cehc = AnonymousEnum<{
    /**
     *There are too many proxies registered or too many announcements pending.
     */
    "TooMany": undefined;
    /**
     *Proxy registration not found.
     */
    "NotFound": undefined;
    /**
     *Sender is not a proxy of the account to be proxied.
     */
    "NotProxy": undefined;
    /**
     *A call which is incompatible with the proxy type's filter was attempted.
     */
    "Unproxyable": undefined;
    /**
     *Account is already a proxy.
     */
    "Duplicate": undefined;
    /**
     *Call may not be made by proxy because it may escalate its privileges.
     */
    "NoPermission": undefined;
    /**
     *Announcement, if made at all, was made too recently.
     */
    "Unannounced": undefined;
    /**
     *Cannot add self as proxy.
     */
    "NoSelfProxy": undefined;
}>;
export type Ia76qmhhg4jvb9 = AnonymousEnum<{
    /**
     *Threshold must be 2 or greater.
     */
    "MinimumThreshold": undefined;
    /**
     *Call is already approved by this signatory.
     */
    "AlreadyApproved": undefined;
    /**
     *Call doesn't need any (more) approvals.
     */
    "NoApprovalsNeeded": undefined;
    /**
     *There are too few signatories in the list.
     */
    "TooFewSignatories": undefined;
    /**
     *There are too many signatories in the list.
     */
    "TooManySignatories": undefined;
    /**
     *The signatories were provided out of order; they should be ordered.
     */
    "SignatoriesOutOfOrder": undefined;
    /**
     *The sender was contained in the other signatories; it shouldn't be.
     */
    "SenderInSignatories": undefined;
    /**
     *Multisig operation not found when attempting to cancel.
     */
    "NotFound": undefined;
    /**
     *Only the account that originally created the multisig is able to cancel it.
     */
    "NotOwner": undefined;
    /**
     *No timepoint was given, yet the multisig operation is already underway.
     */
    "NoTimepoint": undefined;
    /**
     *A different timepoint was given to the multisig operation that is underway.
     */
    "WrongTimepoint": undefined;
    /**
     *A timepoint was given, yet no multisig operation is underway.
     */
    "UnexpectedTimepoint": undefined;
    /**
     *The maximum weight information provided was too low.
     */
    "MaxWeightTooLow": undefined;
    /**
     *The data to be stored is already stored.
     */
    "AlreadyStored": undefined;
}>;
export type Ibfvjqqblobf53 = AnonymousEnum<{
    /**
     *Proposer's balance is too low.
     */
    "InsufficientProposersBalance": undefined;
    /**
     *No proposal or bounty at that index.
     */
    "InvalidIndex": undefined;
    /**
     *The reason given is just too big.
     */
    "ReasonTooBig": undefined;
    /**
     *The bounty status is unexpected.
     */
    "UnexpectedStatus": undefined;
    /**
     *Require bounty curator.
     */
    "RequireCurator": undefined;
    /**
     *Invalid bounty value.
     */
    "InvalidValue": undefined;
    /**
     *Invalid bounty fee.
     */
    "InvalidFee": undefined;
    /**
     *A bounty payout is pending.
     *To cancel the bounty, you must unassign and slash the curator.
     */
    "PendingPayout": undefined;
    /**
     *The bounties cannot be claimed/closed because it's still in the countdown period.
     */
    "Premature": undefined;
    /**
     *The bounty cannot be closed because it has active child bounties.
     */
    "HasActiveChildBounty": undefined;
    /**
     *Too many approvals are already queued.
     */
    "TooManyQueued": undefined;
}>;
export type I4u5ou5u3tthff = AnonymousEnum<{
    /**
     *The parent bounty is not in active state.
     */
    "ParentBountyNotActive": undefined;
    /**
     *The bounty balance is not enough to add new child-bounty.
     */
    "InsufficientBountyBalance": undefined;
    /**
     *Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
     */
    "TooManyChildBounties": undefined;
}>;
export type Idb84kfjd998sl = AnonymousEnum<{
    /**
     *Submission was too early.
     */
    "PreDispatchEarlySubmission": undefined;
    /**
     *Wrong number of winners presented.
     */
    "PreDispatchWrongWinnerCount": undefined;
    /**
     *Submission was too weak, score-wise.
     */
    "PreDispatchWeakSubmission": undefined;
    /**
     *The queue was full, and the solution was not better than any of the existing ones.
     */
    "SignedQueueFull": undefined;
    /**
     *The origin failed to pay the deposit.
     */
    "SignedCannotPayDeposit": undefined;
    /**
     *Witness data to dispatchable is invalid.
     */
    "SignedInvalidWitness": undefined;
    /**
     *The signed submission consumes too much weight
     */
    "SignedTooMuchWeight": undefined;
    /**
     *OCW submitted solution for wrong round
     */
    "OcwCallWrongEra": undefined;
    /**
     *Snapshot metadata should exist but didn't.
     */
    "MissingSnapshotMetadata": undefined;
    /**
     *`Self::insert_submission` returned an invalid index.
     */
    "InvalidSubmissionIndex": undefined;
    /**
     *The call is not allowed at this point.
     */
    "CallNotAllowed": undefined;
    /**
     *The fallback failed
     */
    "FallbackFailed": undefined;
    /**
     *Some bound not met
     */
    "BoundNotMet": undefined;
    /**
     *Submitted solution has too many winners
     */
    "TooManyWinners": undefined;
    /**
     *Submission was prepared for a different round.
     */
    "PreDispatchDifferentRound": undefined;
}>;
export type Ic35l5bgiij29p = AnonymousEnum<{
    /**
     *A error in the list interface implementation.
     */
    "List": BagsListListListError;
}>;
export type BagsListListListError = Enum<{
    "Duplicate": undefined;
    "NotHeavier": undefined;
    "NotInSameBag": undefined;
    "NodeNotFound": undefined;
}>;
export declare const BagsListListListError: GetEnum<BagsListListListError>;
export type Ic4cmf9id3qcei = AnonymousEnum<{
    /**
     *A (bonded) pool id does not exist.
     */
    "PoolNotFound": undefined;
    /**
     *An account is not a member.
     */
    "PoolMemberNotFound": undefined;
    /**
     *A reward pool does not exist. In all cases this is a system logic error.
     */
    "RewardPoolNotFound": undefined;
    /**
     *A sub pool does not exist.
     */
    "SubPoolsNotFound": undefined;
    /**
     *An account is already delegating in another pool. An account may only belong to one
     *pool at a time.
     */
    "AccountBelongsToOtherPool": undefined;
    /**
     *The member is fully unbonded (and thus cannot access the bonded and reward pool
     *anymore to, for example, collect rewards).
     */
    "FullyUnbonding": undefined;
    /**
     *The member cannot unbond further chunks due to reaching the limit.
     */
    "MaxUnbondingLimit": undefined;
    /**
     *None of the funds can be withdrawn yet because the bonding duration has not passed.
     */
    "CannotWithdrawAny": undefined;
    /**
     *The amount does not meet the minimum bond to either join or create a pool.
     *
     *The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The
     *caller does not have nominating permissions for the pool. Members can never unbond to a
     *value below `MinJoinBond`.
     */
    "MinimumBondNotMet": undefined;
    /**
     *The transaction could not be executed due to overflow risk for the pool.
     */
    "OverflowRisk": undefined;
    /**
     *A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
     *other members to be permissionlessly unbonded.
     */
    "NotDestroying": undefined;
    /**
     *The caller does not have nominating permissions for the pool.
     */
    "NotNominator": undefined;
    /**
     *Either a) the caller cannot make a valid kick or b) the pool is not destroying.
     */
    "NotKickerOrDestroying": undefined;
    /**
     *The pool is not open to join
     */
    "NotOpen": undefined;
    /**
     *The system is maxed out on pools.
     */
    "MaxPools": undefined;
    /**
     *Too many members in the pool or system.
     */
    "MaxPoolMembers": undefined;
    /**
     *The pools state cannot be changed.
     */
    "CanNotChangeState": undefined;
    /**
     *The caller does not have adequate permissions.
     */
    "DoesNotHavePermission": undefined;
    /**
     *Metadata exceeds [`Config::MaxMetadataLen`]
     */
    "MetadataExceedsMaxLen": undefined;
    /**
     *Some error occurred that should never happen. This should be reported to the
     *maintainers.
     */
    "Defensive": Anonymize<Ie2db4l6126rkt>;
    /**
     *Partial unbonding now allowed permissionlessly.
     */
    "PartialUnbondNotAllowedPermissionlessly": undefined;
    /**
     *The pool's max commission cannot be set higher than the existing value.
     */
    "MaxCommissionRestricted": undefined;
    /**
     *The supplied commission exceeds the max allowed commission.
     */
    "CommissionExceedsMaximum": undefined;
    /**
     *The supplied commission exceeds global maximum commission.
     */
    "CommissionExceedsGlobalMaximum": undefined;
    /**
     *Not enough blocks have surpassed since the last commission update.
     */
    "CommissionChangeThrottled": undefined;
    /**
     *The submitted changes to commission change rate are not allowed.
     */
    "CommissionChangeRateNotAllowed": undefined;
    /**
     *There is no pending commission to claim.
     */
    "NoPendingCommission": undefined;
    /**
     *No commission current has been set.
     */
    "NoCommissionCurrentSet": undefined;
    /**
     *Pool id currently in use.
     */
    "PoolIdInUse": undefined;
    /**
     *Pool id provided is not correct/usable.
     */
    "InvalidPoolId": undefined;
    /**
     *Bonding extra is restricted to the exact pending reward amount.
     */
    "BondExtraRestricted": undefined;
    /**
     *No imbalance in the ED deposit for the pool.
     */
    "NothingToAdjust": undefined;
    /**
     *No slash pending that can be applied to the member.
     */
    "NothingToSlash": undefined;
    /**
     *The pool or member delegation has already migrated to delegate stake.
     */
    "AlreadyMigrated": undefined;
    /**
     *The pool or member delegation has not migrated yet to delegate stake.
     */
    "NotMigrated": undefined;
    /**
     *This call is not allowed in the current state of the pallet.
     */
    "NotSupported": undefined;
}>;
export type Ie2db4l6126rkt = AnonymousEnum<{
    "NotEnoughSpaceInUnbondPool": undefined;
    "PoolNotFound": undefined;
    "RewardPoolNotFound": undefined;
    "SubPoolsNotFound": undefined;
    "BondedStashKilledPrematurely": undefined;
    "DelegationUnsupported": undefined;
    "SlashNotApplied": undefined;
}>;
export type Iau9bur8dc3bec = AnonymousEnum<{
    /**
     *The provided Controller account was not found.
     *
     *This means that the given account is not bonded.
     */
    "NotController": undefined;
    /**
     *The bonded account has already been queued.
     */
    "AlreadyQueued": undefined;
    /**
     *The bonded account has active unlocking chunks.
     */
    "NotFullyBonded": undefined;
    /**
     *The provided un-staker is not in the `Queue`.
     */
    "NotQueued": undefined;
    /**
     *The provided un-staker is already in Head, and cannot deregister.
     */
    "AlreadyHead": undefined;
    /**
     *The call is not allowed at this point because the pallet is not active.
     */
    "CallNotAllowed": undefined;
}>;
export type In1jctfv299lm = AnonymousEnum<{
    /**
     *The new value for a configuration parameter is invalid.
     */
    "InvalidNewValue": undefined;
}>;
export type Iat8btfaeiq1le = AnonymousEnum<{
    /**
     *Validator index out of bounds.
     */
    "ValidatorIndexOutOfBounds": undefined;
    /**
     *Candidate submitted but para not scheduled.
     */
    "UnscheduledCandidate": undefined;
    /**
     *Head data exceeds the configured maximum.
     */
    "HeadDataTooLarge": undefined;
    /**
     *Code upgrade prematurely.
     */
    "PrematureCodeUpgrade": undefined;
    /**
     *Output code is too large
     */
    "NewCodeTooLarge": undefined;
    /**
     *The candidate's relay-parent was not allowed. Either it was
     *not recent enough or it didn't advance based on the last parachain block.
     */
    "DisallowedRelayParent": undefined;
    /**
     *Failed to compute group index for the core: either it's out of bounds
     *or the relay parent doesn't belong to the current session.
     */
    "InvalidAssignment": undefined;
    /**
     *Invalid group index in core assignment.
     */
    "InvalidGroupIndex": undefined;
    /**
     *Insufficient (non-majority) backing.
     */
    "InsufficientBacking": undefined;
    /**
     *Invalid (bad signature, unknown validator, etc.) backing.
     */
    "InvalidBacking": undefined;
    /**
     *Collator did not sign PoV.
     */
    "NotCollatorSigned": undefined;
    /**
     *The validation data hash does not match expected.
     */
    "ValidationDataHashMismatch": undefined;
    /**
     *The downward message queue is not processed correctly.
     */
    "IncorrectDownwardMessageHandling": undefined;
    /**
     *At least one upward message sent does not pass the acceptance criteria.
     */
    "InvalidUpwardMessages": undefined;
    /**
     *The candidate didn't follow the rules of HRMP watermark advancement.
     */
    "HrmpWatermarkMishandling": undefined;
    /**
     *The HRMP messages sent by the candidate is not valid.
     */
    "InvalidOutboundHrmp": undefined;
    /**
     *The validation code hash of the candidate is not valid.
     */
    "InvalidValidationCodeHash": undefined;
    /**
     *The `para_head` hash in the candidate descriptor doesn't match the hash of the actual
     *para head in the commitments.
     */
    "ParaHeadMismatch": undefined;
}>;
export type Idfqgoii3heb2f = AnonymousEnum<{
    /**
     *Inclusion inherent called more than once per block.
     */
    "TooManyInclusionInherents": undefined;
    /**
     *The hash of the submitted parent header doesn't correspond to the saved block hash of
     *the parent.
     */
    "InvalidParentHeader": undefined;
    /**
     *The data given to the inherent will result in an overweight block.
     */
    "InherentOverweight": undefined;
    /**
     *A candidate was filtered during inherent execution. This should have only been done
     *during creation.
     */
    "CandidatesFilteredDuringExecution": undefined;
    /**
     *Too many candidates supplied.
     */
    "UnscheduledCandidate": undefined;
}>;
export type Ieo97unb4d08rl = AnonymousEnum<{
    /**
     *Para is not registered in our system.
     */
    "NotRegistered": undefined;
    /**
     *Para cannot be onboarded because it is already tracked by our system.
     */
    "CannotOnboard": undefined;
    /**
     *Para cannot be offboarded at this time.
     */
    "CannotOffboard": undefined;
    /**
     *Para cannot be upgraded to a lease holding parachain.
     */
    "CannotUpgrade": undefined;
    /**
     *Para cannot be downgraded to an on-demand parachain.
     */
    "CannotDowngrade": undefined;
    /**
     *The statement for PVF pre-checking is stale.
     */
    "PvfCheckStatementStale": undefined;
    /**
     *The statement for PVF pre-checking is for a future session.
     */
    "PvfCheckStatementFuture": undefined;
    /**
     *Claimed validator index is out of bounds.
     */
    "PvfCheckValidatorIndexOutOfBounds": undefined;
    /**
     *The signature for the PVF pre-checking is invalid.
     */
    "PvfCheckInvalidSignature": undefined;
    /**
     *The given validator already has cast a vote.
     */
    "PvfCheckDoubleVote": undefined;
    /**
     *The given PVF does not exist at the moment of process a vote.
     */
    "PvfCheckSubjectInvalid": undefined;
    /**
     *Parachain cannot currently schedule a code upgrade.
     */
    "CannotUpgradeCode": undefined;
    /**
     *Invalid validation code size.
     */
    "InvalidCode": undefined;
}>;
export type Ibns95nfmm92df = AnonymousEnum<{
    /**
     *The sender tried to open a channel to themselves.
     */
    "OpenHrmpChannelToSelf": undefined;
    /**
     *The recipient is not a valid para.
     */
    "OpenHrmpChannelInvalidRecipient": undefined;
    /**
     *The requested capacity is zero.
     */
    "OpenHrmpChannelZeroCapacity": undefined;
    /**
     *The requested capacity exceeds the global limit.
     */
    "OpenHrmpChannelCapacityExceedsLimit": undefined;
    /**
     *The requested maximum message size is 0.
     */
    "OpenHrmpChannelZeroMessageSize": undefined;
    /**
     *The open request requested the message size that exceeds the global limit.
     */
    "OpenHrmpChannelMessageSizeExceedsLimit": undefined;
    /**
     *The channel already exists
     */
    "OpenHrmpChannelAlreadyExists": undefined;
    /**
     *There is already a request to open the same channel.
     */
    "OpenHrmpChannelAlreadyRequested": undefined;
    /**
     *The sender already has the maximum number of allowed outbound channels.
     */
    "OpenHrmpChannelLimitExceeded": undefined;
    /**
     *The channel from the sender to the origin doesn't exist.
     */
    "AcceptHrmpChannelDoesntExist": undefined;
    /**
     *The channel is already confirmed.
     */
    "AcceptHrmpChannelAlreadyConfirmed": undefined;
    /**
     *The recipient already has the maximum number of allowed inbound channels.
     */
    "AcceptHrmpChannelLimitExceeded": undefined;
    /**
     *The origin tries to close a channel where it is neither the sender nor the recipient.
     */
    "CloseHrmpChannelUnauthorized": undefined;
    /**
     *The channel to be closed doesn't exist.
     */
    "CloseHrmpChannelDoesntExist": undefined;
    /**
     *The channel close request is already requested.
     */
    "CloseHrmpChannelAlreadyUnderway": undefined;
    /**
     *Canceling is requested by neither the sender nor recipient of the open channel request.
     */
    "CancelHrmpOpenChannelUnauthorized": undefined;
    /**
     *The open request doesn't exist.
     */
    "OpenHrmpChannelDoesntExist": undefined;
    /**
     *Cannot cancel an HRMP open channel request because it is already confirmed.
     */
    "OpenHrmpChannelAlreadyConfirmed": undefined;
    /**
     *The provided witness data is wrong.
     */
    "WrongWitness": undefined;
    /**
     *The channel between these two chains cannot be authorized.
     */
    "ChannelCreationNotAuthorized": undefined;
}>;
export type Iakburbqot4g58 = AnonymousEnum<{
    /**
     *Duplicate dispute statement sets provided.
     */
    "DuplicateDisputeStatementSets": undefined;
    /**
     *Ancient dispute statement provided.
     */
    "AncientDisputeStatement": undefined;
    /**
     *Validator index on statement is out of bounds for session.
     */
    "ValidatorIndexOutOfBounds": undefined;
    /**
     *Invalid signature on statement.
     */
    "InvalidSignature": undefined;
    /**
     *Validator vote submitted more than once to dispute.
     */
    "DuplicateStatement": undefined;
    /**
     *A dispute where there are only votes on one side.
     */
    "SingleSidedDispute": undefined;
    /**
     *A dispute vote from a malicious backer.
     */
    "MaliciousBacker": undefined;
    /**
     *No backing votes were provides along dispute statements.
     */
    "MissingBackingVotes": undefined;
    /**
     *Unconfirmed dispute statement sets provided.
     */
    "UnconfirmedDispute": undefined;
}>;
export type I1v70p1j0r2q1j = AnonymousEnum<{
    /**
     *The key ownership proof is invalid.
     */
    "InvalidKeyOwnershipProof": undefined;
    /**
     *The session index is too old or invalid.
     */
    "InvalidSessionIndex": undefined;
    /**
     *The candidate hash is invalid.
     */
    "InvalidCandidateHash": undefined;
    /**
     *There is no pending slash for the given validator index and time
     *slot.
     */
    "InvalidValidatorIndex": undefined;
    /**
     *The validator index does not match the validator id.
     */
    "ValidatorIndexIdMismatch": undefined;
    /**
     *The given slashing report is valid but already previously reported.
     */
    "DuplicateSlashingReport": undefined;
}>;
export type I8htscm3ert491 = AnonymousEnum<{
    /**
     *The order queue is full, `place_order` will not continue.
     */
    "QueueFull": undefined;
    /**
     *The current spot price is higher than the max amount specified in the `place_order`
     *call, making it invalid.
     */
    "SpotPriceHigherThanMaxAmount": undefined;
}>;
export type Ie3b9qd0nd59gs = AnonymousEnum<{
    "AssignmentsEmpty": undefined;
    /**
     *Assignments together exceeded 57600.
     */
    "OverScheduled": undefined;
    /**
     *Assignments together less than 57600
     */
    "UnderScheduled": undefined;
    /**
     *assign_core is only allowed to append new assignments at the end of already existing
     *ones.
     */
    "DisallowedInsert": undefined;
    /**
     *Tried to insert a schedule for the same core and block number as an existing schedule
     */
    "DuplicateInsert": undefined;
    /**
     *Tried to add an unsorted set of assignments
     */
    "AssignmentsNotSorted": undefined;
}>;
export type I97vkspnd0b8bh = AnonymousEnum<{
    /**
     *The ID is not registered.
     */
    "NotRegistered": undefined;
    /**
     *The ID is already registered.
     */
    "AlreadyRegistered": undefined;
    /**
     *The caller is not the owner of this Id.
     */
    "NotOwner": undefined;
    /**
     *Invalid para code size.
     */
    "CodeTooLarge": undefined;
    /**
     *Invalid para head data size.
     */
    "HeadDataTooLarge": undefined;
    /**
     *Para is not a Parachain.
     */
    "NotParachain": undefined;
    /**
     *Para is not a Parathread (on-demand parachain).
     */
    "NotParathread": undefined;
    /**
     *Cannot deregister para
     */
    "CannotDeregister": undefined;
    /**
     *Cannot schedule downgrade of lease holding parachain to on-demand parachain
     */
    "CannotDowngrade": undefined;
    /**
     *Cannot schedule upgrade of on-demand parachain to lease holding parachain
     */
    "CannotUpgrade": undefined;
    /**
     *Para is locked from manipulation by the manager. Must use parachain or relay chain
     *governance.
     */
    "ParaLocked": undefined;
    /**
     *The ID given for registration has not been reserved.
     */
    "NotReserved": undefined;
    /**
     *The validation code is invalid.
     */
    "InvalidCode": undefined;
    /**
     *Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras
     *are correct for the swap to work.
     */
    "CannotSwap": undefined;
}>;
export type Iers095sa65pbg = AnonymousEnum<{
    /**
     *The parachain ID is not onboarding.
     */
    "ParaNotOnboarding": undefined;
    /**
     *There was an error with the lease.
     */
    "LeaseError": undefined;
}>;
export type I4kgo47o2v3701 = AnonymousEnum<{
    /**
     *This auction is already in progress.
     */
    "AuctionInProgress": undefined;
    /**
     *The lease period is in the past.
     */
    "LeasePeriodInPast": undefined;
    /**
     *Para is not registered
     */
    "ParaNotRegistered": undefined;
    /**
     *Not a current auction.
     */
    "NotCurrentAuction": undefined;
    /**
     *Not an auction.
     */
    "NotAuction": undefined;
    /**
     *Auction has already ended.
     */
    "AuctionEnded": undefined;
    /**
     *The para is already leased out for part of this range.
     */
    "AlreadyLeasedOut": undefined;
}>;
export type I9o6l1c4r4qc3s = AnonymousEnum<{
    /**
     *The current lease period is more than the first lease period.
     */
    "FirstPeriodInPast": undefined;
    /**
     *The first lease period needs to at least be less than 3 `max_value`.
     */
    "FirstPeriodTooFarInFuture": undefined;
    /**
     *Last lease period must be greater than first lease period.
     */
    "LastPeriodBeforeFirstPeriod": undefined;
    /**
     *The last lease period cannot be more than 3 periods after the first period.
     */
    "LastPeriodTooFarInFuture": undefined;
    /**
     *The campaign ends before the current block number. The end must be in the future.
     */
    "CannotEndInPast": undefined;
    /**
     *The end date for this crowdloan is not sensible.
     */
    "EndTooFarInFuture": undefined;
    /**
     *There was an overflow.
     */
    "Overflow": undefined;
    /**
     *The contribution was below the minimum, `MinContribution`.
     */
    "ContributionTooSmall": undefined;
    /**
     *Invalid fund index.
     */
    "InvalidParaId": undefined;
    /**
     *Contributions exceed maximum amount.
     */
    "CapExceeded": undefined;
    /**
     *The contribution period has already ended.
     */
    "ContributionPeriodOver": undefined;
    /**
     *The origin of this call is invalid.
     */
    "InvalidOrigin": undefined;
    /**
     *This crowdloan does not correspond to a parachain.
     */
    "NotParachain": undefined;
    /**
     *This parachain lease is still active and retirement cannot yet begin.
     */
    "LeaseActive": undefined;
    /**
     *This parachain's bid or lease is still active and withdraw cannot yet begin.
     */
    "BidOrLeaseActive": undefined;
    /**
     *The crowdloan has not yet ended.
     */
    "FundNotEnded": undefined;
    /**
     *There are no contributions stored in this crowdloan.
     */
    "NoContributions": undefined;
    /**
     *The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement
     *period.
     */
    "NotReadyToDissolve": undefined;
    /**
     *Invalid signature.
     */
    "InvalidSignature": undefined;
    /**
     *The provided memo is too large.
     */
    "MemoTooLarge": undefined;
    /**
     *The fund is already in `NewRaise`
     */
    "AlreadyInNewRaise": undefined;
    /**
     *No contributions allowed during the VRF delay
     */
    "VrfDelayInProgress": undefined;
    /**
     *A lease period has not started yet, due to an offset in the starting block.
     */
    "NoLeasePeriod": undefined;
}>;
export type Ifju0orssp9h7o = AnonymousEnum<{
    /**
     *The paraid making the call is not the coretime brokerage system parachain.
     */
    "NotBroker": undefined;
    /**
     *Requested revenue information `when` parameter was in the future from the current
     *block height.
     */
    "RequestedFutureRevenue": undefined;
    /**
     *Failed to transfer assets to the coretime chain
     */
    "AssetTransferFailed": undefined;
}>;
export type I96objte63brjr = AnonymousEnum<{
    /**
     *Max signed limits not respected.
     */
    "MaxSignedLimits": undefined;
    /**
     *A key was longer than the configured maximum.
     *
     *This means that the migration halted at the current [`Progress`] and
     *can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
     *Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
     *The value should only be increased to avoid a storage migration for the currently
     *stored [`crate::Progress::LastKey`].
     */
    "KeyTooLong": undefined;
    /**
     *submitter does not have enough funds.
     */
    "NotEnoughFunds": undefined;
    /**
     *Bad witness data provided.
     */
    "BadWitness": undefined;
    /**
     *Signed migration is not allowed because the maximum limit is not set yet.
     */
    "SignedMigrationNotAllowed": undefined;
    /**
     *Bad child root provided.
     */
    "BadChildRoot": undefined;
}>;
export type I87j95aq93d7dq = AnonymousEnum<{
    /**
     *The desired destination was unreachable, generally because there is a no way of routing
     *to it.
     */
    "Unreachable": undefined;
    /**
     *There was some other issue (i.e. not to do with routing) in sending the message.
     *Perhaps a lack of space for buffering the message.
     */
    "SendFailure": undefined;
    /**
     *The message execution fails the filter.
     */
    "Filtered": undefined;
    /**
     *The message's weight could not be determined.
     */
    "UnweighableMessage": undefined;
    /**
     *The destination `Location` provided cannot be inverted.
     */
    "DestinationNotInvertible": undefined;
    /**
     *The assets to be sent are empty.
     */
    "Empty": undefined;
    /**
     *Could not re-anchor the assets to declare the fees for the destination chain.
     */
    "CannotReanchor": undefined;
    /**
     *Too many assets have been attempted for transfer.
     */
    "TooManyAssets": undefined;
    /**
     *Origin is invalid for sending.
     */
    "InvalidOrigin": undefined;
    /**
     *The version of the `Versioned` value used is not able to be interpreted.
     */
    "BadVersion": undefined;
    /**
     *The given location could not be used (e.g. because it cannot be expressed in the
     *desired version of XCM).
     */
    "BadLocation": undefined;
    /**
     *The referenced subscription could not be found.
     */
    "NoSubscription": undefined;
    /**
     *The location is invalid since it already has a subscription from us.
     */
    "AlreadySubscribed": undefined;
    /**
     *Could not check-out the assets for teleportation to the destination chain.
     */
    "CannotCheckOutTeleport": undefined;
    /**
     *The owner does not own (all) of the asset that they wish to do the operation on.
     */
    "LowBalance": undefined;
    /**
     *The asset owner has too many locks on the asset.
     */
    "TooManyLocks": undefined;
    /**
     *The given account is not an identifiable sovereign account for any location.
     */
    "AccountNotSovereign": undefined;
    /**
     *The operation required fees to be paid which the initiator could not meet.
     */
    "FeesNotMet": undefined;
    /**
     *A remote lock with the corresponding data could not be found.
     */
    "LockNotFound": undefined;
    /**
     *The unlock operation cannot succeed because there are still consumers of the lock.
     */
    "InUse": undefined;
    /**
     *Invalid asset, reserve chain could not be determined for it.
     */
    "InvalidAssetUnknownReserve": undefined;
    /**
     *Invalid asset, do not support remote asset reserves with different fees reserves.
     */
    "InvalidAssetUnsupportedReserve": undefined;
    /**
     *Too many assets with different reserve locations have been attempted for transfer.
     */
    "TooManyReserves": undefined;
    /**
     *Local XCM execution incomplete.
     */
    "LocalExecutionIncomplete": undefined;
}>;
export type I5iupade5ag2dp = AnonymousEnum<{
    /**
     *Page is not reapable because it has items remaining to be processed and is not old
     *enough.
     */
    "NotReapable": undefined;
    /**
     *Page to be reaped does not exist.
     */
    "NoPage": undefined;
    /**
     *The referenced message could not be found.
     */
    "NoMessage": undefined;
    /**
     *The message was already processed and cannot be processed again.
     */
    "AlreadyProcessed": undefined;
    /**
     *The message is queued for future execution.
     */
    "Queued": undefined;
    /**
     *There is temporarily not enough weight to continue servicing messages.
     */
    "InsufficientWeight": undefined;
    /**
     *This message is temporarily unprocessable.
     *
     *Such errors are expected, but not guaranteed, to resolve themselves eventually through
     *retrying.
     */
    "TemporarilyUnprocessable": undefined;
    /**
     *The queue is paused and no message can be executed from it.
     *
     *This can change at any time and may resolve in the future by re-trying.
     */
    "QueuePaused": undefined;
    /**
     *Another call is in progress and needs to finish before this call can happen.
     */
    "RecursiveDisallowed": undefined;
}>;
export type I3qgd61cgli6cp = AnonymousEnum<{
    /**
     *The given asset ID is unknown.
     */
    "UnknownAssetKind": undefined;
    /**
     *The given asset ID already has an assigned conversion rate and cannot be re-created.
     */
    "AlreadyExists": undefined;
    /**
     *Overflow ocurred when calculating the inverse rate.
     */
    "Overflow": undefined;
}>;
export type TokenError = Enum<{
    "FundsUnavailable": undefined;
    "OnlyProvider": undefined;
    "BelowMinimum": undefined;
    "CannotCreate": undefined;
    "UnknownAsset": undefined;
    "Frozen": undefined;
    "Unsupported": undefined;
    "CannotCreateHold": undefined;
    "NotExpendable": undefined;
    "Blocked": undefined;
}>;
export declare const TokenError: GetEnum<TokenError>;
export type ArithmeticError = Enum<{
    "Underflow": undefined;
    "Overflow": undefined;
    "DivisionByZero": undefined;
}>;
export declare const ArithmeticError: GetEnum<ArithmeticError>;
export type TransactionalError = Enum<{
    "LimitReached": undefined;
    "NoLayer": undefined;
}>;
export declare const TransactionalError: GetEnum<TransactionalError>;
export type Icbccs0ug47ilf = {
    "account": SS58String;
};
export type I855j4i3kr8ko1 = {
    "sender": SS58String;
    "hash": FixedSizeBinary<32>;
};
export type Ibgl04rn6nbfm6 = {
    "code_hash": FixedSizeBinary<32>;
    "check_version": boolean;
};
export type I7fr5fops97nrq = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<I70vk5snfd28ir>;
    /**
     *Set a retry configuration for some task.
     */
    "RetrySet": Anonymize<Ia3c82eadg79bj>;
    /**
     *Cancel a retry configuration for some task.
     */
    "RetryCancelled": Anonymize<Ienusoeb625ftq>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be retried since the agenda is full at that block or there
     *was not enough weight to reschedule it.
     */
    "RetryFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type I5n4sebgkfr760 = {
    "when": number;
    "index": number;
};
export type I70vk5snfd28ir = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<I9v7lrhj0m94ts>;
};
export type I9jd27rnpm8ttv = FixedSizeArray<2, number>;
export type I4s6vifaf8k998 = (FixedSizeBinary<32>) | undefined;
export type I9v7lrhj0m94ts = ResultPayload<undefined, Anonymize<I1ffak8crus5ij>>;
export type Ia3c82eadg79bj = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "period": number;
    "retries": number;
};
export type Ienusoeb625ftq = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
};
export type PreimageEvent = Enum<{
    /**
     *A preimage has been noted.
     */
    "Noted": Anonymize<I1jm8m1rh9e20v>;
    /**
     *A preimage has been requested.
     */
    "Requested": Anonymize<I1jm8m1rh9e20v>;
    /**
     *A preimage has ben cleared.
     */
    "Cleared": Anonymize<I1jm8m1rh9e20v>;
}>;
export declare const PreimageEvent: GetEnum<PreimageEvent>;
export type I1jm8m1rh9e20v = {
    "hash": FixedSizeBinary<32>;
};
export type IndicesEvent = Enum<{
    /**
     *A account index was assigned.
     */
    "IndexAssigned": Anonymize<Ia1u3jll6a06ae>;
    /**
     *A account index has been freed up (unassigned).
     */
    "IndexFreed": Anonymize<I666bl2fqjkejo>;
    /**
     *A account index has been frozen to its current account ID.
     */
    "IndexFrozen": Anonymize<Ia1u3jll6a06ae>;
}>;
export declare const IndicesEvent: GetEnum<IndicesEvent>;
export type Ia1u3jll6a06ae = {
    "who": SS58String;
    "index": number;
};
export type I666bl2fqjkejo = {
    "index": number;
};
export type Iao8h4hv7atnq3 = AnonymousEnum<{
    /**
     *An account was created with some free balance.
     */
    "Endowed": Anonymize<Icv68aq8841478>;
    /**
     *An account was removed whose balance was non-zero but below ExistentialDeposit,
     *resulting in an outright loss.
     */
    "DustLost": Anonymize<Ic262ibdoec56a>;
    /**
     *Transfer succeeded.
     */
    "Transfer": Anonymize<Iflcfm9b6nlmdd>;
    /**
     *A balance was set by root.
     */
    "BalanceSet": Anonymize<Ijrsf4mnp3eka>;
    /**
     *Some balance was reserved (moved from free to reserved).
     */
    "Reserved": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was unreserved (moved from reserved to free).
     */
    "Unreserved": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was moved from the reserve of the first account to the second account.
     *Final argument indicates the destination balance type.
     */
    "ReserveRepatriated": Anonymize<I8tjvj9uq4b7hi>;
    /**
     *Some amount was deposited (e.g. for transaction fees).
     */
    "Deposit": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was withdrawn from the account (e.g. for transaction fees).
     */
    "Withdraw": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was removed from the account (e.g. for misbehavior).
     */
    "Slashed": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was minted into an account.
     */
    "Minted": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was burned from an account.
     */
    "Burned": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was suspended from an account (it can be restored later).
     */
    "Suspended": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was restored into an account.
     */
    "Restored": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *An account was upgraded.
     */
    "Upgraded": Anonymize<I4cbvqmqadhrea>;
    /**
     *Total issuance was increased by `amount`, creating a credit to be balanced.
     */
    "Issued": Anonymize<I3qt1hgg4djhgb>;
    /**
     *Total issuance was decreased by `amount`, creating a debt to be balanced.
     */
    "Rescinded": Anonymize<I3qt1hgg4djhgb>;
    /**
     *Some balance was locked.
     */
    "Locked": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was unlocked.
     */
    "Unlocked": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was frozen.
     */
    "Frozen": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was thawed.
     */
    "Thawed": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *The `TotalIssuance` was forcefully changed.
     */
    "TotalIssuanceForced": Anonymize<I4fooe9dun9o0t>;
}>;
export type Icv68aq8841478 = {
    "account": SS58String;
    "free_balance": bigint;
};
export type Ic262ibdoec56a = {
    "account": SS58String;
    "amount": bigint;
};
export type Iflcfm9b6nlmdd = {
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
};
export type Ijrsf4mnp3eka = {
    "who": SS58String;
    "free": bigint;
};
export type Id5fm4p8lj5qgi = {
    "who": SS58String;
    "amount": bigint;
};
export type I8tjvj9uq4b7hi = {
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
    "destination_status": BalanceStatus;
};
export type BalanceStatus = Enum<{
    "Free": undefined;
    "Reserved": undefined;
}>;
export declare const BalanceStatus: GetEnum<BalanceStatus>;
export type I4cbvqmqadhrea = {
    "who": SS58String;
};
export type I3qt1hgg4djhgb = {
    "amount": bigint;
};
export type I4fooe9dun9o0t = {
    "old": bigint;
    "new": bigint;
};
export type TransactionPaymentEvent = Enum<{
    /**
     *A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     *has been paid by `who`.
     */
    "TransactionFeePaid": Anonymize<Ier2cke86dqbr2>;
}>;
export declare const TransactionPaymentEvent: GetEnum<TransactionPaymentEvent>;
export type Ier2cke86dqbr2 = {
    "who": SS58String;
    "actual_fee": bigint;
    "tip": bigint;
};
export type StakingEvent = Enum<{
    /**
     *The era payout has been set; the first balance is the validator-payout; the second is
     *the remainder from the maximum amount of reward.
     */
    "EraPaid": Anonymize<I1au3fq4n84nv3>;
    /**
     *The nominator has been rewarded by this amount to this destination.
     */
    "Rewarded": Anonymize<Iejaj7m7qka9tr>;
    /**
     *A staker (validator or nominator) has been slashed by the given amount.
     */
    "Slashed": Anonymize<Idnak900lt5lm8>;
    /**
     *A slash for the given validator, for the given percentage of their stake, at the given
     *era as been reported.
     */
    "SlashReported": Anonymize<I27n7lbd66730p>;
    /**
     *An old slashing report from a prior era was discarded because it could
     *not be processed.
     */
    "OldSlashingReportDiscarded": Anonymize<I2hq50pu2kdjpo>;
    /**
     *A new set of stakers was elected.
     */
    "StakersElected": undefined;
    /**
     *An account has bonded this amount. \[stash, amount\]
     *
     *NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,
     *it will not be emitted for staking rewards when they are added to stake.
     */
    "Bonded": Anonymize<Ifk8eme5o7mukf>;
    /**
     *An account has unbonded this amount.
     */
    "Unbonded": Anonymize<Ifk8eme5o7mukf>;
    /**
     *An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`
     *from the unlocking queue.
     */
    "Withdrawn": Anonymize<Ifk8eme5o7mukf>;
    /**
     *A nominator has been kicked from a validator.
     */
    "Kicked": Anonymize<Iau4cgm6ih61cf>;
    /**
     *The election failed. No new era is planned.
     */
    "StakingElectionFailed": undefined;
    /**
     *An account has stopped participating as either a validator or nominator.
     */
    "Chilled": Anonymize<Idl3umm12u5pa>;
    /**
     *The stakers' rewards are getting paid.
     */
    "PayoutStarted": Anonymize<I6ir616rur362k>;
    /**
     *A validator has set their preferences.
     */
    "ValidatorPrefsSet": Anonymize<Ic19as7nbst738>;
    /**
     *Voters size limit reached.
     */
    "SnapshotVotersSizeExceeded": Anonymize<I54umskavgc9du>;
    /**
     *Targets size limit reached.
     */
    "SnapshotTargetsSizeExceeded": Anonymize<I54umskavgc9du>;
    /**
     *A new force era mode was set.
     */
    "ForceEra": Anonymize<I2ip7o9e2tc5sf>;
    /**
     *Report of a controller batch deprecation.
     */
    "ControllerBatchDeprecated": Anonymize<I5egvk6hadac5h>;
}>;
export declare const StakingEvent: GetEnum<StakingEvent>;
export type I1au3fq4n84nv3 = {
    "era_index": number;
    "validator_payout": bigint;
    "remainder": bigint;
};
export type Iejaj7m7qka9tr = {
    "stash": SS58String;
    "dest": StakingRewardDestination;
    "amount": bigint;
};
export type StakingRewardDestination = Enum<{
    "Staked": undefined;
    "Stash": undefined;
    "Controller": undefined;
    "Account": SS58String;
    "None": undefined;
}>;
export declare const StakingRewardDestination: GetEnum<StakingRewardDestination>;
export type Idnak900lt5lm8 = {
    "staker": SS58String;
    "amount": bigint;
};
export type I27n7lbd66730p = {
    "validator": SS58String;
    "fraction": number;
    "slash_era": number;
};
export type I2hq50pu2kdjpo = {
    "session_index": number;
};
export type Ifk8eme5o7mukf = {
    "stash": SS58String;
    "amount": bigint;
};
export type Iau4cgm6ih61cf = {
    "nominator": SS58String;
    "stash": SS58String;
};
export type Idl3umm12u5pa = {
    "stash": SS58String;
};
export type I6ir616rur362k = {
    "era_index": number;
    "validator_stash": SS58String;
};
export type Ic19as7nbst738 = {
    "stash": SS58String;
    "prefs": Anonymize<I9o7ssi9vmhmgr>;
};
export type I9o7ssi9vmhmgr = {
    "commission": number;
    "blocked": boolean;
};
export type I54umskavgc9du = {
    "size": number;
};
export type I2ip7o9e2tc5sf = {
    "mode": StakingForcing;
};
export type StakingForcing = Enum<{
    "NotForcing": undefined;
    "ForceNew": undefined;
    "ForceNone": undefined;
    "ForceAlways": undefined;
}>;
export declare const StakingForcing: GetEnum<StakingForcing>;
export type I5egvk6hadac5h = {
    "failures": number;
};
export type OffencesEvent = Enum<{
    /**
     *There is an offence reported of the given `kind` happened at the `session_index` and
     *(kind-specific) time slot. This event is not deposited for duplicate slashes.
     *\[kind, timeslot\].
     */
    "Offence": Anonymize<Iempvdlhc5ih6g>;
}>;
export declare const OffencesEvent: GetEnum<OffencesEvent>;
export type Iempvdlhc5ih6g = {
    "kind": FixedSizeBinary<16>;
    "timeslot": Binary;
};
export type SessionEvent = Enum<{
    /**
     *New session has happened. Note that the argument is the session index, not the
     *block number as the type might suggest.
     */
    "NewSession": Anonymize<I2hq50pu2kdjpo>;
}>;
export declare const SessionEvent: GetEnum<SessionEvent>;
export type GrandpaEvent = Enum<{
    /**
     *New authority set has been applied.
     */
    "NewAuthorities": Anonymize<I5768ac424h061>;
    /**
     *Current authority set has been paused.
     */
    "Paused": undefined;
    /**
     *Current authority set has been resumed.
     */
    "Resumed": undefined;
}>;
export declare const GrandpaEvent: GetEnum<GrandpaEvent>;
export type I5768ac424h061 = {
    "authority_set": Anonymize<I3geksg000c171>;
};
export type I3geksg000c171 = Array<Anonymize<I5spuldj7iqfb2>>;
export type I5spuldj7iqfb2 = [FixedSizeBinary<32>, bigint];
export type Iceo3qo846468b = AnonymousEnum<{
    /**
     *We have ended a spend period and will now allocate funds.
     */
    "Spending": Anonymize<I8iksqi3eani0a>;
    /**
     *Some funds have been allocated.
     */
    "Awarded": Anonymize<I16enopmju1p0q>;
    /**
     *Some of our funds have been burnt.
     */
    "Burnt": Anonymize<I43kq8qudg7pq9>;
    /**
     *Spending has finished; this is the amount that rolls over until next spend.
     */
    "Rollover": Anonymize<I76riseemre533>;
    /**
     *Some funds have been deposited.
     */
    "Deposit": Anonymize<Ie5v6njpckr05b>;
    /**
     *A new spend proposal has been approved.
     */
    "SpendApproved": Anonymize<I38bmcrmh852rk>;
    /**
     *The inactive funds of the pallet have been updated.
     */
    "UpdatedInactive": Anonymize<I4hcillge8de5f>;
    /**
     *A new asset spend proposal has been approved.
     */
    "AssetSpendApproved": Anonymize<If52u7u3r3ve0n>;
    /**
     *An approved spend was voided.
     */
    "AssetSpendVoided": Anonymize<I666bl2fqjkejo>;
    /**
     *A payment happened.
     */
    "Paid": Anonymize<Iek7v4hrgnq6iv>;
    /**
     *A payment failed and can be retried.
     */
    "PaymentFailed": Anonymize<Iek7v4hrgnq6iv>;
    /**
     *A spend was processed and removed from the storage. It might have been successfully
     *paid or it may have expired.
     */
    "SpendProcessed": Anonymize<I666bl2fqjkejo>;
}>;
export type I8iksqi3eani0a = {
    "budget_remaining": bigint;
};
export type I16enopmju1p0q = {
    "proposal_index": number;
    "award": bigint;
    "account": SS58String;
};
export type I43kq8qudg7pq9 = {
    "burnt_funds": bigint;
};
export type I76riseemre533 = {
    "rollover_balance": bigint;
};
export type Ie5v6njpckr05b = {
    "value": bigint;
};
export type I38bmcrmh852rk = {
    "proposal_index": number;
    "amount": bigint;
    "beneficiary": SS58String;
};
export type I4hcillge8de5f = {
    "reactivated": bigint;
    "deactivated": bigint;
};
export type If52u7u3r3ve0n = {
    "index": number;
    "asset_kind": VersionedLocatableAsset;
    "amount": bigint;
    "beneficiary": XcmVersionedLocation;
    "valid_from": number;
    "expire_at": number;
};
export type VersionedLocatableAsset = Enum<{
    "V3": Anonymize<Ieiirnju6cff3l>;
    "V4": Anonymize<Ieqft092b9kkr2>;
}>;
export declare const VersionedLocatableAsset: GetEnum<VersionedLocatableAsset>;
export type Ieiirnju6cff3l = {
    "location": Anonymize<I4c0s5cioidn76>;
    "asset_id": XcmV3MultiassetAssetId;
};
export type I4c0s5cioidn76 = {
    "parents": number;
    "interior": XcmV3Junctions;
};
export type XcmV3Junctions = Enum<{
    "Here": undefined;
    "X1": XcmV3Junction;
    "X2": Anonymize<Iam58b36i8f27i>;
    "X3": Anonymize<Iegjh9cie771d8>;
    "X4": Anonymize<Iae5flu84s2oia>;
    "X5": Anonymize<Iejq8c4n82a165>;
    "X6": Anonymize<I7rmt803vbpqrl>;
    "X7": Anonymize<I7onfe2toh27f0>;
    "X8": Anonymize<I3vjadpg0k2omo>;
}>;
export declare const XcmV3Junctions: GetEnum<XcmV3Junctions>;
export type XcmV3Junction = Enum<{
    "Parachain": number;
    "AccountId32": Anonymize<Ifq0i8kc6ds30i>;
    "AccountIndex64": Anonymize<I2a3org9qntfkr>;
    "AccountKey20": Anonymize<I9ed2klpttaegt>;
    "PalletInstance": number;
    "GeneralIndex": bigint;
    "GeneralKey": Anonymize<I15lht6t53odo4>;
    "OnlyChild": undefined;
    "Plurality": Anonymize<I518fbtnclg1oc>;
    "GlobalConsensus": XcmV3JunctionNetworkId;
}>;
export declare const XcmV3Junction: GetEnum<XcmV3Junction>;
export type Ifq0i8kc6ds30i = {
    "network"?: Anonymize<Idcq3vns9tgp5p>;
    "id": FixedSizeBinary<32>;
};
export type Idcq3vns9tgp5p = (XcmV3JunctionNetworkId) | undefined;
export type XcmV3JunctionNetworkId = Enum<{
    "ByGenesis": FixedSizeBinary<32>;
    "ByFork": Anonymize<I15vf5oinmcgps>;
    "Polkadot": undefined;
    "Kusama": undefined;
    "Westend": undefined;
    "Rococo": undefined;
    "Wococo": undefined;
    "Ethereum": Anonymize<I623eo8t3jrbeo>;
    "BitcoinCore": undefined;
    "BitcoinCash": undefined;
    "PolkadotBulletin": undefined;
}>;
export declare const XcmV3JunctionNetworkId: GetEnum<XcmV3JunctionNetworkId>;
export type I15vf5oinmcgps = {
    "block_number": bigint;
    "block_hash": FixedSizeBinary<32>;
};
export type I623eo8t3jrbeo = {
    "chain_id": bigint;
};
export type I2a3org9qntfkr = {
    "network"?: Anonymize<Idcq3vns9tgp5p>;
    "index": bigint;
};
export type I9ed2klpttaegt = {
    "network"?: Anonymize<Idcq3vns9tgp5p>;
    "key": FixedSizeBinary<20>;
};
export type I15lht6t53odo4 = {
    "length": number;
    "data": FixedSizeBinary<32>;
};
export type I518fbtnclg1oc = {
    "id": XcmV3JunctionBodyId;
    "part": XcmV2JunctionBodyPart;
};
export type XcmV3JunctionBodyId = Enum<{
    "Unit": undefined;
    "Moniker": FixedSizeBinary<4>;
    "Index": number;
    "Executive": undefined;
    "Technical": undefined;
    "Legislative": undefined;
    "Judicial": undefined;
    "Defense": undefined;
    "Administration": undefined;
    "Treasury": undefined;
}>;
export declare const XcmV3JunctionBodyId: GetEnum<XcmV3JunctionBodyId>;
export type XcmV2JunctionBodyPart = Enum<{
    "Voice": undefined;
    "Members": Anonymize<Iafscmv8tjf0ou>;
    "Fraction": Anonymize<Idif02efq16j92>;
    "AtLeastProportion": Anonymize<Idif02efq16j92>;
    "MoreThanProportion": Anonymize<Idif02efq16j92>;
}>;
export declare const XcmV2JunctionBodyPart: GetEnum<XcmV2JunctionBodyPart>;
export type Iafscmv8tjf0ou = {
    "count": number;
};
export type Idif02efq16j92 = {
    "nom": number;
    "denom": number;
};
export type Iam58b36i8f27i = FixedSizeArray<2, XcmV3Junction>;
export type Iegjh9cie771d8 = FixedSizeArray<3, XcmV3Junction>;
export type Iae5flu84s2oia = FixedSizeArray<4, XcmV3Junction>;
export type Iejq8c4n82a165 = FixedSizeArray<5, XcmV3Junction>;
export type I7rmt803vbpqrl = FixedSizeArray<6, XcmV3Junction>;
export type I7onfe2toh27f0 = FixedSizeArray<7, XcmV3Junction>;
export type I3vjadpg0k2omo = FixedSizeArray<8, XcmV3Junction>;
export type XcmV3MultiassetAssetId = Enum<{
    "Concrete": Anonymize<I4c0s5cioidn76>;
    "Abstract": FixedSizeBinary<32>;
}>;
export declare const XcmV3MultiassetAssetId: GetEnum<XcmV3MultiassetAssetId>;
export type Ieqft092b9kkr2 = {
    "location": Anonymize<I4c0s5cioidn76>;
    "asset_id": Anonymize<I4c0s5cioidn76>;
};
export type XcmVersionedLocation = Enum<{
    "V2": Anonymize<I4frqunb5hj2km>;
    "V3": Anonymize<I4c0s5cioidn76>;
    "V4": Anonymize<I4c0s5cioidn76>;
}>;
export declare const XcmVersionedLocation: GetEnum<XcmVersionedLocation>;
export type I4frqunb5hj2km = {
    "parents": number;
    "interior": XcmV2MultilocationJunctions;
};
export type XcmV2MultilocationJunctions = Enum<{
    "Here": undefined;
    "X1": XcmV2Junction;
    "X2": Anonymize<I7tthuukjoks45>;
    "X3": Anonymize<Icpsqle8f7ccnh>;
    "X4": Anonymize<Ifaduechfcq41r>;
    "X5": Anonymize<Ifg30nsfqato4g>;
    "X6": Anonymize<I8s2vh6qelslgu>;
    "X7": Anonymize<I7r6q3396okion>;
    "X8": Anonymize<I1d4fie0b78rtc>;
}>;
export declare const XcmV2MultilocationJunctions: GetEnum<XcmV2MultilocationJunctions>;
export type XcmV2Junction = Enum<{
    "Parachain": number;
    "AccountId32": Anonymize<I6h60jropk90ne>;
    "AccountIndex64": Anonymize<I73mah5ooc6vk>;
    "AccountKey20": Anonymize<I9kkjqh79doku3>;
    "PalletInstance": number;
    "GeneralIndex": bigint;
    "GeneralKey": Binary;
    "OnlyChild": undefined;
    "Plurality": Anonymize<Iaqhvfsgakjhdq>;
}>;
export declare const XcmV2Junction: GetEnum<XcmV2Junction>;
export type I6h60jropk90ne = {
    "network": XcmV2NetworkId;
    "id": FixedSizeBinary<32>;
};
export type XcmV2NetworkId = Enum<{
    "Any": undefined;
    "Named": Binary;
    "Polkadot": undefined;
    "Kusama": undefined;
}>;
export declare const XcmV2NetworkId: GetEnum<XcmV2NetworkId>;
export type I73mah5ooc6vk = {
    "network": XcmV2NetworkId;
    "index": bigint;
};
export type I9kkjqh79doku3 = {
    "network": XcmV2NetworkId;
    "key": FixedSizeBinary<20>;
};
export type Iaqhvfsgakjhdq = {
    "id": XcmV2BodyId;
    "part": XcmV2JunctionBodyPart;
};
export type XcmV2BodyId = Enum<{
    "Unit": undefined;
    "Named": Binary;
    "Index": number;
    "Executive": undefined;
    "Technical": undefined;
    "Legislative": undefined;
    "Judicial": undefined;
    "Defense": undefined;
    "Administration": undefined;
    "Treasury": undefined;
}>;
export declare const XcmV2BodyId: GetEnum<XcmV2BodyId>;
export type I7tthuukjoks45 = FixedSizeArray<2, XcmV2Junction>;
export type Icpsqle8f7ccnh = FixedSizeArray<3, XcmV2Junction>;
export type Ifaduechfcq41r = FixedSizeArray<4, XcmV2Junction>;
export type Ifg30nsfqato4g = FixedSizeArray<5, XcmV2Junction>;
export type I8s2vh6qelslgu = FixedSizeArray<6, XcmV2Junction>;
export type I7r6q3396okion = FixedSizeArray<7, XcmV2Junction>;
export type I1d4fie0b78rtc = FixedSizeArray<8, XcmV2Junction>;
export type Iek7v4hrgnq6iv = {
    "index": number;
    "payment_id": bigint;
};
export type ConvictionVotingEvent = Enum<{
    /**
     *An account has delegated their vote to another account. \[who, target\]
     */
    "Delegated": Anonymize<I2na29tt2afp0j>;
    /**
     *An \[account\] has cancelled a previous delegation operation.
     */
    "Undelegated": SS58String;
}>;
export declare const ConvictionVotingEvent: GetEnum<ConvictionVotingEvent>;
export type I2na29tt2afp0j = FixedSizeArray<2, SS58String>;
export type Idfraa3b4eu018 = AnonymousEnum<{
    /**
     *A referendum has been submitted.
     */
    "Submitted": Anonymize<I229ijht536qdu>;
    /**
     *The decision deposit has been placed.
     */
    "DecisionDepositPlaced": Anonymize<I62nte77gksm0f>;
    /**
     *The decision deposit has been refunded.
     */
    "DecisionDepositRefunded": Anonymize<I62nte77gksm0f>;
    /**
     *A deposit has been slashed.
     */
    "DepositSlashed": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *A referendum has moved into the deciding phase.
     */
    "DecisionStarted": Anonymize<I9cg2delv92pvq>;
    "ConfirmStarted": Anonymize<I666bl2fqjkejo>;
    "ConfirmAborted": Anonymize<I666bl2fqjkejo>;
    /**
     *A referendum has ended its confirmation phase and is ready for approval.
     */
    "Confirmed": Anonymize<Ilhp45uime5tp>;
    /**
     *A referendum has been approved and its proposal has been scheduled.
     */
    "Approved": Anonymize<I666bl2fqjkejo>;
    /**
     *A proposal has been rejected by referendum.
     */
    "Rejected": Anonymize<Ilhp45uime5tp>;
    /**
     *A referendum has been timed out without being decided.
     */
    "TimedOut": Anonymize<Ilhp45uime5tp>;
    /**
     *A referendum has been cancelled.
     */
    "Cancelled": Anonymize<Ilhp45uime5tp>;
    /**
     *A referendum has been killed.
     */
    "Killed": Anonymize<Ilhp45uime5tp>;
    /**
     *The submission deposit has been refunded.
     */
    "SubmissionDepositRefunded": Anonymize<I62nte77gksm0f>;
    /**
     *Metadata for a referendum has been set.
     */
    "MetadataSet": Anonymize<I4f1hv034jf1dt>;
    /**
     *Metadata for a referendum has been cleared.
     */
    "MetadataCleared": Anonymize<I4f1hv034jf1dt>;
}>;
export type I229ijht536qdu = {
    /**
     *Index of the referendum.
     */
    "index": number;
    /**
     *The track (and by extension proposal dispatch origin) of this referendum.
     */
    "track": number;
    /**
     *The proposal for the referendum.
     */
    "proposal": PreimagesBounded;
};
export type PreimagesBounded = Enum<{
    "Legacy": Anonymize<I1jm8m1rh9e20v>;
    "Inline": Binary;
    "Lookup": Anonymize<Ieln2r0qa0hb4j>;
}>;
export declare const PreimagesBounded: GetEnum<PreimagesBounded>;
export type Ieln2r0qa0hb4j = {
    "hash": FixedSizeBinary<32>;
    "len": number;
};
export type I62nte77gksm0f = {
    /**
     *Index of the referendum.
     */
    "index": number;
    /**
     *The account who placed the deposit.
     */
    "who": SS58String;
    /**
     *The amount placed by the account.
     */
    "amount": bigint;
};
export type I9cg2delv92pvq = {
    /**
     *Index of the referendum.
     */
    "index": number;
    /**
     *The track (and by extension proposal dispatch origin) of this referendum.
     */
    "track": number;
    /**
     *The proposal for the referendum.
     */
    "proposal": PreimagesBounded;
    /**
     *The current tally of votes in this referendum.
     */
    "tally": Anonymize<Ifsk7cbmtit1jd>;
};
export type Ifsk7cbmtit1jd = {
    "ayes": bigint;
    "nays": bigint;
    "support": bigint;
};
export type Ilhp45uime5tp = {
    /**
     *Index of the referendum.
     */
    "index": number;
    /**
     *The final tally of votes in this referendum.
     */
    "tally": Anonymize<Ifsk7cbmtit1jd>;
};
export type I4f1hv034jf1dt = {
    /**
     *Index of the referendum.
     */
    "index": number;
    /**
     *Preimage hash.
     */
    "hash": FixedSizeBinary<32>;
};
export type I2gstma38ipe50 = AnonymousEnum<{
    "CallWhitelisted": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallRemoved": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallDispatched": Anonymize<I8tjepigqls9h1>;
}>;
export type I1adbcfi5uc62r = {
    "call_hash": FixedSizeBinary<32>;
};
export type I8tjepigqls9h1 = {
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I9q1bvgjt2m1d1>;
};
export type I9q1bvgjt2m1d1 = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I8761ljel12j19>>;
export type Ia1u1r3n74r13c = {
    "actual_weight"?: Anonymize<Iasb8k6ash5mjn>;
    "pays_fee": Anonymize<Iehg04bj71rkd>;
};
export type Iasb8k6ash5mjn = (Anonymize<I4q39t5hn830vp>) | undefined;
export type I8761ljel12j19 = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<I1ffak8crus5ij>;
};
export type CommonClaimsEvent = Enum<{
    /**
     *Someone claimed some DOTs.
     */
    "Claimed": Anonymize<Ie3hcrrq6r18fs>;
}>;
export declare const CommonClaimsEvent: GetEnum<CommonClaimsEvent>;
export type Ie3hcrrq6r18fs = {
    "who": SS58String;
    "ethereum_address": FixedSizeBinary<20>;
    "amount": bigint;
};
export type VestingEvent = Enum<{
    /**
     *The amount vested has been updated. This could indicate a change in funds available.
     *The balance given is the amount which is left unvested (and thus locked).
     */
    "VestingUpdated": Anonymize<Ievr89968437gm>;
    /**
     *An \[account\] has become fully vested.
     */
    "VestingCompleted": Anonymize<Icbccs0ug47ilf>;
}>;
export declare const VestingEvent: GetEnum<VestingEvent>;
export type Ievr89968437gm = {
    "account": SS58String;
    "unvested": bigint;
};
export type Iccg7gpt3h5m62 = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<I4o71sts6mr1a2>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I850j32jnc5r7s>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<I7b1ht1dclmvkg>;
}>;
export type I4o71sts6mr1a2 = {
    "index": number;
    "error": Anonymize<I1ffak8crus5ij>;
};
export type I850j32jnc5r7s = {
    "error": Anonymize<I1ffak8crus5ij>;
};
export type I7b1ht1dclmvkg = {
    "result": Anonymize<I9v7lrhj0m94ts>;
};
export type Iacgvhbqvg5qmh = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<I7b1ht1dclmvkg>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ifqt0l2jtnansm>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<Ib5do5c9nfeb64>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<Ib5do5c9nfeb64>;
}>;
export type Ifqt0l2jtnansm = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<Ib9ifr8gu9ttks>;
    "disambiguation_index": number;
};
export type Ib9ifr8gu9ttks = AnonymousEnum<{
    "Any": undefined;
    "NonTransfer": undefined;
    "Governance": undefined;
    "Staking": undefined;
    "CancelProxy": undefined;
    "Auction": undefined;
    "NominationPools": undefined;
}>;
export type I2ur0oeqg495j8 = {
    "real": SS58String;
    "proxy": SS58String;
    "call_hash": FixedSizeBinary<32>;
};
export type Ib5do5c9nfeb64 = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<Ib9ifr8gu9ttks>;
    "delay": number;
};
export type Ifk4net48mks7q = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I7ovf48fo06rkb>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type Iep27ialq4a7o7 = {
    "approving": SS58String;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
};
export type Iasu5jvoqr43mv = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
};
export type Itvprrpb0nm3o = {
    "height": number;
    "index": number;
};
export type I7ovf48fo06rkb = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I9v7lrhj0m94ts>;
};
export type I5qolde99acmd1 = {
    "cancelling": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
};
export type BountiesEvent = Enum<{
    /**
     *New bounty proposal.
     */
    "BountyProposed": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty proposal was rejected; funds were slashed.
     */
    "BountyRejected": Anonymize<Id9idaj83175f9>;
    /**
     *A bounty proposal is funded and became active.
     */
    "BountyBecameActive": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty is awarded to a beneficiary.
     */
    "BountyAwarded": Anonymize<Ie1semicfuv5uu>;
    /**
     *A bounty is claimed by beneficiary.
     */
    "BountyClaimed": Anonymize<If25fjs9o37co1>;
    /**
     *A bounty is cancelled.
     */
    "BountyCanceled": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty expiry is extended.
     */
    "BountyExtended": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty is approved.
     */
    "BountyApproved": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty curator is proposed.
     */
    "CuratorProposed": Anonymize<I70sc1pdo8vtos>;
    /**
     *A bounty curator is unassigned.
     */
    "CuratorUnassigned": Anonymize<Ia9p5bg6p18r0i>;
    /**
     *A bounty curator is accepted.
     */
    "CuratorAccepted": Anonymize<I70sc1pdo8vtos>;
}>;
export declare const BountiesEvent: GetEnum<BountiesEvent>;
export type Id9idaj83175f9 = {
    "index": number;
    "bond": bigint;
};
export type Ie1semicfuv5uu = {
    "index": number;
    "beneficiary": SS58String;
};
export type If25fjs9o37co1 = {
    "index": number;
    "payout": bigint;
    "beneficiary": SS58String;
};
export type I70sc1pdo8vtos = {
    "bounty_id": number;
    "curator": SS58String;
};
export type Ia9p5bg6p18r0i = {
    "bounty_id": number;
};
export type ChildBountiesEvent = Enum<{
    /**
     *A child-bounty is added.
     */
    "Added": Anonymize<I60p8l86a8cm59>;
    /**
     *A child-bounty is awarded to a beneficiary.
     */
    "Awarded": Anonymize<I3m3sk2lgcabvp>;
    /**
     *A child-bounty is claimed by beneficiary.
     */
    "Claimed": Anonymize<I5pf572duh4oeg>;
    /**
     *A child-bounty is cancelled.
     */
    "Canceled": Anonymize<I60p8l86a8cm59>;
}>;
export declare const ChildBountiesEvent: GetEnum<ChildBountiesEvent>;
export type I60p8l86a8cm59 = {
    "index": number;
    "child_index": number;
};
export type I3m3sk2lgcabvp = {
    "index": number;
    "child_index": number;
    "beneficiary": SS58String;
};
export type I5pf572duh4oeg = {
    "index": number;
    "child_index": number;
    "payout": bigint;
    "beneficiary": SS58String;
};
export type ElectionProviderMultiPhaseEvent = Enum<{
    /**
     *A solution was stored with the given compute.
     *
     *The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,
     *the stored solution was submitted in the signed phase by a miner with the `AccountId`.
     *Otherwise, the solution was stored either during the unsigned phase or by
     *`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make
     *room for this one.
     */
    "SolutionStored": Anonymize<I4mol6k10mv0io>;
    /**
     *The election has been finalized, with the given computation and score.
     */
    "ElectionFinalized": Anonymize<Iec90vukseit9e>;
    /**
     *An election failed.
     *
     *Not much can be said about which computes failed in the process.
     */
    "ElectionFailed": undefined;
    /**
     *An account has been rewarded for their signed submission being finalized.
     */
    "Rewarded": Anonymize<I7j4m7a3pkvsf4>;
    /**
     *An account has been slashed for submitting an invalid signed submission.
     */
    "Slashed": Anonymize<I7j4m7a3pkvsf4>;
    /**
     *There was a phase transition in a given round.
     */
    "PhaseTransitioned": Anonymize<Ic2n50kpnu5mae>;
}>;
export declare const ElectionProviderMultiPhaseEvent: GetEnum<ElectionProviderMultiPhaseEvent>;
export type I4mol6k10mv0io = {
    "compute": ElectionProviderMultiPhaseElectionCompute;
    "origin"?: Anonymize<Ihfphjolmsqq1>;
    "prev_ejected": boolean;
};
export type ElectionProviderMultiPhaseElectionCompute = Enum<{
    "OnChain": undefined;
    "Signed": undefined;
    "Unsigned": undefined;
    "Fallback": undefined;
    "Emergency": undefined;
}>;
export declare const ElectionProviderMultiPhaseElectionCompute: GetEnum<ElectionProviderMultiPhaseElectionCompute>;
export type Ihfphjolmsqq1 = (SS58String) | undefined;
export type Iec90vukseit9e = {
    "compute": ElectionProviderMultiPhaseElectionCompute;
    "score": Anonymize<I8s6n43okuj2b1>;
};
export type I8s6n43okuj2b1 = {
    "minimal_stake": bigint;
    "sum_stake": bigint;
    "sum_stake_squared": bigint;
};
export type I7j4m7a3pkvsf4 = {
    "account": SS58String;
    "value": bigint;
};
export type Ic2n50kpnu5mae = {
    "from": ElectionProviderMultiPhasePhase;
    "to": ElectionProviderMultiPhasePhase;
    "round": number;
};
export type ElectionProviderMultiPhasePhase = Enum<{
    "Off": undefined;
    "Signed": undefined;
    "Unsigned": Anonymize<I38fu9hj3b9un7>;
    "Emergency": undefined;
}>;
export declare const ElectionProviderMultiPhasePhase: GetEnum<ElectionProviderMultiPhasePhase>;
export type I38fu9hj3b9un7 = [boolean, number];
export type BagsListEvent = Enum<{
    /**
     *Moved an account from one bag to another.
     */
    "Rebagged": Anonymize<I37454vatvmm1l>;
    /**
     *Updated the score of some account to the given amount.
     */
    "ScoreUpdated": Anonymize<Iblau1qa7u7fet>;
}>;
export declare const BagsListEvent: GetEnum<BagsListEvent>;
export type I37454vatvmm1l = {
    "who": SS58String;
    "from": bigint;
    "to": bigint;
};
export type Iblau1qa7u7fet = {
    "who": SS58String;
    "new_score": bigint;
};
export type NominationPoolsEvent = Enum<{
    /**
     *A pool has been created.
     */
    "Created": Anonymize<I1ti389kf8t6oi>;
    /**
     *A member has became bonded in a pool.
     */
    "Bonded": Anonymize<If4nnre373amul>;
    /**
     *A payout has been made to a member.
     */
    "PaidOut": Anonymize<I55kbor0ocqk6h>;
    /**
     *A member has unbonded from their pool.
     *
     *- `balance` is the corresponding balance of the number of points that has been
     *  requested to be unbonded (the argument of the `unbond` transaction) from the bonded
     *  pool.
     *- `points` is the number of points that are issued as a result of `balance` being
     *dissolved into the corresponding unbonding pool.
     *- `era` is the era in which the balance will be unbonded.
     *In the absence of slashing, these values will match. In the presence of slashing, the
     *number of points that are issued in the unbonding pool will be less than the amount
     *requested to be unbonded.
     */
    "Unbonded": Anonymize<Idsj9cg7j96kpc>;
    /**
     *A member has withdrawn from their pool.
     *
     *The given number of `points` have been dissolved in return of `balance`.
     *
     *Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance
     *will be 1.
     */
    "Withdrawn": Anonymize<Ido4u9drncfaml>;
    /**
     *A pool has been destroyed.
     */
    "Destroyed": Anonymize<I931cottvong90>;
    /**
     *The state of a pool has changed
     */
    "StateChanged": Anonymize<Ie8c7ctks8ur2p>;
    /**
     *A member has been removed from a pool.
     *
     *The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).
     */
    "MemberRemoved": Anonymize<I7vqogd77mmdlm>;
    /**
     *The roles of a pool have been updated to the given new roles. Note that the depositor
     *can never change.
     */
    "RolesUpdated": Anonymize<I6mik29s5073td>;
    /**
     *The active balance of pool `pool_id` has been slashed to `balance`.
     */
    "PoolSlashed": Anonymize<I2m0sqmb75cnpb>;
    /**
     *The unbond pool at `era` of pool `pool_id` has been slashed to `balance`.
     */
    "UnbondingPoolSlashed": Anonymize<I49agc5b62mehu>;
    /**
     *A pool's commission setting has been changed.
     */
    "PoolCommissionUpdated": Anonymize<Iatq9jda4hq6pg>;
    /**
     *A pool's maximum commission setting has been changed.
     */
    "PoolMaxCommissionUpdated": Anonymize<I8cbluptqo8kbp>;
    /**
     *A pool's commission `change_rate` has been changed.
     */
    "PoolCommissionChangeRateUpdated": Anonymize<I81cc4plffa1dm>;
    /**
     *Pool commission claim permission has been updated.
     */
    "PoolCommissionClaimPermissionUpdated": Anonymize<I3ihan8icf0c5k>;
    /**
     *Pool commission has been claimed.
     */
    "PoolCommissionClaimed": Anonymize<I2g87evcjlgmqi>;
    /**
     *Topped up deficit in frozen ED of the reward pool.
     */
    "MinBalanceDeficitAdjusted": Anonymize<Ieg1oc56mamrl5>;
    /**
     *Claimed excess frozen ED of af the reward pool.
     */
    "MinBalanceExcessAdjusted": Anonymize<Ieg1oc56mamrl5>;
}>;
export declare const NominationPoolsEvent: GetEnum<NominationPoolsEvent>;
export type I1ti389kf8t6oi = {
    "depositor": SS58String;
    "pool_id": number;
};
export type If4nnre373amul = {
    "member": SS58String;
    "pool_id": number;
    "bonded": bigint;
    "joined": boolean;
};
export type I55kbor0ocqk6h = {
    "member": SS58String;
    "pool_id": number;
    "payout": bigint;
};
export type Idsj9cg7j96kpc = {
    "member": SS58String;
    "pool_id": number;
    "balance": bigint;
    "points": bigint;
    "era": number;
};
export type Ido4u9drncfaml = {
    "member": SS58String;
    "pool_id": number;
    "balance": bigint;
    "points": bigint;
};
export type I931cottvong90 = {
    "pool_id": number;
};
export type Ie8c7ctks8ur2p = {
    "pool_id": number;
    "new_state": NominationPoolsPoolState;
};
export type NominationPoolsPoolState = Enum<{
    "Open": undefined;
    "Blocked": undefined;
    "Destroying": undefined;
}>;
export declare const NominationPoolsPoolState: GetEnum<NominationPoolsPoolState>;
export type I7vqogd77mmdlm = {
    "pool_id": number;
    "member": SS58String;
};
export type I6mik29s5073td = {
    "root"?: Anonymize<Ihfphjolmsqq1>;
    "bouncer"?: Anonymize<Ihfphjolmsqq1>;
    "nominator"?: Anonymize<Ihfphjolmsqq1>;
};
export type I2m0sqmb75cnpb = {
    "pool_id": number;
    "balance": bigint;
};
export type I49agc5b62mehu = {
    "pool_id": number;
    "era": number;
    "balance": bigint;
};
export type Iatq9jda4hq6pg = {
    "pool_id": number;
    "current"?: Anonymize<Ie8iutm7u02lmj>;
};
export type Ie8iutm7u02lmj = (Anonymize<I7svnfko10tq2e>) | undefined;
export type I7svnfko10tq2e = [number, SS58String];
export type I8cbluptqo8kbp = {
    "pool_id": number;
    "max_commission": number;
};
export type I81cc4plffa1dm = {
    "pool_id": number;
    "change_rate": Anonymize<Ibqul338t9c1ll>;
};
export type Ibqul338t9c1ll = {
    "max_increase": number;
    "min_delay": number;
};
export type I3ihan8icf0c5k = {
    "pool_id": number;
    "permission"?: Anonymize<I16m1kn78dee7v>;
};
export type I16m1kn78dee7v = (NominationPoolsCommissionClaimPermission) | undefined;
export type NominationPoolsCommissionClaimPermission = Enum<{
    "Permissionless": undefined;
    "Account": SS58String;
}>;
export declare const NominationPoolsCommissionClaimPermission: GetEnum<NominationPoolsCommissionClaimPermission>;
export type I2g87evcjlgmqi = {
    "pool_id": number;
    "commission": bigint;
};
export type Ieg1oc56mamrl5 = {
    "pool_id": number;
    "amount": bigint;
};
export type Iajn3dsaap97s9 = AnonymousEnum<{
    /**
     *A staker was unstaked.
     */
    "Unstaked": Anonymize<I3hvuij3fte8au>;
    /**
     *A staker was slashed for requesting fast-unstake whilst being exposed.
     */
    "Slashed": Anonymize<Ifk8eme5o7mukf>;
    /**
     *A batch was partially checked for the given eras, but the process did not finish.
     */
    "BatchChecked": Anonymize<Ic0he9tlf9ll0u>;
    /**
     *A batch of a given size was terminated.
     *
     *This is always follows by a number of `Unstaked` or `Slashed` events, marking the end
     *of the batch. A new batch will be created upon next block.
     */
    "BatchFinished": Anonymize<I54umskavgc9du>;
    /**
     *An internal error happened. Operations will be paused now.
     */
    "InternalError": undefined;
}>;
export type I3hvuij3fte8au = {
    "stash": SS58String;
    "result": Anonymize<I9v7lrhj0m94ts>;
};
export type Ic0he9tlf9ll0u = {
    "eras": Anonymize<Icgljjb6j82uhn>;
};
export type Icgljjb6j82uhn = Array<number>;
export type ParachainsInclusionEvent = Enum<{
    /**
     *A candidate was backed. `[candidate, head_data]`
     */
    "CandidateBacked": Anonymize<Icdu1nb48l753j>;
    /**
     *A candidate was included. `[candidate, head_data]`
     */
    "CandidateIncluded": Anonymize<Icdu1nb48l753j>;
    /**
     *A candidate timed out. `[candidate, head_data]`
     */
    "CandidateTimedOut": Anonymize<I618m2uag0aopg>;
    /**
     *Some upward messages have been received and will be processed.
     */
    "UpwardMessagesReceived": Anonymize<Ic8i89mfkmn3n7>;
}>;
export declare const ParachainsInclusionEvent: GetEnum<ParachainsInclusionEvent>;
export type Icdu1nb48l753j = [Anonymize<I9o5v7cmfi9c85>, Binary, number, number];
export type I9o5v7cmfi9c85 = {
    "descriptor": Anonymize<Ic7r865c0luc3k>;
    "commitments_hash": FixedSizeBinary<32>;
};
export type Ic7r865c0luc3k = {
    "para_id": number;
    "relay_parent": FixedSizeBinary<32>;
    "collator": FixedSizeBinary<32>;
    "persisted_validation_data_hash": FixedSizeBinary<32>;
    "pov_hash": FixedSizeBinary<32>;
    "erasure_root": FixedSizeBinary<32>;
    "signature": FixedSizeBinary<64>;
    "para_head": FixedSizeBinary<32>;
    "validation_code_hash": FixedSizeBinary<32>;
};
export type I618m2uag0aopg = [Anonymize<I9o5v7cmfi9c85>, Binary, number];
export type Ic8i89mfkmn3n7 = {
    "from": number;
    "count": number;
};
export type ParachainsParasEvent = Enum<{
    /**
     *Current code has been updated for a Para. `para_id`
     */
    "CurrentCodeUpdated": number;
    /**
     *Current head has been updated for a Para. `para_id`
     */
    "CurrentHeadUpdated": number;
    /**
     *A code upgrade has been scheduled for a Para. `para_id`
     */
    "CodeUpgradeScheduled": number;
    /**
     *A new head has been noted for a Para. `para_id`
     */
    "NewHeadNoted": number;
    /**
     *A para has been queued to execute pending actions. `para_id`
     */
    "ActionQueued": Anonymize<I9jd27rnpm8ttv>;
    /**
     *The given para either initiated or subscribed to a PVF check for the given validation
     *code. `code_hash` `para_id`
     */
    "PvfCheckStarted": Anonymize<I4pact7n2e9a0i>;
    /**
     *The given validation code was accepted by the PVF pre-checking vote.
     *`code_hash` `para_id`
     */
    "PvfCheckAccepted": Anonymize<I4pact7n2e9a0i>;
    /**
     *The given validation code was rejected by the PVF pre-checking vote.
     *`code_hash` `para_id`
     */
    "PvfCheckRejected": Anonymize<I4pact7n2e9a0i>;
}>;
export declare const ParachainsParasEvent: GetEnum<ParachainsParasEvent>;
export type I4pact7n2e9a0i = [FixedSizeBinary<32>, number];
export type ParachainsHrmpEvent = Enum<{
    /**
     *Open HRMP channel requested.
     */
    "OpenChannelRequested": Anonymize<Id2bej717ckub0>;
    /**
     *An HRMP channel request sent by the receiver was canceled by either party.
     */
    "OpenChannelCanceled": Anonymize<I545vo2e86o5i4>;
    /**
     *Open HRMP channel accepted.
     */
    "OpenChannelAccepted": Anonymize<I50mrcbubp554e>;
    /**
     *HRMP channel closed.
     */
    "ChannelClosed": Anonymize<I545vo2e86o5i4>;
    /**
     *An HRMP channel was opened via Root origin.
     */
    "HrmpChannelForceOpened": Anonymize<Id2bej717ckub0>;
    /**
     *An HRMP channel was opened with a system chain.
     */
    "HrmpSystemChannelOpened": Anonymize<Id2bej717ckub0>;
    /**
     *An HRMP channel's deposits were updated.
     */
    "OpenChannelDepositsUpdated": Anonymize<I50mrcbubp554e>;
}>;
export declare const ParachainsHrmpEvent: GetEnum<ParachainsHrmpEvent>;
export type Id2bej717ckub0 = {
    "sender": number;
    "recipient": number;
    "proposed_max_capacity": number;
    "proposed_max_message_size": number;
};
export type I545vo2e86o5i4 = {
    "by_parachain": number;
    "channel_id": Anonymize<I50mrcbubp554e>;
};
export type I50mrcbubp554e = {
    "sender": number;
    "recipient": number;
};
export type ParachainsDisputesEvent = Enum<{
    /**
     *A dispute has been initiated. \[candidate hash, dispute location\]
     */
    "DisputeInitiated": Anonymize<I3i09nus3ku37s>;
    /**
     *A dispute has concluded for or against a candidate.
     *`\[para id, candidate hash, dispute result\]`
     */
    "DisputeConcluded": Anonymize<I2e447aa6a0imh>;
    /**
     *A dispute has concluded with supermajority against a candidate.
     *Block authors should no longer build on top of this head and should
     *instead revert the block at the given height. This should be the
     *number of the child of the last known valid block in the chain.
     */
    "Revert": number;
}>;
export declare const ParachainsDisputesEvent: GetEnum<ParachainsDisputesEvent>;
export type I3i09nus3ku37s = [FixedSizeBinary<32>, ParachainsDisputeLocation];
export type ParachainsDisputeLocation = Enum<{
    "Local": undefined;
    "Remote": undefined;
}>;
export declare const ParachainsDisputeLocation: GetEnum<ParachainsDisputeLocation>;
export type I2e447aa6a0imh = [FixedSizeBinary<32>, ParachainsDisputeResult];
export type ParachainsDisputeResult = Enum<{
    "Valid": undefined;
    "Invalid": undefined;
}>;
export declare const ParachainsDisputeResult: GetEnum<ParachainsDisputeResult>;
export type Icuu6jjue8o6eb = AnonymousEnum<{
    /**
     *An order was placed at some spot price amount by orderer ordered_by
     */
    "OnDemandOrderPlaced": Anonymize<I82n7gg49bvucn>;
    /**
     *The value of the spot price has likely changed
     */
    "SpotPriceSet": Anonymize<I58qkru548f7dl>;
}>;
export type I82n7gg49bvucn = {
    "para_id": number;
    "spot_price": bigint;
    "ordered_by": SS58String;
};
export type I58qkru548f7dl = {
    "spot_price": bigint;
};
export type CommonParasRegistrarEvent = Enum<{
    "Registered": Anonymize<Ibs22tt76qp5bi>;
    "Deregistered": Anonymize<I37r4bdai8o9mp>;
    "Reserved": Anonymize<Idn2ghub1o4i40>;
    "Swapped": Anonymize<I48u78djt89dod>;
}>;
export declare const CommonParasRegistrarEvent: GetEnum<CommonParasRegistrarEvent>;
export type Ibs22tt76qp5bi = {
    "para_id": number;
    "manager": SS58String;
};
export type I37r4bdai8o9mp = {
    "para_id": number;
};
export type Idn2ghub1o4i40 = {
    "para_id": number;
    "who": SS58String;
};
export type I48u78djt89dod = {
    "para_id": number;
    "other_id": number;
};
export type CommonSlotsEvent = Enum<{
    /**
     *A new `[lease_period]` is beginning.
     */
    "NewLeasePeriod": Anonymize<Ib85m5kfbepu2t>;
    /**
     *A para has won the right to a continuous set of lease periods as a parachain.
     *First balance is any extra amount reserved on top of the para's existing deposit.
     *Second balance is the total amount reserved.
     */
    "Leased": Anonymize<Idaml5bdhsfcsl>;
}>;
export declare const CommonSlotsEvent: GetEnum<CommonSlotsEvent>;
export type Ib85m5kfbepu2t = {
    "lease_period": number;
};
export type Idaml5bdhsfcsl = {
    "para_id": number;
    "leaser": SS58String;
    "period_begin": number;
    "period_count": number;
    "extra_reserved": bigint;
    "total_amount": bigint;
};
export type CommonAuctionsEvent = Enum<{
    /**
     *An auction started. Provides its index and the block number where it will begin to
     *close and the first lease period of the quadruplet that is auctioned.
     */
    "AuctionStarted": Anonymize<Ieec0cu336gteb>;
    /**
     *An auction ended. All funds become unreserved.
     */
    "AuctionClosed": Anonymize<I815d5k4ij85nv>;
    /**
     *Funds were reserved for a winning bid. First balance is the extra amount reserved.
     *Second is the total.
     */
    "Reserved": Anonymize<Ifi98fgi9o46v7>;
    /**
     *Funds were unreserved since bidder is no longer active. `[bidder, amount]`
     */
    "Unreserved": Anonymize<Ic0oj9tok33uap>;
    /**
     *Someone attempted to lease the same slot twice for a parachain. The amount is held in
     *reserve but no parachain slot has been leased.
     */
    "ReserveConfiscated": Anonymize<I3tdutpfjuk32j>;
    /**
     *A new bid has been accepted as the current winner.
     */
    "BidAccepted": Anonymize<I1esdujrkdacpb>;
    /**
     *The winning offset was chosen for an auction. This will map into the `Winning` storage
     *map.
     */
    "WinningOffset": Anonymize<I9g1d820jf9m2s>;
}>;
export declare const CommonAuctionsEvent: GetEnum<CommonAuctionsEvent>;
export type Ieec0cu336gteb = {
    "auction_index": number;
    "lease_period": number;
    "ending": number;
};
export type I815d5k4ij85nv = {
    "auction_index": number;
};
export type Ifi98fgi9o46v7 = {
    "bidder": SS58String;
    "extra_reserved": bigint;
    "total_amount": bigint;
};
export type Ic0oj9tok33uap = {
    "bidder": SS58String;
    "amount": bigint;
};
export type I3tdutpfjuk32j = {
    "para_id": number;
    "leaser": SS58String;
    "amount": bigint;
};
export type I1esdujrkdacpb = {
    "bidder": SS58String;
    "para_id": number;
    "amount": bigint;
    "first_slot": number;
    "last_slot": number;
};
export type I9g1d820jf9m2s = {
    "auction_index": number;
    "block_number": number;
};
export type I4t2u4a27m51ur = AnonymousEnum<{
    /**
     *Create a new crowdloaning campaign.
     */
    "Created": Anonymize<I37r4bdai8o9mp>;
    /**
     *Contributed to a crowd sale.
     */
    "Contributed": Anonymize<I8ve4g3egaln6a>;
    /**
     *Withdrew full balance of a contributor.
     */
    "Withdrew": Anonymize<I8ve4g3egaln6a>;
    /**
     *The loans in a fund have been partially dissolved, i.e. there are some left
     *over child keys that still need to be killed.
     */
    "PartiallyRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *All loans in a fund have been refunded.
     */
    "AllRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *Fund is dissolved.
     */
    "Dissolved": Anonymize<I37r4bdai8o9mp>;
    /**
     *The result of trying to submit a new bid to the Slots pallet.
     */
    "HandleBidResult": Anonymize<I72vu1lf8gotkk>;
    /**
     *The configuration to a crowdloan has been edited.
     */
    "Edited": Anonymize<I37r4bdai8o9mp>;
    /**
     *A memo has been updated.
     */
    "MemoUpdated": Anonymize<If4hvqaeoqq5us>;
    /**
     *A parachain has been moved to `NewRaise`
     */
    "AddedToNewRaise": Anonymize<I37r4bdai8o9mp>;
}>;
export type I8ve4g3egaln6a = {
    "who": SS58String;
    "fund_index": number;
    "amount": bigint;
};
export type I72vu1lf8gotkk = {
    "para_id": number;
    "result": Anonymize<I9v7lrhj0m94ts>;
};
export type If4hvqaeoqq5us = {
    "who": SS58String;
    "para_id": number;
    "memo": Binary;
};
export type PolkadotRuntimeParachainsCoretimeEvent = Enum<{
    /**
     *The broker chain has asked for revenue information for a specific block.
     */
    "RevenueInfoRequested": Anonymize<Ibtsa3docbr9el>;
    /**
     *A core has received a new assignment from the broker chain.
     */
    "CoreAssigned": Anonymize<Iaiqv5prlisjkg>;
}>;
export declare const PolkadotRuntimeParachainsCoretimeEvent: GetEnum<PolkadotRuntimeParachainsCoretimeEvent>;
export type Ibtsa3docbr9el = {
    "when": number;
};
export type Iaiqv5prlisjkg = {
    "core": number;
};
export type I61dksvl51aujo = AnonymousEnum<{
    /**
     *Given number of `(top, child)` keys were migrated respectively, with the given
     *`compute`.
     */
    "Migrated": Anonymize<Iagqcb06kbevb1>;
    /**
     *Some account got slashed by the given amount.
     */
    "Slashed": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *The auto migration task finished.
     */
    "AutoMigrationFinished": undefined;
    /**
     *Migration got halted due to an error or miss-configuration.
     */
    "Halted": Anonymize<Iec8defeh924b6>;
}>;
export type Iagqcb06kbevb1 = {
    "top": number;
    "child": number;
    "compute": Anonymize<I85ah77hcf4cpl>;
};
export type I85ah77hcf4cpl = AnonymousEnum<{
    "Signed": undefined;
    "Auto": undefined;
}>;
export type Iec8defeh924b6 = {
    "error": Anonymize<I96objte63brjr>;
};
export type I5ce1ru810vv9d = AnonymousEnum<{
    /**
     *Execution of an XCM message was attempted.
     */
    "Attempted": Anonymize<I2aatv5i0cb96a>;
    /**
     *A XCM message was sent.
     */
    "Sent": Anonymize<Ib9msr5sr8t3dn>;
    /**
     *Query response received which does not match a registered query. This may be because a
     *matching query was never registered, it may be because it is a duplicate response, or
     *because the query timed out.
     */
    "UnexpectedResponse": Anonymize<I3le5tr7ugg6l2>;
    /**
     *Query response has been received and is ready for taking with `take_response`. There is
     *no registered notification call.
     */
    "ResponseReady": Anonymize<I3iun9sig164po>;
    /**
     *Query response has been received and query is removed. The registered notification has
     *been dispatched and executed successfully.
     */
    "Notified": Anonymize<I2uqmls7kcdnii>;
    /**
     *Query response has been received and query is removed. The registered notification
     *could not be dispatched because the dispatch weight is greater than the maximum weight
     *originally budgeted by this runtime for the query result.
     */
    "NotifyOverweight": Anonymize<Idg69klialbkb8>;
    /**
     *Query response has been received and query is removed. There was a general error with
     *dispatching the notification call.
     */
    "NotifyDispatchError": Anonymize<I2uqmls7kcdnii>;
    /**
     *Query response has been received and query is removed. The dispatch was unable to be
     *decoded into a `Call`; this might be due to dispatch function having a signature which
     *is not `(origin, QueryId, Response)`.
     */
    "NotifyDecodeFailed": Anonymize<I2uqmls7kcdnii>;
    /**
     *Expected query response has been received but the origin location of the response does
     *not match that expected. The query remains registered for a later, valid, response to
     *be received and acted upon.
     */
    "InvalidResponder": Anonymize<I13jboebjcbglr>;
    /**
     *Expected query response has been received but the expected origin location placed in
     *storage by this runtime previously cannot be decoded. The query remains registered.
     *
     *This is unexpected (since a location placed in storage in a previously executing
     *runtime should be readable prior to query timeout) and dangerous since the possibly
     *valid response will be dropped. Manual governance intervention is probably going to be
     *needed.
     */
    "InvalidResponderVersion": Anonymize<I3le5tr7ugg6l2>;
    /**
     *Received query response has been read and removed.
     */
    "ResponseTaken": Anonymize<I30pg328m00nr3>;
    /**
     *Some assets have been placed in an asset trap.
     */
    "AssetsTrapped": Anonymize<I381dkhrurdhrs>;
    /**
     *An XCM version change notification message has been attempted to be sent.
     *
     *The cost of sending it (borne by the chain) is included.
     */
    "VersionChangeNotified": Anonymize<Ic8hi3qr11vngc>;
    /**
     *The supported version of a location has been changed. This might be through an
     *automatic notification or a manual intervention.
     */
    "SupportedVersionChanged": Anonymize<Iabk8ljl5g8c86>;
    /**
     *A given location which had a version change subscription was dropped owing to an error
     *sending the notification to it.
     */
    "NotifyTargetSendFail": Anonymize<Ibjdlecumfu7q7>;
    /**
     *A given location which had a version change subscription was dropped owing to an error
     *migrating the location to our new XCM format.
     */
    "NotifyTargetMigrationFail": Anonymize<Ia9ems1kg7laoc>;
    /**
     *Expected query response has been received but the expected querier location placed in
     *storage by this runtime previously cannot be decoded. The query remains registered.
     *
     *This is unexpected (since a location placed in storage in a previously executing
     *runtime should be readable prior to query timeout) and dangerous since the possibly
     *valid response will be dropped. Manual governance intervention is probably going to be
     *needed.
     */
    "InvalidQuerierVersion": Anonymize<I3le5tr7ugg6l2>;
    /**
     *Expected query response has been received but the querier location of the response does
     *not match the expected. The query remains registered for a later, valid, response to
     *be received and acted upon.
     */
    "InvalidQuerier": Anonymize<I92fq0fa45vi3>;
    /**
     *A remote has requested XCM version change notification from us and we have honored it.
     *A version information message is sent to them and its cost is included.
     */
    "VersionNotifyStarted": Anonymize<Id01dpp0dn2cj0>;
    /**
     *We have requested that a remote chain send us XCM version change notifications.
     */
    "VersionNotifyRequested": Anonymize<Id01dpp0dn2cj0>;
    /**
     *We have requested that a remote chain stops sending us XCM version change
     *notifications.
     */
    "VersionNotifyUnrequested": Anonymize<Id01dpp0dn2cj0>;
    /**
     *Fees were paid from a location for an operation (often for using `SendXcm`).
     */
    "FeesPaid": Anonymize<I6nu8k62ck9o8o>;
    /**
     *Some assets have been claimed from an asset trap
     */
    "AssetsClaimed": Anonymize<I381dkhrurdhrs>;
    /**
     *A XCM version migration finished.
     */
    "VersionMigrationFinished": Anonymize<I6s1nbislhk619>;
}>;
export type I2aatv5i0cb96a = {
    "outcome": XcmV4TraitsOutcome;
};
export type XcmV4TraitsOutcome = Enum<{
    "Complete": Anonymize<I30iff2d192eu7>;
    "Incomplete": Anonymize<I3q41clmllcihh>;
    "Error": Anonymize<I1n56hooghntl2>;
}>;
export declare const XcmV4TraitsOutcome: GetEnum<XcmV4TraitsOutcome>;
export type I30iff2d192eu7 = {
    "used": Anonymize<I4q39t5hn830vp>;
};
export type I3q41clmllcihh = {
    "used": Anonymize<I4q39t5hn830vp>;
    "error": XcmV3TraitsError;
};
export type XcmV3TraitsError = Enum<{
    "Overflow": undefined;
    "Unimplemented": undefined;
    "UntrustedReserveLocation": undefined;
    "UntrustedTeleportLocation": undefined;
    "LocationFull": undefined;
    "LocationNotInvertible": undefined;
    "BadOrigin": undefined;
    "InvalidLocation": undefined;
    "AssetNotFound": undefined;
    "FailedToTransactAsset": undefined;
    "NotWithdrawable": undefined;
    "LocationCannotHold": undefined;
    "ExceedsMaxMessageSize": undefined;
    "DestinationUnsupported": undefined;
    "Transport": undefined;
    "Unroutable": undefined;
    "UnknownClaim": undefined;
    "FailedToDecode": undefined;
    "MaxWeightInvalid": undefined;
    "NotHoldingFees": undefined;
    "TooExpensive": undefined;
    "Trap": bigint;
    "ExpectationFalse": undefined;
    "PalletNotFound": undefined;
    "NameMismatch": undefined;
    "VersionIncompatible": undefined;
    "HoldingWouldOverflow": undefined;
    "ExportError": undefined;
    "ReanchorFailed": undefined;
    "NoDeal": undefined;
    "FeesNotMet": undefined;
    "LockError": undefined;
    "NoPermission": undefined;
    "Unanchored": undefined;
    "NotDepositable": undefined;
    "UnhandledXcmVersion": undefined;
    "WeightLimitReached": Anonymize<I4q39t5hn830vp>;
    "Barrier": undefined;
    "WeightNotComputable": undefined;
    "ExceedsStackLimit": undefined;
}>;
export declare const XcmV3TraitsError: GetEnum<XcmV3TraitsError>;
export type I1n56hooghntl2 = {
    "error": XcmV3TraitsError;
};
export type Ib9msr5sr8t3dn = {
    "origin": Anonymize<I4c0s5cioidn76>;
    "destination": Anonymize<I4c0s5cioidn76>;
    "message": Anonymize<Iegrepoo0c1jc5>;
    "message_id": FixedSizeBinary<32>;
};
export type Iegrepoo0c1jc5 = Array<XcmV4Instruction>;
export type XcmV4Instruction = Enum<{
    "WithdrawAsset": Anonymize<I50mli3hb64f9b>;
    "ReserveAssetDeposited": Anonymize<I50mli3hb64f9b>;
    "ReceiveTeleportedAsset": Anonymize<I50mli3hb64f9b>;
    "QueryResponse": Anonymize<I9o9uda3nddbna>;
    "TransferAsset": Anonymize<I7s0ar727m8n1j>;
    "TransferReserveAsset": Anonymize<I5bepfv83t9cg7>;
    "Transact": Anonymize<I92p6l5cs3fr50>;
    "HrmpNewChannelOpenRequest": Anonymize<I5uhhrjqfuo4e5>;
    "HrmpChannelAccepted": Anonymize<Ifij4jam0o7sub>;
    "HrmpChannelClosing": Anonymize<Ieeb4svd9i8fji>;
    "ClearOrigin": undefined;
    "DescendOrigin": XcmV3Junctions;
    "ReportError": Anonymize<I4r3v6e91d1qbs>;
    "DepositAsset": Anonymize<Idbqvv6kvph2qq>;
    "DepositReserveAsset": Anonymize<I6epv2jfejmsps>;
    "ExchangeAsset": Anonymize<Ifunmnuvdqirrm>;
    "InitiateReserveWithdraw": Anonymize<Id1994sd13a1fk>;
    "InitiateTeleport": Anonymize<I6epv2jfejmsps>;
    "ReportHolding": Anonymize<I53nvbjei7ovcg>;
    "BuyExecution": Anonymize<I60dnk6pb13k6r>;
    "RefundSurplus": undefined;
    "SetErrorHandler": Anonymize<Iegrepoo0c1jc5>;
    "SetAppendix": Anonymize<Iegrepoo0c1jc5>;
    "ClearError": undefined;
    "ClaimAsset": Anonymize<I39e2979fh1sq0>;
    "Trap": bigint;
    "SubscribeVersion": Anonymize<Ieprdqqu7ildvr>;
    "UnsubscribeVersion": undefined;
    "BurnAsset": Anonymize<I50mli3hb64f9b>;
    "ExpectAsset": Anonymize<I50mli3hb64f9b>;
    "ExpectOrigin"?: Anonymize<Ia9cgf4r40b26h>;
    "ExpectError"?: Anonymize<I7sltvf8v2nure>;
    "ExpectTransactStatus": XcmV3MaybeErrorCode;
    "QueryPallet": Anonymize<Iba5bdbapp16oo>;
    "ExpectPallet": Anonymize<Id7mf37dkpgfjs>;
    "ReportTransactStatus": Anonymize<I4r3v6e91d1qbs>;
    "ClearTransactStatus": undefined;
    "UniversalOrigin": XcmV3Junction;
    "ExportMessage": Anonymize<Idjv4c30koq53t>;
    "LockAsset": Anonymize<Ic2kq28flu5j2f>;
    "UnlockAsset": Anonymize<I63d4j1l5gkla3>;
    "NoteUnlockable": Anonymize<Ibs79g4hs4qcqq>;
    "RequestUnlock": Anonymize<Ifv72gq013neli>;
    "SetFeesMode": Anonymize<I4nae9rsql8fa7>;
    "SetTopic": FixedSizeBinary<32>;
    "ClearTopic": undefined;
    "AliasOrigin": Anonymize<I4c0s5cioidn76>;
    "UnpaidExecution": Anonymize<I40d50jeai33oq>;
}>;
export declare const XcmV4Instruction: GetEnum<XcmV4Instruction>;
export type I50mli3hb64f9b = Array<Anonymize<Ia5l7mu5a6v49o>>;
export type Ia5l7mu5a6v49o = {
    "id": Anonymize<I4c0s5cioidn76>;
    "fun": XcmV3MultiassetFungibility;
};
export type XcmV3MultiassetFungibility = Enum<{
    "Fungible": bigint;
    "NonFungible": XcmV3MultiassetAssetInstance;
}>;
export declare const XcmV3MultiassetFungibility: GetEnum<XcmV3MultiassetFungibility>;
export type XcmV3MultiassetAssetInstance = Enum<{
    "Undefined": undefined;
    "Index": bigint;
    "Array4": FixedSizeBinary<4>;
    "Array8": FixedSizeBinary<8>;
    "Array16": FixedSizeBinary<16>;
    "Array32": FixedSizeBinary<32>;
}>;
export declare const XcmV3MultiassetAssetInstance: GetEnum<XcmV3MultiassetAssetInstance>;
export type I9o9uda3nddbna = {
    "query_id": bigint;
    "response": XcmV4Response;
    "max_weight": Anonymize<I4q39t5hn830vp>;
    "querier"?: Anonymize<Ia9cgf4r40b26h>;
};
export type XcmV4Response = Enum<{
    "Null": undefined;
    "Assets": Anonymize<I50mli3hb64f9b>;
    "ExecutionResult"?: Anonymize<I7sltvf8v2nure>;
    "Version": number;
    "PalletsInfo": Anonymize<I599u7h20b52at>;
    "DispatchResult": XcmV3MaybeErrorCode;
}>;
export declare const XcmV4Response: GetEnum<XcmV4Response>;
export type I7sltvf8v2nure = (Anonymize<Id8ide743umavp>) | undefined;
export type Id8ide743umavp = [number, XcmV3TraitsError];
export type I599u7h20b52at = Array<Anonymize<Ift5r9b1bvoh16>>;
export type Ift5r9b1bvoh16 = {
    "index": number;
    "name": Binary;
    "module_name": Binary;
    "major": number;
    "minor": number;
    "patch": number;
};
export type XcmV3MaybeErrorCode = Enum<{
    "Success": undefined;
    "Error": Binary;
    "TruncatedError": Binary;
}>;
export declare const XcmV3MaybeErrorCode: GetEnum<XcmV3MaybeErrorCode>;
export type Ia9cgf4r40b26h = (Anonymize<I4c0s5cioidn76>) | undefined;
export type I7s0ar727m8n1j = {
    "assets": Anonymize<I50mli3hb64f9b>;
    "beneficiary": Anonymize<I4c0s5cioidn76>;
};
export type I5bepfv83t9cg7 = {
    "assets": Anonymize<I50mli3hb64f9b>;
    "dest": Anonymize<I4c0s5cioidn76>;
    "xcm": Anonymize<Iegrepoo0c1jc5>;
};
export type I92p6l5cs3fr50 = {
    "origin_kind": XcmV2OriginKind;
    "require_weight_at_most": Anonymize<I4q39t5hn830vp>;
    "call": Binary;
};
export type XcmV2OriginKind = Enum<{
    "Native": undefined;
    "SovereignAccount": undefined;
    "Superuser": undefined;
    "Xcm": undefined;
}>;
export declare const XcmV2OriginKind: GetEnum<XcmV2OriginKind>;
export type I5uhhrjqfuo4e5 = {
    "sender": number;
    "max_message_size": number;
    "max_capacity": number;
};
export type Ifij4jam0o7sub = {
    "recipient": number;
};
export type Ieeb4svd9i8fji = {
    "initiator": number;
    "sender": number;
    "recipient": number;
};
export type I4r3v6e91d1qbs = {
    "destination": Anonymize<I4c0s5cioidn76>;
    "query_id": bigint;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Idbqvv6kvph2qq = {
    "assets": XcmV4AssetAssetFilter;
    "beneficiary": Anonymize<I4c0s5cioidn76>;
};
export type XcmV4AssetAssetFilter = Enum<{
    "Definite": Anonymize<I50mli3hb64f9b>;
    "Wild": XcmV4AssetWildAsset;
}>;
export declare const XcmV4AssetAssetFilter: GetEnum<XcmV4AssetAssetFilter>;
export type XcmV4AssetWildAsset = Enum<{
    "All": undefined;
    "AllOf": Anonymize<I9k109i13ivgac>;
    "AllCounted": number;
    "AllOfCounted": Anonymize<Iano6fp1hcf6vu>;
}>;
export declare const XcmV4AssetWildAsset: GetEnum<XcmV4AssetWildAsset>;
export type I9k109i13ivgac = {
    "id": Anonymize<I4c0s5cioidn76>;
    "fun": XcmV2MultiassetWildFungibility;
};
export type XcmV2MultiassetWildFungibility = Enum<{
    "Fungible": undefined;
    "NonFungible": undefined;
}>;
export declare const XcmV2MultiassetWildFungibility: GetEnum<XcmV2MultiassetWildFungibility>;
export type Iano6fp1hcf6vu = {
    "id": Anonymize<I4c0s5cioidn76>;
    "fun": XcmV2MultiassetWildFungibility;
    "count": number;
};
export type I6epv2jfejmsps = {
    "assets": XcmV4AssetAssetFilter;
    "dest": Anonymize<I4c0s5cioidn76>;
    "xcm": Anonymize<Iegrepoo0c1jc5>;
};
export type Ifunmnuvdqirrm = {
    "give": XcmV4AssetAssetFilter;
    "want": Anonymize<I50mli3hb64f9b>;
    "maximal": boolean;
};
export type Id1994sd13a1fk = {
    "assets": XcmV4AssetAssetFilter;
    "reserve": Anonymize<I4c0s5cioidn76>;
    "xcm": Anonymize<Iegrepoo0c1jc5>;
};
export type I53nvbjei7ovcg = {
    "response_info": Anonymize<I4r3v6e91d1qbs>;
    "assets": XcmV4AssetAssetFilter;
};
export type I60dnk6pb13k6r = {
    "fees": Anonymize<Ia5l7mu5a6v49o>;
    "weight_limit": XcmV3WeightLimit;
};
export type XcmV3WeightLimit = Enum<{
    "Unlimited": undefined;
    "Limited": Anonymize<I4q39t5hn830vp>;
}>;
export declare const XcmV3WeightLimit: GetEnum<XcmV3WeightLimit>;
export type I39e2979fh1sq0 = {
    "assets": Anonymize<I50mli3hb64f9b>;
    "ticket": Anonymize<I4c0s5cioidn76>;
};
export type Ieprdqqu7ildvr = {
    "query_id": bigint;
    "max_response_weight": Anonymize<I4q39t5hn830vp>;
};
export type Iba5bdbapp16oo = {
    "module_name": Binary;
    "response_info": Anonymize<I4r3v6e91d1qbs>;
};
export type Id7mf37dkpgfjs = {
    "index": number;
    "name": Binary;
    "module_name": Binary;
    "crate_major": number;
    "min_crate_minor": number;
};
export type Idjv4c30koq53t = {
    "network": XcmV3JunctionNetworkId;
    "destination": XcmV3Junctions;
    "xcm": Anonymize<Iegrepoo0c1jc5>;
};
export type Ic2kq28flu5j2f = {
    "asset": Anonymize<Ia5l7mu5a6v49o>;
    "unlocker": Anonymize<I4c0s5cioidn76>;
};
export type I63d4j1l5gkla3 = {
    "asset": Anonymize<Ia5l7mu5a6v49o>;
    "target": Anonymize<I4c0s5cioidn76>;
};
export type Ibs79g4hs4qcqq = {
    "asset": Anonymize<Ia5l7mu5a6v49o>;
    "owner": Anonymize<I4c0s5cioidn76>;
};
export type Ifv72gq013neli = {
    "asset": Anonymize<Ia5l7mu5a6v49o>;
    "locker": Anonymize<I4c0s5cioidn76>;
};
export type I4nae9rsql8fa7 = {
    "jit_withdraw": boolean;
};
export type I40d50jeai33oq = {
    "weight_limit": XcmV3WeightLimit;
    "check_origin"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I3le5tr7ugg6l2 = {
    "origin": Anonymize<I4c0s5cioidn76>;
    "query_id": bigint;
};
export type I3iun9sig164po = {
    "query_id": bigint;
    "response": XcmV4Response;
};
export type I2uqmls7kcdnii = {
    "query_id": bigint;
    "pallet_index": number;
    "call_index": number;
};
export type Idg69klialbkb8 = {
    "query_id": bigint;
    "pallet_index": number;
    "call_index": number;
    "actual_weight": Anonymize<I4q39t5hn830vp>;
    "max_budgeted_weight": Anonymize<I4q39t5hn830vp>;
};
export type I13jboebjcbglr = {
    "origin": Anonymize<I4c0s5cioidn76>;
    "query_id": bigint;
    "expected_location"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I30pg328m00nr3 = {
    "query_id": bigint;
};
export type I381dkhrurdhrs = {
    "hash": FixedSizeBinary<32>;
    "origin": Anonymize<I4c0s5cioidn76>;
    "assets": XcmVersionedAssets;
};
export type XcmVersionedAssets = Enum<{
    "V2": Anonymize<I2sllmucln1iic>;
    "V3": Anonymize<Iai6dhqiq3bach>;
    "V4": Anonymize<I50mli3hb64f9b>;
}>;
export declare const XcmVersionedAssets: GetEnum<XcmVersionedAssets>;
export type I2sllmucln1iic = Array<Anonymize<Id8h647t880l31>>;
export type Id8h647t880l31 = {
    "id": XcmV2MultiassetAssetId;
    "fun": XcmV2MultiassetFungibility;
};
export type XcmV2MultiassetAssetId = Enum<{
    "Concrete": Anonymize<I4frqunb5hj2km>;
    "Abstract": Binary;
}>;
export declare const XcmV2MultiassetAssetId: GetEnum<XcmV2MultiassetAssetId>;
export type XcmV2MultiassetFungibility = Enum<{
    "Fungible": bigint;
    "NonFungible": XcmV2MultiassetAssetInstance;
}>;
export declare const XcmV2MultiassetFungibility: GetEnum<XcmV2MultiassetFungibility>;
export type XcmV2MultiassetAssetInstance = Enum<{
    "Undefined": undefined;
    "Index": bigint;
    "Array4": FixedSizeBinary<4>;
    "Array8": FixedSizeBinary<8>;
    "Array16": FixedSizeBinary<16>;
    "Array32": FixedSizeBinary<32>;
    "Blob": Binary;
}>;
export declare const XcmV2MultiassetAssetInstance: GetEnum<XcmV2MultiassetAssetInstance>;
export type Iai6dhqiq3bach = Array<Anonymize<Idcm24504c8bkk>>;
export type Idcm24504c8bkk = {
    "id": XcmV3MultiassetAssetId;
    "fun": XcmV3MultiassetFungibility;
};
export type Ic8hi3qr11vngc = {
    "destination": Anonymize<I4c0s5cioidn76>;
    "result": number;
    "cost": Anonymize<I50mli3hb64f9b>;
    "message_id": FixedSizeBinary<32>;
};
export type Iabk8ljl5g8c86 = {
    "location": Anonymize<I4c0s5cioidn76>;
    "version": number;
};
export type Ibjdlecumfu7q7 = {
    "location": Anonymize<I4c0s5cioidn76>;
    "query_id": bigint;
    "error": XcmV3TraitsError;
};
export type Ia9ems1kg7laoc = {
    "location": XcmVersionedLocation;
    "query_id": bigint;
};
export type I92fq0fa45vi3 = {
    "origin": Anonymize<I4c0s5cioidn76>;
    "query_id": bigint;
    "expected_querier": Anonymize<I4c0s5cioidn76>;
    "maybe_actual_querier"?: Anonymize<Ia9cgf4r40b26h>;
};
export type Id01dpp0dn2cj0 = {
    "destination": Anonymize<I4c0s5cioidn76>;
    "cost": Anonymize<I50mli3hb64f9b>;
    "message_id": FixedSizeBinary<32>;
};
export type I6nu8k62ck9o8o = {
    "paying": Anonymize<I4c0s5cioidn76>;
    "fees": Anonymize<I50mli3hb64f9b>;
};
export type I6s1nbislhk619 = {
    "version": number;
};
export type I13vul90391uuv = AnonymousEnum<{
    /**
     *Message discarded due to an error in the `MessageProcessor` (usually a format error).
     */
    "ProcessingFailed": Anonymize<I218fa3heih67o>;
    /**
     *Message is processed.
     */
    "Processed": Anonymize<I1tf93k54ltg1v>;
    /**
     *Message placed in overweight queue.
     */
    "OverweightEnqueued": Anonymize<I6ove5at7hfiur>;
    /**
     *This page was reaped.
     */
    "PageReaped": Anonymize<I9c0urppp07b8b>;
}>;
export type I218fa3heih67o = {
    /**
     *The `blake2_256` hash of the message.
     */
    "id": FixedSizeBinary<32>;
    /**
     *The queue of the message.
     */
    "origin": ParachainsInclusionAggregateMessageOrigin;
    /**
     *The error that occurred.
     *
     *This error is pretty opaque. More fine-grained errors need to be emitted as events
     *by the `MessageProcessor`.
     */
    "error": Anonymize<I5hhsj7l9obr84>;
};
export type ParachainsInclusionAggregateMessageOrigin = Enum<{
    "Ump": ParachainsInclusionUmpQueueId;
}>;
export declare const ParachainsInclusionAggregateMessageOrigin: GetEnum<ParachainsInclusionAggregateMessageOrigin>;
export type ParachainsInclusionUmpQueueId = Enum<{
    "Para": number;
}>;
export declare const ParachainsInclusionUmpQueueId: GetEnum<ParachainsInclusionUmpQueueId>;
export type I5hhsj7l9obr84 = AnonymousEnum<{
    "BadFormat": undefined;
    "Corrupt": undefined;
    "Unsupported": undefined;
    "Overweight": Anonymize<I4q39t5hn830vp>;
    "Yield": undefined;
    "StackLimitReached": undefined;
}>;
export type I1tf93k54ltg1v = {
    /**
     *The `blake2_256` hash of the message.
     */
    "id": FixedSizeBinary<32>;
    /**
     *The queue of the message.
     */
    "origin": ParachainsInclusionAggregateMessageOrigin;
    /**
     *How much weight was used to process the message.
     */
    "weight_used": Anonymize<I4q39t5hn830vp>;
    /**
     *Whether the message was processed.
     *
     *Note that this does not mean that the underlying `MessageProcessor` was internally
     *successful. It *solely* means that the MQ pallet will treat this as a success
     *condition and discard the message. Any internal error needs to be emitted as events
     *by the `MessageProcessor`.
     */
    "success": boolean;
};
export type I6ove5at7hfiur = {
    /**
     *The `blake2_256` hash of the message.
     */
    "id": FixedSizeBinary<32>;
    /**
     *The queue of the message.
     */
    "origin": ParachainsInclusionAggregateMessageOrigin;
    /**
     *The page of the message.
     */
    "page_index": number;
    /**
     *The index of the message within the page.
     */
    "message_index": number;
};
export type I9c0urppp07b8b = {
    /**
     *The queue of the page.
     */
    "origin": ParachainsInclusionAggregateMessageOrigin;
    /**
     *The index of the page.
     */
    "index": number;
};
export type AssetRateEvent = Enum<{
    "AssetRateCreated": Anonymize<I6nmp4rhqla35>;
    "AssetRateRemoved": Anonymize<I8ndstn7sf4kek>;
    "AssetRateUpdated": Anonymize<I1a3ecmnlnvr59>;
}>;
export declare const AssetRateEvent: GetEnum<AssetRateEvent>;
export type I6nmp4rhqla35 = {
    "asset_kind": VersionedLocatableAsset;
    "rate": bigint;
};
export type I8ndstn7sf4kek = {
    "asset_kind": VersionedLocatableAsset;
};
export type I1a3ecmnlnvr59 = {
    "asset_kind": VersionedLocatableAsset;
    "old": bigint;
    "new": bigint;
};
export type Ic5m5lp1oioo8r = Array<FixedSizeBinary<32>>;
export type I95g6i7ilua7lq = Array<Anonymize<I9jd27rnpm8ttv>>;
export type Ieniouoqkq4icf = {
    "spec_version": number;
    "spec_name": string;
};
export type I9tv51sgspensk = Array<Anonymize<I6d8rsn8f949na>>;
export type I6d8rsn8f949na = (Anonymize<I2pi981kdgomb3>) | undefined;
export type I2pi981kdgomb3 = {
    "maybe_id"?: Anonymize<I4s6vifaf8k998>;
    "priority": number;
    "call": PreimagesBounded;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "origin": PolkadotRuntimeOriginCaller;
};
export type Iep7au1720bm0e = (Anonymize<I9jd27rnpm8ttv>) | undefined;
export type PolkadotRuntimeOriginCaller = Enum<{
    "system": DispatchRawOrigin;
    "Origins": GovernanceOrigin;
    "ParachainsOrigin": ParachainsOrigin;
    "XcmPallet": XcmPalletOrigin;
    "Void": undefined;
}>;
export declare const PolkadotRuntimeOriginCaller: GetEnum<PolkadotRuntimeOriginCaller>;
export type DispatchRawOrigin = Enum<{
    "Root": undefined;
    "Signed": SS58String;
    "None": undefined;
}>;
export declare const DispatchRawOrigin: GetEnum<DispatchRawOrigin>;
export type GovernanceOrigin = Enum<{
    "StakingAdmin": undefined;
    "Treasurer": undefined;
    "FellowshipAdmin": undefined;
    "GeneralAdmin": undefined;
    "AuctionAdmin": undefined;
    "LeaseAdmin": undefined;
    "ReferendumCanceller": undefined;
    "ReferendumKiller": undefined;
    "SmallTipper": undefined;
    "BigTipper": undefined;
    "SmallSpender": undefined;
    "MediumSpender": undefined;
    "BigSpender": undefined;
    "WhitelistedCaller": undefined;
    "WishForChange": undefined;
}>;
export declare const GovernanceOrigin: GetEnum<GovernanceOrigin>;
export type ParachainsOrigin = Enum<{
    "Parachain": number;
}>;
export declare const ParachainsOrigin: GetEnum<ParachainsOrigin>;
export type XcmPalletOrigin = Enum<{
    "Xcm": Anonymize<I4c0s5cioidn76>;
    "Response": Anonymize<I4c0s5cioidn76>;
}>;
export declare const XcmPalletOrigin: GetEnum<XcmPalletOrigin>;
export type I56u24ncejr5kt = {
    "total_retries": number;
    "remaining": number;
    "period": number;
};
export type PreimageOldRequestStatus = Enum<{
    "Unrequested": Anonymize<I5jej6bvdjrisr>;
    "Requested": Anonymize<Is7sg1rr9u2nm>;
}>;
export declare const PreimageOldRequestStatus: GetEnum<PreimageOldRequestStatus>;
export type I5jej6bvdjrisr = {
    "deposit": Anonymize<I95l2k9b1re95f>;
    "len": number;
};
export type I95l2k9b1re95f = [SS58String, bigint];
export type Is7sg1rr9u2nm = {
    "deposit"?: Anonymize<I92hdo1clkbp4g>;
    "count": number;
    "len"?: Anonymize<I4arjljr6dpflb>;
};
export type I92hdo1clkbp4g = (Anonymize<I95l2k9b1re95f>) | undefined;
export type I4arjljr6dpflb = (number) | undefined;
export type PreimageRequestStatus = Enum<{
    "Unrequested": Anonymize<Idvcv8961o32th>;
    "Requested": Anonymize<In82i9avte5re>;
}>;
export declare const PreimageRequestStatus: GetEnum<PreimageRequestStatus>;
export type Idvcv8961o32th = {
    "ticket": Anonymize<I95l2k9b1re95f>;
    "len": number;
};
export type In82i9avte5re = {
    "maybe_ticket"?: Anonymize<I92hdo1clkbp4g>;
    "count": number;
    "maybe_len"?: Anonymize<I4arjljr6dpflb>;
};
export type BabeDigestsNextConfigDescriptor = Enum<{
    "V1": Anonymize<I8jnd4d8ip6djo>;
}>;
export declare const BabeDigestsNextConfigDescriptor: GetEnum<BabeDigestsNextConfigDescriptor>;
export type I8jnd4d8ip6djo = {
    "c": Anonymize<I200n1ov5tbcvr>;
    "allowed_slots": BabeAllowedSlots;
};
export type I200n1ov5tbcvr = FixedSizeArray<2, bigint>;
export type BabeAllowedSlots = Enum<{
    "PrimarySlots": undefined;
    "PrimaryAndSecondaryPlainSlots": undefined;
    "PrimaryAndSecondaryVRFSlots": undefined;
}>;
export declare const BabeAllowedSlots: GetEnum<BabeAllowedSlots>;
export type Idq7or56ds2f13 = (BabeDigestsPreDigest) | undefined;
export type BabeDigestsPreDigest = Enum<{
    "Primary": Anonymize<Ien29ooge6hr9e>;
    "SecondaryPlain": Anonymize<Ieiaevc5q41ard>;
    "SecondaryVRF": Anonymize<Ien29ooge6hr9e>;
}>;
export declare const BabeDigestsPreDigest: GetEnum<BabeDigestsPreDigest>;
export type Ien29ooge6hr9e = {
    "authority_index": number;
    "slot": bigint;
    "vrf_signature": Anonymize<Ib066efvl8g6ok>;
};
export type Ib066efvl8g6ok = {
    "pre_output": FixedSizeBinary<32>;
    "proof": FixedSizeBinary<64>;
};
export type Ieiaevc5q41ard = {
    "authority_index": number;
    "slot": bigint;
};
export type Ifip05kcrl65am = Array<Anonymize<I6cs1itejju2vv>>;
export type I6cs1itejju2vv = [bigint, number];
export type Iff9heri56m1mb = [SS58String, bigint, boolean];
export type I8ds64oj6581v0 = Array<Anonymize<Ifd60g9ld04ljn>>;
export type Ifd60g9ld04ljn = {
    "id": FixedSizeBinary<8>;
    "amount": bigint;
    "reasons": BalancesTypesReasons;
};
export type BalancesTypesReasons = Enum<{
    "Fee": undefined;
    "Misc": undefined;
    "All": undefined;
}>;
export declare const BalancesTypesReasons: GetEnum<BalancesTypesReasons>;
export type Ia7pdug7cdsg8g = Array<Anonymize<I1basc5up2fk73>>;
export type I1basc5up2fk73 = {
    "id": FixedSizeBinary<8>;
    "amount": bigint;
};
export type I3oiqtmlj7klbr = Array<Anonymize<Ifde25j06ecor0>>;
export type Ifde25j06ecor0 = {
    "id": Anonymize<I8qhoqaff9bl1a>;
    "amount": bigint;
};
export type I8qhoqaff9bl1a = AnonymousEnum<{
    "Preimage": PreimagePalletHoldReason;
    "StateTrieMigration": Anonymize<I7lf1val3vmpq0>;
}>;
export type PreimagePalletHoldReason = Enum<{
    "Preimage": undefined;
}>;
export declare const PreimagePalletHoldReason: GetEnum<PreimagePalletHoldReason>;
export type I7lf1val3vmpq0 = AnonymousEnum<{
    "SlashForMigrate": undefined;
}>;
export type I2l1ctuihi2mfd = Array<Anonymize<I55k5ohoio0bvr>>;
export type I55k5ohoio0bvr = {
    "id": WestendRuntimeRuntimeFreezeReason;
    "amount": bigint;
};
export type WestendRuntimeRuntimeFreezeReason = Enum<{
    "NominationPools": NominationPoolsPalletFreezeReason;
}>;
export declare const WestendRuntimeRuntimeFreezeReason: GetEnum<WestendRuntimeRuntimeFreezeReason>;
export type NominationPoolsPalletFreezeReason = Enum<{
    "PoolMinBalance": undefined;
}>;
export declare const NominationPoolsPalletFreezeReason: GetEnum<NominationPoolsPalletFreezeReason>;
export type TransactionPaymentReleases = Enum<{
    "V1Ancient": undefined;
    "V2": undefined;
}>;
export declare const TransactionPaymentReleases: GetEnum<TransactionPaymentReleases>;
export type Ia2lhg7l2hilo3 = Array<SS58String>;
export type Ic12aht5vh2sen = {
    "stash": SS58String;
    "total": bigint;
    "active": bigint;
    "unlocking": Anonymize<I9nc4v1upo2c8e>;
    "legacy_claimed_rewards": Anonymize<Icgljjb6j82uhn>;
};
export type I9nc4v1upo2c8e = Array<Anonymize<I3niuuk38q4krr>>;
export type I3niuuk38q4krr = {
    "value": bigint;
    "era": number;
};
export type Ic3m9d6tdl6gi2 = {
    "targets": Anonymize<Ia2lhg7l2hilo3>;
    "submitted_in": number;
    "suppressed": boolean;
};
export type Ib3j7gb0jgs38u = {
    "index": number;
    "start"?: Anonymize<I35p85j063s0il>;
};
export type I35p85j063s0il = (bigint) | undefined;
export type Ifekshcrgkl12g = {
    "total": bigint;
    "own": bigint;
    "others": Anonymize<I252o97fo263q7>;
};
export type I252o97fo263q7 = Array<Anonymize<I91eao91fmce8>>;
export type I91eao91fmce8 = {
    "who": SS58String;
    "value": bigint;
};
export type I6flrronqs3l6n = {
    "total": bigint;
    "own": bigint;
    "nominator_count": number;
    "page_count": number;
};
export type I97fulj5h3ik95 = {
    "page_total": bigint;
    "others": Anonymize<I252o97fo263q7>;
};
export type Ia8896dq44k9m4 = [number, SS58String, number];
export type Iff9p3c7k6pfoi = {
    "total": number;
    "individual": Anonymize<I205qrookusi3d>;
};
export type I205qrookusi3d = Array<Anonymize<I6ouflveob4eli>>;
export type I6ouflveob4eli = [SS58String, number];
export type Iafq6t4rgheait = Array<Anonymize<Ifedledo2fog34>>;
export type Ifedledo2fog34 = {
    "validator": SS58String;
    "own": bigint;
    "others": Anonymize<Iba9inugg1atvo>;
    "reporters": Anonymize<Ia2lhg7l2hilo3>;
    "payout": bigint;
};
export type Iba9inugg1atvo = Array<Anonymize<I95l2k9b1re95f>>;
export type I4ojmnsk1dchql = [number, bigint];
export type Iinkhfdlka9ch = {
    "span_index": number;
    "last_start": number;
    "last_nonzero_slash": number;
    "prior": Anonymize<Icgljjb6j82uhn>;
};
export type I2kj4j6mp68hf8 = {
    "slashed": bigint;
    "paid_out": bigint;
};
export type I2bqvqrg0sbrdj = {
    "offender": Anonymize<Idi27pva6ajg4>;
    "reporters": Anonymize<Ia2lhg7l2hilo3>;
};
export type Idi27pva6ajg4 = [SS58String, Anonymize<Ifekshcrgkl12g>];
export type I23nq3fsgtejt = [FixedSizeBinary<16>, Binary];
export type Idt624nf41g34e = Array<Anonymize<I4v3ibe4dqslio>>;
export type I4v3ibe4dqslio = [SS58String, Anonymize<I9kr8cseidc66h>];
export type I9kr8cseidc66h = {
    "grandpa": FixedSizeBinary<32>;
    "babe": FixedSizeBinary<32>;
    "para_validator": FixedSizeBinary<32>;
    "para_assignment": FixedSizeBinary<32>;
    "authority_discovery": FixedSizeBinary<32>;
    "beefy": FixedSizeBinary<33>;
};
export type GrandpaStoredState = Enum<{
    "Live": undefined;
    "PendingPause": Anonymize<Ib95oqfalvjqfe>;
    "Paused": undefined;
    "PendingResume": Anonymize<Ib95oqfalvjqfe>;
}>;
export declare const GrandpaStoredState: GetEnum<GrandpaStoredState>;
export type Ib95oqfalvjqfe = {
    "scheduled_at": number;
    "delay": number;
};
export type I7pe2me3i3vtn9 = {
    "scheduled_at": number;
    "delay": number;
    "next_authorities": Anonymize<I3geksg000c171>;
    "forced"?: Anonymize<I4arjljr6dpflb>;
};
export type Iegmj7n48sc3am = {
    "proposer": SS58String;
    "value": bigint;
    "beneficiary": SS58String;
    "bond": bigint;
};
export type I5v9a2mdqq4t8u = {
    "asset_kind": VersionedLocatableAsset;
    "amount": bigint;
    "beneficiary": XcmVersionedLocation;
    "valid_from": number;
    "expire_at": number;
    "status": TreasuryPaymentState;
};
export type TreasuryPaymentState = Enum<{
    "Pending": undefined;
    "Attempted": Anonymize<I4ov6e94l79mbg>;
    "Failed": undefined;
}>;
export declare const TreasuryPaymentState: GetEnum<TreasuryPaymentState>;
export type I4ov6e94l79mbg = {
    "id": bigint;
};
export type ConvictionVotingVoteVoting = Enum<{
    "Casting": Anonymize<If52hjr5c5nrc5>;
    "Delegating": Anonymize<I251o9sbu5566f>;
}>;
export declare const ConvictionVotingVoteVoting: GetEnum<ConvictionVotingVoteVoting>;
export type If52hjr5c5nrc5 = {
    "votes": Anonymize<I42jj1su7asrm9>;
    "delegations": Anonymize<I538qha8r4j3ii>;
    "prior": Anonymize<I4ojmnsk1dchql>;
};
export type I42jj1su7asrm9 = Array<Anonymize<I7mk5ivue8lr2m>>;
export type I7mk5ivue8lr2m = [number, ConvictionVotingVoteAccountVote];
export type ConvictionVotingVoteAccountVote = Enum<{
    "Standard": Anonymize<Ib024p97ls1cla>;
    "Split": Anonymize<I5pi71t9bosoiv>;
    "SplitAbstain": Anonymize<I89irppcaqmf1i>;
}>;
export declare const ConvictionVotingVoteAccountVote: GetEnum<ConvictionVotingVoteAccountVote>;
export type Ib024p97ls1cla = {
    "vote": number;
    "balance": bigint;
};
export type I5pi71t9bosoiv = {
    "aye": bigint;
    "nay": bigint;
};
export type I89irppcaqmf1i = {
    "aye": bigint;
    "nay": bigint;
    "abstain": bigint;
};
export type I538qha8r4j3ii = {
    "votes": bigint;
    "capital": bigint;
};
export type I251o9sbu5566f = {
    "balance": bigint;
    "target": SS58String;
    "conviction": VotingConviction;
    "delegations": Anonymize<I538qha8r4j3ii>;
    "prior": Anonymize<I4ojmnsk1dchql>;
};
export type VotingConviction = Enum<{
    "None": undefined;
    "Locked1x": undefined;
    "Locked2x": undefined;
    "Locked3x": undefined;
    "Locked4x": undefined;
    "Locked5x": undefined;
    "Locked6x": undefined;
}>;
export declare const VotingConviction: GetEnum<VotingConviction>;
export type If9jidduiuq7vv = Array<Anonymize<I4ojmnsk1dchql>>;
export type Idu11e295qqjep = AnonymousEnum<{
    "Ongoing": Anonymize<I2i3mpciskqofd>;
    "Approved": Anonymize<Ini94eljn5lj8>;
    "Rejected": Anonymize<Ini94eljn5lj8>;
    "Cancelled": Anonymize<Ini94eljn5lj8>;
    "TimedOut": Anonymize<Ini94eljn5lj8>;
    "Killed": number;
}>;
export type I2i3mpciskqofd = {
    "track": number;
    "origin": PolkadotRuntimeOriginCaller;
    "proposal": PreimagesBounded;
    "enactment": TraitsScheduleDispatchTime;
    "submitted": number;
    "submission_deposit": Anonymize<Id5fm4p8lj5qgi>;
    "decision_deposit"?: Anonymize<Ibd24caul84kv2>;
    "deciding"?: Anonymize<Ibcbcndfmk0jd9>;
    "tally": Anonymize<Ifsk7cbmtit1jd>;
    "in_queue": boolean;
    "alarm"?: Anonymize<I3aj03qk2o5mdm>;
};
export type TraitsScheduleDispatchTime = Enum<{
    "At": number;
    "After": number;
}>;
export declare const TraitsScheduleDispatchTime: GetEnum<TraitsScheduleDispatchTime>;
export type Ibd24caul84kv2 = (Anonymize<Id5fm4p8lj5qgi>) | undefined;
export type Ibcbcndfmk0jd9 = (Anonymize<I4a0pk3ivg0trh>) | undefined;
export type I4a0pk3ivg0trh = {
    "since": number;
    "confirming"?: Anonymize<I4arjljr6dpflb>;
};
export type I3aj03qk2o5mdm = (Anonymize<I3pjs7v78ujbii>) | undefined;
export type I3pjs7v78ujbii = [number, Anonymize<I9jd27rnpm8ttv>];
export type Ini94eljn5lj8 = [number, Anonymize<Ibd24caul84kv2>, Anonymize<Ibd24caul84kv2>];
export type I2phecamkn3pej = [bigint, bigint, number];
export type ClaimsStatementKind = Enum<{
    "Regular": undefined;
    "Saft": undefined;
}>;
export declare const ClaimsStatementKind: GetEnum<ClaimsStatementKind>;
export type Ifble4juuml5ig = Array<Anonymize<I4aro1m78pdrtt>>;
export type I4aro1m78pdrtt = {
    "locked": bigint;
    "per_block": bigint;
    "starting_block": number;
};
export type Version = Enum<{
    "V0": undefined;
    "V1": undefined;
}>;
export declare const Version: GetEnum<Version>;
export type I6piac7omi5lpd = [Anonymize<I62povnsc7ttie>, bigint];
export type I62povnsc7ttie = Array<Anonymize<Iedi7gevl4j19n>>;
export type Iedi7gevl4j19n = {
    "delegate": SS58String;
    "proxy_type": Anonymize<Ib9ifr8gu9ttks>;
    "delay": number;
};
export type I9p9lq3rej5bhc = [Anonymize<Ie1hjkhaoshr67>, bigint];
export type Ie1hjkhaoshr67 = Array<Anonymize<I70eqajm9p2sc5>>;
export type I70eqajm9p2sc5 = {
    "real": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "height": number;
};
export type Iag146hmjgqfgj = {
    "when": Anonymize<Itvprrpb0nm3o>;
    "deposit": bigint;
    "depositor": SS58String;
    "approvals": Anonymize<Ia2lhg7l2hilo3>;
};
export type I8uo3fpd3bcc6f = [SS58String, FixedSizeBinary<32>];
export type I8phqps8r3of7e = {
    "proposer": SS58String;
    "value": bigint;
    "fee": bigint;
    "curator_deposit": bigint;
    "bond": bigint;
    "status": BountiesBountyStatus;
};
export type BountiesBountyStatus = Enum<{
    "Proposed": undefined;
    "Approved": undefined;
    "Funded": undefined;
    "CuratorProposed": Anonymize<I846573mdj1pfn>;
    "Active": Anonymize<I5s3sqq6r9nt63>;
    "PendingPayout": Anonymize<I4aulgjqrdphrm>;
}>;
export declare const BountiesBountyStatus: GetEnum<BountiesBountyStatus>;
export type I846573mdj1pfn = {
    "curator": SS58String;
};
export type I5s3sqq6r9nt63 = {
    "curator": SS58String;
    "update_due": number;
};
export type I4aulgjqrdphrm = {
    "curator": SS58String;
    "beneficiary": SS58String;
    "unlock_at": number;
};
export type Ibofbvvaehln4e = {
    "parent_bounty": number;
    "value": bigint;
    "fee": bigint;
    "curator_deposit": bigint;
    "status": ChildBountyStatus;
};
export type ChildBountyStatus = Enum<{
    "Added": undefined;
    "CuratorProposed": Anonymize<I846573mdj1pfn>;
    "Active": Anonymize<I846573mdj1pfn>;
    "PendingPayout": Anonymize<I4aulgjqrdphrm>;
}>;
export declare const ChildBountyStatus: GetEnum<ChildBountyStatus>;
export type Ictkaqdbfabuek = {
    "supports": Anonymize<I4bboqsv44evel>;
    "score": Anonymize<I8s6n43okuj2b1>;
    "compute": ElectionProviderMultiPhaseElectionCompute;
};
export type I4bboqsv44evel = Array<Anonymize<Ib5vlbiqndekn9>>;
export type Ib5vlbiqndekn9 = [SS58String, Anonymize<I7qb1luldf1jtf>];
export type I7qb1luldf1jtf = {
    "total": bigint;
    "voters": Anonymize<Iba9inugg1atvo>;
};
export type Ia7o65280hur3p = {
    "voters": Anonymize<I9cpogojpnsq8h>;
    "targets": Anonymize<Ia2lhg7l2hilo3>;
};
export type I9cpogojpnsq8h = Array<Anonymize<I6dvmrbp80vk5k>>;
export type I6dvmrbp80vk5k = [SS58String, bigint, Anonymize<Ia2lhg7l2hilo3>];
export type Iasd2iat48n080 = {
    "voters": number;
    "targets": number;
};
export type Ic8d01sg6acf60 = Array<Anonymize<Ie663uperueqm5>>;
export type Ie663uperueqm5 = [Anonymize<I8s6n43okuj2b1>, number, number];
export type Irl37q7erstrb = {
    "who": SS58String;
    "deposit": bigint;
    "raw_solution": Anonymize<I7je4n92ump862>;
    "call_fee": bigint;
};
export type I7je4n92ump862 = {
    "solution": Anonymize<I1nvcsqg39g26j>;
    "score": Anonymize<I8s6n43okuj2b1>;
    "round": number;
};
export type I1nvcsqg39g26j = {
    "votes1": Anonymize<Iep4uo61810hfs>;
    "votes2": Anonymize<Ickjq69hlul8c3>;
    "votes3": Anonymize<Icf645ln9bi1bj>;
    "votes4": Anonymize<I8nospv7k5s457>;
    "votes5": Anonymize<Iig9pofg77rah>;
    "votes6": Anonymize<Irttjt9tghoc0>;
    "votes7": Anonymize<I3o5epjr2va0dl>;
    "votes8": Anonymize<I1gfnebceebqb5>;
    "votes9": Anonymize<Ibo38fh2dhj4it>;
    "votes10": Anonymize<Id4gvspmdh8h9l>;
    "votes11": Anonymize<I5be3ho5m1r68a>;
    "votes12": Anonymize<I7s2sh7cpuv56r>;
    "votes13": Anonymize<I5fq8855gfhmlo>;
    "votes14": Anonymize<I4mvok713k4g7o>;
    "votes15": Anonymize<I90tu9lmjmhfhd>;
    "votes16": Anonymize<I3cqaev9m4hn9m>;
};
export type Iep4uo61810hfs = Array<Anonymize<I5g2vv0ckl2m8b>>;
export type I5g2vv0ckl2m8b = [number, number];
export type Ickjq69hlul8c3 = Array<Anonymize<I4l2a0q04ni20o>>;
export type I4l2a0q04ni20o = [number, Anonymize<I5g2vv0ckl2m8b>, number];
export type Icf645ln9bi1bj = Array<Anonymize<Iamqg950vpqsp8>>;
export type Iamqg950vpqsp8 = [number, Anonymize<Iffarf0mj066h7>, number];
export type Iffarf0mj066h7 = FixedSizeArray<2, Anonymize<I5g2vv0ckl2m8b>>;
export type I8nospv7k5s457 = Array<Anonymize<Ifr1o6ri1uf2of>>;
export type Ifr1o6ri1uf2of = [number, Anonymize<I33ipki9g5n04l>, number];
export type I33ipki9g5n04l = FixedSizeArray<3, Anonymize<I5g2vv0ckl2m8b>>;
export type Iig9pofg77rah = Array<Anonymize<I4gus921fjj8lq>>;
export type I4gus921fjj8lq = [number, Anonymize<If6gr8nt3vreg9>, number];
export type If6gr8nt3vreg9 = FixedSizeArray<4, Anonymize<I5g2vv0ckl2m8b>>;
export type Irttjt9tghoc0 = Array<Anonymize<I9h1lfefrjrss8>>;
export type I9h1lfefrjrss8 = [number, Anonymize<I8kcfo1iikpfd7>, number];
export type I8kcfo1iikpfd7 = FixedSizeArray<5, Anonymize<I5g2vv0ckl2m8b>>;
export type I3o5epjr2va0dl = Array<Anonymize<I85q51vkapcmho>>;
export type I85q51vkapcmho = [number, Anonymize<I829dlpp8f7vhg>, number];
export type I829dlpp8f7vhg = FixedSizeArray<6, Anonymize<I5g2vv0ckl2m8b>>;
export type I1gfnebceebqb5 = Array<Anonymize<I9kgeuvub0nepg>>;
export type I9kgeuvub0nepg = [number, Anonymize<Ie65d4ts6gb5rk>, number];
export type Ie65d4ts6gb5rk = FixedSizeArray<7, Anonymize<I5g2vv0ckl2m8b>>;
export type Ibo38fh2dhj4it = Array<Anonymize<Ipcskss5flcis>>;
export type Ipcskss5flcis = [number, Anonymize<I45nria0sqoino>, number];
export type I45nria0sqoino = FixedSizeArray<8, Anonymize<I5g2vv0ckl2m8b>>;
export type Id4gvspmdh8h9l = Array<Anonymize<Ifdgh79k56960e>>;
export type Ifdgh79k56960e = [number, Anonymize<Ie8fi1901h656e>, number];
export type Ie8fi1901h656e = FixedSizeArray<9, Anonymize<I5g2vv0ckl2m8b>>;
export type I5be3ho5m1r68a = Array<Anonymize<I5n2npru4pt8nc>>;
export type I5n2npru4pt8nc = [number, Anonymize<I1ap4gedi13j9r>, number];
export type I1ap4gedi13j9r = FixedSizeArray<10, Anonymize<I5g2vv0ckl2m8b>>;
export type I7s2sh7cpuv56r = Array<Anonymize<I2udmq2v26rio>>;
export type I2udmq2v26rio = [number, Anonymize<I5vtd36r5b6fss>, number];
export type I5vtd36r5b6fss = FixedSizeArray<11, Anonymize<I5g2vv0ckl2m8b>>;
export type I5fq8855gfhmlo = Array<Anonymize<Id2nvrmi6cagga>>;
export type Id2nvrmi6cagga = [number, Anonymize<Iee99h3pht9j20>, number];
export type Iee99h3pht9j20 = FixedSizeArray<12, Anonymize<I5g2vv0ckl2m8b>>;
export type I4mvok713k4g7o = Array<Anonymize<I2ajtdvlncoqrd>>;
export type I2ajtdvlncoqrd = [number, Anonymize<I3lmls9cse1mcr>, number];
export type I3lmls9cse1mcr = FixedSizeArray<13, Anonymize<I5g2vv0ckl2m8b>>;
export type I90tu9lmjmhfhd = Array<Anonymize<Ifn0i2gsu8pkck>>;
export type Ifn0i2gsu8pkck = [number, Anonymize<Ia1o13i3p2r7gm>, number];
export type Ia1o13i3p2r7gm = FixedSizeArray<14, Anonymize<I5g2vv0ckl2m8b>>;
export type I3cqaev9m4hn9m = Array<Anonymize<Icrp3ubf87cjna>>;
export type Icrp3ubf87cjna = [number, Anonymize<I8c5gqvfaedv6e>, number];
export type I8c5gqvfaedv6e = FixedSizeArray<15, Anonymize<I5g2vv0ckl2m8b>>;
export type Ic5t26f9cp3tvk = {
    "id": SS58String;
    "prev"?: Anonymize<Ihfphjolmsqq1>;
    "next"?: Anonymize<Ihfphjolmsqq1>;
    "bag_upper": bigint;
    "score": bigint;
};
export type I39k39h6vu4hbq = {
    "head"?: Anonymize<Ihfphjolmsqq1>;
    "tail"?: Anonymize<Ihfphjolmsqq1>;
};
export type Idphjddn2h69vc = {
    "pool_id": number;
    "points": bigint;
    "last_recorded_reward_counter": bigint;
    "unbonding_eras": Anonymize<If9jidduiuq7vv>;
};
export type Idhh9vuu2bderg = {
    "commission": Anonymize<I9gabbnrts4k5a>;
    "member_counter": number;
    "points": bigint;
    "roles": Anonymize<Ia8iksu9hedf5n>;
    "state": NominationPoolsPoolState;
};
export type I9gabbnrts4k5a = {
    "current"?: Anonymize<Ie8iutm7u02lmj>;
    "max"?: Anonymize<I4arjljr6dpflb>;
    "change_rate"?: Anonymize<I7hapkpc6mcou7>;
    "throttle_from"?: Anonymize<I4arjljr6dpflb>;
    "claim_permission"?: Anonymize<I16m1kn78dee7v>;
};
export type I7hapkpc6mcou7 = (Anonymize<Ibqul338t9c1ll>) | undefined;
export type Ia8iksu9hedf5n = {
    "depositor": SS58String;
    "root"?: Anonymize<Ihfphjolmsqq1>;
    "nominator"?: Anonymize<Ihfphjolmsqq1>;
    "bouncer"?: Anonymize<Ihfphjolmsqq1>;
};
export type If6qa32dj75gu1 = {
    "last_recorded_reward_counter": bigint;
    "last_recorded_total_payouts": bigint;
    "total_rewards_claimed": bigint;
    "total_commission_pending": bigint;
    "total_commission_claimed": bigint;
};
export type I7oo2mprv1qd1s = {
    "no_era": Anonymize<I4h0cfnkiqrna6>;
    "with_era": Anonymize<I48jqs22bfh5as>;
};
export type I4h0cfnkiqrna6 = {
    "points": bigint;
    "balance": bigint;
};
export type I48jqs22bfh5as = Array<Anonymize<Ifp6metskahp08>>;
export type Ifp6metskahp08 = [number, Anonymize<I4h0cfnkiqrna6>];
export type NominationPoolsClaimPermission = Enum<{
    "Permissioned": undefined;
    "PermissionlessCompound": undefined;
    "PermissionlessWithdraw": undefined;
    "PermissionlessAll": undefined;
}>;
export declare const NominationPoolsClaimPermission: GetEnum<NominationPoolsClaimPermission>;
export type I2eh80qovrl7h2 = {
    "stashes": Anonymize<Iba9inugg1atvo>;
    "checked": Anonymize<Icgljjb6j82uhn>;
};
export type Idinvj2ldfa0k7 = {
    "max_code_size": number;
    "max_head_data_size": number;
    "max_upward_queue_count": number;
    "max_upward_queue_size": number;
    "max_upward_message_size": number;
    "max_upward_message_num_per_candidate": number;
    "hrmp_max_message_num_per_candidate": number;
    "validation_upgrade_cooldown": number;
    "validation_upgrade_delay": number;
    "async_backing_params": Anonymize<Iavuvfkop6318c>;
    "max_pov_size": number;
    "max_downward_message_size": number;
    "hrmp_max_parachain_outbound_channels": number;
    "hrmp_sender_deposit": bigint;
    "hrmp_recipient_deposit": bigint;
    "hrmp_channel_max_capacity": number;
    "hrmp_channel_max_total_size": number;
    "hrmp_max_parachain_inbound_channels": number;
    "hrmp_channel_max_message_size": number;
    "executor_params": Anonymize<I80rnntpog8qp6>;
    "code_retention_period": number;
    "max_validators"?: Anonymize<I4arjljr6dpflb>;
    "dispute_period": number;
    "dispute_post_conclusion_acceptance_period": number;
    "no_show_slots": number;
    "n_delay_tranches": number;
    "zeroth_delay_tranche_width": number;
    "needed_approvals": number;
    "relay_vrf_modulo_samples": number;
    "pvf_voting_ttl": number;
    "minimum_validation_upgrade_delay": number;
    "minimum_backing_votes": number;
    "node_features": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "approval_voting_params": number;
    "scheduler_params": Anonymize<I555j7pvb27qd5>;
};
export type Iavuvfkop6318c = {
    "max_candidate_depth": number;
    "allowed_ancestry_len": number;
};
export type I80rnntpog8qp6 = Array<PolkadotPrimitivesV6ExecutorParamsExecutorParam>;
export type PolkadotPrimitivesV6ExecutorParamsExecutorParam = Enum<{
    "MaxMemoryPages": number;
    "StackLogicalMax": number;
    "StackNativeMax": number;
    "PrecheckingMaxMemory": bigint;
    "PvfPrepTimeout": Anonymize<I57qv5chhd2bar>;
    "PvfExecTimeout": Anonymize<Ib05v3rv2rd8ij>;
    "WasmExtBulkMemory": undefined;
}>;
export declare const PolkadotPrimitivesV6ExecutorParamsExecutorParam: GetEnum<PolkadotPrimitivesV6ExecutorParamsExecutorParam>;
export type I57qv5chhd2bar = [PolkadotPrimitivesV6PvfPrepKind, bigint];
export type PolkadotPrimitivesV6PvfPrepKind = Enum<{
    "Precheck": undefined;
    "Prepare": undefined;
}>;
export declare const PolkadotPrimitivesV6PvfPrepKind: GetEnum<PolkadotPrimitivesV6PvfPrepKind>;
export type Ib05v3rv2rd8ij = [PvfExecKind, bigint];
export type PvfExecKind = Enum<{
    "Backing": undefined;
    "Approval": undefined;
}>;
export declare const PvfExecKind: GetEnum<PvfExecKind>;
export type I555j7pvb27qd5 = {
    "group_rotation_frequency": number;
    "paras_availability_period": number;
    "max_validators_per_core"?: Anonymize<I4arjljr6dpflb>;
    "lookahead": number;
    "num_cores": number;
    "max_availability_timeouts": number;
    "on_demand_queue_max_size": number;
    "on_demand_target_queue_utilization": number;
    "on_demand_fee_variability": number;
    "on_demand_base_fee": bigint;
    "ttl": number;
};
export type I78k2970vpbt1t = Array<Anonymize<Ijlosb0ss738p>>;
export type Ijlosb0ss738p = [number, Anonymize<Idinvj2ldfa0k7>];
export type I27il479s8gsv0 = {
    "buffer": Anonymize<I5v1libhfl216g>;
    "latest_number": number;
};
export type I5v1libhfl216g = Array<Anonymize<I2ccsdtloqt0h4>>;
export type I2ccsdtloqt0h4 = FixedSizeArray<2, FixedSizeBinary<32>>;
export type Id375uoldedict = Array<Anonymize<I39ni9afdvueqm>>;
export type I39ni9afdvueqm = {
    "core": number;
    "hash": FixedSizeBinary<32>;
    "descriptor": Anonymize<Ic7r865c0luc3k>;
    "commitments": Anonymize<Ic1d4u2opv3fst>;
    "availability_votes": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "backers": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "relay_parent_number": number;
    "backed_in_number": number;
    "backing_group": number;
};
export type Ic1d4u2opv3fst = {
    "upward_messages": Anonymize<Itom7fk49o0c9>;
    "horizontal_messages": Anonymize<I6r5cbv8ttrb09>;
    "new_validation_code"?: Anonymize<Iabpgqcjikia83>;
    "head_data": Binary;
    "processed_downward_messages": number;
    "hrmp_watermark": number;
};
export type Itom7fk49o0c9 = Array<Binary>;
export type I6r5cbv8ttrb09 = Array<Anonymize<I958l48g4qg5rf>>;
export type I958l48g4qg5rf = {
    "recipient": number;
    "data": Binary;
};
export type Iabpgqcjikia83 = (Binary) | undefined;
export type Ilg2fqs6cjgs3 = {
    "session": number;
    "backing_validators_per_candidate": Anonymize<I2cbmipi4mgfht>;
    "disputes": Anonymize<Ibt1op6l47p1r2>;
};
export type I2cbmipi4mgfht = Array<Anonymize<I8qsi9it67j51o>>;
export type I8qsi9it67j51o = [Anonymize<I9o5v7cmfi9c85>, Anonymize<I1jjanul21h2e0>];
export type I1jjanul21h2e0 = Array<Anonymize<Iiu2q9mv7qkl8>>;
export type Iiu2q9mv7qkl8 = [number, ValidityAttestation];
export type ValidityAttestation = Enum<{
    "Implicit": FixedSizeBinary<64>;
    "Explicit": FixedSizeBinary<64>;
}>;
export declare const ValidityAttestation: GetEnum<ValidityAttestation>;
export type Ibt1op6l47p1r2 = Array<Anonymize<I3ot7vri7o8sb8>>;
export type I3ot7vri7o8sb8 = {
    "candidate_hash": FixedSizeBinary<32>;
    "session": number;
    "statements": Anonymize<Ia05m2q0dqbf8r>;
};
export type Ia05m2q0dqbf8r = Array<Anonymize<Imkbdgkq0f1or>>;
export type Imkbdgkq0f1or = [PolkadotPrimitivesV6DisputeStatement, number, FixedSizeBinary<64>];
export type PolkadotPrimitivesV6DisputeStatement = Enum<{
    "Valid": PolkadotPrimitivesV6ValidDisputeStatementKind;
    "Invalid": Anonymize<InvalidDisputeStatementKind>;
}>;
export declare const PolkadotPrimitivesV6DisputeStatement: GetEnum<PolkadotPrimitivesV6DisputeStatement>;
export type PolkadotPrimitivesV6ValidDisputeStatementKind = Enum<{
    "Explicit": undefined;
    "BackingSeconded": FixedSizeBinary<32>;
    "BackingValid": FixedSizeBinary<32>;
    "ApprovalChecking": undefined;
    "ApprovalCheckingMultipleCandidates": Anonymize<Ic5m5lp1oioo8r>;
}>;
export declare const PolkadotPrimitivesV6ValidDisputeStatementKind: GetEnum<PolkadotPrimitivesV6ValidDisputeStatementKind>;
export type InvalidDisputeStatementKind = Enum<{
    "Explicit": undefined;
}>;
export declare const InvalidDisputeStatementKind: GetEnum<InvalidDisputeStatementKind>;
export type Iarlj3qd8u1v13 = Array<Anonymize<Icgljjb6j82uhn>>;
export type I2ng2krd94ceva = Array<PolkadotRuntimeParachainsSchedulerPalletCoreOccupied>;
export type PolkadotRuntimeParachainsSchedulerPalletCoreOccupied = Enum<{
    "Free": undefined;
    "Paras": Anonymize<Iuf24b6e93i3q>;
}>;
export declare const PolkadotRuntimeParachainsSchedulerPalletCoreOccupied: GetEnum<PolkadotRuntimeParachainsSchedulerPalletCoreOccupied>;
export type Iuf24b6e93i3q = {
    "assignment": PolkadotRuntimeParachainsSchedulerCommonAssignment;
    "availability_timeouts": number;
    "ttl": number;
};
export type PolkadotRuntimeParachainsSchedulerCommonAssignment = Enum<{
    "Pool": Anonymize<I51g4s1s9hjmnm>;
    "Bulk": number;
}>;
export declare const PolkadotRuntimeParachainsSchedulerCommonAssignment: GetEnum<PolkadotRuntimeParachainsSchedulerCommonAssignment>;
export type I51g4s1s9hjmnm = {
    "para_id": number;
    "core_index": number;
};
export type Ie18mk3nmrn3nr = Array<Anonymize<Ifadvqu5iig2q6>>;
export type Ifadvqu5iig2q6 = [number, Anonymize<I9173djtr3q94d>];
export type I9173djtr3q94d = Array<Anonymize<Iuf24b6e93i3q>>;
export type I4vk12npmr8ll0 = {
    "votes_accept": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "votes_reject": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "age": number;
    "created_at": number;
    "causes": Anonymize<I1hsgfu91a4476>;
};
export type I1hsgfu91a4476 = Array<Anonymize<Iajttbp61thc1h>>;
export type Iajttbp61thc1h = AnonymousEnum<{
    "Onboarding": number;
    "Upgrade": Anonymize<Irvl8rst55h8o>;
}>;
export type Irvl8rst55h8o = {
    "id": number;
    "included_at": number;
    "upgrade_strategy": Anonymize<I3mepf00hb058t>;
};
export type I3mepf00hb058t = AnonymousEnum<{
    "SetGoAheadSignal": undefined;
    "ApplyAtExpectedBlock": undefined;
}>;
export type ParachainsParasParaLifecycle = Enum<{
    "Onboarding": undefined;
    "Parathread": undefined;
    "Parachain": undefined;
    "UpgradingParathread": undefined;
    "DowngradingParachain": undefined;
    "OffboardingParathread": undefined;
    "OffboardingParachain": undefined;
}>;
export declare const ParachainsParasParaLifecycle: GetEnum<ParachainsParasParaLifecycle>;
export type I79cs1p3m59mo7 = {
    "upgrade_times": Anonymize<I2v6n2k262gqsq>;
    "last_pruned"?: Anonymize<I4arjljr6dpflb>;
};
export type I2v6n2k262gqsq = Array<Anonymize<Ioham9r6hhu19>>;
export type Ioham9r6hhu19 = {
    "expected_at": number;
    "activated_at": number;
};
export type UpgradeGoAhead = Enum<{
    "Abort": undefined;
    "GoAhead": undefined;
}>;
export declare const UpgradeGoAhead: GetEnum<UpgradeGoAhead>;
export type UpgradeRestriction = Enum<{
    "Present": undefined;
}>;
export declare const UpgradeRestriction: GetEnum<UpgradeRestriction>;
export type I2duhnt686rv0q = {
    "genesis_head": Binary;
    "validation_code": Binary;
    "para_kind": boolean;
};
export type I7ulu3h1ibu60i = Array<Anonymize<Idtrfath8htv0g>>;
export type Idtrfath8htv0g = {
    "validators": Anonymize<Ic5m5lp1oioo8r>;
    "queued": Anonymize<Ic5m5lp1oioo8r>;
    "session_index": number;
};
export type I6ljjd4b5fa4ov = Array<Anonymize<I60847k37jfcc6>>;
export type I60847k37jfcc6 = {
    "sent_at": number;
    "msg": Binary;
};
export type Ibhmrlkcu01imb = {
    "confirmed": boolean;
    "_age": number;
    "sender_deposit": bigint;
    "max_message_size": number;
    "max_capacity": number;
    "max_total_size": number;
};
export type Id43g4eveajpkl = Array<Anonymize<I50mrcbubp554e>>;
export type I7iua3ehrgl4va = {
    "max_capacity": number;
    "max_total_size": number;
    "max_message_size": number;
    "msg_count": number;
    "total_size": number;
    "mqc_head"?: Anonymize<I4s6vifaf8k998>;
    "sender_deposit": bigint;
    "recipient_deposit": bigint;
};
export type Iev3u09i2vqn93 = Array<Anonymize<I409qo0sfkbh16>>;
export type I409qo0sfkbh16 = {
    "sent_at": number;
    "data": Binary;
};
export type I9olhgo2o08h7b = Array<Anonymize<I8pg2rpr4ldgp9>>;
export type I8pg2rpr4ldgp9 = [number, Anonymize<Icgljjb6j82uhn>];
export type I9m4rd2a7lc9md = {
    "active_validator_indices": Anonymize<Icgljjb6j82uhn>;
    "random_seed": FixedSizeBinary<32>;
    "dispute_period": number;
    "validators": Anonymize<Ic5m5lp1oioo8r>;
    "discovery_keys": Anonymize<Ic5m5lp1oioo8r>;
    "assignment_keys": Anonymize<Ic5m5lp1oioo8r>;
    "validator_groups": Anonymize<Iarlj3qd8u1v13>;
    "n_cores": number;
    "zeroth_delay_tranche_width": number;
    "relay_vrf_modulo_samples": number;
    "n_delay_tranches": number;
    "no_show_slots": number;
    "needed_approvals": number;
};
export type I87u7jalc0lhah = {
    "validators_for": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "validators_against": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "start": number;
    "concluded_at"?: Anonymize<I4arjljr6dpflb>;
};
export type I4p5t2krb1gmvp = [number, FixedSizeBinary<32>];
export type I5kqchhvguhfvt = {
    "keys": Anonymize<Iqnbvitf7a7l3>;
    "kind": SlashingOffenceKind;
};
export type Iqnbvitf7a7l3 = Array<Anonymize<I4p5t2krb1gmvp>>;
export type SlashingOffenceKind = Enum<{
    "ForInvalid": undefined;
    "AgainstValid": undefined;
}>;
export declare const SlashingOffenceKind: GetEnum<SlashingOffenceKind>;
export type I4akf1ifqeclef = {
    "core_index": number;
    "count": number;
};
export type Ido5stnsbghtpd = {
    "traffic": bigint;
    "next_index": number;
    "smallest_index": number;
    "freed_indices": Anonymize<Icgljjb6j82uhn>;
};
export type I3ndpvu09rj685 = Array<Anonymize<Imjh277lquvaf>>;
export type Imjh277lquvaf = {
    "para_id": number;
    "idx": number;
};
export type Iafqnechp3omqg = Array<bigint>;
export type I9dasmua8326io = {
    "assignments": Anonymize<Idt36labebpqsd>;
    "end_hint"?: Anonymize<I4arjljr6dpflb>;
    "next_schedule"?: Anonymize<I4arjljr6dpflb>;
};
export type Idt36labebpqsd = Array<Anonymize<I7adotjtnum30f>>;
export type I7adotjtnum30f = [BrokerCoretimeInterfaceCoreAssignment, number];
export type BrokerCoretimeInterfaceCoreAssignment = Enum<{
    "Idle": undefined;
    "Pool": undefined;
    "Task": number;
}>;
export declare const BrokerCoretimeInterfaceCoreAssignment: GetEnum<BrokerCoretimeInterfaceCoreAssignment>;
export type I3g90iebhds6kb = {
    "queue"?: Anonymize<If4sm31aq7v0i8>;
    "current_work"?: Anonymize<Idluqurlhlnsuv>;
};
export type If4sm31aq7v0i8 = (Anonymize<Icjkaf41q9ga6t>) | undefined;
export type Icjkaf41q9ga6t = {
    "first": number;
    "last": number;
};
export type Idluqurlhlnsuv = (Anonymize<I4dhqg6u1p94d9>) | undefined;
export type I4dhqg6u1p94d9 = {
    "assignments": Anonymize<Id4rj19l8fe7gn>;
    "end_hint"?: Anonymize<I4arjljr6dpflb>;
    "pos": number;
    "step": number;
};
export type Id4rj19l8fe7gn = Array<Anonymize<Ic8ii95e1sb1nk>>;
export type Ic8ii95e1sb1nk = [BrokerCoretimeInterfaceCoreAssignment, Anonymize<Ifrejtuk4pctgo>];
export type Ifrejtuk4pctgo = {
    "ratio": number;
    "remaining": number;
};
export type I3av628q6dt6mq = {
    "manager": SS58String;
    "deposit": bigint;
    "locked"?: Anonymize<I8ie0dco0kcuq5>;
};
export type I8ie0dco0kcuq5 = (boolean) | undefined;
export type Ifmaahl40gom3g = Array<Anonymize<I92hdo1clkbp4g>>;
export type I70iuri2ilha1f = FixedSizeArray<36, Anonymize<I1qlf98109qt29>>;
export type I1qlf98109qt29 = (Anonymize<I7fcree6lak6uv>) | undefined;
export type I7fcree6lak6uv = [SS58String, number, bigint];
export type I6gun5k9fbb4s0 = {
    "depositor": SS58String;
    "verifier"?: Anonymize<I21lmi57mmu91l>;
    "deposit": bigint;
    "raised": bigint;
    "end": number;
    "cap": bigint;
    "last_contribution": CommonCrowdloanLastContribution;
    "first_period": number;
    "last_period": number;
    "fund_index": number;
};
export type I21lmi57mmu91l = (MultiSigner) | undefined;
export type MultiSigner = Enum<{
    "Ed25519": FixedSizeBinary<32>;
    "Sr25519": FixedSizeBinary<32>;
    "Ecdsa": FixedSizeBinary<33>;
}>;
export declare const MultiSigner: GetEnum<MultiSigner>;
export type CommonCrowdloanLastContribution = Enum<{
    "Never": undefined;
    "PreEnding": number;
    "Ending": number;
}>;
export declare const CommonCrowdloanLastContribution: GetEnum<CommonCrowdloanLastContribution>;
export type If354jrdedj0pj = {
    "progress_top": Anonymize<I1ufmh6d8psvik>;
    "progress_child": Anonymize<I1ufmh6d8psvik>;
    "size": number;
    "top_items": number;
    "child_items": number;
};
export type I1ufmh6d8psvik = AnonymousEnum<{
    "ToStart": undefined;
    "LastKey": Binary;
    "Complete": undefined;
}>;
export type Ib17t3992hb64n = (Anonymize<I215mkl885p4da>) | undefined;
export type I215mkl885p4da = {
    "size": number;
    "item": number;
};
export type XcmPalletQueryStatus = Enum<{
    "Pending": Anonymize<I9cig2tff0h7a2>;
    "VersionNotifier": Anonymize<I5c2ss6qk7lue3>;
    "Ready": Anonymize<I2rikk3g9dnfdf>;
}>;
export declare const XcmPalletQueryStatus: GetEnum<XcmPalletQueryStatus>;
export type I9cig2tff0h7a2 = {
    "responder": XcmVersionedLocation;
    "maybe_match_querier"?: Anonymize<Ichrhugqpl0jbb>;
    "maybe_notify"?: Anonymize<I1faufi0iffstp>;
    "timeout": number;
};
export type Ichrhugqpl0jbb = (XcmVersionedLocation) | undefined;
export type I1faufi0iffstp = (FixedSizeBinary<2>) | undefined;
export type I5c2ss6qk7lue3 = {
    "origin": XcmVersionedLocation;
    "is_active": boolean;
};
export type I2rikk3g9dnfdf = {
    "response": XcmVersionedResponse;
    "at": number;
};
export type XcmVersionedResponse = Enum<{
    "V2": XcmV2Response;
    "V3": XcmV3Response;
    "V4": XcmV4Response;
}>;
export declare const XcmVersionedResponse: GetEnum<XcmVersionedResponse>;
export type XcmV2Response = Enum<{
    "Null": undefined;
    "Assets": Anonymize<I2sllmucln1iic>;
    "ExecutionResult"?: Anonymize<Ic6k45vtgiaa1s>;
    "Version": number;
}>;
export declare const XcmV2Response: GetEnum<XcmV2Response>;
export type Ic6k45vtgiaa1s = (Anonymize<Ifg18rrvb5cqli>) | undefined;
export type Ifg18rrvb5cqli = [number, XcmV2TraitsError];
export type XcmV2TraitsError = Enum<{
    "Overflow": undefined;
    "Unimplemented": undefined;
    "UntrustedReserveLocation": undefined;
    "UntrustedTeleportLocation": undefined;
    "MultiLocationFull": undefined;
    "MultiLocationNotInvertible": undefined;
    "BadOrigin": undefined;
    "InvalidLocation": undefined;
    "AssetNotFound": undefined;
    "FailedToTransactAsset": undefined;
    "NotWithdrawable": undefined;
    "LocationCannotHold": undefined;
    "ExceedsMaxMessageSize": undefined;
    "DestinationUnsupported": undefined;
    "Transport": undefined;
    "Unroutable": undefined;
    "UnknownClaim": undefined;
    "FailedToDecode": undefined;
    "MaxWeightInvalid": undefined;
    "NotHoldingFees": undefined;
    "TooExpensive": undefined;
    "Trap": bigint;
    "UnhandledXcmVersion": undefined;
    "WeightLimitReached": bigint;
    "Barrier": undefined;
    "WeightNotComputable": undefined;
}>;
export declare const XcmV2TraitsError: GetEnum<XcmV2TraitsError>;
export type XcmV3Response = Enum<{
    "Null": undefined;
    "Assets": Anonymize<Iai6dhqiq3bach>;
    "ExecutionResult"?: Anonymize<I7sltvf8v2nure>;
    "Version": number;
    "PalletsInfo": Anonymize<I599u7h20b52at>;
    "DispatchResult": XcmV3MaybeErrorCode;
}>;
export declare const XcmV3Response: GetEnum<XcmV3Response>;
export type Ic4qvh5df9s5gp = [number, XcmVersionedLocation];
export type I7vlvrrl2pnbgk = [bigint, Anonymize<I4q39t5hn830vp>, number];
export type I50sjs3s5lud21 = Array<Anonymize<I6vu59hrif6rva>>;
export type I6vu59hrif6rva = [XcmVersionedLocation, number];
export type XcmPalletVersionMigrationStage = Enum<{
    "MigrateSupportedVersion": undefined;
    "MigrateVersionNotifiers": undefined;
    "NotifyCurrentTargets"?: Anonymize<Iabpgqcjikia83>;
    "MigrateAndNotifyOldTargets": undefined;
}>;
export declare const XcmPalletVersionMigrationStage: GetEnum<XcmPalletVersionMigrationStage>;
export type I50qp0ij7h62g2 = {
    "amount": bigint;
    "owner": XcmVersionedLocation;
    "locker": XcmVersionedLocation;
    "consumers": Anonymize<I2ia97v5nng96b>;
};
export type I2ia97v5nng96b = Array<Anonymize<I2a3me3o6q76s8>>;
export type I2a3me3o6q76s8 = [undefined, bigint];
export type Iteuj23is2ed5 = [number, SS58String, XcmVersionedAssetId];
export type XcmVersionedAssetId = Enum<{
    "V3": XcmV3MultiassetAssetId;
    "V4": Anonymize<I4c0s5cioidn76>;
}>;
export declare const XcmVersionedAssetId: GetEnum<XcmVersionedAssetId>;
export type I3rp19gb4dadaa = Array<Anonymize<I4arq5fbf241mq>>;
export type I4arq5fbf241mq = [bigint, XcmVersionedLocation];
export type I260m120dp9sbk = {
    "begin": number;
    "end": number;
    "count": number;
    "ready_neighbours"?: Anonymize<I8lhcj4rckefdi>;
    "message_count": bigint;
    "size": bigint;
};
export type I8lhcj4rckefdi = (Anonymize<I9edqr8hi819se>) | undefined;
export type I9edqr8hi819se = {
    "prev": ParachainsInclusionAggregateMessageOrigin;
    "next": ParachainsInclusionAggregateMessageOrigin;
};
export type I53esa2ms463bk = {
    "remaining": number;
    "remaining_size": number;
    "first_index": number;
    "first": number;
    "last": number;
    "heap": Binary;
};
export type I1lfimt2mpej64 = [ParachainsInclusionAggregateMessageOrigin, number];
export type I2fb54desdqd9n = Array<FixedSizeBinary<33>>;
export type Idjett00s2gd = {
    "id": bigint;
    "len": number;
    "keyset_commitment": FixedSizeBinary<32>;
};
export type In7a38730s6qs = {
    "base_block": Anonymize<I4q39t5hn830vp>;
    "max_block": Anonymize<I4q39t5hn830vp>;
    "per_class": Anonymize<I79te2qqsklnbd>;
};
export type I79te2qqsklnbd = {
    "normal": Anonymize<Ia78ef0a3p5958>;
    "operational": Anonymize<Ia78ef0a3p5958>;
    "mandatory": Anonymize<Ia78ef0a3p5958>;
};
export type Ia78ef0a3p5958 = {
    "base_extrinsic": Anonymize<I4q39t5hn830vp>;
    "max_extrinsic"?: Anonymize<Iasb8k6ash5mjn>;
    "max_total"?: Anonymize<Iasb8k6ash5mjn>;
    "reserved"?: Anonymize<Iasb8k6ash5mjn>;
};
export type If15el53dd76v9 = {
    "normal": number;
    "operational": number;
    "mandatory": number;
};
export type I9s0ave7t0vnrk = {
    "read": bigint;
    "write": bigint;
};
export type Ic6nglu2db2c36 = {
    "spec_name": string;
    "impl_name": string;
    "authoring_version": number;
    "spec_version": number;
    "impl_version": number;
    "apis": Anonymize<Ic9hg6pp5pkea5>;
    "transaction_version": number;
    "state_version": number;
};
export type Ic9hg6pp5pkea5 = Array<Anonymize<I85u3mm1me217a>>;
export type I85u3mm1me217a = [FixedSizeBinary<8>, number];
export type Ibafpkl9hhno69 = Array<Anonymize<Ida9vhl30l98p4>>;
export type Ida9vhl30l98p4 = [number, Anonymize<I6s1tg2sl5nvmp>];
export type I6s1tg2sl5nvmp = {
    "name": string;
    "max_deciding": number;
    "decision_deposit": bigint;
    "prepare_period": number;
    "decision_period": number;
    "confirm_period": number;
    "min_enactment_period": number;
    "min_approval": ReferendaTypesCurve;
    "min_support": ReferendaTypesCurve;
};
export type ReferendaTypesCurve = Enum<{
    "LinearDecreasing": Anonymize<Idcpso832hml3u>;
    "SteppedDecreasing": Anonymize<I5qiv0grkufa8l>;
    "Reciprocal": Anonymize<I58l93su2gte4i>;
}>;
export declare const ReferendaTypesCurve: GetEnum<ReferendaTypesCurve>;
export type Idcpso832hml3u = {
    "length": number;
    "floor": number;
    "ceil": number;
};
export type I5qiv0grkufa8l = {
    "begin": number;
    "end": number;
    "step": number;
    "period": number;
};
export type I58l93su2gte4i = {
    "factor": bigint;
    "x_offset": bigint;
    "y_offset": bigint;
};
export type Iekve0i6djpd9f = AnonymousEnum<{
    /**
     *Make some on-chain remark.
     *
     *Can be executed by every `origin`.
     */
    "remark": Anonymize<I8ofcg5rbj0g2c>;
    /**
     *Set the number of pages in the WebAssembly environment's heap.
     */
    "set_heap_pages": Anonymize<I4adgbll7gku4i>;
    /**
     *Set the new runtime code.
     */
    "set_code": Anonymize<I6pjjpfvhvcfru>;
    /**
     *Set the new runtime code without doing any checks of the given `code`.
     *
     *Note that runtime upgrades will not run if this is called with a not-increasing spec
     *version!
     */
    "set_code_without_checks": Anonymize<I6pjjpfvhvcfru>;
    /**
     *Set some items of storage.
     */
    "set_storage": Anonymize<I9pj91mj79qekl>;
    /**
     *Kill some items from storage.
     */
    "kill_storage": Anonymize<I39uah9nss64h9>;
    /**
     *Kill all storage items with a key that starts with the given prefix.
     *
     ***NOTE:** We rely on the Root origin to provide us the number of subkeys under
     *the prefix we are removing to accurately calculate the weight of this function.
     */
    "kill_prefix": Anonymize<Ik64dknsq7k08>;
    /**
     *Make some on-chain remark and emit event.
     */
    "remark_with_event": Anonymize<I8ofcg5rbj0g2c>;
    /**
     *Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
     *later.
     *
     *This call requires Root origin.
     */
    "authorize_upgrade": Anonymize<Ib51vk42m1po4n>;
    /**
     *Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
     *later.
     *
     *WARNING: This authorizes an upgrade that will take place without any safety checks, for
     *example that the spec name remains the same and that the version number increases. Not
     *recommended for normal use. Use `authorize_upgrade` instead.
     *
     *This call requires Root origin.
     */
    "authorize_upgrade_without_checks": Anonymize<Ib51vk42m1po4n>;
    /**
     *Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
     *
     *If the authorization required a version check, this call will ensure the spec name
     *remains unchanged and that the spec version has increased.
     *
     *Depending on the runtime's `OnSetCode` configuration, this function may directly apply
     *the new `code` in the same block or attempt to schedule the upgrade.
     *
     *All origins are allowed.
     */
    "apply_authorized_upgrade": Anonymize<I6pjjpfvhvcfru>;
}>;
export type I8ofcg5rbj0g2c = {
    "remark": Binary;
};
export type I4adgbll7gku4i = {
    "pages": bigint;
};
export type I6pjjpfvhvcfru = {
    "code": Binary;
};
export type I9pj91mj79qekl = {
    "items": Anonymize<I6pi5ou8r1hblk>;
};
export type I6pi5ou8r1hblk = Array<Anonymize<Idkbvh6dahk1v7>>;
export type Idkbvh6dahk1v7 = FixedSizeArray<2, Binary>;
export type I39uah9nss64h9 = {
    "keys": Anonymize<Itom7fk49o0c9>;
};
export type Ik64dknsq7k08 = {
    "prefix": Binary;
    "subkeys": number;
};
export type Ib51vk42m1po4n = {
    "code_hash": FixedSizeBinary<32>;
};
export type I8de1pdspn1e7b = AnonymousEnum<{
    /**
     *Anonymously schedule a task.
     */
    "schedule": Anonymize<I803vl6fdchv9q>;
    /**
     *Cancel an anonymously scheduled task.
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *Schedule a named task.
     */
    "schedule_named": Anonymize<Ibn9r2340joskh>;
    /**
     *Cancel a named scheduled task.
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *Anonymously schedule a task after a delay.
     */
    "schedule_after": Anonymize<I538550jjb0cn2>;
    /**
     *Schedule a named task after a delay.
     */
    "schedule_named_after": Anonymize<I8n8m69uslon4t>;
    /**
     *Set a retry configuration for a task so that, in case its scheduled run fails, it will
     *be retried after `period` blocks, for a total amount of `retries` retries or until it
     *succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry": Anonymize<Ieg3fd8p4pkt10>;
    /**
     *Set a retry configuration for a named task so that, in case its scheduled run fails, it
     *will be retried after `period` blocks, for a total amount of `retries` retries or until
     *it succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry_named": Anonymize<I8kg5ll427kfqq>;
    /**
     *Removes the retry configuration of a task.
     */
    "cancel_retry": Anonymize<I467333262q1l9>;
    /**
     *Cancel the retry configuration of a named task.
     */
    "cancel_retry_named": Anonymize<Ifs1i5fk9cqvr6>;
}>;
export type I803vl6fdchv9q = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ibn9r2340joskh = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ifs1i5fk9cqvr6 = {
    "id": FixedSizeBinary<32>;
};
export type I538550jjb0cn2 = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I8n8m69uslon4t = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ieg3fd8p4pkt10 = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "retries": number;
    "period": number;
};
export type I8kg5ll427kfqq = {
    "id": FixedSizeBinary<32>;
    "retries": number;
    "period": number;
};
export type I467333262q1l9 = {
    "task": Anonymize<I9jd27rnpm8ttv>;
};
export type If81ks88t5mpk5 = AnonymousEnum<{
    /**
     *Register a preimage on-chain.
     *
     *If the preimage was previously requested, no fees or deposits are taken for providing
     *the preimage. Otherwise, a deposit is taken proportional to the size of the preimage.
     */
    "note_preimage": Anonymize<I82nfqfkd48n10>;
    /**
     *Clear an unrequested preimage from the runtime storage.
     *
     *If `len` is provided, then it will be a much cheaper operation.
     *
     *- `hash`: The hash of the preimage to be removed from the store.
     *- `len`: The length of the preimage of `hash`.
     */
    "unnote_preimage": Anonymize<I1jm8m1rh9e20v>;
    /**
     *Request a preimage be uploaded to the chain without paying any fees or deposits.
     *
     *If the preimage requests has already been provided on-chain, we unreserve any deposit
     *a user may have paid, and take the control of the preimage out of their hands.
     */
    "request_preimage": Anonymize<I1jm8m1rh9e20v>;
    /**
     *Clear a previously made request for a preimage.
     *
     *NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
     */
    "unrequest_preimage": Anonymize<I1jm8m1rh9e20v>;
    /**
     *Ensure that the a bulk of pre-images is upgraded.
     *
     *The caller pays no fee if at least 90% of pre-images were successfully updated.
     */
    "ensure_updated": Anonymize<I3o5j3bli1pd8e>;
}>;
export type I82nfqfkd48n10 = {
    "bytes": Binary;
};
export type I3o5j3bli1pd8e = {
    "hashes": Anonymize<Ic5m5lp1oioo8r>;
};
export type I1jeo0dpbkma5g = AnonymousEnum<{
    /**
     *Report authority equivocation/misbehavior. This method will verify
     *the equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence will
     *be reported.
     */
    "report_equivocation": Anonymize<I50ppnqasq4tjq>;
    /**
     *Report authority equivocation/misbehavior. This method will verify
     *the equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence will
     *be reported.
     *This extrinsic must be called unsigned and it is expected that only
     *block authors will call it (validated in `ValidateUnsigned`), as such
     *if the block author is defined it will be defined as the equivocation
     *reporter.
     */
    "report_equivocation_unsigned": Anonymize<I50ppnqasq4tjq>;
    /**
     *Plan an epoch config change. The epoch config change is recorded and will be enacted on
     *the next call to `enact_epoch_change`. The config will be activated one epoch after.
     *Multiple calls to this method will replace any existing planned config change that had
     *not been enacted yet.
     */
    "plan_config_change": Anonymize<I9fin09kkg0jaj>;
}>;
export type I50ppnqasq4tjq = {
    "equivocation_proof": Anonymize<I68ii5ik8avr9o>;
    "key_owner_proof": Anonymize<I3ia7aufsoj0l1>;
};
export type I68ii5ik8avr9o = {
    "offender": FixedSizeBinary<32>;
    "slot": bigint;
    "first_header": Anonymize<Ic952bubvq4k7d>;
    "second_header": Anonymize<Ic952bubvq4k7d>;
};
export type Ic952bubvq4k7d = {
    "parent_hash": FixedSizeBinary<32>;
    "number": number;
    "state_root": FixedSizeBinary<32>;
    "extrinsics_root": FixedSizeBinary<32>;
    "digest": Anonymize<I4mddgoa69c0a2>;
};
export type I3ia7aufsoj0l1 = {
    "session": number;
    "trie_nodes": Anonymize<Itom7fk49o0c9>;
    "validator_count": number;
};
export type I9fin09kkg0jaj = {
    "config": BabeDigestsNextConfigDescriptor;
};
export type I7d75gqfg6jh9c = AnonymousEnum<{
    /**
     *Set the current time.
     *
     *This call should be invoked exactly once per block. It will panic at the finalization
     *phase, if this call hasn't been invoked by that time.
     *
     *The timestamp should be greater than the previous one by the amount specified by
     *[`Config::MinimumPeriod`].
     *
     *The dispatch origin for this call must be _None_.
     *
     *This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware
     *that changing the complexity of this call could result exhausting the resources in a
     *block to execute any other calls.
     *
     *## Complexity
     *- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
     *- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in
     *  `on_finalize`)
     *- 1 event handler `on_timestamp_set`. Must be `O(1)`.
     */
    "set": Anonymize<Idcr6u6361oad9>;
}>;
export type Idcr6u6361oad9 = {
    "now": bigint;
};
export type I66vlm8f4l1oll = AnonymousEnum<{
    /**
     *Assign an previously unassigned index.
     *
     *Payment: `Deposit` is reserved from the sender account.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `index`: the index to be claimed. This must not be in use.
     *
     *Emits `IndexAssigned` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "claim": Anonymize<I666bl2fqjkejo>;
    /**
     *Assign an index already owned by the sender to another account. The balance reservation
     *is effectively transferred to the new account.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `index`: the index to be re-assigned. This must be owned by the sender.
     *- `new`: the new owner of the index. This function is a no-op if it is equal to sender.
     *
     *Emits `IndexAssigned` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "transfer": Anonymize<I6o1er683vod1j>;
    /**
     *Free up an index owned by the sender.
     *
     *Payment: Any previous deposit placed for the index is unreserved in the sender account.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must own the index.
     *
     *- `index`: the index to be freed. This must be owned by the sender.
     *
     *Emits `IndexFreed` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "free": Anonymize<I666bl2fqjkejo>;
    /**
     *Force an index to an account. This doesn't require a deposit. If the index is already
     *held, then any deposit is reimbursed to its current owner.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *- `index`: the index to be (re-)assigned.
     *- `new`: the new owner of the index. This function is a no-op if it is equal to sender.
     *- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.
     *
     *Emits `IndexAssigned` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "force_transfer": Anonymize<I5bq561t4gpfva>;
    /**
     *Freeze an index so it will always point to the sender account. This consumes the
     *deposit.
     *
     *The dispatch origin for this call must be _Signed_ and the signing account must have a
     *non-frozen account `index`.
     *
     *- `index`: the index to be frozen in place.
     *
     *Emits `IndexFrozen` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "freeze": Anonymize<I666bl2fqjkejo>;
}>;
export type I6o1er683vod1j = {
    "new": MultiAddress;
    "index": number;
};
export type MultiAddress = Enum<{
    "Id": SS58String;
    "Index": undefined;
    "Raw": Binary;
    "Address32": FixedSizeBinary<32>;
    "Address20": FixedSizeBinary<20>;
}>;
export declare const MultiAddress: GetEnum<MultiAddress>;
export type I5bq561t4gpfva = {
    "new": MultiAddress;
    "index": number;
    "freeze": boolean;
};
export type I9svldsp29mh87 = AnonymousEnum<{
    /**
     *Transfer some liquid free balance to another account.
     *
     *`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
     *If the sender's account is below the existential deposit as a result
     *of the transfer, the account will be reaped.
     *
     *The dispatch origin for this call must be `Signed` by the transactor.
     */
    "transfer_allow_death": Anonymize<I4ktuaksf5i1gk>;
    /**
     *Exactly as `transfer_allow_death`, except the origin must be root and the source account
     *may be specified.
     */
    "force_transfer": Anonymize<I9bqtpv2ii35mp>;
    /**
     *Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
     *kill the origin account.
     *
     *99% of the time you want [`transfer_allow_death`] instead.
     *
     *[`transfer_allow_death`]: struct.Pallet.html#method.transfer
     */
    "transfer_keep_alive": Anonymize<I4ktuaksf5i1gk>;
    /**
     *Transfer the entire transferable balance from the caller account.
     *
     *NOTE: This function only attempts to transfer _transferable_ balances. This means that
     *any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
     *transferred by this function. To ensure that this function results in a killed account,
     *you might need to prepare the account by removing any reference counters, storage
     *deposits, etc...
     *
     *The dispatch origin of this call must be Signed.
     *
     *- `dest`: The recipient of the transfer.
     *- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
     *  of the funds the account has, causing the sender account to be killed (false), or
     *  transfer everything except at least the existential deposit, which will guarantee to
     *  keep the sender account alive (true).
     */
    "transfer_all": Anonymize<I9j7pagd6d4bda>;
    /**
     *Unreserve some balance from a user by force.
     *
     *Can only be called by ROOT.
     */
    "force_unreserve": Anonymize<I2h9pmio37r7fb>;
    /**
     *Upgrade a specified account.
     *
     *- `origin`: Must be `Signed`.
     *- `who`: The account to be upgraded.
     *
     *This will waive the transaction fee if at least all but 10% of the accounts needed to
     *be upgraded. (We let some not have to be upgraded just in order to allow for the
     *possibility of churn).
     */
    "upgrade_accounts": Anonymize<Ibmr18suc9ikh9>;
    /**
     *Set the regular balance of a given account.
     *
     *The dispatch origin for this call is `root`.
     */
    "force_set_balance": Anonymize<I9iq22t0burs89>;
    /**
     *Adjust the total issuance in a saturating way.
     *
     *Can only be called by root and always needs a positive `delta`.
     *
     *# Example
     */
    "force_adjust_total_issuance": Anonymize<I5u8olqbbvfnvf>;
    /**
     *Burn the specified liquid free balance from the origin account.
     *
     *If the origin's account ends up below the existential deposit as a result
     *of the burn and `keep_alive` is false, the account will be reaped.
     *
     *Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
     *this `burn` operation will reduce total issuance by the amount _burned_.
     */
    "burn": Anonymize<I5utcetro501ir>;
}>;
export type I4ktuaksf5i1gk = {
    "dest": MultiAddress;
    "value": bigint;
};
export type I9bqtpv2ii35mp = {
    "source": MultiAddress;
    "dest": MultiAddress;
    "value": bigint;
};
export type I9j7pagd6d4bda = {
    "dest": MultiAddress;
    "keep_alive": boolean;
};
export type I2h9pmio37r7fb = {
    "who": MultiAddress;
    "amount": bigint;
};
export type Ibmr18suc9ikh9 = {
    "who": Anonymize<Ia2lhg7l2hilo3>;
};
export type I9iq22t0burs89 = {
    "who": MultiAddress;
    "new_free": bigint;
};
export type I5u8olqbbvfnvf = {
    "direction": BalancesAdjustmentDirection;
    "delta": bigint;
};
export type BalancesAdjustmentDirection = Enum<{
    "Increase": undefined;
    "Decrease": undefined;
}>;
export declare const BalancesAdjustmentDirection: GetEnum<BalancesAdjustmentDirection>;
export type I5utcetro501ir = {
    "value": bigint;
    "keep_alive": boolean;
};
export type I5jvuh9dlbdd20 = AnonymousEnum<{
    /**
     *Take the origin account as a stash and lock up `value` of its balance. `controller` will
     *be the account that controls it.
     *
     *`value` must be more than the `minimum_balance` specified by `T::Currency`.
     *
     *The dispatch origin for this call must be _Signed_ by the stash account.
     *
     *Emits `Bonded`.
     *## Complexity
     *- Independent of the arguments. Moderate complexity.
     *- O(1).
     *- Three extra DB entries.
     *
     *NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned
     *unless the `origin` falls below _existential deposit_ (or equal to 0) and gets removed
     *as dust.
     */
    "bond": Anonymize<I2eip8tc75dpje>;
    /**
     *Add some extra amount that have appeared in the stash `free_balance` into the balance up
     *for staking.
     *
     *The dispatch origin for this call must be _Signed_ by the stash, not the controller.
     *
     *Use this if there are additional funds in your stash account that you wish to bond.
     *Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose
     *any limitation on the amount that can be added.
     *
     *Emits `Bonded`.
     *
     *## Complexity
     *- Independent of the arguments. Insignificant complexity.
     *- O(1).
     */
    "bond_extra": Anonymize<I564va64vtidbq>;
    /**
     *Schedule a portion of the stash to be unlocked ready for transfer out after the bond
     *period ends. If this leaves an amount actively bonded less than
     *T::Currency::minimum_balance(), then it is increased to the full amount.
     *
     *The dispatch origin for this call must be _Signed_ by the controller, not the stash.
     *
     *Once the unlock period is done, you can call `withdraw_unbonded` to actually move
     *the funds out of management ready for transfer.
     *
     *No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)
     *can co-exists at the same time. If there are no unlocking chunks slots available
     *[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).
     *
     *If a user encounters the `InsufficientBond` error when calling this extrinsic,
     *they should call `chill` first in order to free up their bonded funds.
     *
     *Emits `Unbonded`.
     *
     *See also [`Call::withdraw_unbonded`].
     */
    "unbond": Anonymize<Ie5v6njpckr05b>;
    /**
     *Remove any unlocked chunks from the `unlocking` queue from our management.
     *
     *This essentially frees up that balance to be used by the stash account to do whatever
     *it wants.
     *
     *The dispatch origin for this call must be _Signed_ by the controller.
     *
     *Emits `Withdrawn`.
     *
     *See also [`Call::unbond`].
     *
     *## Parameters
     *
     *- `num_slashing_spans` indicates the number of metadata slashing spans to clear when
     *this call results in a complete removal of all the data related to the stash account.
     *In this case, the `num_slashing_spans` must be larger or equal to the number of
     *slashing spans associated with the stash account in the [`SlashingSpans`] storage type,
     *otherwise the call will fail. The call weight is directly proportional to
     *`num_slashing_spans`.
     *
     *## Complexity
     *O(S) where S is the number of slashing spans to remove
     *NOTE: Weight annotation is the kill scenario, we refund otherwise.
     */
    "withdraw_unbonded": Anonymize<I328av3j0bgmjb>;
    /**
     *Declare the desire to validate for the origin controller.
     *
     *Effects will be felt at the beginning of the next era.
     *
     *The dispatch origin for this call must be _Signed_ by the controller, not the stash.
     */
    "validate": Anonymize<I4tuqm9ato907i>;
    /**
     *Declare the desire to nominate `targets` for the origin controller.
     *
     *Effects will be felt at the beginning of the next era.
     *
     *The dispatch origin for this call must be _Signed_ by the controller, not the stash.
     *
     *## Complexity
     *- The transaction's complexity is proportional to the size of `targets` (N)
     *which is capped at CompactAssignments::LIMIT (T::MaxNominations).
     *- Both the reads and writes follow a similar pattern.
     */
    "nominate": Anonymize<Iagi89qt4h1lqg>;
    /**
     *Declare no desire to either validate or nominate.
     *
     *Effects will be felt at the beginning of the next era.
     *
     *The dispatch origin for this call must be _Signed_ by the controller, not the stash.
     *
     *## Complexity
     *- Independent of the arguments. Insignificant complexity.
     *- Contains one read.
     *- Writes are limited to the `origin` account key.
     */
    "chill": undefined;
    /**
     *(Re-)set the payment target for a controller.
     *
     *Effects will be felt instantly (as soon as this function is completed successfully).
     *
     *The dispatch origin for this call must be _Signed_ by the controller, not the stash.
     *
     *## Complexity
     *- O(1)
     *- Independent of the arguments. Insignificant complexity.
     *- Contains a limited number of reads.
     *- Writes are limited to the `origin` account key.
     *---------
     */
    "set_payee": Anonymize<I9dgmcnuamt5p8>;
    /**
     *(Re-)sets the controller of a stash to the stash itself. This function previously
     *accepted a `controller` argument to set the controller to an account other than the
     *stash itself. This functionality has now been removed, now only setting the controller
     *to the stash, if it is not already.
     *
     *Effects will be felt instantly (as soon as this function is completed successfully).
     *
     *The dispatch origin for this call must be _Signed_ by the stash, not the controller.
     *
     *## Complexity
     *O(1)
     *- Independent of the arguments. Insignificant complexity.
     *- Contains a limited number of reads.
     *- Writes are limited to the `origin` account key.
     */
    "set_controller": undefined;
    /**
     *Sets the ideal number of validators.
     *
     *The dispatch origin must be Root.
     *
     *## Complexity
     *O(1)
     */
    "set_validator_count": Anonymize<I3vh014cqgmrfd>;
    /**
     *Increments the ideal number of validators up to maximum of
     *`ElectionProviderBase::MaxWinners`.
     *
     *The dispatch origin must be Root.
     *
     *## Complexity
     *Same as [`Self::set_validator_count`].
     */
    "increase_validator_count": Anonymize<Ifhs60omlhvt3>;
    /**
     *Scale up the ideal number of validators by a factor up to maximum of
     *`ElectionProviderBase::MaxWinners`.
     *
     *The dispatch origin must be Root.
     *
     *## Complexity
     *Same as [`Self::set_validator_count`].
     */
    "scale_validator_count": Anonymize<If34udpd5e57vi>;
    /**
     *Force there to be no new eras indefinitely.
     *
     *The dispatch origin must be Root.
     *
     *# Warning
     *
     *The election process starts multiple blocks before the end of the era.
     *Thus the election process may be ongoing when this is called. In this case the
     *election will continue until the next era is triggered.
     *
     *## Complexity
     *- No arguments.
     *- Weight: O(1)
     */
    "force_no_eras": undefined;
    /**
     *Force there to be a new era at the end of the next session. After this, it will be
     *reset to normal (non-forced) behaviour.
     *
     *The dispatch origin must be Root.
     *
     *# Warning
     *
     *The election process starts multiple blocks before the end of the era.
     *If this is called just before a new era is triggered, the election process may not
     *have enough blocks to get a result.
     *
     *## Complexity
     *- No arguments.
     *- Weight: O(1)
     */
    "force_new_era": undefined;
    /**
     *Set the validators who cannot be slashed (if any).
     *
     *The dispatch origin must be Root.
     */
    "set_invulnerables": Anonymize<I39t01nnod9109>;
    /**
     *Force a current staker to become completely unstaked, immediately.
     *
     *The dispatch origin must be Root.
     *
     *## Parameters
     *
     *- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more
     *details.
     */
    "force_unstake": Anonymize<Ie5vbnd9198quk>;
    /**
     *Force there to be a new era at the end of sessions indefinitely.
     *
     *The dispatch origin must be Root.
     *
     *# Warning
     *
     *The election process starts multiple blocks before the end of the era.
     *If this is called just before a new era is triggered, the election process may not
     *have enough blocks to get a result.
     */
    "force_new_era_always": undefined;
    /**
     *Cancel enactment of a deferred slash.
     *
     *Can be called by the `T::AdminOrigin`.
     *
     *Parameters: era and indices of the slashes for that era to kill.
     */
    "cancel_deferred_slash": Anonymize<I3h6murn8bd4v5>;
    /**
     *Pay out next page of the stakers behind a validator for the given era.
     *
     *- `validator_stash` is the stash account of the validator.
     *- `era` may be any era between `[current_era - history_depth; current_era]`.
     *
     *The origin of this call must be _Signed_. Any account can call this function, even if
     *it is not one of the stakers.
     *
     *The reward payout could be paged in case there are too many nominators backing the
     *`validator_stash`. This call will payout unpaid pages in an ascending order. To claim a
     *specific page, use `payout_stakers_by_page`.`
     *
     *If all pages are claimed, it returns an error `InvalidPage`.
     */
    "payout_stakers": Anonymize<I6k6jf8ncesuu3>;
    /**
     *Rebond a portion of the stash scheduled to be unlocked.
     *
     *The dispatch origin must be signed by the controller.
     *
     *## Complexity
     *- Time complexity: O(L), where L is unlocking chunks
     *- Bounded by `MaxUnlockingChunks`.
     */
    "rebond": Anonymize<Ie5v6njpckr05b>;
    /**
     *Remove all data structures concerning a staker/stash once it is at a state where it can
     *be considered `dust` in the staking system. The requirements are:
     *
     *1. the `total_balance` of the stash is below existential deposit.
     *2. or, the `ledger.total` of the stash is below existential deposit.
     *3. or, existential deposit is zero and either `total_balance` or `ledger.total` is zero.
     *
     *The former can happen in cases like a slash; the latter when a fully unbonded account
     *is still receiving staking rewards in `RewardDestination::Staked`.
     *
     *It can be called by anyone, as long as `stash` meets the above requirements.
     *
     *Refunds the transaction fees upon successful execution.
     *
     *## Parameters
     *
     *- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more
     *details.
     */
    "reap_stash": Anonymize<Ie5vbnd9198quk>;
    /**
     *Remove the given nominations from the calling validator.
     *
     *Effects will be felt at the beginning of the next era.
     *
     *The dispatch origin for this call must be _Signed_ by the controller, not the stash.
     *
     *- `who`: A list of nominator stash accounts who are nominating this validator which
     *  should no longer be nominating this validator.
     *
     *Note: Making this call only makes sense if you first set the validator preferences to
     *block any further nominations.
     */
    "kick": Anonymize<I3qhk481i120pk>;
    /**
     *Update the various staking configurations .
     *
     ** `min_nominator_bond`: The minimum active bond needed to be a nominator.
     ** `min_validator_bond`: The minimum active bond needed to be a validator.
     ** `max_nominator_count`: The max number of users who can be a nominator at once. When
     *  set to `None`, no limit is enforced.
     ** `max_validator_count`: The max number of users who can be a validator at once. When
     *  set to `None`, no limit is enforced.
     ** `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which
     *  should be filled in order for the `chill_other` transaction to work.
     ** `min_commission`: The minimum amount of commission that each validators must maintain.
     *  This is checked only upon calling `validate`. Existing validators are not affected.
     *
     *RuntimeOrigin must be Root to call this function.
     *
     *NOTE: Existing nominators and validators will not be affected by this update.
     *to kick people under the new limits, `chill_other` should be called.
     */
    "set_staking_configs": Anonymize<If1qr0kbbl298c>;
    /**
     *Declare a `controller` to stop participating as either a validator or nominator.
     *
     *Effects will be felt at the beginning of the next era.
     *
     *The dispatch origin for this call must be _Signed_, but can be called by anyone.
     *
     *If the caller is the same as the controller being targeted, then no further checks are
     *enforced, and this function behaves just like `chill`.
     *
     *If the caller is different than the controller being targeted, the following conditions
     *must be met:
     *
     ** `controller` must belong to a nominator who has become non-decodable,
     *
     *Or:
     *
     ** A `ChillThreshold` must be set and checked which defines how close to the max
     *  nominators or validators we must reach before users can start chilling one-another.
     ** A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine
     *  how close we are to the threshold.
     ** A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines
     *  if this is a person that should be chilled because they have not met the threshold
     *  bond required.
     *
     *This can be helpful if bond requirements are updated, and we need to remove old users
     *who do not satisfy these requirements.
     */
    "chill_other": Anonymize<Idl3umm12u5pa>;
    /**
     *Force a validator to have at least the minimum commission. This will not affect a
     *validator who already has a commission greater than or equal to the minimum. Any account
     *can call this.
     */
    "force_apply_min_commission": Anonymize<I5ont0141q9ss5>;
    /**
     *Sets the minimum amount of commission that each validators must maintain.
     *
     *This call has lower privilege requirements than `set_staking_config` and can be called
     *by the `T::AdminOrigin`. Root can always call this.
     */
    "set_min_commission": Anonymize<I3vh014cqgmrfd>;
    /**
     *Pay out a page of the stakers behind a validator for the given era and page.
     *
     *- `validator_stash` is the stash account of the validator.
     *- `era` may be any era between `[current_era - history_depth; current_era]`.
     *- `page` is the page index of nominators to pay out with value between 0 and
     *  `num_nominators / T::MaxExposurePageSize`.
     *
     *The origin of this call must be _Signed_. Any account can call this function, even if
     *it is not one of the stakers.
     *
     *If a validator has more than [`Config::MaxExposurePageSize`] nominators backing
     *them, then the list of nominators is paged, with each page being capped at
     *[`Config::MaxExposurePageSize`.] If a validator has more than one page of nominators,
     *the call needs to be made for each page separately in order for all the nominators
     *backing a validator to receive the reward. The nominators are not sorted across pages
     *and so it should not be assumed the highest staker would be on the topmost page and vice
     *versa. If rewards are not claimed in [`Config::HistoryDepth`] eras, they are lost.
     */
    "payout_stakers_by_page": Anonymize<Ie6j49utvii126>;
    /**
     *Migrates an account's `RewardDestination::Controller` to
     *`RewardDestination::Account(controller)`.
     *
     *Effects will be felt instantly (as soon as this function is completed successfully).
     *
     *This will waive the transaction fee if the `payee` is successfully migrated.
     */
    "update_payee": Anonymize<I3v6ks33uluhnj>;
    /**
     *Updates a batch of controller accounts to their corresponding stash account if they are
     *not the same. Ignores any controller accounts that do not exist, and does not operate if
     *the stash and controller are already the same.
     *
     *Effects will be felt instantly (as soon as this function is completed successfully).
     *
     *The dispatch origin must be `T::AdminOrigin`.
     */
    "deprecate_controller_batch": Anonymize<I3kiiim1cds68i>;
    /**
     *Restores the state of a ledger which is in an inconsistent state.
     *
     *The requirements to restore a ledger are the following:
     ** The stash is bonded; or
     ** The stash is not bonded but it has a staking lock left behind; or
     ** If the stash has an associated ledger and its state is inconsistent; or
     ** If the ledger is not corrupted *but* its staking lock is out of sync.
     *
     *The `maybe_*` input parameters will overwrite the corresponding data and metadata of the
     *ledger associated with the stash. If the input parameters are not set, the ledger will
     *be reset values from on-chain state.
     */
    "restore_ledger": Anonymize<I4k60mkh2r6jjg>;
}>;
export type I2eip8tc75dpje = {
    "value": bigint;
    "payee": StakingRewardDestination;
};
export type I564va64vtidbq = {
    "max_additional": bigint;
};
export type I328av3j0bgmjb = {
    "num_slashing_spans": number;
};
export type I4tuqm9ato907i = {
    "prefs": Anonymize<I9o7ssi9vmhmgr>;
};
export type Iagi89qt4h1lqg = {
    "targets": Anonymize<I28gn91b2ttnbk>;
};
export type I28gn91b2ttnbk = Array<MultiAddress>;
export type I9dgmcnuamt5p8 = {
    "payee": StakingRewardDestination;
};
export type I3vh014cqgmrfd = {
    "new": number;
};
export type Ifhs60omlhvt3 = {
    "additional": number;
};
export type If34udpd5e57vi = {
    "factor": number;
};
export type I39t01nnod9109 = {
    "invulnerables": Anonymize<Ia2lhg7l2hilo3>;
};
export type Ie5vbnd9198quk = {
    "stash": SS58String;
    "num_slashing_spans": number;
};
export type I3h6murn8bd4v5 = {
    "era": number;
    "slash_indices": Anonymize<Icgljjb6j82uhn>;
};
export type I6k6jf8ncesuu3 = {
    "validator_stash": SS58String;
    "era": number;
};
export type I3qhk481i120pk = {
    "who": Anonymize<I28gn91b2ttnbk>;
};
export type If1qr0kbbl298c = {
    "min_nominator_bond": StakingPalletConfigOpBig;
    "min_validator_bond": StakingPalletConfigOpBig;
    "max_nominator_count": StakingPalletConfigOp;
    "max_validator_count": StakingPalletConfigOp;
    "chill_threshold": StakingPalletConfigOp;
    "min_commission": StakingPalletConfigOp;
    "max_staked_rewards": StakingPalletConfigOp;
};
export type StakingPalletConfigOpBig = Enum<{
    "Noop": undefined;
    "Set": bigint;
    "Remove": undefined;
}>;
export declare const StakingPalletConfigOpBig: GetEnum<StakingPalletConfigOpBig>;
export type StakingPalletConfigOp = Enum<{
    "Noop": undefined;
    "Set": number;
    "Remove": undefined;
}>;
export declare const StakingPalletConfigOp: GetEnum<StakingPalletConfigOp>;
export type I5ont0141q9ss5 = {
    "validator_stash": SS58String;
};
export type Ie6j49utvii126 = {
    "validator_stash": SS58String;
    "era": number;
    "page": number;
};
export type I3v6ks33uluhnj = {
    "controller": SS58String;
};
export type I3kiiim1cds68i = {
    "controllers": Anonymize<Ia2lhg7l2hilo3>;
};
export type I4k60mkh2r6jjg = {
    "stash": SS58String;
    "maybe_controller"?: Anonymize<Ihfphjolmsqq1>;
    "maybe_total"?: Anonymize<I35p85j063s0il>;
    "maybe_unlocking"?: Anonymize<I7m7tbddr7qika>;
};
export type I7m7tbddr7qika = (Anonymize<I9nc4v1upo2c8e>) | undefined;
export type Iceajactc9a8pc = AnonymousEnum<{
    /**
     *Sets the session key(s) of the function caller to `keys`.
     *Allows an account to set its session key prior to becoming a validator.
     *This doesn't take effect until the next session.
     *
     *The dispatch origin of this function must be signed.
     *
     *## Complexity
     *- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
     *  fixed.
     */
    "set_keys": Anonymize<I5oi8saufice6j>;
    /**
     *Removes any session key(s) of the function caller.
     *
     *This doesn't take effect until the next session.
     *
     *The dispatch origin of this function must be Signed and the account must be either be
     *convertible to a validator ID using the chain's typical addressing system (this usually
     *means being a controller account) or directly convertible into a validator ID (which
     *usually means being a stash account).
     *
     *## Complexity
     *- `O(1)` in number of key types. Actual cost depends on the number of length of
     *  `T::Keys::key_ids()` which is fixed.
     */
    "purge_keys": undefined;
}>;
export type I5oi8saufice6j = {
    "keys": Anonymize<I9kr8cseidc66h>;
    "proof": Binary;
};
export type I5u9ggmn8umfqm = AnonymousEnum<{
    /**
     *Report voter equivocation/misbehavior. This method will verify the
     *equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence
     *will be reported.
     */
    "report_equivocation": Anonymize<I7ne83r38c2sqq>;
    /**
     *Report voter equivocation/misbehavior. This method will verify the
     *equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence
     *will be reported.
     *
     *This extrinsic must be called unsigned and it is expected that only
     *block authors will call it (validated in `ValidateUnsigned`), as such
     *if the block author is defined it will be defined as the equivocation
     *reporter.
     */
    "report_equivocation_unsigned": Anonymize<I7ne83r38c2sqq>;
    /**
     *Note that the current authority set of the GRANDPA finality gadget has stalled.
     *
     *This will trigger a forced authority set change at the beginning of the next session, to
     *be enacted `delay` blocks after that. The `delay` should be high enough to safely assume
     *that the block signalling the forced change will not be re-orged e.g. 1000 blocks.
     *The block production rate (which may be slowed down because of finality lagging) should
     *be taken into account when choosing the `delay`. The GRANDPA voters based on the new
     *authority will start voting on top of `best_finalized_block_number` for new finalized
     *blocks. `best_finalized_block_number` should be the highest of the latest finalized
     *block of all validators of the new authority set.
     *
     *Only callable by root.
     */
    "note_stalled": Anonymize<I2hviml3snvhhn>;
}>;
export type I7ne83r38c2sqq = {
    "equivocation_proof": Anonymize<I9puqgoda8ofk4>;
    "key_owner_proof": Anonymize<I3ia7aufsoj0l1>;
};
export type I9puqgoda8ofk4 = {
    "set_id": bigint;
    "equivocation": GrandpaEquivocation;
};
export type GrandpaEquivocation = Enum<{
    "Prevote": Anonymize<Iffg6i636v53qr>;
    "Precommit": Anonymize<Iffg6i636v53qr>;
}>;
export declare const GrandpaEquivocation: GetEnum<GrandpaEquivocation>;
export type Iffg6i636v53qr = {
    "round_number": bigint;
    "identity": FixedSizeBinary<32>;
    "first": Anonymize<Iam04b2ivtl2nh>;
    "second": Anonymize<Iam04b2ivtl2nh>;
};
export type Iam04b2ivtl2nh = [Anonymize<I8e06chr1md241>, FixedSizeBinary<64>];
export type I8e06chr1md241 = {
    "target_hash": FixedSizeBinary<32>;
    "target_number": number;
};
export type I2hviml3snvhhn = {
    "delay": number;
    "best_finalized_block_number": number;
};
export type I1s28h18nhih63 = AnonymousEnum<{
    /**
     *Propose and approve a spend of treasury funds.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.
     *
     *### Details
     *NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the
     *beneficiary.
     *
     *### Parameters
     *- `amount`: The amount to be transferred from the treasury to the `beneficiary`.
     *- `beneficiary`: The destination account for the transfer.
     *
     *## Events
     *
     *Emits [`Event::SpendApproved`] if successful.
     */
    "spend_local": Anonymize<Icnrv1mfbd3in1>;
    /**
     *Force a previously approved proposal to be removed from the approval queue.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::RejectOrigin`].
     *
     *## Details
     *
     *The original deposit will no longer be returned.
     *
     *### Parameters
     *- `proposal_id`: The index of a proposal
     *
     *### Complexity
     *- O(A) where `A` is the number of approvals
     *
     *### Errors
     *- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the
     *  approval queue, i.e., the proposal has not been approved. This could also mean the
     *  proposal does not exist altogether, thus there is no way it would have been approved
     *  in the first place.
     */
    "remove_approval": Anonymize<Icm9m0qeemu66d>;
    /**
     *Propose and approve a spend of treasury funds.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::SpendOrigin`] with the `Success` value being at least
     *`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted
     *for assertion using the [`Config::BalanceConverter`].
     *
     *## Details
     *
     *Create an approved spend for transferring a specific `amount` of `asset_kind` to a
     *designated beneficiary. The spend must be claimed using the `payout` dispatchable within
     *the [`Config::PayoutPeriod`].
     *
     *### Parameters
     *- `asset_kind`: An indicator of the specific asset class to be spent.
     *- `amount`: The amount to be transferred from the treasury to the `beneficiary`.
     *- `beneficiary`: The beneficiary of the spend.
     *- `valid_from`: The block number from which the spend can be claimed. It can refer to
     *  the past if the resulting spend has not yet expired according to the
     *  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after
     *  approval.
     *
     *## Events
     *
     *Emits [`Event::AssetSpendApproved`] if successful.
     */
    "spend": Anonymize<Ibv74ul0c0qf0f>;
    /**
     *Claim a spend.
     *
     *## Dispatch Origin
     *
     *Must be signed
     *
     *## Details
     *
     *Spends must be claimed within some temporal bounds. A spend may be claimed within one
     *[`Config::PayoutPeriod`] from the `valid_from` block.
     *In case of a payout failure, the spend status must be updated with the `check_status`
     *dispatchable before retrying with the current function.
     *
     *### Parameters
     *- `index`: The spend index.
     *
     *## Events
     *
     *Emits [`Event::Paid`] if successful.
     */
    "payout": Anonymize<I666bl2fqjkejo>;
    /**
     *Check the status of the spend and remove it from the storage if processed.
     *
     *## Dispatch Origin
     *
     *Must be signed.
     *
     *## Details
     *
     *The status check is a prerequisite for retrying a failed payout.
     *If a spend has either succeeded or expired, it is removed from the storage by this
     *function. In such instances, transaction fees are refunded.
     *
     *### Parameters
     *- `index`: The spend index.
     *
     *## Events
     *
     *Emits [`Event::PaymentFailed`] if the spend payout has failed.
     *Emits [`Event::SpendProcessed`] if the spend payout has succeed.
     */
    "check_status": Anonymize<I666bl2fqjkejo>;
    /**
     *Void previously approved spend.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::RejectOrigin`].
     *
     *## Details
     *
     *A spend void is only possible if the payout has not been attempted yet.
     *
     *### Parameters
     *- `index`: The spend index.
     *
     *## Events
     *
     *Emits [`Event::AssetSpendVoided`] if successful.
     */
    "void_spend": Anonymize<I666bl2fqjkejo>;
}>;
export type Icnrv1mfbd3in1 = {
    "amount": bigint;
    "beneficiary": MultiAddress;
};
export type Icm9m0qeemu66d = {
    "proposal_id": number;
};
export type Ibv74ul0c0qf0f = {
    "asset_kind": VersionedLocatableAsset;
    "amount": bigint;
    "beneficiary": XcmVersionedLocation;
    "valid_from"?: Anonymize<I4arjljr6dpflb>;
};
export type Ie5kd08tutk56t = AnonymousEnum<{
    /**
     *Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
     *otherwise it is a vote to keep the status quo.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `poll_index`: The index of the poll to vote for.
     *- `vote`: The vote configuration.
     *
     *Weight: `O(R)` where R is the number of polls the voter has voted on.
     */
    "vote": Anonymize<Idnsr2pndm36h0>;
    /**
     *Delegate the voting power (with some given conviction) of the sending account for a
     *particular class of polls.
     *
     *The balance delegated is locked for as long as it's delegated, and thereafter for the
     *time appropriate for the conviction's lock period.
     *
     *The dispatch origin of this call must be _Signed_, and the signing account must either:
     *  - be delegating already; or
     *  - have no voting activity (if there is, then it will need to be removed through
     *    `remove_vote`).
     *
     *- `to`: The account whose voting the `target` account's voting power will follow.
     *- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls
     *  to this function are required.
     *- `conviction`: The conviction that will be attached to the delegated votes. When the
     *  account is undelegated, the funds will be locked for the corresponding period.
     *- `balance`: The amount of the account's balance to be used in delegating. This must not
     *  be more than the account's current balance.
     *
     *Emits `Delegated`.
     *
     *Weight: `O(R)` where R is the number of polls the voter delegating to has
     *  voted on. Weight is initially charged as if maximum votes, but is refunded later.
     */
    "delegate": Anonymize<Ia1pvdcbhuqf8m>;
    /**
     *Undelegate the voting power of the sending account for a particular class of polls.
     *
     *Tokens may be unlocked following once an amount of time consistent with the lock period
     *of the conviction with which the delegation was issued has passed.
     *
     *The dispatch origin of this call must be _Signed_ and the signing account must be
     *currently delegating.
     *
     *- `class`: The class of polls to remove the delegation from.
     *
     *Emits `Undelegated`.
     *
     *Weight: `O(R)` where R is the number of polls the voter delegating to has
     *  voted on. Weight is initially charged as if maximum votes, but is refunded later.
     */
    "undelegate": Anonymize<I8steo882k7qns>;
    /**
     *Remove the lock caused by prior voting/delegating which has expired within a particular
     *class.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `class`: The class of polls to unlock.
     *- `target`: The account to remove the lock on.
     *
     *Weight: `O(R)` with R number of vote of target.
     */
    "unlock": Anonymize<I4pa4q37gj6fua>;
    /**
     *Remove a vote for a poll.
     *
     *If:
     *- the poll was cancelled, or
     *- the poll is ongoing, or
     *- the poll has ended such that
     *  - the vote of the account was in opposition to the result; or
     *  - there was no conviction to the account's vote; or
     *  - the account made a split vote
     *...then the vote is removed cleanly and a following call to `unlock` may result in more
     *funds being available.
     *
     *If, however, the poll has ended and:
     *- it finished corresponding to the vote of the account, and
     *- the account made a standard vote with conviction, and
     *- the lock period of the conviction is not over
     *...then the lock will be aggregated into the overall account's lock, which may involve
     **overlocking* (where the two locks are combined into a single lock that is the maximum
     *of both the amount locked and the time is it locked for).
     *
     *The dispatch origin of this call must be _Signed_, and the signer must have a vote
     *registered for poll `index`.
     *
     *- `index`: The index of poll of the vote to be removed.
     *- `class`: Optional parameter, if given it indicates the class of the poll. For polls
     *  which have finished or are cancelled, this must be `Some`.
     *
     *Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
     *  Weight is calculated for the maximum number of vote.
     */
    "remove_vote": Anonymize<I5f178ab6b89t3>;
    /**
     *Remove a vote for a poll.
     *
     *If the `target` is equal to the signer, then this function is exactly equivalent to
     *`remove_vote`. If not equal to the signer, then the vote must have expired,
     *either because the poll was cancelled, because the voter lost the poll or
     *because the conviction period is over.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `target`: The account of the vote to be removed; this account must have voted for poll
     *  `index`.
     *- `index`: The index of poll of the vote to be removed.
     *- `class`: The class of the poll.
     *
     *Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
     *  Weight is calculated for the maximum number of vote.
     */
    "remove_other_vote": Anonymize<I4nakhtbsk3c5s>;
}>;
export type Idnsr2pndm36h0 = {
    "poll_index": number;
    "vote": ConvictionVotingVoteAccountVote;
};
export type Ia1pvdcbhuqf8m = {
    "class": number;
    "to": MultiAddress;
    "conviction": VotingConviction;
    "balance": bigint;
};
export type I8steo882k7qns = {
    "class": number;
};
export type I4pa4q37gj6fua = {
    "class": number;
    "target": MultiAddress;
};
export type I5f178ab6b89t3 = {
    "class"?: Anonymize<I4arjljr6dpflb>;
    "index": number;
};
export type I4nakhtbsk3c5s = {
    "target": MultiAddress;
    "class": number;
    "index": number;
};
export type I657vbelok0a1m = AnonymousEnum<{
    /**
     *Propose a referendum on a privileged action.
     *
     *- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
     *  available.
     *- `proposal_origin`: The origin from which the proposal should be executed.
     *- `proposal`: The proposal.
     *- `enactment_moment`: The moment that the proposal should be enacted.
     *
     *Emits `Submitted`.
     */
    "submit": Anonymize<Ici1c3ahlkpcj1>;
    /**
     *Post the Decision Deposit for a referendum.
     *
     *- `origin`: must be `Signed` and the account must have funds available for the
     *  referendum's track's Decision Deposit.
     *- `index`: The index of the submitted referendum whose Decision Deposit is yet to be
     *  posted.
     *
     *Emits `DecisionDepositPlaced`.
     */
    "place_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Refund the Decision Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Decision Deposit has not yet been
     *  refunded.
     *
     *Emits `DecisionDepositRefunded`.
     */
    "refund_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum.
     *
     *- `origin`: must be the `CancelOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Cancelled`.
     */
    "cancel": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum and slash the deposits.
     *
     *- `origin`: must be the `KillOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Killed` and `DepositSlashed`.
     */
    "kill": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a referendum onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `index`: the referendum to be advanced.
     */
    "nudge_referendum": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a track onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `track`: the track to be advanced.
     *
     *Action item for when there is now one fewer referendum in the deciding phase and the
     *`DecidingCount` is not yet updated. This means that we should either:
     *- begin deciding another referendum (and leave `DecidingCount` alone); or
     *- decrement `DecidingCount`.
     */
    "one_fewer_deciding": Anonymize<Icbio0e1f0034b>;
    /**
     *Refund the Submission Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Submission Deposit has not yet been
     *  refunded.
     *
     *Emits `SubmissionDepositRefunded`.
     */
    "refund_submission_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Set or clear metadata of a referendum.
     *
     *Parameters:
     *- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
     *  metadata of a finished referendum.
     *- `index`:  The index of a referendum to set or clear metadata for.
     *- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
     */
    "set_metadata": Anonymize<I8c0vkqjjipnuj>;
}>;
export type Ici1c3ahlkpcj1 = {
    "proposal_origin": PolkadotRuntimeOriginCaller;
    "proposal": PreimagesBounded;
    "enactment_moment": TraitsScheduleDispatchTime;
};
export type Icbio0e1f0034b = {
    "track": number;
};
export type I8c0vkqjjipnuj = {
    "index": number;
    "maybe_hash"?: Anonymize<I4s6vifaf8k998>;
};
export type Ir5tebvkvev7j = AnonymousEnum<{
    "whitelist_call": Anonymize<I1adbcfi5uc62r>;
    "remove_whitelisted_call": Anonymize<I1adbcfi5uc62r>;
    "dispatch_whitelisted_call": Anonymize<Ibf6ucefn8fh49>;
    "dispatch_whitelisted_call_with_preimage": Anonymize<Ia3t3mgu5tdpfj>;
}>;
export type Ibf6ucefn8fh49 = {
    "call_hash": FixedSizeBinary<32>;
    "call_encoded_len": number;
    "call_weight_witness": Anonymize<I4q39t5hn830vp>;
};
export type Ia3t3mgu5tdpfj = {
    "call": TxCallData;
};
export type Id0dj18ct09hlp = AnonymousEnum<{
    /**
     *Make a claim to collect your DOTs.
     *
     *The dispatch origin for this call must be _None_.
     *
     *Unsigned Validation:
     *A call to claim is deemed valid if the signature provided matches
     *the expected signed message of:
     *
     *> Ethereum Signed Message:
     *> (configured prefix string)(address)
     *
     *and `address` matches the `dest` account.
     *
     *Parameters:
     *- `dest`: The destination account to payout the claim.
     *- `ethereum_signature`: The signature of an ethereum signed message matching the format
     *  described above.
     *
     *<weight>
     *The weight of this call is invariant over the input parameters.
     *Weight includes logic to validate unsigned `claim` call.
     *
     *Total Complexity: O(1)
     *</weight>
     */
    "claim": Anonymize<I6uag8j5aql8q>;
    /**
     *Mint a new claim to collect DOTs.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *Parameters:
     *- `who`: The Ethereum address allowed to collect this claim.
     *- `value`: The number of DOTs that will be claimed.
     *- `vesting_schedule`: An optional vesting schedule for these DOTs.
     *
     *<weight>
     *The weight of this call is invariant over the input parameters.
     *We assume worst case that both vesting and statement is being inserted.
     *
     *Total Complexity: O(1)
     *</weight>
     */
    "mint_claim": Anonymize<Isq3k9rh2c0l4>;
    /**
     *Make a claim to collect your DOTs by signing a statement.
     *
     *The dispatch origin for this call must be _None_.
     *
     *Unsigned Validation:
     *A call to `claim_attest` is deemed valid if the signature provided matches
     *the expected signed message of:
     *
     *> Ethereum Signed Message:
     *> (configured prefix string)(address)(statement)
     *
     *and `address` matches the `dest` account; the `statement` must match that which is
     *expected according to your purchase arrangement.
     *
     *Parameters:
     *- `dest`: The destination account to payout the claim.
     *- `ethereum_signature`: The signature of an ethereum signed message matching the format
     *  described above.
     *- `statement`: The identity of the statement which is being attested to in the
     *  signature.
     *
     *<weight>
     *The weight of this call is invariant over the input parameters.
     *Weight includes logic to validate unsigned `claim_attest` call.
     *
     *Total Complexity: O(1)
     *</weight>
     */
    "claim_attest": Anonymize<I1dqiovk0tpoah>;
    /**
     *Attest to a statement, needed to finalize the claims process.
     *
     *WARNING: Insecure unless your chain includes `PrevalidateAttests` as a
     *`SignedExtension`.
     *
     *Unsigned Validation:
     *A call to attest is deemed valid if the sender has a `Preclaim` registered
     *and provides a `statement` which is expected for the account.
     *
     *Parameters:
     *- `statement`: The identity of the statement which is being attested to in the
     *  signature.
     *
     *<weight>
     *The weight of this call is invariant over the input parameters.
     *Weight includes logic to do pre-validation on `attest` call.
     *
     *Total Complexity: O(1)
     *</weight>
     */
    "attest": Anonymize<I1ntko0oih7v1a>;
    "move_claim": Anonymize<I2tf5qmg09624f>;
}>;
export type I6uag8j5aql8q = {
    "dest": SS58String;
    "ethereum_signature": FixedSizeBinary<65>;
};
export type Isq3k9rh2c0l4 = {
    "who": FixedSizeBinary<20>;
    "value": bigint;
    "vesting_schedule"?: Anonymize<I70kqehrkegc98>;
    "statement"?: Anonymize<I6sveo21kq8jed>;
};
export type I70kqehrkegc98 = (Anonymize<I2phecamkn3pej>) | undefined;
export type I6sveo21kq8jed = (ClaimsStatementKind) | undefined;
export type I1dqiovk0tpoah = {
    "dest": SS58String;
    "ethereum_signature": FixedSizeBinary<65>;
    "statement": Binary;
};
export type I1ntko0oih7v1a = {
    "statement": Binary;
};
export type I2tf5qmg09624f = {
    "old": FixedSizeBinary<20>;
    "new": FixedSizeBinary<20>;
    "maybe_preclaim"?: Anonymize<Ihfphjolmsqq1>;
};
export type Icgf8vmtkbnu4u = AnonymousEnum<{
    /**
     *Unlock any vested funds of the sender account.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have funds still
     *locked under this pallet.
     *
     *Emits either `VestingCompleted` or `VestingUpdated`.
     *
     *## Complexity
     *- `O(1)`.
     */
    "vest": undefined;
    /**
     *Unlock any vested funds of a `target` account.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `target`: The account whose vested funds should be unlocked. Must have funds still
     *locked under this pallet.
     *
     *Emits either `VestingCompleted` or `VestingUpdated`.
     *
     *## Complexity
     *- `O(1)`.
     */
    "vest_other": Anonymize<Id9uqtigc0il3v>;
    /**
     *Create a vested transfer.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `target`: The account receiving the vested funds.
     *- `schedule`: The vesting schedule attached to the transfer.
     *
     *Emits `VestingCreated`.
     *
     *NOTE: This will unlock all schedules through the current block.
     *
     *## Complexity
     *- `O(1)`.
     */
    "vested_transfer": Anonymize<Iaa2o6cgjdpdn5>;
    /**
     *Force a vested transfer.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *- `source`: The account whose funds should be transferred.
     *- `target`: The account that should be transferred the vested funds.
     *- `schedule`: The vesting schedule attached to the transfer.
     *
     *Emits `VestingCreated`.
     *
     *NOTE: This will unlock all schedules through the current block.
     *
     *## Complexity
     *- `O(1)`.
     */
    "force_vested_transfer": Anonymize<Iam6hrl7ptd85l>;
    /**
     *Merge two vesting schedules together, creating a new vesting schedule that unlocks over
     *the highest possible start and end blocks. If both schedules have already started the
     *current block will be used as the schedule start; with the caveat that if one schedule
     *is finished by the current block, the other will be treated as the new merged schedule,
     *unmodified.
     *
     *NOTE: If `schedule1_index == schedule2_index` this is a no-op.
     *NOTE: This will unlock all schedules through the current block prior to merging.
     *NOTE: If both schedules have ended by the current block, no new schedule will be created
     *and both will be removed.
     *
     *Merged schedule attributes:
     *- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
     *  current_block)`.
     *- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
     *- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `schedule1_index`: index of the first schedule to merge.
     *- `schedule2_index`: index of the second schedule to merge.
     */
    "merge_schedules": Anonymize<Ict9ivhr2c5hv0>;
    /**
     *Force remove a vesting schedule
     *
     *The dispatch origin for this call must be _Root_.
     *
     *- `target`: An account that has a vesting schedule
     *- `schedule_index`: The vesting schedule index that should be removed
     */
    "force_remove_vesting_schedule": Anonymize<I8t4vv03357lk9>;
}>;
export type Id9uqtigc0il3v = {
    "target": MultiAddress;
};
export type Iaa2o6cgjdpdn5 = {
    "target": MultiAddress;
    "schedule": Anonymize<I4aro1m78pdrtt>;
};
export type Iam6hrl7ptd85l = {
    "source": MultiAddress;
    "target": MultiAddress;
    "schedule": Anonymize<I4aro1m78pdrtt>;
};
export type Ict9ivhr2c5hv0 = {
    "schedule1_index": number;
    "schedule2_index": number;
};
export type I8t4vv03357lk9 = {
    "target": MultiAddress;
    "schedule_index": number;
};
export type I75dqej8vfnpfi = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<I3gjjd2kmfr3gt>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<I7ldb57uu6q3lg>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<I3gjjd2kmfr3gt>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<Ib0q6775t6mpca>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<I3gjjd2kmfr3gt>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<I3a88i85ltnt0b>;
}>;
export type I3gjjd2kmfr3gt = {
    "calls": Anonymize<I1eici629sksra>;
};
export type I1eici629sksra = Array<TxCallData>;
export type I7ldb57uu6q3lg = {
    "index": number;
    "call": TxCallData;
};
export type Ib0q6775t6mpca = {
    "as_origin": PolkadotRuntimeOriginCaller;
    "call": TxCallData;
};
export type I3a88i85ltnt0b = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I18bmvvfanvkfb = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<Iet6i9asu73j66>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Ifhl1ihpl9i99m>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Ifhl1ihpl9i99m>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<Iav2q7hjio8n98>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<I1m2ifb0h8d0r8>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<Iafe2eojeoea0f>;
}>;
export type Iet6i9asu73j66 = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ict2klpa3v9sc0>;
    "call": TxCallData;
};
export type Ict2klpa3v9sc0 = (Anonymize<Ib9ifr8gu9ttks>) | undefined;
export type Ifhl1ihpl9i99m = {
    "delegate": MultiAddress;
    "proxy_type": Anonymize<Ib9ifr8gu9ttks>;
    "delay": number;
};
export type Iav2q7hjio8n98 = {
    "proxy_type": Anonymize<Ib9ifr8gu9ttks>;
    "delay": number;
    "index": number;
};
export type I1m2ifb0h8d0r8 = {
    "spawner": MultiAddress;
    "proxy_type": Anonymize<Ib9ifr8gu9ttks>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type I2eb501t8s6hsq = {
    "real": MultiAddress;
    "call_hash": FixedSizeBinary<32>;
};
export type Ianmuoljk2sk1u = {
    "delegate": MultiAddress;
    "call_hash": FixedSizeBinary<32>;
};
export type Iafe2eojeoea0f = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ict2klpa3v9sc0>;
    "call": TxCallData;
};
export type I8n15dcm1d8cdk = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<I56o0phba4f7c6>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<Ike6sr5hslkoc>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type I56o0phba4f7c6 = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Ike6sr5hslkoc = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I95jfd8j5cr5eh = (Anonymize<Itvprrpb0nm3o>) | undefined;
export type Ideaemvoneh309 = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call_hash": FixedSizeBinary<32>;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I3d9o9d7epp66v = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "call_hash": FixedSizeBinary<32>;
};
export type I91kpi5kjh9on2 = AnonymousEnum<{
    /**
     *Propose a new bounty.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Payment: `TipReportDepositBase` will be reserved from the origin account, as well as
     *`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,
     *or slashed when rejected.
     *
     *- `curator`: The curator account whom will manage this bounty.
     *- `fee`: The curator fee.
     *- `value`: The total payment amount of this bounty, curator fee included.
     *- `description`: The description of this bounty.
     */
    "propose_bounty": Anonymize<I2a839vbf5817q>;
    /**
     *Approve a bounty proposal. At a later time, the bounty will be funded and become active
     *and the original deposit will be returned.
     *
     *May only be called from `T::SpendOrigin`.
     *
     *## Complexity
     *- O(1).
     */
    "approve_bounty": Anonymize<Ia9p5bg6p18r0i>;
    /**
     *Propose a curator to a funded bounty.
     *
     *May only be called from `T::SpendOrigin`.
     *
     *## Complexity
     *- O(1).
     */
    "propose_curator": Anonymize<I42bqh279uf7oa>;
    /**
     *Unassign curator from a bounty.
     *
     *This function can only be called by the `RejectOrigin` a signed origin.
     *
     *If this function is called by the `RejectOrigin`, we assume that the curator is
     *malicious or inactive. As a result, we will slash the curator when possible.
     *
     *If the origin is the curator, we take this as a sign they are unable to do their job and
     *they willingly give up. We could slash them, but for now we allow them to recover their
     *deposit and exit without issue. (We may want to change this if it is abused.)
     *
     *Finally, the origin can be anyone if and only if the curator is "inactive". This allows
     *anyone in the community to call out that a curator is not doing their due diligence, and
     *we should pick a new curator. In this case the curator should also be slashed.
     *
     *## Complexity
     *- O(1).
     */
    "unassign_curator": Anonymize<Ia9p5bg6p18r0i>;
    /**
     *Accept the curator role for a bounty.
     *A deposit will be reserved from curator and refund upon successful payout.
     *
     *May only be called from the curator.
     *
     *## Complexity
     *- O(1).
     */
    "accept_curator": Anonymize<Ia9p5bg6p18r0i>;
    /**
     *Award bounty to a beneficiary account. The beneficiary will be able to claim the funds
     *after a delay.
     *
     *The dispatch origin for this call must be the curator of this bounty.
     *
     *- `bounty_id`: Bounty ID to award.
     *- `beneficiary`: The beneficiary account whom will receive the payout.
     *
     *## Complexity
     *- O(1).
     */
    "award_bounty": Anonymize<I4p6v96cffstms>;
    /**
     *Claim the payout from an awarded bounty after payout delay.
     *
     *The dispatch origin for this call must be the beneficiary of this bounty.
     *
     *- `bounty_id`: Bounty ID to claim.
     *
     *## Complexity
     *- O(1).
     */
    "claim_bounty": Anonymize<Ia9p5bg6p18r0i>;
    /**
     *Cancel a proposed or active bounty. All the funds will be sent to treasury and
     *the curator deposit will be unreserved if possible.
     *
     *Only `T::RejectOrigin` is able to cancel a bounty.
     *
     *- `bounty_id`: Bounty ID to cancel.
     *
     *## Complexity
     *- O(1).
     */
    "close_bounty": Anonymize<Ia9p5bg6p18r0i>;
    /**
     *Extend the expiry time of an active bounty.
     *
     *The dispatch origin for this call must be the curator of this bounty.
     *
     *- `bounty_id`: Bounty ID to extend.
     *- `remark`: additional information.
     *
     *## Complexity
     *- O(1).
     */
    "extend_bounty_expiry": Anonymize<I90n6nnkpdahrh>;
}>;
export type I2a839vbf5817q = {
    "value": bigint;
    "description": Binary;
};
export type I42bqh279uf7oa = {
    "bounty_id": number;
    "curator": MultiAddress;
    "fee": bigint;
};
export type I4p6v96cffstms = {
    "bounty_id": number;
    "beneficiary": MultiAddress;
};
export type I90n6nnkpdahrh = {
    "bounty_id": number;
    "remark": Binary;
};
export type I1b6drdhvt5hl9 = AnonymousEnum<{
    /**
     *Add a new child-bounty.
     *
     *The dispatch origin for this call must be the curator of parent
     *bounty and the parent bounty must be in "active" state.
     *
     *Child-bounty gets added successfully & fund gets transferred from
     *parent bounty to child-bounty account, if parent bounty has enough
     *funds, else the call fails.
     *
     *Upper bound to maximum number of active  child bounties that can be
     *added are managed via runtime trait config
     *[`Config::MaxActiveChildBountyCount`].
     *
     *If the call is success, the status of child-bounty is updated to
     *"Added".
     *
     *- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.
     *- `value`: Value for executing the proposal.
     *- `description`: Text description for the child-bounty.
     */
    "add_child_bounty": Anonymize<I8mk5kjgn02hi8>;
    /**
     *Propose curator for funded child-bounty.
     *
     *The dispatch origin for this call must be curator of parent bounty.
     *
     *Parent bounty must be in active state, for this child-bounty call to
     *work.
     *
     *Child-bounty must be in "Added" state, for processing the call. And
     *state of child-bounty is moved to "CuratorProposed" on successful
     *call completion.
     *
     *- `parent_bounty_id`: Index of parent bounty.
     *- `child_bounty_id`: Index of child bounty.
     *- `curator`: Address of child-bounty curator.
     *- `fee`: payment fee to child-bounty curator for execution.
     */
    "propose_curator": Anonymize<Ieqvq91sbe02ko>;
    /**
     *Accept the curator role for the child-bounty.
     *
     *The dispatch origin for this call must be the curator of this
     *child-bounty.
     *
     *A deposit will be reserved from the curator and refund upon
     *successful payout or cancellation.
     *
     *Fee for curator is deducted from curator fee of parent bounty.
     *
     *Parent bounty must be in active state, for this child-bounty call to
     *work.
     *
     *Child-bounty must be in "CuratorProposed" state, for processing the
     *call. And state of child-bounty is moved to "Active" on successful
     *call completion.
     *
     *- `parent_bounty_id`: Index of parent bounty.
     *- `child_bounty_id`: Index of child bounty.
     */
    "accept_curator": Anonymize<I2gr10p66od9ch>;
    /**
     *Unassign curator from a child-bounty.
     *
     *The dispatch origin for this call can be either `RejectOrigin`, or
     *the curator of the parent bounty, or any signed origin.
     *
     *For the origin other than T::RejectOrigin and the child-bounty
     *curator, parent bounty must be in active state, for this call to
     *work. We allow child-bounty curator and T::RejectOrigin to execute
     *this call irrespective of the parent bounty state.
     *
     *If this function is called by the `RejectOrigin` or the
     *parent bounty curator, we assume that the child-bounty curator is
     *malicious or inactive. As a result, child-bounty curator deposit is
     *slashed.
     *
     *If the origin is the child-bounty curator, we take this as a sign
     *that they are unable to do their job, and are willingly giving up.
     *We could slash the deposit, but for now we allow them to unreserve
     *their deposit and exit without issue. (We may want to change this if
     *it is abused.)
     *
     *Finally, the origin can be anyone iff the child-bounty curator is
     *"inactive". Expiry update due of parent bounty is used to estimate
     *inactive state of child-bounty curator.
     *
     *This allows anyone in the community to call out that a child-bounty
     *curator is not doing their due diligence, and we should pick a new
     *one. In this case the child-bounty curator deposit is slashed.
     *
     *State of child-bounty is moved to Added state on successful call
     *completion.
     *
     *- `parent_bounty_id`: Index of parent bounty.
     *- `child_bounty_id`: Index of child bounty.
     */
    "unassign_curator": Anonymize<I2gr10p66od9ch>;
    /**
     *Award child-bounty to a beneficiary.
     *
     *The beneficiary will be able to claim the funds after a delay.
     *
     *The dispatch origin for this call must be the parent curator or
     *curator of this child-bounty.
     *
     *Parent bounty must be in active state, for this child-bounty call to
     *work.
     *
     *Child-bounty must be in active state, for processing the call. And
     *state of child-bounty is moved to "PendingPayout" on successful call
     *completion.
     *
     *- `parent_bounty_id`: Index of parent bounty.
     *- `child_bounty_id`: Index of child bounty.
     *- `beneficiary`: Beneficiary account.
     */
    "award_child_bounty": Anonymize<I9mcq66cm3gibo>;
    /**
     *Claim the payout from an awarded child-bounty after payout delay.
     *
     *The dispatch origin for this call may be any signed origin.
     *
     *Call works independent of parent bounty state, No need for parent
     *bounty to be in active state.
     *
     *The Beneficiary is paid out with agreed bounty value. Curator fee is
     *paid & curator deposit is unreserved.
     *
     *Child-bounty must be in "PendingPayout" state, for processing the
     *call. And instance of child-bounty is removed from the state on
     *successful call completion.
     *
     *- `parent_bounty_id`: Index of parent bounty.
     *- `child_bounty_id`: Index of child bounty.
     */
    "claim_child_bounty": Anonymize<I2gr10p66od9ch>;
    /**
     *Cancel a proposed or active child-bounty. Child-bounty account funds
     *are transferred to parent bounty account. The child-bounty curator
     *deposit may be unreserved if possible.
     *
     *The dispatch origin for this call must be either parent curator or
     *`T::RejectOrigin`.
     *
     *If the state of child-bounty is `Active`, curator deposit is
     *unreserved.
     *
     *If the state of child-bounty is `PendingPayout`, call fails &
     *returns `PendingPayout` error.
     *
     *For the origin other than T::RejectOrigin, parent bounty must be in
     *active state, for this child-bounty call to work. For origin
     *T::RejectOrigin execution is forced.
     *
     *Instance of child-bounty is removed from the state on successful
     *call completion.
     *
     *- `parent_bounty_id`: Index of parent bounty.
     *- `child_bounty_id`: Index of child bounty.
     */
    "close_child_bounty": Anonymize<I2gr10p66od9ch>;
}>;
export type I8mk5kjgn02hi8 = {
    "parent_bounty_id": number;
    "value": bigint;
    "description": Binary;
};
export type Ieqvq91sbe02ko = {
    "parent_bounty_id": number;
    "child_bounty_id": number;
    "curator": MultiAddress;
    "fee": bigint;
};
export type I2gr10p66od9ch = {
    "parent_bounty_id": number;
    "child_bounty_id": number;
};
export type I9mcq66cm3gibo = {
    "parent_bounty_id": number;
    "child_bounty_id": number;
    "beneficiary": MultiAddress;
};
export type I15soeogelbbbh = AnonymousEnum<{
    /**
     *Submit a solution for the unsigned phase.
     *
     *The dispatch origin fo this call must be __none__.
     *
     *This submission is checked on the fly. Moreover, this unsigned solution is only
     *validated when submitted to the pool from the **local** node. Effectively, this means
     *that only active validators can submit this transaction when authoring a block (similar
     *to an inherent).
     *
     *To prevent any incorrect solution (and thus wasted time/weight), this transaction will
     *panic if the solution submitted by the validator is invalid in any way, effectively
     *putting their authoring reward at risk.
     *
     *No deposit or reward is associated with this submission.
     */
    "submit_unsigned": Anonymize<I31k9f0jol8ko4>;
    /**
     *Set a new value for `MinimumUntrustedScore`.
     *
     *Dispatch origin must be aligned with `T::ForceOrigin`.
     *
     *This check can be turned off by setting the value to `None`.
     */
    "set_minimum_untrusted_score": Anonymize<I80q14um2s2ckg>;
    /**
     *Set a solution in the queue, to be handed out to the client of this pallet in the next
     *call to `ElectionProvider::elect`.
     *
     *This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.
     *
     *The solution is not checked for any feasibility and is assumed to be trustworthy, as any
     *feasibility check itself can in principle cause the election process to fail (due to
     *memory/weight constrains).
     */
    "set_emergency_election_result": Anonymize<I5qs1t1erfi7u8>;
    /**
     *Submit a solution for the signed phase.
     *
     *The dispatch origin fo this call must be __signed__.
     *
     *The solution is potentially queued, based on the claimed score and processed at the end
     *of the signed phase.
     *
     *A deposit is reserved and recorded for the solution. Based on the outcome, the solution
     *might be rewarded, slashed, or get all or a part of the deposit back.
     */
    "submit": Anonymize<I9et13knvdvgpb>;
    /**
     *Trigger the governance fallback.
     *
     *This can only be called when [`Phase::Emergency`] is enabled, as an alternative to
     *calling [`Call::set_emergency_election_result`].
     */
    "governance_fallback": Anonymize<Ifsme8miqq9006>;
}>;
export type I31k9f0jol8ko4 = {
    "raw_solution": Anonymize<I7je4n92ump862>;
    "witness": Anonymize<Iasd2iat48n080>;
};
export type I80q14um2s2ckg = {
    "maybe_next_score"?: Anonymize<Iaebc5kcl654ln>;
};
export type Iaebc5kcl654ln = (Anonymize<I8s6n43okuj2b1>) | undefined;
export type I5qs1t1erfi7u8 = {
    "supports": Anonymize<I4bboqsv44evel>;
};
export type I9et13knvdvgpb = {
    "raw_solution": Anonymize<I7je4n92ump862>;
};
export type Ifsme8miqq9006 = {
    "maybe_max_voters"?: Anonymize<I4arjljr6dpflb>;
    "maybe_max_targets"?: Anonymize<I4arjljr6dpflb>;
};
export type Ifvfo1l0vu2o7e = AnonymousEnum<{
    /**
     *Declare that some `dislocated` account has, through rewards or penalties, sufficiently
     *changed its score that it should properly fall into a different bag than its current
     *one.
     *
     *Anyone can call this function about any potentially dislocated account.
     *
     *Will always update the stored score of `dislocated` to the correct score, based on
     *`ScoreProvider`.
     *
     *If `dislocated` does not exists, it returns an error.
     */
    "rebag": Anonymize<Id9js0aucdivjk>;
    /**
     *Move the caller's Id directly in front of `lighter`.
     *
     *The dispatch origin for this call must be _Signed_ and can only be called by the Id of
     *the account going in front of `lighter`. Fee is payed by the origin under all
     *circumstances.
     *
     *Only works if:
     *
     *- both nodes are within the same bag,
     *- and `origin` has a greater `Score` than `lighter`.
     */
    "put_in_front_of": Anonymize<I1vj3e1a62je3o>;
    /**
     *Same as [`Pallet::put_in_front_of`], but it can be called by anyone.
     *
     *Fee is paid by the origin under all circumstances.
     */
    "put_in_front_of_other": Anonymize<I6c1t14l6giceg>;
}>;
export type Id9js0aucdivjk = {
    "dislocated": MultiAddress;
};
export type I1vj3e1a62je3o = {
    "lighter": MultiAddress;
};
export type I6c1t14l6giceg = {
    "heavier": MultiAddress;
    "lighter": MultiAddress;
};
export type I57mljkkr28m9p = AnonymousEnum<{
    /**
     *Stake funds with a pool. The amount to bond is transferred from the member to the
     *pools account and immediately increases the pools bond.
     *
     *# Note
     *
     ** An account can only be a member of a single pool.
     ** An account cannot join the same pool multiple times.
     ** This call will *not* dust the member account, so the member must have at least
     *  `existential deposit + amount` in their account.
     ** Only a pool with [`PoolState::Open`] can be joined
     */
    "join": Anonymize<Ieg1oc56mamrl5>;
    /**
     *Bond `extra` more funds from `origin` into the pool to which they already belong.
     *
     *Additional funds can come from either the free balance of the account, of from the
     *accumulated rewards, see [`BondExtra`].
     *
     *Bonding extra funds implies an automatic payout of all pending rewards as well.
     *See `bond_extra_other` to bond pending rewards of `other` members.
     */
    "bond_extra": Anonymize<I2vu5vj7173ik9>;
    /**
     *A bonded member can use this to claim their payout based on the rewards that the pool
     *has accumulated since their last claimed payout (OR since joining if this is their first
     *time claiming rewards). The payout will be transferred to the member's account.
     *
     *The member will earn rewards pro rata based on the members stake vs the sum of the
     *members in the pools stake. Rewards do not "expire".
     *
     *See `claim_payout_other` to claim rewards on behalf of some `other` pool member.
     */
    "claim_payout": undefined;
    /**
     *Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It
     *implicitly collects the rewards one last time, since not doing so would mean some
     *rewards would be forfeited.
     *
     *Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
     *account).
     *
     *# Conditions for a permissionless dispatch.
     *
     ** The pool is blocked and the caller is either the root or bouncer. This is refereed to
     *  as a kick.
     ** The pool is destroying and the member is not the depositor.
     ** The pool is destroying, the member is the depositor and no other members are in the
     *  pool.
     *
     *## Conditions for permissioned dispatch (i.e. the caller is also the
     *`member_account`):
     *
     ** The caller is not the depositor.
     ** The caller is the depositor, the pool is destroying and no other members are in the
     *  pool.
     *
     *# Note
     *
     *If there are too many unlocking chunks to unbond with the pool account,
     *[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.
     *The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]
     *to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks
     *are available). However, it may not be possible to release the current unlocking chunks,
     *in which case, the result of this call will likely be the `NoMoreChunks` error from the
     *staking system.
     */
    "unbond": Anonymize<I6galqkn58q3bl>;
    /**
     *Call `withdraw_unbonded` for the pools account. This call can be made by any account.
     *
     *This is useful if there are too many unlocking chunks to call `unbond`, and some
     *can be cleared by withdrawing. In the case there are too many unlocking chunks, the user
     *would probably see an error like `NoMoreChunks` emitted from the staking system when
     *they attempt to unbond.
     */
    "pool_withdraw_unbonded": Anonymize<I36uoc8t9liv80>;
    /**
     *Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an
     *error is returned.
     *
     *Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
     *account).
     *
     *# Conditions for a permissionless dispatch
     *
     ** The pool is in destroy mode and the target is not the depositor.
     ** The target is the depositor and they are the only member in the sub pools.
     ** The pool is blocked and the caller is either the root or bouncer.
     *
     *# Conditions for permissioned dispatch
     *
     ** The caller is the target and they are not the depositor.
     *
     *# Note
     *
     *- If the target is the depositor, the pool will be destroyed.
     *- If the pool has any pending slash, we also try to slash the member before letting them
     *withdraw. This calculation adds some weight overhead and is only defensive. In reality,
     *pool slashes must have been already applied via permissionless [`Call::apply_slash`].
     */
    "withdraw_unbonded": Anonymize<Ibunghsg9qa7f7>;
    /**
     *Create a new delegation pool.
     *
     *# Arguments
     *
     ** `amount` - The amount of funds to delegate to the pool. This also acts of a sort of
     *  deposit since the pools creator cannot fully unbond funds until the pool is being
     *  destroyed.
     ** `index` - A disambiguation index for creating the account. Likely only useful when
     *  creating multiple pools in the same extrinsic.
     ** `root` - The account to set as [`PoolRoles::root`].
     ** `nominator` - The account to set as the [`PoolRoles::nominator`].
     ** `bouncer` - The account to set as the [`PoolRoles::bouncer`].
     *
     *# Note
     *
     *In addition to `amount`, the caller will transfer the existential deposit; so the caller
     *needs at have at least `amount + existential_deposit` transferable.
     */
    "create": Anonymize<I8qnouj2c0igph>;
    /**
     *Create a new delegation pool with a previously used pool id
     *
     *# Arguments
     *
     *same as `create` with the inclusion of
     ** `pool_id` - `A valid PoolId.
     */
    "create_with_pool_id": Anonymize<Ic30e2k517a3ns>;
    /**
     *Nominate on behalf of the pool.
     *
     *The dispatch origin of this call must be signed by the pool nominator or the pool
     *root role.
     *
     *This directly forward the call to the staking pallet, on behalf of the pool bonded
     *account.
     *
     *# Note
     *
     *In addition to a `root` or `nominator` role of `origin`, pool's depositor needs to have
     *at least `depositor_min_bond` in the pool to start nominating.
     */
    "nominate": Anonymize<I47a2tsd2o2b1c>;
    /**
     *Set a new state for the pool.
     *
     *If a pool is already in the `Destroying` state, then under no condition can its state
     *change again.
     *
     *The dispatch origin of this call must be either:
     *
     *1. signed by the bouncer, or the root role of the pool,
     *2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and
     *   then the state of the pool can be permissionlessly changed to `Destroying`.
     */
    "set_state": Anonymize<Ifc9k1s0e9nv8e>;
    /**
     *Set a new metadata for the pool.
     *
     *The dispatch origin of this call must be signed by the bouncer, or the root role of the
     *pool.
     */
    "set_metadata": Anonymize<I4ihj26hl75e5p>;
    /**
     *Update configurations for the nomination pools. The origin for this call must be
     *[`Config::AdminOrigin`].
     *
     *# Arguments
     *
     ** `min_join_bond` - Set [`MinJoinBond`].
     ** `min_create_bond` - Set [`MinCreateBond`].
     ** `max_pools` - Set [`MaxPools`].
     ** `max_members` - Set [`MaxPoolMembers`].
     ** `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].
     ** `global_max_commission` - Set [`GlobalMaxCommission`].
     */
    "set_configs": Anonymize<I2dl8ekhm2t22h>;
    /**
     *Update the roles of the pool.
     *
     *The root is the only entity that can change any of the roles, including itself,
     *excluding the depositor, who can never change.
     *
     *It emits an event, notifying UIs of the role change. This event is quite relevant to
     *most pool members and they should be informed of changes to pool roles.
     */
    "update_roles": Anonymize<I13us5e5h5645o>;
    /**
     *Chill on behalf of the pool.
     *
     *The dispatch origin of this call can be signed by the pool nominator or the pool
     *root role, same as [`Pallet::nominate`].
     *
     *Under certain conditions, this call can be dispatched permissionlessly (i.e. by any
     *account).
     *
     *# Conditions for a permissionless dispatch:
     ** When pool depositor has less than `MinNominatorBond` staked, otherwise  pool members
     *  are unable to unbond.
     *
     *# Conditions for permissioned dispatch:
     ** The caller has a nominator or root role of the pool.
     *This directly forward the call to the staking pallet, on behalf of the pool bonded
     *account.
     */
    "chill": Anonymize<I931cottvong90>;
    /**
     *`origin` bonds funds from `extra` for some pool member `member` into their respective
     *pools.
     *
     *`origin` can bond extra funds from free balance or pending rewards when `origin ==
     *other`.
     *
     *In the case of `origin != other`, `origin` can only bond extra pending rewards of
     *`other` members assuming set_claim_permission for the given member is
     *`PermissionlessCompound` or `PermissionlessAll`.
     */
    "bond_extra_other": Anonymize<I7sujb8gfvuo7n>;
    /**
     *Allows a pool member to set a claim permission to allow or disallow permissionless
     *bonding and withdrawing.
     *
     *# Arguments
     *
     ** `origin` - Member of a pool.
     ** `permission` - The permission to be applied.
     */
    "set_claim_permission": Anonymize<I1ors0vru14it3>;
    /**
     *`origin` can claim payouts on some pool member `other`'s behalf.
     *
     *Pool member `other` must have a `PermissionlessWithdraw` or `PermissionlessAll` claim
     *permission for this call to be successful.
     */
    "claim_payout_other": Anonymize<I40s11r8nagn2g>;
    /**
     *Set the commission of a pool.
     *Both a commission percentage and a commission payee must be provided in the `current`
     *tuple. Where a `current` of `None` is provided, any current commission will be removed.
     *
     *- If a `None` is supplied to `new_commission`, existing commission will be removed.
     */
    "set_commission": Anonymize<I6bjj87fr5g9nl>;
    /**
     *Set the maximum commission of a pool.
     *
     *- Initial max can be set to any `Perbill`, and only smaller values thereafter.
     *- Current commission will be lowered in the event it is higher than a new max
     *  commission.
     */
    "set_commission_max": Anonymize<I8cbluptqo8kbp>;
    /**
     *Set the commission change rate for a pool.
     *
     *Initial change rate is not bounded, whereas subsequent updates can only be more
     *restrictive than the current.
     */
    "set_commission_change_rate": Anonymize<I81cc4plffa1dm>;
    /**
     *Claim pending commission.
     *
     *The dispatch origin of this call must be signed by the `root` role of the pool. Pending
     *commission is paid out and added to total claimed commission`. Total pending commission
     *is reset to zero. the current.
     */
    "claim_commission": Anonymize<I931cottvong90>;
    /**
     *Top up the deficit or withdraw the excess ED from the pool.
     *
     *When a pool is created, the pool depositor transfers ED to the reward account of the
     *pool. ED is subject to change and over time, the deposit in the reward account may be
     *insufficient to cover the ED deficit of the pool or vice-versa where there is excess
     *deposit to the pool. This call allows anyone to adjust the ED deposit of the
     *pool by either topping up the deficit or claiming the excess.
     */
    "adjust_pool_deposit": Anonymize<I931cottvong90>;
    /**
     *Set or remove a pool's commission claim permission.
     *
     *Determines who can claim the pool's pending commission. Only the `Root` role of the pool
     *is able to configure commission claim permissions.
     */
    "set_commission_claim_permission": Anonymize<I3ihan8icf0c5k>;
    /**
     *Apply a pending slash on a member.
     *
     *Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
     *[`adapter::StakeStrategyType::Delegate`].
     *
     *This call can be dispatched permissionlessly (i.e. by any account). If the member has
     *slash to be applied, caller may be rewarded with the part of the slash.
     */
    "apply_slash": Anonymize<I7ibh0fckqou49>;
    /**
     *Migrates delegated funds from the pool account to the `member_account`.
     *
     *Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
     *[`adapter::StakeStrategyType::Delegate`].
     *
     *This is a permission-less call and refunds any fee if claim is successful.
     *
     *If the pool has migrated to delegation based staking, the staked tokens of pool members
     *can be moved and held in their own account. See [`adapter::DelegateStake`]
     */
    "migrate_delegation": Anonymize<I7ibh0fckqou49>;
    /**
     *Migrate pool from [`adapter::StakeStrategyType::Transfer`] to
     *[`adapter::StakeStrategyType::Delegate`].
     *
     *Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:
     *[`adapter::StakeStrategyType::Delegate`].
     *
     *This call can be dispatched permissionlessly, and refunds any fee if successful.
     *
     *If the pool has already migrated to delegation based staking, this call will fail.
     */
    "migrate_pool_to_delegate_stake": Anonymize<I931cottvong90>;
}>;
export type I2vu5vj7173ik9 = {
    "extra": NominationPoolsBondExtra;
};
export type NominationPoolsBondExtra = Enum<{
    "FreeBalance": bigint;
    "Rewards": undefined;
}>;
export declare const NominationPoolsBondExtra: GetEnum<NominationPoolsBondExtra>;
export type I6galqkn58q3bl = {
    "member_account": MultiAddress;
    "unbonding_points": bigint;
};
export type I36uoc8t9liv80 = {
    "pool_id": number;
    "num_slashing_spans": number;
};
export type Ibunghsg9qa7f7 = {
    "member_account": MultiAddress;
    "num_slashing_spans": number;
};
export type I8qnouj2c0igph = {
    "amount": bigint;
    "root": MultiAddress;
    "nominator": MultiAddress;
    "bouncer": MultiAddress;
};
export type Ic30e2k517a3ns = {
    "amount": bigint;
    "root": MultiAddress;
    "nominator": MultiAddress;
    "bouncer": MultiAddress;
    "pool_id": number;
};
export type I47a2tsd2o2b1c = {
    "pool_id": number;
    "validators": Anonymize<Ia2lhg7l2hilo3>;
};
export type Ifc9k1s0e9nv8e = {
    "pool_id": number;
    "state": NominationPoolsPoolState;
};
export type I4ihj26hl75e5p = {
    "pool_id": number;
    "metadata": Binary;
};
export type I2dl8ekhm2t22h = {
    "min_join_bond": StakingPalletConfigOpBig;
    "min_create_bond": StakingPalletConfigOpBig;
    "max_pools": StakingPalletConfigOp;
    "max_members": StakingPalletConfigOp;
    "max_members_per_pool": StakingPalletConfigOp;
    "global_max_commission": StakingPalletConfigOp;
};
export type I13us5e5h5645o = {
    "pool_id": number;
    "new_root": NominationPoolsConfigOp;
    "new_nominator": NominationPoolsConfigOp;
    "new_bouncer": NominationPoolsConfigOp;
};
export type NominationPoolsConfigOp = Enum<{
    "Noop": undefined;
    "Set": SS58String;
    "Remove": undefined;
}>;
export declare const NominationPoolsConfigOp: GetEnum<NominationPoolsConfigOp>;
export type I7sujb8gfvuo7n = {
    "member": MultiAddress;
    "extra": NominationPoolsBondExtra;
};
export type I1ors0vru14it3 = {
    "permission": NominationPoolsClaimPermission;
};
export type I40s11r8nagn2g = {
    "other": SS58String;
};
export type I6bjj87fr5g9nl = {
    "pool_id": number;
    "new_commission"?: Anonymize<Ie8iutm7u02lmj>;
};
export type I7ibh0fckqou49 = {
    "member_account": MultiAddress;
};
export type I44snhj1gahvrd = AnonymousEnum<{
    /**
     *Register oneself for fast-unstake.
     *
     *## Dispatch Origin
     *
     *The dispatch origin of this call must be *signed* by whoever is permitted to call
     *unbond funds by the staking system. See [`Config::Staking`].
     *
     *## Details
     *
     *The stash associated with the origin must have no ongoing unlocking chunks. If
     *successful, this will fully unbond and chill the stash. Then, it will enqueue the stash
     *to be checked in further blocks.
     *
     *If by the time this is called, the stash is actually eligible for fast-unstake, then
     *they are guaranteed to remain eligible, because the call will chill them as well.
     *
     *If the check works, the entire staking data is removed, i.e. the stash is fully
     *unstaked.
     *
     *If the check fails, the stash remains chilled and waiting for being unbonded as in with
     *the normal staking system, but they lose part of their unbonding chunks due to consuming
     *the chain's resources.
     *
     *## Events
     *
     *Some events from the staking and currency system might be emitted.
     */
    "register_fast_unstake": undefined;
    /**
     *Deregister oneself from the fast-unstake.
     *
     *## Dispatch Origin
     *
     *The dispatch origin of this call must be *signed* by whoever is permitted to call
     *unbond funds by the staking system. See [`Config::Staking`].
     *
     *## Details
     *
     *This is useful if one is registered, they are still waiting, and they change their mind.
     *
     *Note that the associated stash is still fully unbonded and chilled as a consequence of
     *calling [`Pallet::register_fast_unstake`]. Therefore, this should probably be followed
     *by a call to `rebond` in the staking system.
     *
     *## Events
     *
     *Some events from the staking and currency system might be emitted.
     */
    "deregister": undefined;
    /**
     *Control the operation of this pallet.
     *
     *## Dispatch Origin
     *
     *The dispatch origin of this call must be [`Config::ControlOrigin`].
     *
     *## Details
     *
     *Can set the number of eras to check per block, and potentially other admin work.
     *
     *## Events
     *
     *No events are emitted from this dispatch.
     */
    "control": Anonymize<I9j0ul7nh7b8jv>;
}>;
export type I9j0ul7nh7b8jv = {
    "eras_to_check": number;
};
export type Ia9ptue949ognv = AnonymousEnum<{
    /**
     *Set the validation upgrade cooldown.
     */
    "set_validation_upgrade_cooldown": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the validation upgrade delay.
     */
    "set_validation_upgrade_delay": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the acceptance period for an included candidate.
     */
    "set_code_retention_period": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the max validation code size for incoming upgrades.
     */
    "set_max_code_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the max POV block size for incoming upgrades.
     */
    "set_max_pov_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the max head data size for paras.
     */
    "set_max_head_data_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the number of coretime execution cores.
     *
     *NOTE: that this configuration is managed by the coretime chain. Only manually change
     *this, if you really know what you are doing!
     */
    "set_coretime_cores": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the max number of times a claim may timeout on a core before it is abandoned
     */
    "set_max_availability_timeouts": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the parachain validator-group rotation frequency
     */
    "set_group_rotation_frequency": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the availability period for paras.
     */
    "set_paras_availability_period": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the scheduling lookahead, in expected number of blocks at peak throughput.
     */
    "set_scheduling_lookahead": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the maximum number of validators to assign to any core.
     */
    "set_max_validators_per_core": Anonymize<Id581arok0b1nj>;
    /**
     *Set the maximum number of validators to use in parachain consensus.
     */
    "set_max_validators": Anonymize<Id581arok0b1nj>;
    /**
     *Set the dispute period, in number of sessions to keep for disputes.
     */
    "set_dispute_period": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the dispute post conclusion acceptance period.
     */
    "set_dispute_post_conclusion_acceptance_period": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the no show slots, in number of number of consensus slots.
     *Must be at least 1.
     */
    "set_no_show_slots": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the total number of delay tranches.
     */
    "set_n_delay_tranches": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the zeroth delay tranche width.
     */
    "set_zeroth_delay_tranche_width": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the number of validators needed to approve a block.
     */
    "set_needed_approvals": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion.
     */
    "set_relay_vrf_modulo_samples": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum items that can present in a upward dispatch queue at once.
     */
    "set_max_upward_queue_count": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum total size of items that can present in a upward dispatch queue at
     *once.
     */
    "set_max_upward_queue_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the critical downward message size.
     */
    "set_max_downward_message_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum size of an upward message that can be sent by a candidate.
     */
    "set_max_upward_message_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum number of messages that a candidate can contain.
     */
    "set_max_upward_message_num_per_candidate": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the number of sessions after which an HRMP open channel request expires.
     */
    "set_hrmp_open_request_ttl": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the amount of funds that the sender should provide for opening an HRMP channel.
     */
    "set_hrmp_sender_deposit": Anonymize<I9jsikd1ghmc7l>;
    /**
     *Sets the amount of funds that the recipient should provide for accepting opening an HRMP
     *channel.
     */
    "set_hrmp_recipient_deposit": Anonymize<I9jsikd1ghmc7l>;
    /**
     *Sets the maximum number of messages allowed in an HRMP channel at once.
     */
    "set_hrmp_channel_max_capacity": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum total size of messages in bytes allowed in an HRMP channel at once.
     */
    "set_hrmp_channel_max_total_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum number of inbound HRMP channels a parachain is allowed to accept.
     */
    "set_hrmp_max_parachain_inbound_channels": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum size of a message that could ever be put into an HRMP channel.
     */
    "set_hrmp_channel_max_message_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum number of outbound HRMP channels a parachain is allowed to open.
     */
    "set_hrmp_max_parachain_outbound_channels": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the maximum number of outbound HRMP messages can be sent by a candidate.
     */
    "set_hrmp_max_message_num_per_candidate": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the number of session changes after which a PVF pre-checking voting is rejected.
     */
    "set_pvf_voting_ttl": Anonymize<I3vh014cqgmrfd>;
    /**
     *Sets the minimum delay between announcing the upgrade block for a parachain until the
     *upgrade taking place.
     *
     *See the field documentation for information and constraints for the new value.
     */
    "set_minimum_validation_upgrade_delay": Anonymize<I3vh014cqgmrfd>;
    /**
     *Setting this to true will disable consistency checks for the configuration setters.
     *Use with caution.
     */
    "set_bypass_consistency_check": Anonymize<I2f6mha3v4ooda>;
    /**
     *Set the asynchronous backing parameters.
     */
    "set_async_backing_params": Anonymize<Iasqjdhasi408s>;
    /**
     *Set PVF executor parameters.
     */
    "set_executor_params": Anonymize<I6krn2lsleo87n>;
    /**
     *Set the on demand (parathreads) base fee.
     */
    "set_on_demand_base_fee": Anonymize<I9jsikd1ghmc7l>;
    /**
     *Set the on demand (parathreads) fee variability.
     */
    "set_on_demand_fee_variability": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the on demand (parathreads) queue max size.
     */
    "set_on_demand_queue_max_size": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the on demand (parathreads) fee variability.
     */
    "set_on_demand_target_queue_utilization": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the on demand (parathreads) ttl in the claimqueue.
     */
    "set_on_demand_ttl": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set the minimum backing votes threshold.
     */
    "set_minimum_backing_votes": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set/Unset a node feature.
     */
    "set_node_feature": Anonymize<Iaid4btmkr5thp>;
    /**
     *Set approval-voting-params.
     */
    "set_approval_voting_params": Anonymize<I3vh014cqgmrfd>;
    /**
     *Set scheduler-params.
     */
    "set_scheduler_params": Anonymize<I559fv6um7nmhd>;
}>;
export type Id581arok0b1nj = {
    "new"?: Anonymize<I4arjljr6dpflb>;
};
export type I9jsikd1ghmc7l = {
    "new": bigint;
};
export type I2f6mha3v4ooda = {
    "new": boolean;
};
export type Iasqjdhasi408s = {
    "new": Anonymize<Iavuvfkop6318c>;
};
export type I6krn2lsleo87n = {
    "new": Anonymize<I80rnntpog8qp6>;
};
export type Iaid4btmkr5thp = {
    "index": number;
    "value": boolean;
};
export type I559fv6um7nmhd = {
    "new": Anonymize<I555j7pvb27qd5>;
};
export type Id5l4f3jqtnb0u = AnonymousEnum<{
    /**
     *Enter the paras inherent. This will process bitfields and backed candidates.
     */
    "enter": Anonymize<Ibbf0j7ol2abrv>;
}>;
export type Ibbf0j7ol2abrv = {
    "data": Anonymize<Idog9jailvp00o>;
};
export type Idog9jailvp00o = {
    "bitfields": Anonymize<Ib0ijj1h4o8bcq>;
    "backed_candidates": Anonymize<I6n6fsk5rls02k>;
    "disputes": Anonymize<Ibt1op6l47p1r2>;
    "parent_header": Anonymize<Ic952bubvq4k7d>;
};
export type Ib0ijj1h4o8bcq = Array<Anonymize<Idrh3it7jircvh>>;
export type Idrh3it7jircvh = {
    "payload": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "validator_index": number;
    "signature": FixedSizeBinary<64>;
};
export type I6n6fsk5rls02k = Array<Anonymize<I3m2q6a6atc1c7>>;
export type I3m2q6a6atc1c7 = {
    "candidate": Anonymize<I7t2ron16fup67>;
    "validity_votes": Anonymize<Id0g95rku62vif>;
    "validator_indices": {
        bytes: Uint8Array;
        bitsLen: number;
    };
};
export type I7t2ron16fup67 = {
    "descriptor": Anonymize<Ic7r865c0luc3k>;
    "commitments": Anonymize<Ic1d4u2opv3fst>;
};
export type Id0g95rku62vif = Array<ValidityAttestation>;
export type Ie2dden5k4kk7t = AnonymousEnum<{
    /**
     *Set the storage for the parachain validation code immediately.
     */
    "force_set_current_code": Anonymize<I1k3urvkqqshbc>;
    /**
     *Set the storage for the current parachain head data immediately.
     */
    "force_set_current_head": Anonymize<I2ff0ffsh15vej>;
    /**
     *Schedule an upgrade as if it was scheduled in the given relay parent block.
     */
    "force_schedule_code_upgrade": Anonymize<I1orfg86bkg123>;
    /**
     *Note a new block head for para within the context of the current block.
     */
    "force_note_new_head": Anonymize<I2ff0ffsh15vej>;
    /**
     *Put a parachain directly into the next session's action queue.
     *We can't queue it any sooner than this without going into the
     *initializer...
     */
    "force_queue_action": Anonymize<Iaus4cb3drhu9q>;
    /**
     *Adds the validation code to the storage.
     *
     *The code will not be added if it is already present. Additionally, if PVF pre-checking
     *is running for that code, it will be instantly accepted.
     *
     *Otherwise, the code will be added into the storage. Note that the code will be added
     *into storage with reference count 0. This is to account the fact that there are no users
     *for this code yet. The caller will have to make sure that this code eventually gets
     *used by some parachain or removed from the storage to avoid storage leaks. For the
     *latter prefer to use the `poke_unused_validation_code` dispatchable to raw storage
     *manipulation.
     *
     *This function is mainly meant to be used for upgrading parachains that do not follow
     *the go-ahead signal while the PVF pre-checking feature is enabled.
     */
    "add_trusted_validation_code": Anonymize<Ivnsat10lv9d6>;
    /**
     *Remove the validation code from the storage iff the reference count is 0.
     *
     *This is better than removing the storage directly, because it will not remove the code
     *that was suddenly got used by some parachain while this dispatchable was pending
     *dispatching.
     */
    "poke_unused_validation_code": Anonymize<Ibncli8qttt2c2>;
    /**
     *Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and
     *enacts the results if that was the last vote before achieving the supermajority.
     */
    "include_pvf_check_statement": Anonymize<I33rft6ag34efs>;
    /**
     *Set the storage for the current parachain head data immediately.
     */
    "force_set_most_recent_context": Anonymize<I9tmok5kceg2bg>;
}>;
export type I1k3urvkqqshbc = {
    "para": number;
    "new_code": Binary;
};
export type I2ff0ffsh15vej = {
    "para": number;
    "new_head": Binary;
};
export type I1orfg86bkg123 = {
    "para": number;
    "new_code": Binary;
    "relay_parent_number": number;
};
export type Iaus4cb3drhu9q = {
    "para": number;
};
export type Ivnsat10lv9d6 = {
    "validation_code": Binary;
};
export type Ibncli8qttt2c2 = {
    "validation_code_hash": FixedSizeBinary<32>;
};
export type I33rft6ag34efs = {
    "stmt": Anonymize<I36e6rra3ikq65>;
    "signature": FixedSizeBinary<64>;
};
export type I36e6rra3ikq65 = {
    "accept": boolean;
    "subject": FixedSizeBinary<32>;
    "session_index": number;
    "validator_index": number;
};
export type I9tmok5kceg2bg = {
    "para": number;
    "context": number;
};
export type Ieggtnkc96vvt7 = AnonymousEnum<{
    /**
     *Issue a signal to the consensus engine to forcibly act as though all parachain
     *blocks in all relay chain blocks up to and including the given number in the current
     *chain are valid and should be finalized.
     */
    "force_approve": Anonymize<I85icj2qbjeqbe>;
}>;
export type I85icj2qbjeqbe = {
    "up_to": number;
};
export type I45adic8nko129 = AnonymousEnum<{
    /**
     *Initiate opening a channel from a parachain to a given recipient with given channel
     *parameters.
     *
     *- `proposed_max_capacity` - specifies how many messages can be in the channel at once.
     *- `proposed_max_message_size` - specifies the maximum size of the messages.
     *
     *These numbers are a subject to the relay-chain configuration limits.
     *
     *The channel can be opened only after the recipient confirms it and only on a session
     *change.
     */
    "hrmp_init_open_channel": Anonymize<Ibuhbp68e6tkct>;
    /**
     *Accept a pending open channel request from the given sender.
     *
     *The channel will be opened only on the next session boundary.
     */
    "hrmp_accept_open_channel": Anonymize<Idrevppfiubhve>;
    /**
     *Initiate unilateral closing of a channel. The origin must be either the sender or the
     *recipient in the channel being closed.
     *
     *The closure can only happen on a session change.
     */
    "hrmp_close_channel": Anonymize<I9s2h36kr71vk9>;
    /**
     *This extrinsic triggers the cleanup of all the HRMP storage items that a para may have.
     *Normally this happens once per session, but this allows you to trigger the cleanup
     *immediately for a specific parachain.
     *
     *Number of inbound and outbound channels for `para` must be provided as witness data.
     *
     *Origin must be the `ChannelManager`.
     */
    "force_clean_hrmp": Anonymize<I4lkbiubo9ogq9>;
    /**
     *Force process HRMP open channel requests.
     *
     *If there are pending HRMP open channel requests, you can use this function to process
     *all of those requests immediately.
     *
     *Total number of opening channels must be provided as witness data.
     *
     *Origin must be the `ChannelManager`.
     */
    "force_process_hrmp_open": Anonymize<Id1baei7m8gkhk>;
    /**
     *Force process HRMP close channel requests.
     *
     *If there are pending HRMP close channel requests, you can use this function to process
     *all of those requests immediately.
     *
     *Total number of closing channels must be provided as witness data.
     *
     *Origin must be the `ChannelManager`.
     */
    "force_process_hrmp_close": Anonymize<Id1baei7m8gkhk>;
    /**
     *This cancels a pending open channel request. It can be canceled by either of the sender
     *or the recipient for that request. The origin must be either of those.
     *
     *The cancellation happens immediately. It is not possible to cancel the request if it is
     *already accepted.
     *
     *Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as
     *witness data.
     */
    "hrmp_cancel_open_request": Anonymize<I96ftepqm4vs7m>;
    /**
     *Open a channel from a `sender` to a `recipient` `ParaId`. Although opened by governance,
     *the `max_capacity` and `max_message_size` are still subject to the Relay Chain's
     *configured limits.
     *
     *Expected use is when one (and only one) of the `ParaId`s involved in the channel is
     *governed by the system, e.g. a system parachain.
     *
     *Origin must be the `ChannelManager`.
     */
    "force_open_hrmp_channel": Anonymize<Ic3430470j4mbv>;
    /**
     *Establish an HRMP channel between two system chains. If the channel does not already
     *exist, the transaction fees will be refunded to the caller. The system does not take
     *deposits for channels between system chains, and automatically sets the message number
     *and size limits to the maximum allowed by the network's configuration.
     *
     *Arguments:
     *
     *- `sender`: A system chain, `ParaId`.
     *- `recipient`: A system chain, `ParaId`.
     *
     *Any signed origin can call this function, but _both_ inputs MUST be system chains. If
     *the channel does not exist yet, there is no fee.
     */
    "establish_system_channel": Anonymize<I50mrcbubp554e>;
    /**
     *Update the deposits held for an HRMP channel to the latest `Configuration`. Channels
     *with system chains do not require a deposit.
     *
     *Arguments:
     *
     *- `sender`: A chain, `ParaId`.
     *- `recipient`: A chain, `ParaId`.
     *
     *Any signed origin can call this function.
     */
    "poke_channel_deposits": Anonymize<I50mrcbubp554e>;
    /**
     *Establish a bidirectional HRMP channel between a parachain and a system chain.
     *
     *Arguments:
     *
     *- `target_system_chain`: A system chain, `ParaId`.
     *
     *The origin needs to be the parachain origin.
     */
    "establish_channel_with_system": Anonymize<Ic3n7nqb6fffo0>;
}>;
export type Ibuhbp68e6tkct = {
    "recipient": number;
    "proposed_max_capacity": number;
    "proposed_max_message_size": number;
};
export type Idrevppfiubhve = {
    "sender": number;
};
export type I9s2h36kr71vk9 = {
    "channel_id": Anonymize<I50mrcbubp554e>;
};
export type I4lkbiubo9ogq9 = {
    "para": number;
    "num_inbound": number;
    "num_outbound": number;
};
export type Id1baei7m8gkhk = {
    "channels": number;
};
export type I96ftepqm4vs7m = {
    "channel_id": Anonymize<I50mrcbubp554e>;
    "open_requests": number;
};
export type Ic3430470j4mbv = {
    "sender": number;
    "recipient": number;
    "max_capacity": number;
    "max_message_size": number;
};
export type Ic3n7nqb6fffo0 = {
    "target_system_chain": number;
};
export type Ifkh1ep7g9h3rv = AnonymousEnum<{
    "force_unfreeze": undefined;
}>;
export type I3jj054kp2bjol = AnonymousEnum<{
    "report_dispute_lost_unsigned": Anonymize<I437u7rqtshfms>;
}>;
export type I437u7rqtshfms = {
    "dispute_proof": Anonymize<I943rhn463avqr>;
    "key_owner_proof": Anonymize<I3ia7aufsoj0l1>;
};
export type I943rhn463avqr = {
    "time_slot": Anonymize<Iee37emj23tmbu>;
    "kind": SlashingOffenceKind;
    "validator_index": number;
    "validator_id": FixedSizeBinary<32>;
};
export type Iee37emj23tmbu = {
    "session_index": number;
    "candidate_hash": FixedSizeBinary<32>;
};
export type I9s7urueli180g = AnonymousEnum<{
    /**
     *Create a single on demand core order.
     *Will use the spot price for the current block and will reap the account if needed.
     *
     *Parameters:
     *- `origin`: The sender of the call, funds will be withdrawn from this account.
     *- `max_amount`: The maximum balance to withdraw from the origin to place an order.
     *- `para_id`: A `ParaId` the origin wants to provide blockspace for.
     *
     *Errors:
     *- `InsufficientBalance`: from the Currency implementation
     *- `QueueFull`
     *- `SpotPriceHigherThanMaxAmount`
     *
     *Events:
     *- `OnDemandOrderPlaced`
     */
    "place_order_allow_death": Anonymize<Iaa7g3f5tlv3gf>;
    /**
     *Same as the [`place_order_allow_death`](Self::place_order_allow_death) call , but with a
     *check that placing the order will not reap the account.
     *
     *Parameters:
     *- `origin`: The sender of the call, funds will be withdrawn from this account.
     *- `max_amount`: The maximum balance to withdraw from the origin to place an order.
     *- `para_id`: A `ParaId` the origin wants to provide blockspace for.
     *
     *Errors:
     *- `InsufficientBalance`: from the Currency implementation
     *- `QueueFull`
     *- `SpotPriceHigherThanMaxAmount`
     *
     *Events:
     *- `OnDemandOrderPlaced`
     */
    "place_order_keep_alive": Anonymize<Iaa7g3f5tlv3gf>;
}>;
export type Iaa7g3f5tlv3gf = {
    "max_amount": bigint;
    "para_id": number;
};
export type Icclqj5sge2nc7 = AnonymousEnum<{
    /**
     *Register head data and validation code for a reserved Para Id.
     *
     *## Arguments
     *- `origin`: Must be called by a `Signed` origin.
     *- `id`: The para ID. Must be owned/managed by the `origin` signing account.
     *- `genesis_head`: The genesis head data of the parachain/thread.
     *- `validation_code`: The initial validation code of the parachain/thread.
     *
     *## Deposits/Fees
     *The account with the originating signature must reserve a deposit.
     *
     *The deposit is required to cover the costs associated with storing the genesis head
     *data and the validation code.
     *This accounts for the potential to store validation code of a size up to the
     *`max_code_size`, as defined in the configuration pallet
     *
     *Anything already reserved previously for this para ID is accounted for.
     *
     *## Events
     *The `Registered` event is emitted in case of success.
     */
    "register": Anonymize<I7mf0sij342109>;
    /**
     *Force the registration of a Para Id on the relay chain.
     *
     *This function must be called by a Root origin.
     *
     *The deposit taken can be specified for this registration. Any `ParaId`
     *can be registered, including sub-1000 IDs which are System Parachains.
     */
    "force_register": Anonymize<Ibvirp862qkkup>;
    /**
     *Deregister a Para Id, freeing all data and returning any deposit.
     *
     *The caller must be Root, the `para` owner, or the `para` itself. The para must be an
     *on-demand parachain.
     */
    "deregister": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Swap a lease holding parachain with another parachain, either on-demand or lease
     *holding.
     *
     *The origin must be Root, the `para` owner, or the `para` itself.
     *
     *The swap will happen only if there is already an opposite swap pending. If there is not,
     *the swap will be stored in the pending swaps map, ready for a later confirmatory swap.
     *
     *The `ParaId`s remain mapped to the same head data and code so external code can rely on
     *`ParaId` to be a long-term identifier of a notional "parachain". However, their
     *scheduling info (i.e. whether they're an on-demand parachain or lease holding
     *parachain), auction information and the auction deposit are switched.
     */
    "swap": Anonymize<Idehabrqi23sc0>;
    /**
     *Remove a manager lock from a para. This will allow the manager of a
     *previously locked para to deregister or swap a para without using governance.
     *
     *Can only be called by the Root origin or the parachain.
     */
    "remove_lock": Anonymize<Iaus4cb3drhu9q>;
    /**
     *Reserve a Para Id on the relay chain.
     *
     *This function will reserve a new Para Id to be owned/managed by the origin account.
     *The origin account is able to register head data and validation code using `register` to
     *create an on-demand parachain. Using the Slots pallet, an on-demand parachain can then
     *be upgraded to a lease holding parachain.
     *
     *## Arguments
     *- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new
     *  para ID.
     *
     *## Deposits/Fees
     *The origin must reserve a deposit of `ParaDeposit` for the registration.
     *
     *## Events
     *The `Reserved` event is emitted in case of success, which provides the ID reserved for
     *use.
     */
    "reserve": undefined;
    /**
     *Add a manager lock from a para. This will prevent the manager of a
     *para to deregister or swap a para.
     *
     *Can be called by Root, the parachain, or the parachain manager if the parachain is
     *unlocked.
     */
    "add_lock": Anonymize<Iaus4cb3drhu9q>;
    /**
     *Schedule a parachain upgrade.
     *
     *This will kick off a check of `new_code` by all validators. After the majority of the
     *validators have reported on the validity of the code, the code will either be enacted
     *or the upgrade will be rejected. If the code will be enacted, the current code of the
     *parachain will be overwritten directly. This means that any PoV will be checked by this
     *new code. The parachain itself will not be informed explicitly that the validation code
     *has changed.
     *
     *Can be called by Root, the parachain, or the parachain manager if the parachain is
     *unlocked.
     */
    "schedule_code_upgrade": Anonymize<I1k3urvkqqshbc>;
    /**
     *Set the parachain's current head.
     *
     *Can be called by Root, the parachain, or the parachain manager if the parachain is
     *unlocked.
     */
    "set_current_head": Anonymize<I2ff0ffsh15vej>;
}>;
export type I7mf0sij342109 = {
    "id": number;
    "genesis_head": Binary;
    "validation_code": Binary;
};
export type Ibvirp862qkkup = {
    "who": SS58String;
    "deposit": bigint;
    "id": number;
    "genesis_head": Binary;
    "validation_code": Binary;
};
export type Ic5b47dj4coa3r = {
    "id": number;
};
export type Idehabrqi23sc0 = {
    "id": number;
    "other": number;
};
export type Iafhis924j14hg = AnonymousEnum<{
    /**
     *Just a connect into the `lease_out` call, in case Root wants to force some lease to
     *happen independently of any other on-chain mechanism to use it.
     *
     *The dispatch origin for this call must match `T::ForceOrigin`.
     */
    "force_lease": Anonymize<Idfpo6162k0hq>;
    /**
     *Clear all leases for a Para Id, refunding any deposits back to the original owners.
     *
     *The dispatch origin for this call must match `T::ForceOrigin`.
     */
    "clear_all_leases": Anonymize<Iaus4cb3drhu9q>;
    /**
     *Try to onboard a parachain that has a lease for the current lease period.
     *
     *This function can be useful if there was some state issue with a para that should
     *have onboarded, but was unable to. As long as they have a lease period, we can
     *let them onboard from here.
     *
     *Origin must be signed, but can be called by anyone.
     */
    "trigger_onboard": Anonymize<Iaus4cb3drhu9q>;
}>;
export type Idfpo6162k0hq = {
    "para": number;
    "leaser": SS58String;
    "amount": bigint;
    "period_begin": number;
    "period_count": number;
};
export type I4a8qeimc5p3qn = AnonymousEnum<{
    /**
     *Create a new auction.
     *
     *This can only happen when there isn't already an auction in progress and may only be
     *called by the root origin. Accepts the `duration` of this auction and the
     *`lease_period_index` of the initial lease period of the four that are to be auctioned.
     */
    "new_auction": Anonymize<I19hvnphoaj44l>;
    /**
     *Make a new bid from an account (including a parachain account) for deploying a new
     *parachain.
     *
     *Multiple simultaneous bids from the same bidder are allowed only as long as all active
     *bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.
     *
     *- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and
     *funded by) the same account.
     *- `auction_index` is the index of the auction to bid on. Should just be the present
     *value of `AuctionCounter`.
     *- `first_slot` is the first lease period index of the range to bid on. This is the
     *absolute lease period index value, not an auction-specific offset.
     *- `last_slot` is the last lease period index of the range to bid on. This is the
     *absolute lease period index value, not an auction-specific offset.
     *- `amount` is the amount to bid to be held as deposit for the parachain should the
     *bid win. This amount is held throughout the range.
     */
    "bid": Anonymize<I1ng31ej27mh4k>;
    /**
     *Cancel an in-progress auction.
     *
     *Can only be called by Root origin.
     */
    "cancel_auction": undefined;
}>;
export type I19hvnphoaj44l = {
    "duration": number;
    "lease_period_index": number;
};
export type I1ng31ej27mh4k = {
    "para": number;
    "auction_index": number;
    "first_slot": number;
    "last_slot": number;
    "amount": bigint;
};
export type Iaj4q75nu5v2i2 = AnonymousEnum<{
    /**
     *Create a new crowdloaning campaign for a parachain slot with the given lease period
     *range.
     *
     *This applies a lock to your parachain configuration, ensuring that it cannot be changed
     *by the parachain manager.
     */
    "create": Anonymize<I85qkvekflgteq>;
    /**
     *Contribute to a crowd sale. This will transfer some balance over to fund a parachain
     *slot. It will be withdrawable when the crowdloan has ended and the funds are unused.
     */
    "contribute": Anonymize<I1qt5nua7ua655>;
    /**
     *Withdraw full balance of a specific contributor.
     *
     *Origin must be signed, but can come from anyone.
     *
     *The fund must be either in, or ready for, retirement. For a fund to be *in* retirement,
     *then the retirement flag must be set. For a fund to be ready for retirement, then:
     *- it must not already be in retirement;
     *- the amount of raised funds must be bigger than the _free_ balance of the account;
     *- and either:
     *  - the block number must be at least `end`; or
     *  - the current lease period must be greater than the fund's `last_period`.
     *
     *In this case, the fund's retirement flag is set and its `end` is reset to the current
     *block number.
     *
     *- `who`: The account whose contribution should be withdrawn.
     *- `index`: The parachain to whose crowdloan the contribution was made.
     */
    "withdraw": Anonymize<Ia1u3jll6a06ae>;
    /**
     *Automatically refund contributors of an ended crowdloan.
     *Due to weight restrictions, this function may need to be called multiple
     *times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.
     *
     *Origin must be signed, but can come from anyone.
     */
    "refund": Anonymize<I666bl2fqjkejo>;
    /**
     *Remove a fund after the retirement period has ended and all funds have been returned.
     */
    "dissolve": Anonymize<I666bl2fqjkejo>;
    /**
     *Edit the configuration for an in-progress crowdloan.
     *
     *Can only be called by Root origin.
     */
    "edit": Anonymize<I85qkvekflgteq>;
    /**
     *Add an optional memo to an existing crowdloan contribution.
     *
     *Origin must be Signed, and the user must have contributed to the crowdloan.
     */
    "add_memo": Anonymize<I7cl9esn1l72m7>;
    /**
     *Poke the fund into `NewRaise`
     *
     *Origin must be Signed, and the fund has non-zero raise.
     */
    "poke": Anonymize<I666bl2fqjkejo>;
    /**
     *Contribute your entire balance to a crowd sale. This will transfer the entire balance of
     *a user over to fund a parachain slot. It will be withdrawable when the crowdloan has
     *ended and the funds are unused.
     */
    "contribute_all": Anonymize<Id68sq6o2gm8qi>;
}>;
export type I85qkvekflgteq = {
    "index": number;
    "cap": bigint;
    "first_period": number;
    "last_period": number;
    "end": number;
    "verifier"?: Anonymize<I21lmi57mmu91l>;
};
export type I1qt5nua7ua655 = {
    "index": number;
    "value": bigint;
    "signature"?: Anonymize<I86cdjmsf3a81s>;
};
export type I86cdjmsf3a81s = (MultiSignature) | undefined;
export type MultiSignature = Enum<{
    "Ed25519": FixedSizeBinary<64>;
    "Sr25519": FixedSizeBinary<64>;
    "Ecdsa": FixedSizeBinary<65>;
}>;
export declare const MultiSignature: GetEnum<MultiSignature>;
export type I7cl9esn1l72m7 = {
    "index": number;
    "memo": Binary;
};
export type Id68sq6o2gm8qi = {
    "index": number;
    "signature"?: Anonymize<I86cdjmsf3a81s>;
};
export type Idu7bbtd2jtnb9 = AnonymousEnum<{
    /**
     *Request the configuration to be updated with the specified number of cores. Warning:
     *Since this only schedules a configuration update, it takes two sessions to come into
     *effect.
     *
     *- `origin`: Root or the Coretime Chain
     *- `count`: total number of cores
     */
    "request_core_count": Anonymize<Iafscmv8tjf0ou>;
    /**
     *Request to claim the instantaneous coretime sales revenue starting from the block it was
     *last claimed until and up to the block specified. The claimed amount value is sent back
     *to the Coretime chain in a `notify_revenue` message. At the same time, the amount is
     *teleported to the Coretime chain.
     */
    "request_revenue_at": Anonymize<Ibtsa3docbr9el>;
    /**
     *Receive instructions from the `ExternalBrokerOrigin`, detailing how a specific core is
     *to be used.
     *
     *Parameters:
     *-`origin`: The `ExternalBrokerOrigin`, assumed to be the coretime chain.
     *-`core`: The core that should be scheduled.
     *-`begin`: The starting blockheight of the instruction.
     *-`assignment`: How the blockspace should be utilised.
     *-`end_hint`: An optional hint as to when this particular set of instructions will end.
     */
    "assign_core": Anonymize<I2gpmmfdqv3cdc>;
}>;
export type I2gpmmfdqv3cdc = {
    "core": number;
    "begin": number;
    "assignment": Anonymize<Idt36labebpqsd>;
    "end_hint"?: Anonymize<I4arjljr6dpflb>;
};
export type I39l72gdmkk30t = AnonymousEnum<{
    /**
     *Control the automatic migration.
     *
     *The dispatch origin of this call must be [`Config::ControlOrigin`].
     */
    "control_auto_migration": Anonymize<I7psec5e6ghc64>;
    /**
     *Continue the migration for the given `limits`.
     *
     *The dispatch origin of this call can be any signed account.
     *
     *This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,
     *Upon successful execution, the transaction fee is returned.
     *
     *The (potentially over-estimated) of the byte length of all the data read must be
     *provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing
     *that executing the current `MigrationTask` with the given `limits` will not exceed
     *`real_size_upper` bytes of read data.
     *
     *The `witness_task` is merely a helper to prevent the caller from being slashed or
     *generally trigger a migration that they do not intend. This parameter is just a message
     *from caller, saying that they believed `witness_task` was the last state of the
     *migration, and they only wish for their transaction to do anything, if this assumption
     *holds. In case `witness_task` does not match, the transaction fails.
     *
     *Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the
     *recommended way of doing this is to pass a `limit` that only bounds `count`, as the
     *`size` limit can always be overwritten.
     */
    "continue_migrate": Anonymize<I2psb0sladd863>;
    /**
     *Migrate the list of top keys by iterating each of them one by one.
     *
     *This does not affect the global migration process tracker ([`MigrationProcess`]), and
     *should only be used in case any keys are leftover due to a bug.
     */
    "migrate_custom_top": Anonymize<I585tk8khua0gk>;
    /**
     *Migrate the list of child keys by iterating each of them one by one.
     *
     *All of the given child keys must be present under one `child_root`.
     *
     *This does not affect the global migration process tracker ([`MigrationProcess`]), and
     *should only be used in case any keys are leftover due to a bug.
     */
    "migrate_custom_child": Anonymize<I3ut99di214ru2>;
    /**
     *Set the maximum limit of the signed migration.
     */
    "set_signed_max_limits": Anonymize<Iemkp87d26vsbh>;
    /**
     *Forcefully set the progress the running migration.
     *
     *This is only useful in one case: the next key to migrate is too big to be migrated with
     *a signed account, in a parachain context, and we simply want to skip it. A reasonable
     *example of this would be `:code:`, which is both very expensive to migrate, and commonly
     *used, so probably it is already migrated.
     *
     *In case you mess things up, you can also, in principle, use this to reset the migration
     *process.
     */
    "force_set_progress": Anonymize<I4ahfrt5dscf6q>;
}>;
export type I7psec5e6ghc64 = {
    "maybe_config"?: Anonymize<Ib17t3992hb64n>;
};
export type I2psb0sladd863 = {
    "limits": Anonymize<I215mkl885p4da>;
    "real_size_upper": number;
    "witness_task": Anonymize<If354jrdedj0pj>;
};
export type I585tk8khua0gk = {
    "keys": Anonymize<Itom7fk49o0c9>;
    "witness_size": number;
};
export type I3ut99di214ru2 = {
    "root": Binary;
    "child_keys": Anonymize<Itom7fk49o0c9>;
    "total_size": number;
};
export type Iemkp87d26vsbh = {
    "limits": Anonymize<I215mkl885p4da>;
};
export type I4ahfrt5dscf6q = {
    "progress_top": Anonymize<I1ufmh6d8psvik>;
    "progress_child": Anonymize<I1ufmh6d8psvik>;
};
export type I9nbjvlrb9bp1g = AnonymousEnum<{
    "send": Anonymize<I9paqujeb1fpv6>;
    /**
     *Teleport some assets from the local chain to some destination chain.
     *
     ***This function is deprecated: Use `limited_teleport_assets` instead.**
     *
     *Fee payment on the destination side is made from the asset in the `assets` vector of
     *index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
     *with all fees taken as needed from the asset.
     *
     *- `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     *- `dest`: Destination context for the assets. Will typically be `[Parent,
     *  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
     *  relay to parachain.
     *- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
     *  generally be an `AccountId32` value.
     *- `assets`: The assets to be withdrawn. This should include the assets used to pay the
     *  fee on the `dest` chain.
     *- `fee_asset_item`: The index into `assets` of the item which should be used to pay
     *  fees.
     */
    "teleport_assets": Anonymize<Iakevv83i18n4r>;
    /**
     *Transfer some assets from the local chain to the destination chain through their local,
     *destination or remote reserve.
     *
     *`assets` must have same reserve location and may not be teleportable to `dest`.
     * - `assets` have local reserve: transfer assets to sovereign account of destination
     *   chain and forward a notification XCM to `dest` to mint and deposit reserve-based
     *   assets to `beneficiary`.
     * - `assets` have destination reserve: burn local assets and forward a notification to
     *   `dest` chain to withdraw the reserve assets from this chain's sovereign account and
     *   deposit them to `beneficiary`.
     * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
     *   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
     *   to mint and deposit reserve-based assets to `beneficiary`.
     *
     ***This function is deprecated: Use `limited_reserve_transfer_assets` instead.**
     *
     *Fee payment on the destination side is made from the asset in the `assets` vector of
     *index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,
     *with all fees taken as needed from the asset.
     *
     *- `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     *- `dest`: Destination context for the assets. Will typically be `[Parent,
     *  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
     *  relay to parachain.
     *- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
     *  generally be an `AccountId32` value.
     *- `assets`: The assets to be withdrawn. This should include the assets used to pay the
     *  fee on the `dest` (and possibly reserve) chains.
     *- `fee_asset_item`: The index into `assets` of the item which should be used to pay
     *  fees.
     */
    "reserve_transfer_assets": Anonymize<Iakevv83i18n4r>;
    /**
     *Execute an XCM message from a local, signed, origin.
     *
     *An event is deposited indicating whether `msg` could be executed completely or only
     *partially.
     *
     *No more than `max_weight` will be used in its attempted execution. If this is less than
     *the maximum amount of weight that the message could take to be executed, then no
     *execution attempt will be made.
     */
    "execute": Anonymize<If2ssl12kcglhg>;
    /**
     *Extoll that a particular destination can be communicated with through a particular
     *version of XCM.
     *
     *- `origin`: Must be an origin specified by AdminOrigin.
     *- `location`: The destination that is being described.
     *- `xcm_version`: The latest version of XCM that `location` supports.
     */
    "force_xcm_version": Anonymize<Iabk8ljl5g8c86>;
    /**
     *Set a safe XCM version (the version that XCM should be encoded with if the most recent
     *version a destination can accept is unknown).
     *
     *- `origin`: Must be an origin specified by AdminOrigin.
     *- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
     */
    "force_default_xcm_version": Anonymize<Ic76kfh5ebqkpl>;
    /**
     *Ask a location to notify us regarding their XCM version and any changes to it.
     *
     *- `origin`: Must be an origin specified by AdminOrigin.
     *- `location`: The location to which we should subscribe for XCM version notifications.
     */
    "force_subscribe_version_notify": Anonymize<Icrujen33bbibf>;
    /**
     *Require that a particular destination should no longer notify us regarding any XCM
     *version changes.
     *
     *- `origin`: Must be an origin specified by AdminOrigin.
     *- `location`: The location to which we are currently subscribed for XCM version
     *  notifications which we no longer desire.
     */
    "force_unsubscribe_version_notify": Anonymize<Icrujen33bbibf>;
    /**
     *Transfer some assets from the local chain to the destination chain through their local,
     *destination or remote reserve.
     *
     *`assets` must have same reserve location and may not be teleportable to `dest`.
     * - `assets` have local reserve: transfer assets to sovereign account of destination
     *   chain and forward a notification XCM to `dest` to mint and deposit reserve-based
     *   assets to `beneficiary`.
     * - `assets` have destination reserve: burn local assets and forward a notification to
     *   `dest` chain to withdraw the reserve assets from this chain's sovereign account and
     *   deposit them to `beneficiary`.
     * - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move
     *   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`
     *   to mint and deposit reserve-based assets to `beneficiary`.
     *
     *Fee payment on the destination side is made from the asset in the `assets` vector of
     *index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
     *is needed than `weight_limit`, then the operation will fail and the sent assets may be
     *at risk.
     *
     *- `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     *- `dest`: Destination context for the assets. Will typically be `[Parent,
     *  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
     *  relay to parachain.
     *- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
     *  generally be an `AccountId32` value.
     *- `assets`: The assets to be withdrawn. This should include the assets used to pay the
     *  fee on the `dest` (and possibly reserve) chains.
     *- `fee_asset_item`: The index into `assets` of the item which should be used to pay
     *  fees.
     *- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
     */
    "limited_reserve_transfer_assets": Anonymize<I5gi8h3e5lkbeq>;
    /**
     *Teleport some assets from the local chain to some destination chain.
     *
     *Fee payment on the destination side is made from the asset in the `assets` vector of
     *index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight
     *is needed than `weight_limit`, then the operation will fail and the sent assets may be
     *at risk.
     *
     *- `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     *- `dest`: Destination context for the assets. Will typically be `[Parent,
     *  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
     *  relay to parachain.
     *- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
     *  generally be an `AccountId32` value.
     *- `assets`: The assets to be withdrawn. This should include the assets used to pay the
     *  fee on the `dest` chain.
     *- `fee_asset_item`: The index into `assets` of the item which should be used to pay
     *  fees.
     *- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
     */
    "limited_teleport_assets": Anonymize<I5gi8h3e5lkbeq>;
    /**
     *Set or unset the global suspension state of the XCM executor.
     *
     *- `origin`: Must be an origin specified by AdminOrigin.
     *- `suspended`: `true` to suspend, `false` to resume.
     */
    "force_suspension": Anonymize<Ibgm4rnf22lal1>;
    /**
     *Transfer some assets from the local chain to the destination chain through their local,
     *destination or remote reserve, or through teleports.
     *
     *Fee payment on the destination side is made from the asset in the `assets` vector of
     *index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for
     *`weight_limit` of weight. If more weight is needed than `weight_limit`, then the
     *operation will fail and the sent assets may be at risk.
     *
     *`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable
     *to `dest`, no limitations imposed on `fees`.
     * - for local reserve: transfer assets to sovereign account of destination chain and
     *   forward a notification XCM to `dest` to mint and deposit reserve-based assets to
     *   `beneficiary`.
     * - for destination reserve: burn local assets and forward a notification to `dest` chain
     *   to withdraw the reserve assets from this chain's sovereign account and deposit them
     *   to `beneficiary`.
     * - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves
     *   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint
     *   and deposit reserve-based assets to `beneficiary`.
     * - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport
     *   assets and deposit them to `beneficiary`.
     *
     *- `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     *- `dest`: Destination context for the assets. Will typically be `X2(Parent,
     *  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send
     *  from relay to parachain.
     *- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will
     *  generally be an `AccountId32` value.
     *- `assets`: The assets to be withdrawn. This should include the assets used to pay the
     *  fee on the `dest` (and possibly reserve) chains.
     *- `fee_asset_item`: The index into `assets` of the item which should be used to pay
     *  fees.
     *- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
     */
    "transfer_assets": Anonymize<I5gi8h3e5lkbeq>;
    /**
     *Claims assets trapped on this pallet because of leftover assets during XCM execution.
     *
     *- `origin`: Anyone can call this extrinsic.
     *- `assets`: The exact assets that were trapped. Use the version to specify what version
     *was the latest when they were trapped.
     *- `beneficiary`: The location/account where the claimed assets will be deposited.
     */
    "claim_assets": Anonymize<I8mmaab8je28oo>;
    /**
     *Transfer assets from the local chain to the destination chain using explicit transfer
     *types for assets and fees.
     *
     *`assets` must have same reserve location or may be teleportable to `dest`. Caller must
     *provide the `assets_transfer_type` to be used for `assets`:
     * - `TransferType::LocalReserve`: transfer assets to sovereign account of destination
     *   chain and forward a notification XCM to `dest` to mint and deposit reserve-based
     *   assets to `beneficiary`.
     * - `TransferType::DestinationReserve`: burn local assets and forward a notification to
     *   `dest` chain to withdraw the reserve assets from this chain's sovereign account and
     *   deposit them to `beneficiary`.
     * - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`
     *   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another
     *   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically
     *   the remote `reserve` is Asset Hub.
     * - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to
     *   mint/teleport assets and deposit them to `beneficiary`.
     *
     *On the destination chain, as well as any intermediary hops, `BuyExecution` is used to
     *buy execution using transferred `assets` identified by `remote_fees_id`.
     *Make sure enough of the specified `remote_fees_id` asset is included in the given list
     *of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight
     *is needed than `weight_limit`, then the operation will fail and the sent assets may be
     *at risk.
     *
     *`remote_fees_id` may use different transfer type than rest of `assets` and can be
     *specified through `fees_transfer_type`.
     *
     *The caller needs to specify what should happen to the transferred assets once they reach
     *the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which
     *contains the instructions to execute on `dest` as a final step.
     *  This is usually as simple as:
     *  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,
     *  but could be something more exotic like sending the `assets` even further.
     *
     *- `origin`: Must be capable of withdrawing the `assets` and executing XCM.
     *- `dest`: Destination context for the assets. Will typically be `[Parent,
     *  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from
     *  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from
     *  parachain across a bridge to another ecosystem destination.
     *- `assets`: The assets to be withdrawn. This should include the assets used to pay the
     *  fee on the `dest` (and possibly reserve) chains.
     *- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.
     *- `remote_fees_id`: One of the included `assets` to be used to pay fees.
     *- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.
     *- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the
     *  transfer, which also determines what happens to the assets on the destination chain.
     *- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase.
     */
    "transfer_assets_using_type_and_then": Anonymize<I6r0pr82pbiftt>;
}>;
export type I9paqujeb1fpv6 = {
    "dest": XcmVersionedLocation;
    "message": XcmVersionedXcm;
};
export type XcmVersionedXcm = Enum<{
    "V2": Anonymize<Iemqgk0vect4v7>;
    "V3": Anonymize<Ianvng4e08j9ii>;
    "V4": Anonymize<Iegrepoo0c1jc5>;
}>;
export declare const XcmVersionedXcm: GetEnum<XcmVersionedXcm>;
export type Iemqgk0vect4v7 = Array<XcmV2Instruction>;
export type XcmV2Instruction = Enum<{
    "WithdrawAsset": Anonymize<I2sllmucln1iic>;
    "ReserveAssetDeposited": Anonymize<I2sllmucln1iic>;
    "ReceiveTeleportedAsset": Anonymize<I2sllmucln1iic>;
    "QueryResponse": Anonymize<I1n70k431nr92>;
    "TransferAsset": Anonymize<I800n35601gllq>;
    "TransferReserveAsset": Anonymize<I4ahfnfo1h39ng>;
    "Transact": Anonymize<Icoi0hvjidego7>;
    "HrmpNewChannelOpenRequest": Anonymize<I5uhhrjqfuo4e5>;
    "HrmpChannelAccepted": Anonymize<Ifij4jam0o7sub>;
    "HrmpChannelClosing": Anonymize<Ieeb4svd9i8fji>;
    "ClearOrigin": undefined;
    "DescendOrigin": XcmV2MultilocationJunctions;
    "ReportError": Anonymize<I9ts0mtbeaq84a>;
    "DepositAsset": Anonymize<Ias146869ruhho>;
    "DepositReserveAsset": Anonymize<I1upba6ju0ujgo>;
    "ExchangeAsset": Anonymize<Id2jloidb259tk>;
    "InitiateReserveWithdraw": Anonymize<I4dks21gdu9pr2>;
    "InitiateTeleport": Anonymize<I4mu8vn87cfdeb>;
    "QueryHolding": Anonymize<Ib0pr3c4bd0b1s>;
    "BuyExecution": Anonymize<Id8o97c8tt042k>;
    "RefundSurplus": undefined;
    "SetErrorHandler": Anonymize<Iemqgk0vect4v7>;
    "SetAppendix": Anonymize<Iemqgk0vect4v7>;
    "ClearError": undefined;
    "ClaimAsset": Anonymize<I2i62b6lp2e74f>;
    "Trap": bigint;
    "SubscribeVersion": Anonymize<Ido2s48ntevurj>;
    "UnsubscribeVersion": undefined;
}>;
export declare const XcmV2Instruction: GetEnum<XcmV2Instruction>;
export type I1n70k431nr92 = {
    "query_id": bigint;
    "response": XcmV2Response;
    "max_weight": bigint;
};
export type I800n35601gllq = {
    "assets": Anonymize<I2sllmucln1iic>;
    "beneficiary": Anonymize<I4frqunb5hj2km>;
};
export type I4ahfnfo1h39ng = {
    "assets": Anonymize<I2sllmucln1iic>;
    "dest": Anonymize<I4frqunb5hj2km>;
    "xcm": Anonymize<Iemqgk0vect4v7>;
};
export type Icoi0hvjidego7 = {
    "origin_type": XcmV2OriginKind;
    "require_weight_at_most": bigint;
    "call": Binary;
};
export type I9ts0mtbeaq84a = {
    "query_id": bigint;
    "dest": Anonymize<I4frqunb5hj2km>;
    "max_response_weight": bigint;
};
export type Ias146869ruhho = {
    "assets": XcmV2MultiAssetFilter;
    "max_assets": number;
    "beneficiary": Anonymize<I4frqunb5hj2km>;
};
export type XcmV2MultiAssetFilter = Enum<{
    "Definite": Anonymize<I2sllmucln1iic>;
    "Wild": XcmV2MultiassetWildMultiAsset;
}>;
export declare const XcmV2MultiAssetFilter: GetEnum<XcmV2MultiAssetFilter>;
export type XcmV2MultiassetWildMultiAsset = Enum<{
    "All": undefined;
    "AllOf": Anonymize<I8ojnukqr6c3j6>;
}>;
export declare const XcmV2MultiassetWildMultiAsset: GetEnum<XcmV2MultiassetWildMultiAsset>;
export type I8ojnukqr6c3j6 = {
    "id": XcmV2MultiassetAssetId;
    "fun": XcmV2MultiassetWildFungibility;
};
export type I1upba6ju0ujgo = {
    "assets": XcmV2MultiAssetFilter;
    "max_assets": number;
    "dest": Anonymize<I4frqunb5hj2km>;
    "xcm": Anonymize<Iemqgk0vect4v7>;
};
export type Id2jloidb259tk = {
    "give": XcmV2MultiAssetFilter;
    "receive": Anonymize<I2sllmucln1iic>;
};
export type I4dks21gdu9pr2 = {
    "assets": XcmV2MultiAssetFilter;
    "reserve": Anonymize<I4frqunb5hj2km>;
    "xcm": Anonymize<Iemqgk0vect4v7>;
};
export type I4mu8vn87cfdeb = {
    "assets": XcmV2MultiAssetFilter;
    "dest": Anonymize<I4frqunb5hj2km>;
    "xcm": Anonymize<Iemqgk0vect4v7>;
};
export type Ib0pr3c4bd0b1s = {
    "query_id": bigint;
    "dest": Anonymize<I4frqunb5hj2km>;
    "assets": XcmV2MultiAssetFilter;
    "max_response_weight": bigint;
};
export type Id8o97c8tt042k = {
    "fees": Anonymize<Id8h647t880l31>;
    "weight_limit": XcmV2WeightLimit;
};
export type XcmV2WeightLimit = Enum<{
    "Unlimited": undefined;
    "Limited": bigint;
}>;
export declare const XcmV2WeightLimit: GetEnum<XcmV2WeightLimit>;
export type I2i62b6lp2e74f = {
    "assets": Anonymize<I2sllmucln1iic>;
    "ticket": Anonymize<I4frqunb5hj2km>;
};
export type Ido2s48ntevurj = {
    "query_id": bigint;
    "max_response_weight": bigint;
};
export type Ianvng4e08j9ii = Array<XcmV3Instruction>;
export type XcmV3Instruction = Enum<{
    "WithdrawAsset": Anonymize<Iai6dhqiq3bach>;
    "ReserveAssetDeposited": Anonymize<Iai6dhqiq3bach>;
    "ReceiveTeleportedAsset": Anonymize<Iai6dhqiq3bach>;
    "QueryResponse": Anonymize<I6g12ltekg2vaj>;
    "TransferAsset": Anonymize<I8d6ni89sh0qmn>;
    "TransferReserveAsset": Anonymize<Ib2euffogp56pp>;
    "Transact": Anonymize<I92p6l5cs3fr50>;
    "HrmpNewChannelOpenRequest": Anonymize<I5uhhrjqfuo4e5>;
    "HrmpChannelAccepted": Anonymize<Ifij4jam0o7sub>;
    "HrmpChannelClosing": Anonymize<Ieeb4svd9i8fji>;
    "ClearOrigin": undefined;
    "DescendOrigin": XcmV3Junctions;
    "ReportError": Anonymize<I4r3v6e91d1qbs>;
    "DepositAsset": Anonymize<Ia848euuv1lip6>;
    "DepositReserveAsset": Anonymize<I3m8e0mi6lq6fj>;
    "ExchangeAsset": Anonymize<Ich3d4125568vq>;
    "InitiateReserveWithdraw": Anonymize<I3k3ia72gehj6b>;
    "InitiateTeleport": Anonymize<I3m8e0mi6lq6fj>;
    "ReportHolding": Anonymize<I4qgd1h8m3umqc>;
    "BuyExecution": Anonymize<I9ff02md5rmeur>;
    "RefundSurplus": undefined;
    "SetErrorHandler": Anonymize<Ianvng4e08j9ii>;
    "SetAppendix": Anonymize<Ianvng4e08j9ii>;
    "ClearError": undefined;
    "ClaimAsset": Anonymize<I8pu3j74el68mi>;
    "Trap": bigint;
    "SubscribeVersion": Anonymize<Ieprdqqu7ildvr>;
    "UnsubscribeVersion": undefined;
    "BurnAsset": Anonymize<Iai6dhqiq3bach>;
    "ExpectAsset": Anonymize<Iai6dhqiq3bach>;
    "ExpectOrigin"?: Anonymize<Ia9cgf4r40b26h>;
    "ExpectError"?: Anonymize<I7sltvf8v2nure>;
    "ExpectTransactStatus": XcmV3MaybeErrorCode;
    "QueryPallet": Anonymize<Iba5bdbapp16oo>;
    "ExpectPallet": Anonymize<Id7mf37dkpgfjs>;
    "ReportTransactStatus": Anonymize<I4r3v6e91d1qbs>;
    "ClearTransactStatus": undefined;
    "UniversalOrigin": XcmV3Junction;
    "ExportMessage": Anonymize<I8up5nu6gcp077>;
    "LockAsset": Anonymize<I2ieo5vo1bi5a0>;
    "UnlockAsset": Anonymize<I3u52dm5pikv6l>;
    "NoteUnlockable": Anonymize<Idu2tro9aukpp8>;
    "RequestUnlock": Anonymize<Iarqpt33435e7r>;
    "SetFeesMode": Anonymize<I4nae9rsql8fa7>;
    "SetTopic": FixedSizeBinary<32>;
    "ClearTopic": undefined;
    "AliasOrigin": Anonymize<I4c0s5cioidn76>;
    "UnpaidExecution": Anonymize<I40d50jeai33oq>;
}>;
export declare const XcmV3Instruction: GetEnum<XcmV3Instruction>;
export type I6g12ltekg2vaj = {
    "query_id": bigint;
    "response": XcmV3Response;
    "max_weight": Anonymize<I4q39t5hn830vp>;
    "querier"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I8d6ni89sh0qmn = {
    "assets": Anonymize<Iai6dhqiq3bach>;
    "beneficiary": Anonymize<I4c0s5cioidn76>;
};
export type Ib2euffogp56pp = {
    "assets": Anonymize<Iai6dhqiq3bach>;
    "dest": Anonymize<I4c0s5cioidn76>;
    "xcm": Anonymize<Ianvng4e08j9ii>;
};
export type Ia848euuv1lip6 = {
    "assets": XcmV3MultiassetMultiAssetFilter;
    "beneficiary": Anonymize<I4c0s5cioidn76>;
};
export type XcmV3MultiassetMultiAssetFilter = Enum<{
    "Definite": Anonymize<Iai6dhqiq3bach>;
    "Wild": XcmV3MultiassetWildMultiAsset;
}>;
export declare const XcmV3MultiassetMultiAssetFilter: GetEnum<XcmV3MultiassetMultiAssetFilter>;
export type XcmV3MultiassetWildMultiAsset = Enum<{
    "All": undefined;
    "AllOf": Anonymize<Iemi0m9547o42b>;
    "AllCounted": number;
    "AllOfCounted": Anonymize<I2ii8gjc2m1ca3>;
}>;
export declare const XcmV3MultiassetWildMultiAsset: GetEnum<XcmV3MultiassetWildMultiAsset>;
export type Iemi0m9547o42b = {
    "id": XcmV3MultiassetAssetId;
    "fun": XcmV2MultiassetWildFungibility;
};
export type I2ii8gjc2m1ca3 = {
    "id": XcmV3MultiassetAssetId;
    "fun": XcmV2MultiassetWildFungibility;
    "count": number;
};
export type I3m8e0mi6lq6fj = {
    "assets": XcmV3MultiassetMultiAssetFilter;
    "dest": Anonymize<I4c0s5cioidn76>;
    "xcm": Anonymize<Ianvng4e08j9ii>;
};
export type Ich3d4125568vq = {
    "give": XcmV3MultiassetMultiAssetFilter;
    "want": Anonymize<Iai6dhqiq3bach>;
    "maximal": boolean;
};
export type I3k3ia72gehj6b = {
    "assets": XcmV3MultiassetMultiAssetFilter;
    "reserve": Anonymize<I4c0s5cioidn76>;
    "xcm": Anonymize<Ianvng4e08j9ii>;
};
export type I4qgd1h8m3umqc = {
    "response_info": Anonymize<I4r3v6e91d1qbs>;
    "assets": XcmV3MultiassetMultiAssetFilter;
};
export type I9ff02md5rmeur = {
    "fees": Anonymize<Idcm24504c8bkk>;
    "weight_limit": XcmV3WeightLimit;
};
export type I8pu3j74el68mi = {
    "assets": Anonymize<Iai6dhqiq3bach>;
    "ticket": Anonymize<I4c0s5cioidn76>;
};
export type I8up5nu6gcp077 = {
    "network": XcmV3JunctionNetworkId;
    "destination": XcmV3Junctions;
    "xcm": Anonymize<Ianvng4e08j9ii>;
};
export type I2ieo5vo1bi5a0 = {
    "asset": Anonymize<Idcm24504c8bkk>;
    "unlocker": Anonymize<I4c0s5cioidn76>;
};
export type I3u52dm5pikv6l = {
    "asset": Anonymize<Idcm24504c8bkk>;
    "target": Anonymize<I4c0s5cioidn76>;
};
export type Idu2tro9aukpp8 = {
    "asset": Anonymize<Idcm24504c8bkk>;
    "owner": Anonymize<I4c0s5cioidn76>;
};
export type Iarqpt33435e7r = {
    "asset": Anonymize<Idcm24504c8bkk>;
    "locker": Anonymize<I4c0s5cioidn76>;
};
export type Iakevv83i18n4r = {
    "dest": XcmVersionedLocation;
    "beneficiary": XcmVersionedLocation;
    "assets": XcmVersionedAssets;
    "fee_asset_item": number;
};
export type If2ssl12kcglhg = {
    "message": XcmVersionedXcm;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Ic76kfh5ebqkpl = {
    "maybe_xcm_version"?: Anonymize<I4arjljr6dpflb>;
};
export type Icrujen33bbibf = {
    "location": XcmVersionedLocation;
};
export type I5gi8h3e5lkbeq = {
    "dest": XcmVersionedLocation;
    "beneficiary": XcmVersionedLocation;
    "assets": XcmVersionedAssets;
    "fee_asset_item": number;
    "weight_limit": XcmV3WeightLimit;
};
export type Ibgm4rnf22lal1 = {
    "suspended": boolean;
};
export type I8mmaab8je28oo = {
    "assets": XcmVersionedAssets;
    "beneficiary": XcmVersionedLocation;
};
export type I6r0pr82pbiftt = {
    "dest": XcmVersionedLocation;
    "assets": XcmVersionedAssets;
    "assets_transfer_type": Anonymize<Ifkg2rgjl54s88>;
    "remote_fees_id": XcmVersionedAssetId;
    "fees_transfer_type": Anonymize<Ifkg2rgjl54s88>;
    "custom_xcm_on_dest": XcmVersionedXcm;
    "weight_limit": XcmV3WeightLimit;
};
export type Ifkg2rgjl54s88 = AnonymousEnum<{
    "Teleport": undefined;
    "LocalReserve": undefined;
    "DestinationReserve": undefined;
    "RemoteReserve": XcmVersionedLocation;
}>;
export type I3lic4llm6egbr = AnonymousEnum<{
    /**
     *Remove a page which has no more messages remaining to be processed or is stale.
     */
    "reap_page": Anonymize<Ibv4ep0hngvn9e>;
    /**
     *Execute an overweight message.
     *
     *Temporary processing errors will be propagated whereas permanent errors are treated
     *as success condition.
     *
     *- `origin`: Must be `Signed`.
     *- `message_origin`: The origin from which the message to be executed arrived.
     *- `page`: The page in the queue in which the message to be executed is sitting.
     *- `index`: The index into the queue of the message to be executed.
     *- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
     *  of the message.
     *
     *Benchmark complexity considerations: O(index + weight_limit).
     */
    "execute_overweight": Anonymize<Ieoqregtp7b00>;
}>;
export type Ibv4ep0hngvn9e = {
    "message_origin": ParachainsInclusionAggregateMessageOrigin;
    "page_index": number;
};
export type Ieoqregtp7b00 = {
    "message_origin": ParachainsInclusionAggregateMessageOrigin;
    "page": number;
    "index": number;
    "weight_limit": Anonymize<I4q39t5hn830vp>;
};
export type I85dm8mgt48css = AnonymousEnum<{
    /**
     *Initialize a conversion rate to native balance for the given asset.
     *
     *## Complexity
     *- O(1)
     */
    "create": Anonymize<I6nmp4rhqla35>;
    /**
     *Update the conversion rate to native balance for the given asset.
     *
     *## Complexity
     *- O(1)
     */
    "update": Anonymize<I6nmp4rhqla35>;
    /**
     *Remove an existing conversion rate to native balance for the given asset.
     *
     *## Complexity
     *- O(1)
     */
    "remove": Anonymize<I8ndstn7sf4kek>;
}>;
export type I918ie8roegt3d = AnonymousEnum<{
    /**
     *Report voter equivocation/misbehavior. This method will verify the
     *equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence
     *will be reported.
     */
    "report_equivocation": Anonymize<I3pirohb0sp3ic>;
    /**
     *Report voter equivocation/misbehavior. This method will verify the
     *equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence
     *will be reported.
     *
     *This extrinsic must be called unsigned and it is expected that only
     *block authors will call it (validated in `ValidateUnsigned`), as such
     *if the block author is defined it will be defined as the equivocation
     *reporter.
     */
    "report_equivocation_unsigned": Anonymize<I3pirohb0sp3ic>;
    /**
     *Reset BEEFY consensus by setting a new BEEFY genesis at `delay_in_blocks` blocks in the
     *future.
     *
     *Note: `delay_in_blocks` has to be at least 1.
     */
    "set_new_genesis": Anonymize<Iemqna2uucuei9>;
}>;
export type I3pirohb0sp3ic = {
    "equivocation_proof": Anonymize<Ifiofttj73fsk1>;
    "key_owner_proof": Anonymize<I3ia7aufsoj0l1>;
};
export type Ifiofttj73fsk1 = {
    "first": Anonymize<I3eao7ea0kppv8>;
    "second": Anonymize<I3eao7ea0kppv8>;
};
export type I3eao7ea0kppv8 = {
    "commitment": Anonymize<I7tlsksnl3jlio>;
    "id": FixedSizeBinary<33>;
    "signature": FixedSizeBinary<65>;
};
export type I7tlsksnl3jlio = {
    "payload": Anonymize<I6vldfoagmi4g5>;
    "block_number": number;
    "validator_set_id": bigint;
};
export type I6vldfoagmi4g5 = Array<Anonymize<I6cq0cjs0cjcep>>;
export type I6cq0cjs0cjcep = [FixedSizeBinary<2>, Binary];
export type Iemqna2uucuei9 = {
    "delay_in_blocks": number;
};
export type Iaqet9jc3ihboe = {
    "header": Anonymize<Ic952bubvq4k7d>;
    "extrinsics": Anonymize<Itom7fk49o0c9>;
};
export type I2v50gu3s1aqk6 = AnonymousEnum<{
    "AllExtrinsics": undefined;
    "OnlyInherents": undefined;
}>;
export type I2gp03kpao2rm3 = ResultPayload<Anonymize<I9v7lrhj0m94ts>, TransactionValidityError>;
export type TransactionValidityError = Enum<{
    "Invalid": TransactionValidityInvalidTransaction;
    "Unknown": TransactionValidityUnknownTransaction;
}>;
export declare const TransactionValidityError: GetEnum<TransactionValidityError>;
export type TransactionValidityInvalidTransaction = Enum<{
    "Call": undefined;
    "Payment": undefined;
    "Future": undefined;
    "Stale": undefined;
    "BadProof": undefined;
    "AncientBirthBlock": undefined;
    "ExhaustsResources": undefined;
    "Custom": number;
    "BadMandatory": undefined;
    "MandatoryValidation": undefined;
    "BadSigner": undefined;
}>;
export declare const TransactionValidityInvalidTransaction: GetEnum<TransactionValidityInvalidTransaction>;
export type TransactionValidityUnknownTransaction = Enum<{
    "CannotLookup": undefined;
    "NoUnsignedValidator": undefined;
    "Custom": number;
}>;
export declare const TransactionValidityUnknownTransaction: GetEnum<TransactionValidityUnknownTransaction>;
export type If7uv525tdvv7a = Array<Anonymize<I76hdjk9qh40no>>;
export type I76hdjk9qh40no = [FixedSizeBinary<8>, Binary];
export type I2an1fs2eiebjp = {
    "okay": boolean;
    "fatal_error": boolean;
    "errors": Anonymize<If7uv525tdvv7a>;
};
export type TransactionValidityTransactionSource = Enum<{
    "InBlock": undefined;
    "Local": undefined;
    "External": undefined;
}>;
export declare const TransactionValidityTransactionSource: GetEnum<TransactionValidityTransactionSource>;
export type Iajbob6uln5jct = ResultPayload<Anonymize<I6g5lcd9vf2cr0>, TransactionValidityError>;
export type I6g5lcd9vf2cr0 = {
    "priority": bigint;
    "requires": Anonymize<Itom7fk49o0c9>;
    "provides": Anonymize<Itom7fk49o0c9>;
    "longevity": bigint;
    "propagate": boolean;
};
export type I5985kfq7sspta = [Anonymize<Iarlj3qd8u1v13>, Anonymize<I94uslvmqboam8>];
export type I94uslvmqboam8 = {
    "session_start_block": number;
    "group_rotation_frequency": number;
    "now": number;
};
export type I4jmodim0td97u = Array<CoreState>;
export type CoreState = Enum<{
    "Occupied": Anonymize<Ish8ehjre2op3>;
    "Scheduled": Anonymize<I4fn9prq249c92>;
    "Free": undefined;
}>;
export declare const CoreState: GetEnum<CoreState>;
export type Ish8ehjre2op3 = {
    "next_up_on_available"?: Anonymize<I7o5sh7g5s2102>;
    "occupied_since": number;
    "time_out_at": number;
    "next_up_on_time_out"?: Anonymize<I7o5sh7g5s2102>;
    "availability": {
        bytes: Uint8Array;
        bitsLen: number;
    };
    "group_responsible": number;
    "candidate_hash": FixedSizeBinary<32>;
    "candidate_descriptor": Anonymize<Ic7r865c0luc3k>;
};
export type I7o5sh7g5s2102 = (Anonymize<I4fn9prq249c92>) | undefined;
export type I4fn9prq249c92 = {
    "para_id": number;
    "collator"?: Anonymize<I4s6vifaf8k998>;
};
export type OccupiedCoreAssumption = Enum<{
    "Included": undefined;
    "TimedOut": undefined;
    "Free": undefined;
}>;
export declare const OccupiedCoreAssumption: GetEnum<OccupiedCoreAssumption>;
export type I9kavsa730sjfr = (Anonymize<Ifn6q3equiq9qi>) | undefined;
export type Ifn6q3equiq9qi = {
    "parent_head": Binary;
    "relay_parent_number": number;
    "relay_parent_storage_root": FixedSizeBinary<32>;
    "max_pov_size": number;
};
export type Ifn3gc8nc1jruq = (Anonymize<If66o9rr0jliun>) | undefined;
export type If66o9rr0jliun = [Anonymize<Ifn6q3equiq9qi>, FixedSizeBinary<32>];
export type Ic5plng3kq7oc8 = (Anonymize<I7t2ron16fup67>) | undefined;
export type Iajdik7eaq7pn0 = Array<CandidateEvent>;
export type CandidateEvent = Enum<{
    "CandidateBacked": Anonymize<Icdu1nb48l753j>;
    "CandidateIncluded": Anonymize<Icdu1nb48l753j>;
    "CandidateTimedOut": Anonymize<I618m2uag0aopg>;
}>;
export declare const CandidateEvent: GetEnum<CandidateEvent>;
export type I2pf0b05mc7sdr = Array<Anonymize<I9hvej6h53dqj0>>;
export type I9hvej6h53dqj0 = [number, Anonymize<Iev3u09i2vqn93>];
export type I7n1him6iq79fv = (Anonymize<Ilg2fqs6cjgs3>) | undefined;
export type Ialuks4a6iupcs = (Anonymize<I9m4rd2a7lc9md>) | undefined;
export type Idv6tqqnmb3i1j = Array<Anonymize<I50481grhh0k81>>;
export type I50481grhh0k81 = [number, FixedSizeBinary<32>, Anonymize<I87u7jalc0lhah>];
export type Iekan13fn586c2 = (Anonymize<I80rnntpog8qp6>) | undefined;
export type Idrp5a1qbbi2au = Array<Anonymize<I9conp6ego37vs>>;
export type I9conp6ego37vs = [number, FixedSizeBinary<32>, Anonymize<I5kqchhvguhfvt>];
export type Iacuu7pfj40eo5 = (Anonymize<Ic2oon6vd55kpc>) | undefined;
export type Ic2oon6vd55kpc = {
    "constraints": Anonymize<I20qrdh8gc2a98>;
    "pending_availability": Anonymize<I77oh9dj91nu1>;
};
export type I20qrdh8gc2a98 = {
    "min_relay_parent_number": number;
    "max_pov_size": number;
    "max_code_size": number;
    "ump_remaining": number;
    "ump_remaining_bytes": number;
    "max_ump_num_per_candidate": number;
    "dmp_remaining_messages": Anonymize<Icgljjb6j82uhn>;
    "hrmp_inbound": Anonymize<Icgljjb6j82uhn>;
    "hrmp_channels_out": Anonymize<I1ilbeu6195gbh>;
    "max_hrmp_num_per_candidate": number;
    "required_parent": Binary;
    "validation_code_hash": FixedSizeBinary<32>;
    "upgrade_restriction"?: Anonymize<Ia3sb0vgvovhtg>;
    "future_validation_code"?: Anonymize<I7gtb9g2qv4r10>;
};
export type I1ilbeu6195gbh = Array<Anonymize<If6i47cerum785>>;
export type If6i47cerum785 = [number, Anonymize<Ifq5eqaefrc6it>];
export type Ifq5eqaefrc6it = {
    "bytes_remaining": number;
    "messages_remaining": number;
};
export type Ia3sb0vgvovhtg = (UpgradeRestriction) | undefined;
export type I7gtb9g2qv4r10 = (Anonymize<I4p5t2krb1gmvp>) | undefined;
export type I77oh9dj91nu1 = Array<Anonymize<Idu4o4nmhcojol>>;
export type Idu4o4nmhcojol = {
    "candidate_hash": FixedSizeBinary<32>;
    "descriptor": Anonymize<Ic7r865c0luc3k>;
    "commitments": Anonymize<Ic1d4u2opv3fst>;
    "relay_parent_number": number;
    "max_pov_size": number;
};
export type I3cs5lehnlql7v = Array<Anonymize<I7t2ron16fup67>>;
export type Ifogo2hpqpe6b4 = (Anonymize<I9gtbosgm5vndt>) | undefined;
export type I9gtbosgm5vndt = {
    "validators": Anonymize<I2fb54desdqd9n>;
    "id": bigint;
};
export type I7rj2bnb76oko1 = ResultPayload<FixedSizeBinary<32>, MmrPrimitivesError>;
export type MmrPrimitivesError = Enum<{
    "InvalidNumericOp": undefined;
    "Push": undefined;
    "GetRoot": undefined;
    "Commit": undefined;
    "GenerateProof": undefined;
    "Verify": undefined;
    "LeafNotFound": undefined;
    "PalletNotIncluded": undefined;
    "InvalidLeafIndex": undefined;
    "InvalidBestKnownBlock": undefined;
}>;
export declare const MmrPrimitivesError: GetEnum<MmrPrimitivesError>;
export type I4o356o7eq06ms = ResultPayload<bigint, MmrPrimitivesError>;
export type I46e127tr8ma2h = ResultPayload<Anonymize<Ifbk46m3pjer4k>, MmrPrimitivesError>;
export type Ifbk46m3pjer4k = [Anonymize<Itom7fk49o0c9>, Anonymize<I38ee9is0n4jn9>];
export type I38ee9is0n4jn9 = {
    "leaf_indices": Anonymize<Iafqnechp3omqg>;
    "leaf_count": bigint;
    "items": Anonymize<Ic5m5lp1oioo8r>;
};
export type Ie88mmnuvmuvp5 = ResultPayload<undefined, MmrPrimitivesError>;
export type Iems84l8lk2v0c = {
    "slot_duration": bigint;
    "epoch_length": bigint;
    "c": Anonymize<I200n1ov5tbcvr>;
    "authorities": Anonymize<I3geksg000c171>;
    "randomness": FixedSizeBinary<32>;
    "allowed_slots": BabeAllowedSlots;
};
export type I1r5ke30ueqo0r = {
    "epoch_index": bigint;
    "start_slot": bigint;
    "duration": bigint;
    "authorities": Anonymize<I3geksg000c171>;
    "randomness": FixedSizeBinary<32>;
    "config": Anonymize<I8jnd4d8ip6djo>;
};
export type Icerf8h8pdu8ss = (Anonymize<I66iuq7l8se39>) | undefined;
export type I66iuq7l8se39 = Array<Anonymize<I9tmff36km6vjg>>;
export type I9tmff36km6vjg = [Binary, FixedSizeBinary<4>];
export type I6spmpef2c7svf = {
    "weight": Anonymize<I4q39t5hn830vp>;
    "class": DispatchClass;
    "partial_fee": bigint;
};
export type Iei2mvq0mjvt81 = {
    "inclusion_fee"?: Anonymize<Id37fum600qfau>;
    "tip": bigint;
};
export type Id37fum600qfau = (Anonymize<I246faqtjrsnee>) | undefined;
export type I246faqtjrsnee = {
    "base_fee": bigint;
    "len_fee": bigint;
    "adjusted_weight_fee": bigint;
};
export type I84lqest6ohk0p = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "Scheduler": Anonymize<I8de1pdspn1e7b>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "Babe": Anonymize<I1jeo0dpbkma5g>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Indices": Anonymize<I66vlm8f4l1oll>;
    "Balances": Anonymize<I9svldsp29mh87>;
    "Staking": Anonymize<I5jvuh9dlbdd20>;
    "Session": Anonymize<Iceajactc9a8pc>;
    "Grandpa": Anonymize<I5u9ggmn8umfqm>;
    "Treasury": Anonymize<I1s28h18nhih63>;
    "ConvictionVoting": Anonymize<Ie5kd08tutk56t>;
    "Referenda": Anonymize<I657vbelok0a1m>;
    "Whitelist": Anonymize<Ir5tebvkvev7j>;
    "Claims": Anonymize<Id0dj18ct09hlp>;
    "Vesting": Anonymize<Icgf8vmtkbnu4u>;
    "Utility": Anonymize<I75dqej8vfnpfi>;
    "Proxy": Anonymize<I18bmvvfanvkfb>;
    "Multisig": Anonymize<I8n15dcm1d8cdk>;
    "Bounties": Anonymize<I91kpi5kjh9on2>;
    "ChildBounties": Anonymize<I1b6drdhvt5hl9>;
    "ElectionProviderMultiPhase": Anonymize<I15soeogelbbbh>;
    "VoterList": Anonymize<Ifvfo1l0vu2o7e>;
    "NominationPools": Anonymize<I57mljkkr28m9p>;
    "FastUnstake": Anonymize<I44snhj1gahvrd>;
    "Configuration": Anonymize<Ia9ptue949ognv>;
    "ParasShared": undefined;
    "ParaInclusion": undefined;
    "ParaInherent": Anonymize<Id5l4f3jqtnb0u>;
    "Paras": Anonymize<Ie2dden5k4kk7t>;
    "Initializer": Anonymize<Ieggtnkc96vvt7>;
    "Hrmp": Anonymize<I45adic8nko129>;
    "ParasDisputes": Anonymize<Ifkh1ep7g9h3rv>;
    "ParasSlashing": Anonymize<I3jj054kp2bjol>;
    "OnDemand": Anonymize<I9s7urueli180g>;
    "Registrar": Anonymize<Icclqj5sge2nc7>;
    "Slots": Anonymize<Iafhis924j14hg>;
    "Auctions": Anonymize<I4a8qeimc5p3qn>;
    "Crowdloan": Anonymize<Iaj4q75nu5v2i2>;
    "Coretime": Anonymize<Idu7bbtd2jtnb9>;
    "StateTrieMigration": Anonymize<I39l72gdmkk30t>;
    "XcmPallet": Anonymize<I9nbjvlrb9bp1g>;
    "MessageQueue": Anonymize<I3lic4llm6egbr>;
    "AssetRate": Anonymize<I85dm8mgt48css>;
    "Beefy": Anonymize<I918ie8roegt3d>;
}>;
export type I1p1369d52j8jd = ResultPayload<Anonymize<I66cvqflm1qj24>, Anonymize<Iavct6f844hfju>>;
export type I66cvqflm1qj24 = Array<XcmVersionedAssetId>;
export type Iavct6f844hfju = AnonymousEnum<{
    "Unimplemented": undefined;
    "VersionedConversionFailed": undefined;
    "WeightNotComputable": undefined;
    "UnhandledXcmVersion": undefined;
    "AssetNotFound": undefined;
    "Unroutable": undefined;
}>;
export type Ic0c3req3mlc1l = ResultPayload<Anonymize<I4q39t5hn830vp>, Anonymize<Iavct6f844hfju>>;
export type I7ocn4njqde3v5 = ResultPayload<bigint, Anonymize<Iavct6f844hfju>>;
export type I5rlt6h8ph553n = ResultPayload<XcmVersionedAssets, Anonymize<Iavct6f844hfju>>;
export type I8l4k747fg8qon = ResultPayload<Anonymize<I89r145r0asup8>, Anonymize<I55ku9c5gk50hb>>;
export type I89r145r0asup8 = {
    "execution_result": Anonymize<I9q1bvgjt2m1d1>;
    "emitted_events": Anonymize<Ibcrpeksorfplk>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type Ibcrpeksorfplk = Array<Anonymize<Iev4ibvj7u3hop>>;
export type I3i0ce56p044d2 = (XcmVersionedXcm) | undefined;
export type I47tkk5e5nm6g7 = Array<Anonymize<I60vv2hvlt348b>>;
export type I60vv2hvlt348b = [XcmVersionedLocation, Anonymize<I7ao2ct6q454mu>];
export type I7ao2ct6q454mu = Array<XcmVersionedXcm>;
export type I55ku9c5gk50hb = AnonymousEnum<{
    "Unimplemented": undefined;
    "VersionedConversionFailed": undefined;
}>;
export type I3s5165bcnp4qa = ResultPayload<Anonymize<I7d3fbn8n5at2g>, Anonymize<I55ku9c5gk50hb>>;
export type I7d3fbn8n5at2g = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<Ibcrpeksorfplk>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type Ieh6nis3hdbtgi = ResultPayload<SS58String, Anonymize<Ibaohq34aedndv>>;
export type Ibaohq34aedndv = AnonymousEnum<{
    "Unsupported": undefined;
    "VersionedConversionFailed": undefined;
}>;
export type Ie9sr1iqcg3cgm = ResultPayload<undefined, string>;
export type I1mqgk2tmnn9i2 = (string) | undefined;
export type I6lr8sctk0bi4e = Array<string>;
export type I6oojue2nhp42f = Array<Anonymize<Id0nkgntglj4vc>>;
export type Id0nkgntglj4vc = {
    "phase": Phase;
    "event": Anonymize<I4djp4s5jm2vmj>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I4djp4s5jm2vmj = AnonymousEnum<{
    "System": Anonymize<I7pnhsc9dv4sdl>;
    "Indices": Anonymize<IndicesEvent>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "Staking": StakingEvent;
    "Offences": OffencesEvent;
    "Session": SessionEvent;
    "Grandpa": GrandpaEvent;
    "Treasury": Anonymize<Iceo3qo846468b>;
    "ConvictionVoting": ConvictionVotingEvent;
    "Referenda": Anonymize<Idfraa3b4eu018>;
    "FellowshipCollective": Anonymize<Ifuucdgpuglunu>;
    "FellowshipReferenda": Anonymize<I28aoa43r171jt>;
    "Whitelist": Anonymize<Icfm8kf536krgv>;
    "Parameters": Anonymize<In3t00aurfuda>;
    "Claims": CommonClaimsEvent;
    "Utility": Anonymize<Ib4h80g8852pr1>;
    "Society": Anonymize<Ifhcq78pr9md4e>;
    "Recovery": RecoveryEvent;
    "Vesting": VestingEvent;
    "Scheduler": Anonymize<I1c0hsaopam5qt>;
    "Proxy": Anonymize<I26jj4ru8eej02>;
    "Multisig": Anonymize<Ihko06lcnga6c>;
    "Preimage": PreimageEvent;
    "Bounties": BountiesEvent;
    "ChildBounties": ChildBountiesEvent;
    "ElectionProviderMultiPhase": ElectionProviderMultiPhaseEvent;
    "Nis": Anonymize<I9dmlhfape78ke>;
    "NisCounterpartBalances": Anonymize<Iao8h4hv7atnq3>;
    "VoterList": BagsListEvent;
    "NominationPools": NominationPoolsEvent;
    "FastUnstake": Anonymize<I8r1bva5169aii>;
    "ParaInclusion": ParachainsInclusionEvent;
    "Paras": ParachainsParasEvent;
    "Hrmp": ParachainsHrmpEvent;
    "ParasDisputes": ParachainsDisputesEvent;
    "OnDemandAssignmentProvider": Anonymize<Icuu6jjue8o6eb>;
    "Registrar": CommonParasRegistrarEvent;
    "Slots": CommonSlotsEvent;
    "Auctions": CommonAuctionsEvent;
    "Crowdloan": Anonymize<I74uj7qvtvb25f>;
    "Coretime": PolkadotRuntimeParachainsCoretimeEvent;
    "XcmPallet": Anonymize<I5ce1ru810vv9d>;
    "MessageQueue": Anonymize<I13vul90391uuv>;
    "AssetRate": AssetRateEvent;
}>;
export type I7pnhsc9dv4sdl = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I64gl0ge4ir4jn>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I64gl0ge4ir4jn = {
    "dispatch_error": Anonymize<I3h7okodr0vdlp>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I3h7okodr0vdlp = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<Iclbp92g9eqbus>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type Iclbp92g9eqbus = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "Babe": Anonymize<Ib6q602k6o213a>;
    "Timestamp": undefined;
    "Indices": Anonymize<Icq1825fru3di2>;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "Staking": Anonymize<I11137r14aka6n>;
    "Offences": undefined;
    "Historical": undefined;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Grandpa": Anonymize<I7q8i0pp1gkas6>;
    "AuthorityDiscovery": undefined;
    "Treasury": Anonymize<I36uss0m9fpcsf>;
    "ConvictionVoting": Anonymize<Idfa8k8ikssbsf>;
    "Referenda": Anonymize<I84u4ul208g742>;
    "FellowshipCollective": Anonymize<Ib69hbq04ogo7t>;
    "FellowshipReferenda": Anonymize<I84u4ul208g742>;
    "Origins": undefined;
    "Whitelist": Anonymize<I15nctscutpbeh>;
    "Parameters": undefined;
    "Claims": Anonymize<Ijh2jbbqvb176>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Society": Anonymize<I6n8dkudb3ed0r>;
    "Recovery": Anonymize<I29mqdjoga49c9>;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Preimage": Anonymize<I1iknkudsdnbks>;
    "Bounties": Anonymize<Ibfvjqqblobf53>;
    "ChildBounties": Anonymize<I4u5ou5u3tthff>;
    "ElectionProviderMultiPhase": Anonymize<Idb84kfjd998sl>;
    "Nis": Anonymize<I3lqplv82e2f8f>;
    "NisCounterpartBalances": Anonymize<Idj13i7adlomht>;
    "VoterList": Anonymize<Ic35l5bgiij29p>;
    "NominationPools": Anonymize<Ic4cmf9id3qcei>;
    "FastUnstake": Anonymize<Iau9bur8dc3bec>;
    "ParachainsOrigin": undefined;
    "Configuration": Anonymize<In1jctfv299lm>;
    "ParasShared": undefined;
    "ParaInclusion": Anonymize<Iat8btfaeiq1le>;
    "ParaInherent": Anonymize<Idfqgoii3heb2f>;
    "ParaScheduler": undefined;
    "Paras": Anonymize<Ieo97unb4d08rl>;
    "Initializer": undefined;
    "Dmp": undefined;
    "Hrmp": Anonymize<Ibns95nfmm92df>;
    "ParaSessionInfo": undefined;
    "ParasDisputes": Anonymize<Iakburbqot4g58>;
    "ParasSlashing": Anonymize<I1v70p1j0r2q1j>;
    "OnDemandAssignmentProvider": Anonymize<I8htscm3ert491>;
    "CoretimeAssignmentProvider": Anonymize<Ie3b9qd0nd59gs>;
    "Registrar": Anonymize<I97vkspnd0b8bh>;
    "Slots": Anonymize<Iers095sa65pbg>;
    "Auctions": Anonymize<I4kgo47o2v3701>;
    "Crowdloan": Anonymize<I9o6l1c4r4qc3s>;
    "Coretime": Anonymize<Ifju0orssp9h7o>;
    "XcmPallet": Anonymize<I87j95aq93d7dq>;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "AssetRate": Anonymize<I3qgd61cgli6cp>;
    "Beefy": Anonymize<Ib6q602k6o213a>;
    "Mmr": undefined;
    "BeefyMmrLeaf": undefined;
}>;
export type Ib69hbq04ogo7t = AnonymousEnum<{
    /**
     *Account is already a member.
     */
    "AlreadyMember": undefined;
    /**
     *Account is not a member.
     */
    "NotMember": undefined;
    /**
     *The given poll index is unknown or has closed.
     */
    "NotPolling": undefined;
    /**
     *The given poll is still ongoing.
     */
    "Ongoing": undefined;
    /**
     *There are no further records to be removed.
     */
    "NoneRemaining": undefined;
    /**
     *Unexpected error in state.
     */
    "Corruption": undefined;
    /**
     *The member's rank is too low to vote.
     */
    "RankTooLow": undefined;
    /**
     *The information provided is incorrect.
     */
    "InvalidWitness": undefined;
    /**
     *The origin is not sufficiently privileged to do the operation.
     */
    "NoPermission": undefined;
    /**
     *The new member to exchange is the same as the old member
     */
    "SameMember": undefined;
    /**
     *The max member count for the rank has been reached.
     */
    "TooManyMembers": undefined;
}>;
export type I6n8dkudb3ed0r = AnonymousEnum<{
    /**
     *User is not a member.
     */
    "NotMember": undefined;
    /**
     *User is already a member.
     */
    "AlreadyMember": undefined;
    /**
     *User is suspended.
     */
    "Suspended": undefined;
    /**
     *User is not suspended.
     */
    "NotSuspended": undefined;
    /**
     *Nothing to payout.
     */
    "NoPayout": undefined;
    /**
     *Society already founded.
     */
    "AlreadyFounded": undefined;
    /**
     *Not enough in pot to accept candidate.
     */
    "InsufficientPot": undefined;
    /**
     *Member is already vouching or banned from vouching again.
     */
    "AlreadyVouching": undefined;
    /**
     *Member is not vouching.
     */
    "NotVouchingOnBidder": undefined;
    /**
     *Cannot remove the head of the chain.
     */
    "Head": undefined;
    /**
     *Cannot remove the founder.
     */
    "Founder": undefined;
    /**
     *User has already made a bid.
     */
    "AlreadyBid": undefined;
    /**
     *User is already a candidate.
     */
    "AlreadyCandidate": undefined;
    /**
     *User is not a candidate.
     */
    "NotCandidate": undefined;
    /**
     *Too many members in the society.
     */
    "MaxMembers": undefined;
    /**
     *The caller is not the founder.
     */
    "NotFounder": undefined;
    /**
     *The caller is not the head.
     */
    "NotHead": undefined;
    /**
     *The membership cannot be claimed as the candidate was not clearly approved.
     */
    "NotApproved": undefined;
    /**
     *The candidate cannot be kicked as the candidate was not clearly rejected.
     */
    "NotRejected": undefined;
    /**
     *The candidacy cannot be dropped as the candidate was clearly approved.
     */
    "Approved": undefined;
    /**
     *The candidacy cannot be bestowed as the candidate was clearly rejected.
     */
    "Rejected": undefined;
    /**
     *The candidacy cannot be concluded as the voting is still in progress.
     */
    "InProgress": undefined;
    /**
     *The candidacy cannot be pruned until a full additional intake period has passed.
     */
    "TooEarly": undefined;
    /**
     *The skeptic already voted.
     */
    "Voted": undefined;
    /**
     *The skeptic need not vote on candidates from expired rounds.
     */
    "Expired": undefined;
    /**
     *User is not a bidder.
     */
    "NotBidder": undefined;
    /**
     *There is no defender currently.
     */
    "NoDefender": undefined;
    /**
     *Group doesn't exist.
     */
    "NotGroup": undefined;
    /**
     *The member is already elevated to this rank.
     */
    "AlreadyElevated": undefined;
    /**
     *The skeptic has already been punished for this offence.
     */
    "AlreadyPunished": undefined;
    /**
     *Funds are insufficient to pay off society debts.
     */
    "InsufficientFunds": undefined;
    /**
     *The candidate/defender has no stale votes to remove.
     */
    "NoVotes": undefined;
}>;
export type I29mqdjoga49c9 = AnonymousEnum<{
    /**
     *User is not allowed to make a call on behalf of this account
     */
    "NotAllowed": undefined;
    /**
     *Threshold must be greater than zero
     */
    "ZeroThreshold": undefined;
    /**
     *Friends list must be greater than zero and threshold
     */
    "NotEnoughFriends": undefined;
    /**
     *Friends list must be less than max friends
     */
    "MaxFriends": undefined;
    /**
     *Friends list must be sorted and free of duplicates
     */
    "NotSorted": undefined;
    /**
     *This account is not set up for recovery
     */
    "NotRecoverable": undefined;
    /**
     *This account is already set up for recovery
     */
    "AlreadyRecoverable": undefined;
    /**
     *A recovery process has already started for this account
     */
    "AlreadyStarted": undefined;
    /**
     *A recovery process has not started for this rescuer
     */
    "NotStarted": undefined;
    /**
     *This account is not a friend who can vouch
     */
    "NotFriend": undefined;
    /**
     *The friend must wait until the delay period to vouch for this recovery
     */
    "DelayPeriod": undefined;
    /**
     *This user has already vouched for this recovery
     */
    "AlreadyVouched": undefined;
    /**
     *The threshold for recovering this account has not been met
     */
    "Threshold": undefined;
    /**
     *There are still active recovery attempts that need to be closed
     */
    "StillActive": undefined;
    /**
     *This account is already set up for recovery
     */
    "AlreadyProxy": undefined;
    /**
     *Some internal state is broken.
     */
    "BadState": undefined;
}>;
export type I3lqplv82e2f8f = AnonymousEnum<{
    /**
     *The duration of the bid is less than one.
     */
    "DurationTooSmall": undefined;
    /**
     *The duration is the bid is greater than the number of queues.
     */
    "DurationTooBig": undefined;
    /**
     *The amount of the bid is less than the minimum allowed.
     */
    "AmountTooSmall": undefined;
    /**
     *The queue for the bid's duration is full and the amount bid is too low to get in
     *through replacing an existing bid.
     */
    "BidTooLow": undefined;
    /**
     *Receipt index is unknown.
     */
    "UnknownReceipt": undefined;
    /**
     *Not the owner of the receipt.
     */
    "NotOwner": undefined;
    /**
     *Bond not yet at expiry date.
     */
    "NotExpired": undefined;
    /**
     *The given bid for retraction is not found.
     */
    "UnknownBid": undefined;
    /**
     *The portion supplied is beyond the value of the receipt.
     */
    "PortionTooBig": undefined;
    /**
     *Not enough funds are held to pay out.
     */
    "Unfunded": undefined;
    /**
     *There are enough funds for what is required.
     */
    "AlreadyFunded": undefined;
    /**
     *The thaw throttle has been reached for this period.
     */
    "Throttled": undefined;
    /**
     *The operation would result in a receipt worth an insignificant value.
     */
    "MakesDust": undefined;
    /**
     *The receipt is already communal.
     */
    "AlreadyCommunal": undefined;
    /**
     *The receipt is already private.
     */
    "AlreadyPrivate": undefined;
}>;
export type Ifuucdgpuglunu = AnonymousEnum<{
    /**
     *A member `who` has been added.
     */
    "MemberAdded": Anonymize<I4cbvqmqadhrea>;
    /**
     *The member `who`se rank has been changed to the given `rank`.
     */
    "RankChanged": Anonymize<Im1pm2vf6llcn>;
    /**
     *The member `who` of given `rank` has been removed from the collective.
     */
    "MemberRemoved": Anonymize<Im1pm2vf6llcn>;
    /**
     *The member `who` has voted for the `poll` with the given `vote` leading to an updated
     *`tally`.
     */
    "Voted": Anonymize<I21jsoeb0o6476>;
    /**
     *The member `who` had their `AccountId` changed to `new_who`.
     */
    "MemberExchanged": Anonymize<Ier6ck0tpfo7>;
}>;
export type Im1pm2vf6llcn = {
    "who": SS58String;
    "rank": number;
};
export type I21jsoeb0o6476 = {
    "who": SS58String;
    "poll": number;
    "vote": Anonymize<I3gg47bgkgq9tr>;
    "tally": Anonymize<I6d634btv7misu>;
};
export type I3gg47bgkgq9tr = AnonymousEnum<{
    "Aye": number;
    "Nay": number;
}>;
export type I6d634btv7misu = {
    "bare_ayes": number;
    "ayes": number;
    "nays": number;
};
export type Ier6ck0tpfo7 = {
    "who": SS58String;
    "new_who": SS58String;
};
export type I28aoa43r171jt = AnonymousEnum<{
    /**
     *A referendum has been submitted.
     */
    "Submitted": Anonymize<I229ijht536qdu>;
    /**
     *The decision deposit has been placed.
     */
    "DecisionDepositPlaced": Anonymize<I62nte77gksm0f>;
    /**
     *The decision deposit has been refunded.
     */
    "DecisionDepositRefunded": Anonymize<I62nte77gksm0f>;
    /**
     *A deposit has been slashed.
     */
    "DepositSlashed": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *A referendum has moved into the deciding phase.
     */
    "DecisionStarted": Anonymize<Ic6ecdcp9ut7jd>;
    "ConfirmStarted": Anonymize<I666bl2fqjkejo>;
    "ConfirmAborted": Anonymize<I666bl2fqjkejo>;
    /**
     *A referendum has ended its confirmation phase and is ready for approval.
     */
    "Confirmed": Anonymize<I27notaksll8qt>;
    /**
     *A referendum has been approved and its proposal has been scheduled.
     */
    "Approved": Anonymize<I666bl2fqjkejo>;
    /**
     *A proposal has been rejected by referendum.
     */
    "Rejected": Anonymize<I27notaksll8qt>;
    /**
     *A referendum has been timed out without being decided.
     */
    "TimedOut": Anonymize<I27notaksll8qt>;
    /**
     *A referendum has been cancelled.
     */
    "Cancelled": Anonymize<I27notaksll8qt>;
    /**
     *A referendum has been killed.
     */
    "Killed": Anonymize<I27notaksll8qt>;
    /**
     *The submission deposit has been refunded.
     */
    "SubmissionDepositRefunded": Anonymize<I62nte77gksm0f>;
    /**
     *Metadata for a referendum has been set.
     */
    "MetadataSet": Anonymize<I4f1hv034jf1dt>;
    /**
     *Metadata for a referendum has been cleared.
     */
    "MetadataCleared": Anonymize<I4f1hv034jf1dt>;
}>;
export type Ic6ecdcp9ut7jd = {
    /**
     *Index of the referendum.
     */
    "index": number;
    /**
     *The track (and by extension proposal dispatch origin) of this referendum.
     */
    "track": number;
    /**
     *The proposal for the referendum.
     */
    "proposal": PreimagesBounded;
    /**
     *The current tally of votes in this referendum.
     */
    "tally": Anonymize<I6d634btv7misu>;
};
export type I27notaksll8qt = {
    /**
     *Index of the referendum.
     */
    "index": number;
    /**
     *The final tally of votes in this referendum.
     */
    "tally": Anonymize<I6d634btv7misu>;
};
export type Icfm8kf536krgv = AnonymousEnum<{
    "CallWhitelisted": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallRemoved": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallDispatched": Anonymize<Ifehsusc6g747o>;
}>;
export type Ifehsusc6g747o = {
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Iftq10rlffn46u>;
};
export type Iftq10rlffn46u = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I4otaqja372817>>;
export type I4otaqja372817 = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<I3h7okodr0vdlp>;
};
export type In3t00aurfuda = AnonymousEnum<{
    /**
     *A Parameter was set.
     *
     *Is also emitted when the value was not changed.
     */
    "Updated": Anonymize<I9f0v9ntn9g19p>;
}>;
export type I9f0v9ntn9g19p = {
    /**
     *The key that was updated.
     */
    "key": Anonymize<I9h43amtitrqum>;
    /**
     *The old value before this call.
     */
    "old_value"?: Anonymize<I6ul1np9r7bgmv>;
    /**
     *The new value after this call.
     */
    "new_value"?: Anonymize<I6ul1np9r7bgmv>;
};
export type I9h43amtitrqum = AnonymousEnum<{
    "Inflation": Anonymize<I7rmm2emik7fsg>;
}>;
export type I7rmm2emik7fsg = AnonymousEnum<{
    "MinInflation": undefined;
    "MaxInflation": undefined;
    "IdealStake": undefined;
    "Falloff": undefined;
    "UseAuctionSlots": undefined;
}>;
export type I6ul1np9r7bgmv = (Anonymize<I22o1tjs56dvi2>) | undefined;
export type I22o1tjs56dvi2 = AnonymousEnum<{
    "Inflation": Anonymize<I69i3c3kkvltuj>;
}>;
export type I69i3c3kkvltuj = AnonymousEnum<{
    "MinInflation": bigint;
    "MaxInflation": bigint;
    "IdealStake": bigint;
    "Falloff": bigint;
    "UseAuctionSlots": boolean;
}>;
export type Ib4h80g8852pr1 = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<I47k56fn84rojg>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<Iase69ms3nbqke>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<I461t9gdjcm4o5>;
}>;
export type I47k56fn84rojg = {
    "index": number;
    "error": Anonymize<I3h7okodr0vdlp>;
};
export type Iase69ms3nbqke = {
    "error": Anonymize<I3h7okodr0vdlp>;
};
export type I461t9gdjcm4o5 = {
    "result": Anonymize<Idog2s3a8to2s8>;
};
export type Idog2s3a8to2s8 = ResultPayload<undefined, Anonymize<I3h7okodr0vdlp>>;
export type Ifhcq78pr9md4e = AnonymousEnum<{
    /**
     *The society is founded by the given identity.
     */
    "Founded": Anonymize<I8ircspqpe79k7>;
    /**
     *A membership bid just happened. The given account is the candidate's ID and their offer
     *is the second.
     */
    "Bid": Anonymize<I1vlt8l6nvnen6>;
    /**
     *A membership bid just happened by vouching. The given account is the candidate's ID and
     *their offer is the second. The vouching party is the third.
     */
    "Vouch": Anonymize<I72vf0j9juc1df>;
    /**
     *A candidate was dropped (due to an excess of bids in the system).
     */
    "AutoUnbid": Anonymize<I4b66js88p45m8>;
    /**
     *A candidate was dropped (by their request).
     */
    "Unbid": Anonymize<I4b66js88p45m8>;
    /**
     *A candidate was dropped (by request of who vouched for them).
     */
    "Unvouch": Anonymize<I4b66js88p45m8>;
    /**
     *A group of candidates have been inducted. The batch's primary is the first value, the
     *batch in full is the second.
     */
    "Inducted": Anonymize<Ie0phfcvllr4od>;
    /**
     *A suspended member has been judged.
     */
    "SuspendedMemberJudgement": Anonymize<I476ep66p6ddg1>;
    /**
     *A candidate has been suspended
     */
    "CandidateSuspended": Anonymize<I4b66js88p45m8>;
    /**
     *A member has been suspended
     */
    "MemberSuspended": Anonymize<Ie3gphha4ejh40>;
    /**
     *A member has been challenged
     */
    "Challenged": Anonymize<Ie3gphha4ejh40>;
    /**
     *A vote has been placed
     */
    "Vote": Anonymize<If0btdsid69rrm>;
    /**
     *A vote has been placed for a defending member
     */
    "DefenderVote": Anonymize<Ictusacdcqj61u>;
    /**
     *A new set of \[params\] has been set for the group.
     */
    "NewParams": Anonymize<Ibsolu3c3q1lb4>;
    /**
     *Society is unfounded.
     */
    "Unfounded": Anonymize<I8ircspqpe79k7>;
    /**
     *Some funds were deposited into the society account.
     */
    "Deposit": Anonymize<Ie5v6njpckr05b>;
    /**
     *A \[member\] got elevated to \[rank\].
     */
    "Elevated": Anonymize<Ib116djgo9u4uo>;
}>;
export type I8ircspqpe79k7 = {
    "founder": SS58String;
};
export type I1vlt8l6nvnen6 = {
    "candidate_id": SS58String;
    "offer": bigint;
};
export type I72vf0j9juc1df = {
    "candidate_id": SS58String;
    "offer": bigint;
    "vouching": SS58String;
};
export type I4b66js88p45m8 = {
    "candidate": SS58String;
};
export type Ie0phfcvllr4od = {
    "primary": SS58String;
    "candidates": Anonymize<Ia2lhg7l2hilo3>;
};
export type I476ep66p6ddg1 = {
    "who": SS58String;
    "judged": boolean;
};
export type Ie3gphha4ejh40 = {
    "member": SS58String;
};
export type If0btdsid69rrm = {
    "candidate": SS58String;
    "voter": SS58String;
    "vote": boolean;
};
export type Ictusacdcqj61u = {
    "voter": SS58String;
    "vote": boolean;
};
export type Ibsolu3c3q1lb4 = {
    "params": Anonymize<I9hkvi4k3kh916>;
};
export type I9hkvi4k3kh916 = {
    "max_members": number;
    "max_intake": number;
    "max_strikes": number;
    "candidate_deposit": bigint;
};
export type Ib116djgo9u4uo = {
    "member": SS58String;
    "rank": number;
};
export type RecoveryEvent = Enum<{
    /**
     *A recovery process has been set up for an account.
     */
    "RecoveryCreated": Anonymize<Icbccs0ug47ilf>;
    /**
     *A recovery process has been initiated for lost account by rescuer account.
     */
    "RecoveryInitiated": Anonymize<I9vkkue6cq74et>;
    /**
     *A recovery process for lost account by rescuer account has been vouched for by sender.
     */
    "RecoveryVouched": Anonymize<Ibu56t5h1q49i4>;
    /**
     *A recovery process for lost account by rescuer account has been closed.
     */
    "RecoveryClosed": Anonymize<I9vkkue6cq74et>;
    /**
     *Lost account has been successfully recovered by rescuer account.
     */
    "AccountRecovered": Anonymize<I9vkkue6cq74et>;
    /**
     *A recovery process has been removed for an account.
     */
    "RecoveryRemoved": Anonymize<I1dmtl5t34b9g>;
}>;
export declare const RecoveryEvent: GetEnum<RecoveryEvent>;
export type I9vkkue6cq74et = {
    "lost_account": SS58String;
    "rescuer_account": SS58String;
};
export type Ibu56t5h1q49i4 = {
    "lost_account": SS58String;
    "rescuer_account": SS58String;
    "sender": SS58String;
};
export type I1dmtl5t34b9g = {
    "lost_account": SS58String;
};
export type I1c0hsaopam5qt = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<Idhmkdhk0gf66d>;
    /**
     *Set a retry configuration for some task.
     */
    "RetrySet": Anonymize<Ia3c82eadg79bj>;
    /**
     *Cancel a retry configuration for some task.
     */
    "RetryCancelled": Anonymize<Ienusoeb625ftq>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be retried since the agenda is full at that block or there
     *was not enough weight to reschedule it.
     */
    "RetryFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type Idhmkdhk0gf66d = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<Idog2s3a8to2s8>;
};
export type I26jj4ru8eej02 = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<I461t9gdjcm4o5>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ia9qkoqqvill5r>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<Ica4ean4b9ksdn>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<Ica4ean4b9ksdn>;
}>;
export type Ia9qkoqqvill5r = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<I1ffle57clnprr>;
    "disambiguation_index": number;
};
export type I1ffle57clnprr = AnonymousEnum<{
    "Any": undefined;
    "NonTransfer": undefined;
    "Governance": undefined;
    "Staking": undefined;
    "CancelProxy": undefined;
    "Auction": undefined;
    "Society": undefined;
    "NominationPools": undefined;
    "Spokesperson": undefined;
}>;
export type Ica4ean4b9ksdn = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<I1ffle57clnprr>;
    "delay": number;
};
export type Ihko06lcnga6c = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<Icbi9ul88saklf>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type Icbi9ul88saklf = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Idog2s3a8to2s8>;
};
export type I9dmlhfape78ke = AnonymousEnum<{
    /**
     *A bid was successfully placed.
     */
    "BidPlaced": Anonymize<Ie2vmgag6qiue4>;
    /**
     *A bid was successfully removed (before being accepted).
     */
    "BidRetracted": Anonymize<Ie2vmgag6qiue4>;
    /**
     *A bid was dropped from a queue because of another, more substantial, bid was present.
     */
    "BidDropped": Anonymize<Ie2vmgag6qiue4>;
    /**
     *A bid was accepted. The balance may not be released until expiry.
     */
    "Issued": Anonymize<I1kpuet4lkcdpf>;
    /**
     *An receipt has been (at least partially) thawed.
     */
    "Thawed": Anonymize<I5tr1gp2t9i6oh>;
    /**
     *An automatic funding of the deficit was made.
     */
    "Funded": Anonymize<I7ls1r4u61csif>;
    /**
     *A receipt was transferred.
     */
    "Transferred": Anonymize<I3gjgtso69eopr>;
}>;
export type Ie2vmgag6qiue4 = {
    "who": SS58String;
    "amount": bigint;
    "duration": number;
};
export type I1kpuet4lkcdpf = {
    /**
     *The identity of the receipt.
     */
    "index": number;
    /**
     *The block number at which the receipt may be thawed.
     */
    "expiry": number;
    /**
     *The owner of the receipt.
     */
    "who": SS58String;
    /**
     *The proportion of the effective total issuance which the receipt represents.
     */
    "proportion": bigint;
    /**
     *The amount of funds which were debited from the owner.
     */
    "amount": bigint;
};
export type I5tr1gp2t9i6oh = {
    /**
     *The identity of the receipt.
     */
    "index": number;
    /**
     *The owner.
     */
    "who": SS58String;
    /**
     *The proportion of the effective total issuance by which the owner was debited.
     */
    "proportion": bigint;
    /**
     *The amount by which the owner was credited.
     */
    "amount": bigint;
    /**
     *If `true` then the receipt is done.
     */
    "dropped": boolean;
};
export type I7ls1r4u61csif = {
    "deficit": bigint;
};
export type I3gjgtso69eopr = {
    "from": SS58String;
    "to": SS58String;
    "index": number;
};
export type I8r1bva5169aii = AnonymousEnum<{
    /**
     *A staker was unstaked.
     */
    "Unstaked": Anonymize<Idsn6b9o09ac22>;
    /**
     *A staker was slashed for requesting fast-unstake whilst being exposed.
     */
    "Slashed": Anonymize<Ifk8eme5o7mukf>;
    /**
     *A batch was partially checked for the given eras, but the process did not finish.
     */
    "BatchChecked": Anonymize<Ic0he9tlf9ll0u>;
    /**
     *A batch of a given size was terminated.
     *
     *This is always follows by a number of `Unstaked` or `Slashed` events, marking the end
     *of the batch. A new batch will be created upon next block.
     */
    "BatchFinished": Anonymize<I54umskavgc9du>;
    /**
     *An internal error happened. Operations will be paused now.
     */
    "InternalError": undefined;
}>;
export type Idsn6b9o09ac22 = {
    "stash": SS58String;
    "result": Anonymize<Idog2s3a8to2s8>;
};
export type I74uj7qvtvb25f = AnonymousEnum<{
    /**
     *Create a new crowdloaning campaign.
     */
    "Created": Anonymize<I37r4bdai8o9mp>;
    /**
     *Contributed to a crowd sale.
     */
    "Contributed": Anonymize<I8ve4g3egaln6a>;
    /**
     *Withdrew full balance of a contributor.
     */
    "Withdrew": Anonymize<I8ve4g3egaln6a>;
    /**
     *The loans in a fund have been partially dissolved, i.e. there are some left
     *over child keys that still need to be killed.
     */
    "PartiallyRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *All loans in a fund have been refunded.
     */
    "AllRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *Fund is dissolved.
     */
    "Dissolved": Anonymize<I37r4bdai8o9mp>;
    /**
     *The result of trying to submit a new bid to the Slots pallet.
     */
    "HandleBidResult": Anonymize<I5too1knnpqnk1>;
    /**
     *The configuration to a crowdloan has been edited.
     */
    "Edited": Anonymize<I37r4bdai8o9mp>;
    /**
     *A memo has been updated.
     */
    "MemoUpdated": Anonymize<If4hvqaeoqq5us>;
    /**
     *A parachain has been moved to `NewRaise`
     */
    "AddedToNewRaise": Anonymize<I37r4bdai8o9mp>;
}>;
export type I5too1knnpqnk1 = {
    "para_id": number;
    "result": Anonymize<Idog2s3a8to2s8>;
};
export type Ifosl32ihgoeq6 = Array<Anonymize<I31ossno23rsso>>;
export type I31ossno23rsso = {
    "id": Anonymize<I5uctuo4q9kfsv>;
    "amount": bigint;
};
export type I5uctuo4q9kfsv = AnonymousEnum<{
    "Preimage": PreimagePalletHoldReason;
    "Nis": Anonymize<I8492esr84fcem>;
}>;
export type I8492esr84fcem = AnonymousEnum<{
    "NftReceipt": undefined;
}>;
export type I85t6l9pssiov4 = AnonymousEnum<{
    "Ongoing": Anonymize<Iavs9hbci87eth>;
    "Approved": Anonymize<Ini94eljn5lj8>;
    "Rejected": Anonymize<Ini94eljn5lj8>;
    "Cancelled": Anonymize<Ini94eljn5lj8>;
    "TimedOut": Anonymize<Ini94eljn5lj8>;
    "Killed": number;
}>;
export type Iavs9hbci87eth = {
    "track": number;
    "origin": Anonymize<I575vh6g119dum>;
    "proposal": PreimagesBounded;
    "enactment": TraitsScheduleDispatchTime;
    "submitted": number;
    "submission_deposit": Anonymize<Id5fm4p8lj5qgi>;
    "decision_deposit"?: Anonymize<Ibd24caul84kv2>;
    "deciding"?: Anonymize<Ibcbcndfmk0jd9>;
    "tally": Anonymize<Ifsk7cbmtit1jd>;
    "in_queue": boolean;
    "alarm"?: Anonymize<I3aj03qk2o5mdm>;
};
export type I575vh6g119dum = AnonymousEnum<{
    "system": DispatchRawOrigin;
    "Origins": Anonymize<I8frjhb9r4pt5a>;
    "ParachainsOrigin": ParachainsOrigin;
    "XcmPallet": XcmPalletOrigin;
    "Void": undefined;
}>;
export type I8frjhb9r4pt5a = AnonymousEnum<{
    "StakingAdmin": undefined;
    "Treasurer": undefined;
    "FellowshipAdmin": undefined;
    "GeneralAdmin": undefined;
    "AuctionAdmin": undefined;
    "LeaseAdmin": undefined;
    "ReferendumCanceller": undefined;
    "ReferendumKiller": undefined;
    "SmallTipper": undefined;
    "BigTipper": undefined;
    "SmallSpender": undefined;
    "MediumSpender": undefined;
    "BigSpender": undefined;
    "WhitelistedCaller": undefined;
    "FellowshipInitiates": undefined;
    "Fellows": undefined;
    "FellowshipExperts": undefined;
    "FellowshipMasters": undefined;
    "Fellowship1Dan": undefined;
    "Fellowship2Dan": undefined;
    "Fellowship3Dan": undefined;
    "Fellowship4Dan": undefined;
    "Fellowship5Dan": undefined;
    "Fellowship6Dan": undefined;
    "Fellowship7Dan": undefined;
    "Fellowship8Dan": undefined;
    "Fellowship9Dan": undefined;
    "WishForChange": undefined;
}>;
export type Icousgkbefm7ke = AnonymousEnum<{
    "Ongoing": Anonymize<Ifukao8u7abrdr>;
    "Approved": Anonymize<Ini94eljn5lj8>;
    "Rejected": Anonymize<Ini94eljn5lj8>;
    "Cancelled": Anonymize<Ini94eljn5lj8>;
    "TimedOut": Anonymize<Ini94eljn5lj8>;
    "Killed": number;
}>;
export type Ifukao8u7abrdr = {
    "track": number;
    "origin": Anonymize<I575vh6g119dum>;
    "proposal": PreimagesBounded;
    "enactment": TraitsScheduleDispatchTime;
    "submitted": number;
    "submission_deposit": Anonymize<Id5fm4p8lj5qgi>;
    "decision_deposit"?: Anonymize<Ibd24caul84kv2>;
    "deciding"?: Anonymize<Ibcbcndfmk0jd9>;
    "tally": Anonymize<I6d634btv7misu>;
    "in_queue": boolean;
    "alarm"?: Anonymize<I3aj03qk2o5mdm>;
};
export type Iam8qhv8b3jn4n = {
    "rank": number;
    "strikes": number;
    "vouching"?: Anonymize<I8fmgqeahq5asi>;
    "index": number;
};
export type I8fmgqeahq5asi = (Anonymize<I4e8agnd8ntmu4>) | undefined;
export type I4e8agnd8ntmu4 = AnonymousEnum<{
    "Vouching": undefined;
    "Banned": undefined;
}>;
export type I1659sf24o6ga8 = {
    "paid": bigint;
    "payouts": Anonymize<If9jidduiuq7vv>;
};
export type Iehiasr6uoqbq = Array<Anonymize<If6fsasj8kq72c>>;
export type If6fsasj8kq72c = {
    "who": SS58String;
    "kind": Anonymize<Iand3m1ru4ke2b>;
    "value": bigint;
};
export type Iand3m1ru4ke2b = AnonymousEnum<{
    "Deposit": bigint;
    "Vouch": Anonymize<I95l2k9b1re95f>;
}>;
export type I8adv0j4q3uu5d = {
    "round": number;
    "kind": Anonymize<Iand3m1ru4ke2b>;
    "bid": bigint;
    "tally": Anonymize<Ic4n54m09tc5na>;
    "skeptic_struck": boolean;
};
export type Ic4n54m09tc5na = {
    "approvals": number;
    "rejections": number;
};
export type I7d29ossbog0d3 = {
    "approve": boolean;
    "weight": number;
};
export type I7mgf69gvksvu2 = {
    "who": SS58String;
    "bid": bigint;
    "round": number;
};
export type I3sfg6klg56vmk = [SS58String, SS58String, Anonymize<Ic4n54m09tc5na>];
export type Ibprd8oi8phm62 = {
    "delay_period": number;
    "deposit": bigint;
    "friends": Anonymize<Ia2lhg7l2hilo3>;
    "threshold": number;
};
export type Idlqqo993i780l = {
    "created": number;
    "deposit": bigint;
    "friends": Anonymize<Ia2lhg7l2hilo3>;
};
export type Ic836nv7r3fq4i = Array<Anonymize<I6amhs2ie7hg6c>>;
export type I6amhs2ie7hg6c = (Anonymize<I423jsfgdvl58f>) | undefined;
export type I423jsfgdvl58f = {
    "maybe_id"?: Anonymize<I4s6vifaf8k998>;
    "priority": number;
    "call": PreimagesBounded;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "origin": Anonymize<I575vh6g119dum>;
};
export type I3khkuiss7sr1m = [Anonymize<I470fg2etb4rsu>, bigint];
export type I470fg2etb4rsu = Array<Anonymize<Iffeqohmvisp0>>;
export type Iffeqohmvisp0 = {
    "delegate": SS58String;
    "proxy_type": Anonymize<I1ffle57clnprr>;
    "delay": number;
};
export type I84stt310eb6c3 = {
    "who": SS58String;
    "deposit": bigint;
    "raw_solution": Anonymize<I6s33laenmuupn>;
    "call_fee": bigint;
};
export type I6s33laenmuupn = {
    "solution": Anonymize<Ic8o63p0sveg3g>;
    "score": Anonymize<I8s6n43okuj2b1>;
    "round": number;
};
export type Ic8o63p0sveg3g = {
    "votes1": Anonymize<Iep4uo61810hfs>;
    "votes2": Anonymize<Ickjq69hlul8c3>;
    "votes3": Anonymize<Icf645ln9bi1bj>;
    "votes4": Anonymize<I8nospv7k5s457>;
    "votes5": Anonymize<Iig9pofg77rah>;
    "votes6": Anonymize<Irttjt9tghoc0>;
    "votes7": Anonymize<I3o5epjr2va0dl>;
    "votes8": Anonymize<I1gfnebceebqb5>;
    "votes9": Anonymize<Ibo38fh2dhj4it>;
    "votes10": Anonymize<Id4gvspmdh8h9l>;
    "votes11": Anonymize<I5be3ho5m1r68a>;
    "votes12": Anonymize<I7s2sh7cpuv56r>;
    "votes13": Anonymize<I5fq8855gfhmlo>;
    "votes14": Anonymize<I4mvok713k4g7o>;
    "votes15": Anonymize<I90tu9lmjmhfhd>;
    "votes16": Anonymize<I3cqaev9m4hn9m>;
    "votes17": Anonymize<Ic2otmj72fnr4f>;
    "votes18": Anonymize<Iakspodb433ll5>;
    "votes19": Anonymize<Iepp1vqqhfbch8>;
    "votes20": Anonymize<I98jogsmh342m3>;
    "votes21": Anonymize<I2fk4dasd66na2>;
    "votes22": Anonymize<Ie417vs28qcnsh>;
    "votes23": Anonymize<I5920hg8jo1it6>;
    "votes24": Anonymize<I7qdp96bmn8lfe>;
};
export type Ic2otmj72fnr4f = Array<Anonymize<Iaujc1cdlbr21l>>;
export type Iaujc1cdlbr21l = [number, Anonymize<Ifo5mgovn0mc4e>, number];
export type Ifo5mgovn0mc4e = FixedSizeArray<16, Anonymize<I5g2vv0ckl2m8b>>;
export type Iakspodb433ll5 = Array<Anonymize<Id83t9vq36ke6a>>;
export type Id83t9vq36ke6a = [number, Anonymize<Ibud865gntq530>, number];
export type Ibud865gntq530 = FixedSizeArray<17, Anonymize<I5g2vv0ckl2m8b>>;
export type Iepp1vqqhfbch8 = Array<Anonymize<Ieveht3di3sfiu>>;
export type Ieveht3di3sfiu = [number, Anonymize<I776l0s5q9rvur>, number];
export type I776l0s5q9rvur = FixedSizeArray<18, Anonymize<I5g2vv0ckl2m8b>>;
export type I98jogsmh342m3 = Array<Anonymize<I9eq1v7erl4gvr>>;
export type I9eq1v7erl4gvr = [number, Anonymize<I7ojjkc2iopt95>, number];
export type I7ojjkc2iopt95 = FixedSizeArray<19, Anonymize<I5g2vv0ckl2m8b>>;
export type I2fk4dasd66na2 = Array<Anonymize<I5bs1mqum7i23c>>;
export type I5bs1mqum7i23c = [number, Anonymize<Idpqm03dj290nq>, number];
export type Idpqm03dj290nq = FixedSizeArray<20, Anonymize<I5g2vv0ckl2m8b>>;
export type Ie417vs28qcnsh = Array<Anonymize<Ibhc2kquefu249>>;
export type Ibhc2kquefu249 = [number, Anonymize<I2rgpk02ffvb64>, number];
export type I2rgpk02ffvb64 = FixedSizeArray<21, Anonymize<I5g2vv0ckl2m8b>>;
export type I5920hg8jo1it6 = Array<Anonymize<I9ha4eaj26vum3>>;
export type I9ha4eaj26vum3 = [number, Anonymize<I1tq0t8vavpkbg>, number];
export type I1tq0t8vavpkbg = FixedSizeArray<22, Anonymize<I5g2vv0ckl2m8b>>;
export type I7qdp96bmn8lfe = Array<Anonymize<I4gbt1pgsl06ua>>;
export type I4gbt1pgsl06ua = [number, Anonymize<I9mfrictenmkj8>, number];
export type I9mfrictenmkj8 = FixedSizeArray<23, Anonymize<I5g2vv0ckl2m8b>>;
export type I2cqtnj49ogo81 = Array<Anonymize<Id5fm4p8lj5qgi>>;
export type I7btpfdeli5ea8 = {
    "proportion_owed": bigint;
    "index": number;
    "thawed": bigint;
    "last_period": number;
    "receipts_on_hold": bigint;
};
export type Ic79q40j9qptgh = {
    "proportion": bigint;
    "owner"?: Anonymize<I92hdo1clkbp4g>;
    "expiry": number;
};
export type I9bin2jc70qt6q = Array<Anonymize<I3qt1hgg4djhgb>>;
export type I4vi3hlg2ca351 = AnonymousEnum<{
    /**
     *Propose a referendum on a privileged action.
     *
     *- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
     *  available.
     *- `proposal_origin`: The origin from which the proposal should be executed.
     *- `proposal`: The proposal.
     *- `enactment_moment`: The moment that the proposal should be enacted.
     *
     *Emits `Submitted`.
     */
    "submit": Anonymize<I4dvjo4haia091>;
    /**
     *Post the Decision Deposit for a referendum.
     *
     *- `origin`: must be `Signed` and the account must have funds available for the
     *  referendum's track's Decision Deposit.
     *- `index`: The index of the submitted referendum whose Decision Deposit is yet to be
     *  posted.
     *
     *Emits `DecisionDepositPlaced`.
     */
    "place_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Refund the Decision Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Decision Deposit has not yet been
     *  refunded.
     *
     *Emits `DecisionDepositRefunded`.
     */
    "refund_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum.
     *
     *- `origin`: must be the `CancelOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Cancelled`.
     */
    "cancel": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum and slash the deposits.
     *
     *- `origin`: must be the `KillOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Killed` and `DepositSlashed`.
     */
    "kill": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a referendum onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `index`: the referendum to be advanced.
     */
    "nudge_referendum": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a track onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `track`: the track to be advanced.
     *
     *Action item for when there is now one fewer referendum in the deciding phase and the
     *`DecidingCount` is not yet updated. This means that we should either:
     *- begin deciding another referendum (and leave `DecidingCount` alone); or
     *- decrement `DecidingCount`.
     */
    "one_fewer_deciding": Anonymize<Icbio0e1f0034b>;
    /**
     *Refund the Submission Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Submission Deposit has not yet been
     *  refunded.
     *
     *Emits `SubmissionDepositRefunded`.
     */
    "refund_submission_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Set or clear metadata of a referendum.
     *
     *Parameters:
     *- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
     *  metadata of a finished referendum.
     *- `index`:  The index of a referendum to set or clear metadata for.
     *- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
     */
    "set_metadata": Anonymize<I8c0vkqjjipnuj>;
}>;
export type I4dvjo4haia091 = {
    "proposal_origin": Anonymize<I575vh6g119dum>;
    "proposal": PreimagesBounded;
    "enactment_moment": TraitsScheduleDispatchTime;
};
export type I5bt1lc4doakmu = AnonymousEnum<{
    /**
     *Introduce a new member.
     *
     *- `origin`: Must be the `AddOrigin`.
     *- `who`: Account of non-member which will become a member.
     *
     *Weight: `O(1)`
     */
    "add_member": Anonymize<I59bngqm85b22v>;
    /**
     *Increment the rank of an existing member by one.
     *
     *- `origin`: Must be the `PromoteOrigin`.
     *- `who`: Account of existing member.
     *
     *Weight: `O(1)`
     */
    "promote_member": Anonymize<I59bngqm85b22v>;
    /**
     *Decrement the rank of an existing member by one. If the member is already at rank zero,
     *then they are removed entirely.
     *
     *- `origin`: Must be the `DemoteOrigin`.
     *- `who`: Account of existing member of rank greater than zero.
     *
     *Weight: `O(1)`, less if the member's index is highest in its rank.
     */
    "demote_member": Anonymize<I59bngqm85b22v>;
    /**
     *Remove the member entirely.
     *
     *- `origin`: Must be the `RemoveOrigin`.
     *- `who`: Account of existing member of rank greater than zero.
     *- `min_rank`: The rank of the member or greater.
     *
     *Weight: `O(min_rank)`.
     */
    "remove_member": Anonymize<I3amdclkdfaipk>;
    /**
     *Add an aye or nay vote for the sender to the given proposal.
     *
     *- `origin`: Must be `Signed` by a member account.
     *- `poll`: Index of a poll which is ongoing.
     *- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.
     *
     *Transaction fees are be waived if the member is voting on any particular proposal
     *for the first time and the call is successful. Subsequent vote changes will charge a
     *fee.
     *
     *Weight: `O(1)`, less if there was no previous vote on the poll by the member.
     */
    "vote": Anonymize<I8bvk21lpmah75>;
    /**
     *Remove votes from the given poll. It must have ended.
     *
     *- `origin`: Must be `Signed` by any account.
     *- `poll_index`: Index of a poll which is completed and for which votes continue to
     *  exist.
     *- `max`: Maximum number of vote items from remove in this call.
     *
     *Transaction fees are waived if the operation is successful.
     *
     *Weight `O(max)` (less if there are fewer items to remove than `max`).
     */
    "cleanup_poll": Anonymize<I449n3riv6jbum>;
    /**
     *Exchanges a member with a new account and the same existing rank.
     *
     *- `origin`: Must be the `ExchangeOrigin`.
     *- `who`: Account of existing member of rank greater than zero to be exchanged.
     *- `new_who`: New Account of existing member of rank greater than zero to exchanged to.
     */
    "exchange_member": Anonymize<I9a7qiue67urvk>;
}>;
export type I59bngqm85b22v = {
    "who": MultiAddress;
};
export type I3amdclkdfaipk = {
    "who": MultiAddress;
    "min_rank": number;
};
export type I8bvk21lpmah75 = {
    "poll": number;
    "aye": boolean;
};
export type I449n3riv6jbum = {
    "poll_index": number;
    "max": number;
};
export type I9a7qiue67urvk = {
    "who": MultiAddress;
    "new_who": MultiAddress;
};
export type Iet9pqfh3sbig8 = AnonymousEnum<{
    "whitelist_call": Anonymize<I1adbcfi5uc62r>;
    "remove_whitelisted_call": Anonymize<I1adbcfi5uc62r>;
    "dispatch_whitelisted_call": Anonymize<Ibf6ucefn8fh49>;
    "dispatch_whitelisted_call_with_preimage": Anonymize<I2ifddbprs364f>;
}>;
export type I2ifddbprs364f = {
    "call": TxCallData;
};
export type Ic5v5ffa0cr70p = AnonymousEnum<{
    /**
     *Set the value of a parameter.
     *
     *The dispatch origin of this call must be `AdminOrigin` for the given `key`. Values be
     *deleted by setting them to `None`.
     */
    "set_parameter": Anonymize<I9j2r9vmc9atsu>;
}>;
export type I9j2r9vmc9atsu = {
    "key_value": Anonymize<I7slmng9jp7jrk>;
};
export type I7slmng9jp7jrk = AnonymousEnum<{
    "Inflation": Anonymize<I5t0545elr3mi1>;
}>;
export type I5t0545elr3mi1 = AnonymousEnum<{
    "MinInflation": Anonymize<Ia023ofm66k1pj>;
    "MaxInflation": Anonymize<Ia023ofm66k1pj>;
    "IdealStake": Anonymize<Ia023ofm66k1pj>;
    "Falloff": Anonymize<Ia023ofm66k1pj>;
    "UseAuctionSlots": Anonymize<I4801gitve39vo>;
}>;
export type Ia023ofm66k1pj = FixedSizeArray<1, Anonymize<I35p85j063s0il>>;
export type I4801gitve39vo = FixedSizeArray<1, Anonymize<I8ie0dco0kcuq5>>;
export type I4pauf7of6nn70 = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<I2jef1c2cnp8oc>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<I3v23e79tnlepm>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<I2jef1c2cnp8oc>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<I8b032lvj28v38>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<I2jef1c2cnp8oc>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<Ib36tv0e89obnf>;
}>;
export type I2jef1c2cnp8oc = {
    "calls": Anonymize<Ichf43loj4967n>;
};
export type Ichf43loj4967n = Array<TxCallData>;
export type I3v23e79tnlepm = {
    "index": number;
    "call": TxCallData;
};
export type I8b032lvj28v38 = {
    "as_origin": Anonymize<I575vh6g119dum>;
    "call": TxCallData;
};
export type Ib36tv0e89obnf = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type Iaup05df56f0nc = AnonymousEnum<{
    /**
     *A user outside of the society can make a bid for entry.
     *
     *Payment: The group's Candidate Deposit will be reserved for making a bid. It is returned
     *when the bid becomes a member, or if the bid calls `unbid`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `value`: A one time payment the bid would like to receive when joining the society.
     */
    "bid": Anonymize<Ie5v6njpckr05b>;
    /**
     *A bidder can remove their bid for entry into society.
     *By doing so, they will have their candidate deposit returned or
     *they will unvouch their voucher.
     *
     *Payment: The bid deposit is unreserved if the user made a bid.
     *
     *The dispatch origin for this call must be _Signed_ and a bidder.
     */
    "unbid": undefined;
    /**
     *As a member, vouch for someone to join society by placing a bid on their behalf.
     *
     *There is no deposit required to vouch for a new bid, but a member can only vouch for
     *one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by
     *the suspension judgement origin, the member will be banned from vouching again.
     *
     *As a vouching member, you can claim a tip if the candidate is accepted. This tip will
     *be paid as a portion of the reward the member will receive for joining the society.
     *
     *The dispatch origin for this call must be _Signed_ and a member.
     *
     *Parameters:
     *- `who`: The user who you would like to vouch for.
     *- `value`: The total reward to be paid between you and the candidate if they become
     *a member in the society.
     *- `tip`: Your cut of the total `value` payout when the candidate is inducted into
     *the society. Tips larger than `value` will be saturated upon payout.
     */
    "vouch": Anonymize<Ibvkbvbkttt0k5>;
    /**
     *As a vouching member, unvouch a bid. This only works while vouched user is
     *only a bidder (and not a candidate).
     *
     *The dispatch origin for this call must be _Signed_ and a vouching member.
     *
     *Parameters:
     *- `pos`: Position in the `Bids` vector of the bid who should be unvouched.
     */
    "unvouch": undefined;
    /**
     *As a member, vote on a candidate.
     *
     *The dispatch origin for this call must be _Signed_ and a member.
     *
     *Parameters:
     *- `candidate`: The candidate that the member would like to bid on.
     *- `approve`: A boolean which says if the candidate should be approved (`true`) or
     *  rejected (`false`).
     */
    "vote": Anonymize<I8i12uisk6j7l>;
    /**
     *As a member, vote on the defender.
     *
     *The dispatch origin for this call must be _Signed_ and a member.
     *
     *Parameters:
     *- `approve`: A boolean which says if the candidate should be
     *approved (`true`) or rejected (`false`).
     */
    "defender_vote": Anonymize<I26anifrfnljoi>;
    /**
     *Transfer the first matured payout for the sender and remove it from the records.
     *
     *NOTE: This extrinsic needs to be called multiple times to claim multiple matured
     *payouts.
     *
     *Payment: The member will receive a payment equal to their first matured
     *payout to their free balance.
     *
     *The dispatch origin for this call must be _Signed_ and a member with
     *payouts remaining.
     */
    "payout": undefined;
    /**
     *Repay the payment previously given to the member with the signed origin, remove any
     *pending payments, and elevate them from rank 0 to rank 1.
     */
    "waive_repay": Anonymize<I3qt1hgg4djhgb>;
    /**
     *Found the society.
     *
     *This is done as a discrete action in order to allow for the
     *pallet to be included into a running chain and can only be done once.
     *
     *The dispatch origin for this call must be from the _FounderSetOrigin_.
     *
     *Parameters:
     *- `founder` - The first member and head of the newly founded society.
     *- `max_members` - The initial max number of members for the society.
     *- `max_intake` - The maximum number of candidates per intake period.
     *- `max_strikes`: The maximum number of strikes a member may get before they become
     *  suspended and may only be reinstated by the founder.
     *- `candidate_deposit`: The deposit required to make a bid for membership of the group.
     *- `rules` - The rules of this society concerning membership.
     *
     *Complexity: O(1)
     */
    "found_society": Anonymize<I6a6f85pb71ums>;
    /**
     *Dissolve the society and remove all members.
     *
     *The dispatch origin for this call must be Signed, and the signing account must be both
     *the `Founder` and the `Head`. This implies that it may only be done when there is one
     *member.
     */
    "dissolve": undefined;
    /**
     *Allow suspension judgement origin to make judgement on a suspended member.
     *
     *If a suspended member is forgiven, we simply add them back as a member, not affecting
     *any of the existing storage items for that member.
     *
     *If a suspended member is rejected, remove all associated storage items, including
     *their payouts, and remove any vouched bids they currently have.
     *
     *The dispatch origin for this call must be Signed from the Founder.
     *
     *Parameters:
     *- `who` - The suspended member to be judged.
     *- `forgive` - A boolean representing whether the suspension judgement origin forgives
     *  (`true`) or rejects (`false`) a suspended member.
     */
    "judge_suspended_member": Anonymize<I96p6guspeq6t>;
    /**
     *Change the maximum number of members in society and the maximum number of new candidates
     *in a single intake period.
     *
     *The dispatch origin for this call must be Signed by the Founder.
     *
     *Parameters:
     *- `max_members` - The maximum number of members for the society. This must be no less
     *  than the current number of members.
     *- `max_intake` - The maximum number of candidates per intake period.
     *- `max_strikes`: The maximum number of strikes a member may get before they become
     *  suspended and may only be reinstated by the founder.
     *- `candidate_deposit`: The deposit required to make a bid for membership of the group.
     */
    "set_parameters": Anonymize<I9hkvi4k3kh916>;
    /**
     *Punish the skeptic with a strike if they did not vote on a candidate. Callable by the
     *candidate.
     */
    "punish_skeptic": undefined;
    /**
     *Transform an approved candidate into a member. Callable only by the
     *the candidate, and only after the period for voting has ended.
     */
    "claim_membership": undefined;
    /**
     *Transform an approved candidate into a member. Callable only by the Signed origin of the
     *Founder, only after the period for voting has ended and only when the candidate is not
     *clearly rejected.
     */
    "bestow_membership": Anonymize<I4b66js88p45m8>;
    /**
     *Remove the candidate's application from the society. Callable only by the Signed origin
     *of the Founder, only after the period for voting has ended, and only when they do not
     *have a clear approval.
     *
     *Any bid deposit is lost and voucher is banned.
     */
    "kick_candidate": Anonymize<I4b66js88p45m8>;
    /**
     *Remove the candidate's application from the society. Callable only by the candidate.
     *
     *Any bid deposit is lost and voucher is banned.
     */
    "resign_candidacy": undefined;
    /**
     *Remove a `candidate`'s failed application from the society. Callable by any
     *signed origin but only at the end of the subsequent round and only for
     *a candidate with more rejections than approvals.
     *
     *The bid deposit is lost and the voucher is banned.
     */
    "drop_candidate": Anonymize<I4b66js88p45m8>;
    /**
     *Remove up to `max` stale votes for the given `candidate`.
     *
     *May be called by any Signed origin, but only after the candidate's candidacy is ended.
     */
    "cleanup_candidacy": Anonymize<Ieh40op1lafir9>;
    /**
     *Remove up to `max` stale votes for the defender in the given `challenge_round`.
     *
     *May be called by any Signed origin, but only after the challenge round is ended.
     */
    "cleanup_challenge": Anonymize<Icjp7f9u9fno72>;
}>;
export type Ibvkbvbkttt0k5 = {
    "who": MultiAddress;
    "value": bigint;
    "tip": bigint;
};
export type I8i12uisk6j7l = {
    "candidate": MultiAddress;
    "approve": boolean;
};
export type I26anifrfnljoi = {
    "approve": boolean;
};
export type I6a6f85pb71ums = {
    "founder": MultiAddress;
    "max_members": number;
    "max_intake": number;
    "max_strikes": number;
    "candidate_deposit": bigint;
    "rules": Binary;
};
export type I96p6guspeq6t = {
    "who": MultiAddress;
    "forgive": boolean;
};
export type Ieh40op1lafir9 = {
    "candidate": SS58String;
    "max": number;
};
export type Icjp7f9u9fno72 = {
    "challenge_round": number;
    "max": number;
};
export type I7q9tacka5j7qe = AnonymousEnum<{
    /**
     *Send a call through a recovered account.
     *
     *The dispatch origin for this call must be _Signed_ and registered to
     *be able to make calls on behalf of the recovered account.
     *
     *Parameters:
     *- `account`: The recovered account you want to make a call on-behalf-of.
     *- `call`: The call you want to make with the recovered account.
     */
    "as_recovered": Anonymize<I1bk4tm1i2b3ng>;
    /**
     *Allow ROOT to bypass the recovery process and set an a rescuer account
     *for a lost account directly.
     *
     *The dispatch origin for this call must be _ROOT_.
     *
     *Parameters:
     *- `lost`: The "lost account" to be recovered.
     *- `rescuer`: The "rescuer account" which can call as the lost account.
     */
    "set_recovered": Anonymize<I7pqmhr25d3dqq>;
    /**
     *Create a recovery configuration for your account. This makes your account recoverable.
     *
     *Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance
     *will be reserved for storing the recovery configuration. This deposit is returned
     *in full when the user calls `remove_recovery`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `friends`: A list of friends you trust to vouch for recovery attempts. Should be
     *  ordered and contain no duplicate values.
     *- `threshold`: The number of friends that must vouch for a recovery attempt before the
     *  account can be recovered. Should be less than or equal to the length of the list of
     *  friends.
     *- `delay_period`: The number of blocks after a recovery attempt is initialized that
     *  needs to pass before the account can be recovered.
     */
    "create_recovery": Anonymize<I6s6ihmfj6j5qq>;
    /**
     *Initiate the process for recovering a recoverable account.
     *
     *Payment: `RecoveryDeposit` balance will be reserved for initiating the
     *recovery process. This deposit will always be repatriated to the account
     *trying to be recovered. See `close_recovery`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `account`: The lost account that you want to recover. This account needs to be
     *  recoverable (i.e. have a recovery configuration).
     */
    "initiate_recovery": Anonymize<Ic6cqd9g0t65v0>;
    /**
     *Allow a "friend" of a recoverable account to vouch for an active recovery
     *process for that account.
     *
     *The dispatch origin for this call must be _Signed_ and must be a "friend"
     *for the recoverable account.
     *
     *Parameters:
     *- `lost`: The lost account that you want to recover.
     *- `rescuer`: The account trying to rescue the lost account that you want to vouch for.
     *
     *The combination of these two parameters must point to an active recovery
     *process.
     */
    "vouch_recovery": Anonymize<I7pqmhr25d3dqq>;
    /**
     *Allow a successful rescuer to claim their recovered account.
     *
     *The dispatch origin for this call must be _Signed_ and must be a "rescuer"
     *who has successfully completed the account recovery process: collected
     *`threshold` or more vouches, waited `delay_period` blocks since initiation.
     *
     *Parameters:
     *- `account`: The lost account that you want to claim has been successfully recovered by
     *  you.
     */
    "claim_recovery": Anonymize<Ic6cqd9g0t65v0>;
    /**
     *As the controller of a recoverable account, close an active recovery
     *process for your account.
     *
     *Payment: By calling this function, the recoverable account will receive
     *the recovery deposit `RecoveryDeposit` placed by the rescuer.
     *
     *The dispatch origin for this call must be _Signed_ and must be a
     *recoverable account with an active recovery process for it.
     *
     *Parameters:
     *- `rescuer`: The account trying to rescue this recoverable account.
     */
    "close_recovery": Anonymize<I7ka1pdlbuevh2>;
    /**
     *Remove the recovery process for your account. Recovered accounts are still accessible.
     *
     *NOTE: The user must make sure to call `close_recovery` on all active
     *recovery attempts before calling this function else it will fail.
     *
     *Payment: By calling this function the recoverable account will unreserve
     *their recovery configuration deposit.
     *(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)
     *
     *The dispatch origin for this call must be _Signed_ and must be a
     *recoverable account (i.e. has a recovery configuration).
     */
    "remove_recovery": undefined;
    /**
     *Cancel the ability to use `as_recovered` for `account`.
     *
     *The dispatch origin for this call must be _Signed_ and registered to
     *be able to make calls on behalf of the recovered account.
     *
     *Parameters:
     *- `account`: The recovered account you are able to call on-behalf-of.
     */
    "cancel_recovered": Anonymize<Ic6cqd9g0t65v0>;
}>;
export type I1bk4tm1i2b3ng = {
    "account": MultiAddress;
    "call": TxCallData;
};
export type I7pqmhr25d3dqq = {
    "lost": MultiAddress;
    "rescuer": MultiAddress;
};
export type I6s6ihmfj6j5qq = {
    "friends": Anonymize<Ia2lhg7l2hilo3>;
    "threshold": number;
    "delay_period": number;
};
export type Ic6cqd9g0t65v0 = {
    "account": MultiAddress;
};
export type I7ka1pdlbuevh2 = {
    "rescuer": MultiAddress;
};
export type I33lu1rt2eoq1h = AnonymousEnum<{
    /**
     *Anonymously schedule a task.
     */
    "schedule": Anonymize<I86371i6qagoce>;
    /**
     *Cancel an anonymously scheduled task.
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *Schedule a named task.
     */
    "schedule_named": Anonymize<I5gm0fj8b8qu3g>;
    /**
     *Cancel a named scheduled task.
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *Anonymously schedule a task after a delay.
     */
    "schedule_after": Anonymize<Ib5h8krvbu7gcm>;
    /**
     *Schedule a named task after a delay.
     */
    "schedule_named_after": Anonymize<Idunov91dgketn>;
    /**
     *Set a retry configuration for a task so that, in case its scheduled run fails, it will
     *be retried after `period` blocks, for a total amount of `retries` retries or until it
     *succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry": Anonymize<Ieg3fd8p4pkt10>;
    /**
     *Set a retry configuration for a named task so that, in case its scheduled run fails, it
     *will be retried after `period` blocks, for a total amount of `retries` retries or until
     *it succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry_named": Anonymize<I8kg5ll427kfqq>;
    /**
     *Removes the retry configuration of a task.
     */
    "cancel_retry": Anonymize<I467333262q1l9>;
    /**
     *Cancel the retry configuration of a named task.
     */
    "cancel_retry_named": Anonymize<Ifs1i5fk9cqvr6>;
}>;
export type I86371i6qagoce = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I5gm0fj8b8qu3g = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ib5h8krvbu7gcm = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Idunov91dgketn = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I6tj3mj7ea98bu = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<I8pt1p4aiber0h>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Ia3sdslbn23eti>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Ia3sdslbn23eti>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<Ict27q3g3cg78f>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<Ieduhgeucg3h7j>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<I9tfpm16e56og7>;
}>;
export type I8pt1p4aiber0h = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ic9lodvalmfgme>;
    "call": TxCallData;
};
export type Ic9lodvalmfgme = (Anonymize<I1ffle57clnprr>) | undefined;
export type Ia3sdslbn23eti = {
    "delegate": MultiAddress;
    "proxy_type": Anonymize<I1ffle57clnprr>;
    "delay": number;
};
export type Ict27q3g3cg78f = {
    "proxy_type": Anonymize<I1ffle57clnprr>;
    "delay": number;
    "index": number;
};
export type Ieduhgeucg3h7j = {
    "spawner": MultiAddress;
    "proxy_type": Anonymize<I1ffle57clnprr>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type I9tfpm16e56og7 = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ic9lodvalmfgme>;
    "call": TxCallData;
};
export type I5mjmvevktqtsu = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<Ic11v0sqkv8lho>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<I5s3p8q2sfvnav>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Ic11v0sqkv8lho = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type I5s3p8q2sfvnav = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I5dqci5rl3kg3m = AnonymousEnum<{
    /**
     *Submit a solution for the unsigned phase.
     *
     *The dispatch origin fo this call must be __none__.
     *
     *This submission is checked on the fly. Moreover, this unsigned solution is only
     *validated when submitted to the pool from the **local** node. Effectively, this means
     *that only active validators can submit this transaction when authoring a block (similar
     *to an inherent).
     *
     *To prevent any incorrect solution (and thus wasted time/weight), this transaction will
     *panic if the solution submitted by the validator is invalid in any way, effectively
     *putting their authoring reward at risk.
     *
     *No deposit or reward is associated with this submission.
     */
    "submit_unsigned": Anonymize<Ic50i89t5eabvg>;
    /**
     *Set a new value for `MinimumUntrustedScore`.
     *
     *Dispatch origin must be aligned with `T::ForceOrigin`.
     *
     *This check can be turned off by setting the value to `None`.
     */
    "set_minimum_untrusted_score": Anonymize<I80q14um2s2ckg>;
    /**
     *Set a solution in the queue, to be handed out to the client of this pallet in the next
     *call to `ElectionProvider::elect`.
     *
     *This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.
     *
     *The solution is not checked for any feasibility and is assumed to be trustworthy, as any
     *feasibility check itself can in principle cause the election process to fail (due to
     *memory/weight constrains).
     */
    "set_emergency_election_result": Anonymize<I5qs1t1erfi7u8>;
    /**
     *Submit a solution for the signed phase.
     *
     *The dispatch origin fo this call must be __signed__.
     *
     *The solution is potentially queued, based on the claimed score and processed at the end
     *of the signed phase.
     *
     *A deposit is reserved and recorded for the solution. Based on the outcome, the solution
     *might be rewarded, slashed, or get all or a part of the deposit back.
     */
    "submit": Anonymize<I2ou0mtsgm3l71>;
    /**
     *Trigger the governance fallback.
     *
     *This can only be called when [`Phase::Emergency`] is enabled, as an alternative to
     *calling [`Call::set_emergency_election_result`].
     */
    "governance_fallback": Anonymize<Ifsme8miqq9006>;
}>;
export type Ic50i89t5eabvg = {
    "raw_solution": Anonymize<I6s33laenmuupn>;
    "witness": Anonymize<Iasd2iat48n080>;
};
export type I2ou0mtsgm3l71 = {
    "raw_solution": Anonymize<I6s33laenmuupn>;
};
export type Iaq5q67idam8ll = AnonymousEnum<{
    /**
     *Place a bid.
     *
     *Origin must be Signed, and account must have at least `amount` in free balance.
     *
     *- `amount`: The amount of the bid; these funds will be reserved, and if/when
     *  consolidated, removed. Must be at least `MinBid`.
     *- `duration`: The number of periods before which the newly consolidated bid may be
     *  thawed. Must be greater than 1 and no more than `QueueCount`.
     *
     *Complexities:
     *- `Queues[duration].len()` (just take max).
     */
    "place_bid": Anonymize<Icckjru8f8flpj>;
    /**
     *Retract a previously placed bid.
     *
     *Origin must be Signed, and the account should have previously issued a still-active bid
     *of `amount` for `duration`.
     *
     *- `amount`: The amount of the previous bid.
     *- `duration`: The duration of the previous bid.
     */
    "retract_bid": Anonymize<Icckjru8f8flpj>;
    /**
     *Ensure we have sufficient funding for all potential payouts.
     *
     *- `origin`: Must be accepted by `FundOrigin`.
     */
    "fund_deficit": undefined;
    /**
     *Reduce or remove an outstanding receipt, placing the according proportion of funds into
     *the account of the owner.
     *
     *- `origin`: Must be Signed and the account must be the owner of the receipt `index` as
     *  well as any fungible counterpart.
     *- `index`: The index of the receipt.
     *- `portion`: If `Some`, then only the given portion of the receipt should be thawed. If
     *  `None`, then all of it should be.
     */
    "thaw_private": Anonymize<Iba38lgbjrs7je>;
    /**
     *Reduce or remove an outstanding receipt, placing the according proportion of funds into
     *the account of the owner.
     *
     *- `origin`: Must be Signed and the account must be the owner of the fungible counterpart
     *  for receipt `index`.
     *- `index`: The index of the receipt.
     */
    "thaw_communal": Anonymize<I666bl2fqjkejo>;
    /**
     *Make a private receipt communal and create fungible counterparts for its owner.
     */
    "communify": Anonymize<I666bl2fqjkejo>;
    /**
     *Make a communal receipt private and burn fungible counterparts from its owner.
     */
    "privatize": Anonymize<I666bl2fqjkejo>;
}>;
export type Icckjru8f8flpj = {
    "amount": bigint;
    "duration": number;
};
export type Iba38lgbjrs7je = {
    "index": number;
    "maybe_proportion"?: Anonymize<I35p85j063s0il>;
};
export type I3he5stuuhiokq = {
    "inflation": bigint;
    "next_mint": Anonymize<I200n1ov5tbcvr>;
};
export type I7e8tdrv5aklbf = ResultPayload<Anonymize<Idog2s3a8to2s8>, TransactionValidityError>;
export type Ibipt6qfiegcf5 = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "Babe": Anonymize<I1jeo0dpbkma5g>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Indices": Anonymize<I66vlm8f4l1oll>;
    "Balances": Anonymize<I9svldsp29mh87>;
    "Staking": Anonymize<I5jvuh9dlbdd20>;
    "Session": Anonymize<Iceajactc9a8pc>;
    "Grandpa": Anonymize<I5u9ggmn8umfqm>;
    "Treasury": Anonymize<I1s28h18nhih63>;
    "ConvictionVoting": Anonymize<Ie5kd08tutk56t>;
    "Referenda": Anonymize<I4vi3hlg2ca351>;
    "FellowshipCollective": Anonymize<I5bt1lc4doakmu>;
    "FellowshipReferenda": Anonymize<I4vi3hlg2ca351>;
    "Whitelist": Anonymize<Iet9pqfh3sbig8>;
    "Parameters": Anonymize<Ic5v5ffa0cr70p>;
    "Claims": Anonymize<Id0dj18ct09hlp>;
    "Utility": Anonymize<I4pauf7of6nn70>;
    "Society": Anonymize<Iaup05df56f0nc>;
    "Recovery": Anonymize<I7q9tacka5j7qe>;
    "Vesting": Anonymize<Icgf8vmtkbnu4u>;
    "Scheduler": Anonymize<I33lu1rt2eoq1h>;
    "Proxy": Anonymize<I6tj3mj7ea98bu>;
    "Multisig": Anonymize<I5mjmvevktqtsu>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "Bounties": Anonymize<I91kpi5kjh9on2>;
    "ChildBounties": Anonymize<I1b6drdhvt5hl9>;
    "ElectionProviderMultiPhase": Anonymize<I5dqci5rl3kg3m>;
    "Nis": Anonymize<Iaq5q67idam8ll>;
    "NisCounterpartBalances": Anonymize<I9svldsp29mh87>;
    "VoterList": Anonymize<Ifvfo1l0vu2o7e>;
    "NominationPools": Anonymize<I57mljkkr28m9p>;
    "FastUnstake": Anonymize<I44snhj1gahvrd>;
    "Configuration": Anonymize<Ia9ptue949ognv>;
    "ParasShared": undefined;
    "ParaInclusion": undefined;
    "ParaInherent": Anonymize<Id5l4f3jqtnb0u>;
    "Paras": Anonymize<Ie2dden5k4kk7t>;
    "Initializer": Anonymize<Ieggtnkc96vvt7>;
    "Hrmp": Anonymize<I45adic8nko129>;
    "ParasDisputes": Anonymize<Ifkh1ep7g9h3rv>;
    "ParasSlashing": Anonymize<I3jj054kp2bjol>;
    "OnDemandAssignmentProvider": Anonymize<I9s7urueli180g>;
    "Registrar": Anonymize<Icclqj5sge2nc7>;
    "Slots": Anonymize<Iafhis924j14hg>;
    "Auctions": Anonymize<I4a8qeimc5p3qn>;
    "Crowdloan": Anonymize<Iaj4q75nu5v2i2>;
    "Coretime": Anonymize<Idu7bbtd2jtnb9>;
    "XcmPallet": Anonymize<I9nbjvlrb9bp1g>;
    "MessageQueue": Anonymize<I3lic4llm6egbr>;
    "AssetRate": Anonymize<I85dm8mgt48css>;
    "Beefy": Anonymize<I918ie8roegt3d>;
}>;
export type Ib5fks2228v743 = ResultPayload<Anonymize<I5p94u12jrvjga>, Anonymize<I55ku9c5gk50hb>>;
export type I5p94u12jrvjga = {
    "execution_result": Anonymize<Iftq10rlffn46u>;
    "emitted_events": Anonymize<Ia37q31t7lss7q>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type Ia37q31t7lss7q = Array<Anonymize<I4djp4s5jm2vmj>>;
export type Ib748gt0noucrc = ResultPayload<Anonymize<I7p376hrf80m31>, Anonymize<I55ku9c5gk50hb>>;
export type I7p376hrf80m31 = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<Ia37q31t7lss7q>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I8su45alklu45p = Array<Anonymize<Id8qqphnsqr2gc>>;
export type Id8qqphnsqr2gc = {
    "phase": Phase;
    "event": Anonymize<Ieuoa5a0k2id2n>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type Ieuoa5a0k2id2n = AnonymousEnum<{
    "System": Anonymize<Iep1ft8kusqcsk>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "AssetTxPayment": Anonymize<Ifagg2q2o5fgjl>;
    "Vesting": VestingEvent;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "MessageQueue": Anonymize<I2kosejppk3jon>;
    "Utility": Anonymize<Ifa2o50qf1h6ig>;
    "Multisig": Anonymize<I7qnqohr649r9q>;
    "Proxy": Anonymize<Ic85iei8eo40i4>;
    "Assets": Anonymize<I6avancvg8fd05>;
    "Uniques": Anonymize<Ia0j71vjrjqu9p>;
    "Nfts": Anonymize<I6qicn8jn4fftj>;
    "ForeignAssets": Anonymize<I81i2fkdo6nple>;
    "NftFractionalization": Anonymize<I41s7j0hsp2u0b>;
    "PoolAssets": Anonymize<I6avancvg8fd05>;
    "AssetConversion": Anonymize<I31lqq0fjfmnfv>;
}>;
export type Iep1ft8kusqcsk = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I8kbvn5rbfrikm>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I8kbvn5rbfrikm = {
    "dispatch_error": Anonymize<I768s0j7i6e52>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I768s0j7i6e52 = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<Idh0ldojjssn4m>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type Idh0ldojjssn4m = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "Timestamp": undefined;
    "ParachainInfo": undefined;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "AssetTxPayment": undefined;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "XcmpQueue": Anonymize<Idnnbndsjjeqqs>;
    "PolkadotXcm": Anonymize<I87j95aq93d7dq>;
    "CumulusXcm": undefined;
    "ToPolkadotXcmRouter": undefined;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Assets": Anonymize<Iapedqb0veh71>;
    "Uniques": Anonymize<Ienq2ge2rhv4jm>;
    "Nfts": Anonymize<I58r1150kmj18u>;
    "ForeignAssets": Anonymize<Iapedqb0veh71>;
    "NftFractionalization": Anonymize<Ib24bvufha821j>;
    "PoolAssets": Anonymize<Iapedqb0veh71>;
    "AssetConversion": Anonymize<I4u78hb23uhvi2>;
}>;
export type I9p95gln24a0rn = AnonymousEnum<{
    /**
     *Attempt to upgrade validation function while existing upgrade pending.
     */
    "OverlappingUpgrades": undefined;
    /**
     *Polkadot currently prohibits this parachain from upgrading its validation function.
     */
    "ProhibitedByPolkadot": undefined;
    /**
     *The supplied validation function has compiled into a blob larger than Polkadot is
     *willing to run.
     */
    "TooBig": undefined;
    /**
     *The inherent which supplies the validation data did not run this block.
     */
    "ValidationDataNotAvailable": undefined;
    /**
     *The inherent which supplies the host configuration did not run this block.
     */
    "HostConfigurationNotAvailable": undefined;
    /**
     *No validation function upgrade is currently scheduled.
     */
    "NotScheduled": undefined;
    /**
     *No code upgrade has been authorized.
     */
    "NothingAuthorized": undefined;
    /**
     *The given code upgrade has not been authorized.
     */
    "Unauthorized": undefined;
}>;
export type I36bcffk2387dv = AnonymousEnum<{
    /**
     *The pallet has too many candidates.
     */
    "TooManyCandidates": undefined;
    /**
     *Leaving would result in too few candidates.
     */
    "TooFewEligibleCollators": undefined;
    /**
     *Account is already a candidate.
     */
    "AlreadyCandidate": undefined;
    /**
     *Account is not a candidate.
     */
    "NotCandidate": undefined;
    /**
     *There are too many Invulnerables.
     */
    "TooManyInvulnerables": undefined;
    /**
     *Account is already an Invulnerable.
     */
    "AlreadyInvulnerable": undefined;
    /**
     *Account is not an Invulnerable.
     */
    "NotInvulnerable": undefined;
    /**
     *Account has no associated validator ID.
     */
    "NoAssociatedValidatorId": undefined;
    /**
     *Validator ID is not yet registered.
     */
    "ValidatorNotRegistered": undefined;
    /**
     *Could not insert in the candidate list.
     */
    "InsertToCandidateListFailed": undefined;
    /**
     *Could not remove from the candidate list.
     */
    "RemoveFromCandidateListFailed": undefined;
    /**
     *New deposit amount would be below the minimum candidacy bond.
     */
    "DepositTooLow": undefined;
    /**
     *Could not update the candidate list.
     */
    "UpdateCandidateListFailed": undefined;
    /**
     *Deposit amount is too low to take the target's slot in the candidate list.
     */
    "InsufficientBond": undefined;
    /**
     *The target account to be replaced in the candidate list is not a candidate.
     */
    "TargetIsNotCandidate": undefined;
    /**
     *The updated deposit amount is equal to the amount already reserved.
     */
    "IdenticalDeposit": undefined;
    /**
     *Cannot lower candidacy bond while occupying a future collator slot in the list.
     */
    "InvalidUnreserve": undefined;
}>;
export type Idnnbndsjjeqqs = AnonymousEnum<{
    /**
     *Setting the queue config failed since one of its values was invalid.
     */
    "BadQueueConfig": undefined;
    /**
     *The execution is already suspended.
     */
    "AlreadySuspended": undefined;
    /**
     *The execution is already resumed.
     */
    "AlreadyResumed": undefined;
    /**
     *There are too many active outbound channels.
     */
    "TooManyActiveOutboundChannels": undefined;
    /**
     *The message is too big.
     */
    "TooBig": undefined;
}>;
export type Iapedqb0veh71 = AnonymousEnum<{
    /**
     *Account balance must be greater than or equal to the transfer amount.
     */
    "BalanceLow": undefined;
    /**
     *The account to alter does not exist.
     */
    "NoAccount": undefined;
    /**
     *The signing account has no permission to do the operation.
     */
    "NoPermission": undefined;
    /**
     *The given asset ID is unknown.
     */
    "Unknown": undefined;
    /**
     *The origin account is frozen.
     */
    "Frozen": undefined;
    /**
     *The asset ID is already taken.
     */
    "InUse": undefined;
    /**
     *Invalid witness data given.
     */
    "BadWitness": undefined;
    /**
     *Minimum balance should be non-zero.
     */
    "MinBalanceZero": undefined;
    /**
     *Unable to increment the consumer reference counters on the account. Either no provider
     *reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
     *fewer then the maximum number of consumers has been reached.
     */
    "UnavailableConsumer": undefined;
    /**
     *Invalid metadata given.
     */
    "BadMetadata": undefined;
    /**
     *No approval exists that would allow the transfer.
     */
    "Unapproved": undefined;
    /**
     *The source account would not survive the transfer and it needs to stay alive.
     */
    "WouldDie": undefined;
    /**
     *The asset-account already exists.
     */
    "AlreadyExists": undefined;
    /**
     *The asset-account doesn't have an associated deposit.
     */
    "NoDeposit": undefined;
    /**
     *The operation would result in funds being burned.
     */
    "WouldBurn": undefined;
    /**
     *The asset is a live asset and is actively being used. Usually emit for operations such
     *as `start_destroy` which require the asset to be in a destroying state.
     */
    "LiveAsset": undefined;
    /**
     *The asset is not live, and likely being destroyed.
     */
    "AssetNotLive": undefined;
    /**
     *The asset status is not the expected status.
     */
    "IncorrectStatus": undefined;
    /**
     *The asset should be frozen before the given operation.
     */
    "NotFrozen": undefined;
    /**
     *Callback action resulted in error
     */
    "CallbackFailed": undefined;
    /**
     *The asset ID must be equal to the [`NextAssetId`].
     */
    "BadAssetId": undefined;
}>;
export type Ienq2ge2rhv4jm = AnonymousEnum<{
    /**
     *The signing account has no permission to do the operation.
     */
    "NoPermission": undefined;
    /**
     *The given item ID is unknown.
     */
    "UnknownCollection": undefined;
    /**
     *The item ID has already been used for an item.
     */
    "AlreadyExists": undefined;
    /**
     *The owner turned out to be different to what was expected.
     */
    "WrongOwner": undefined;
    /**
     *Invalid witness data given.
     */
    "BadWitness": undefined;
    /**
     *The item ID is already taken.
     */
    "InUse": undefined;
    /**
     *The item or collection is frozen.
     */
    "Frozen": undefined;
    /**
     *The delegate turned out to be different to what was expected.
     */
    "WrongDelegate": undefined;
    /**
     *There is no delegate approved.
     */
    "NoDelegate": undefined;
    /**
     *No approval exists that would allow the transfer.
     */
    "Unapproved": undefined;
    /**
     *The named owner has not signed ownership of the collection is acceptable.
     */
    "Unaccepted": undefined;
    /**
     *The item is locked.
     */
    "Locked": undefined;
    /**
     *All items have been minted.
     */
    "MaxSupplyReached": undefined;
    /**
     *The max supply has already been set.
     */
    "MaxSupplyAlreadySet": undefined;
    /**
     *The provided max supply is less to the amount of items a collection already has.
     */
    "MaxSupplyTooSmall": undefined;
    /**
     *The given item ID is unknown.
     */
    "UnknownItem": undefined;
    /**
     *Item is not for sale.
     */
    "NotForSale": undefined;
    /**
     *The provided bid is too low.
     */
    "BidTooLow": undefined;
}>;
export type I58r1150kmj18u = AnonymousEnum<{
    /**
     *The signing account has no permission to do the operation.
     */
    "NoPermission": undefined;
    /**
     *The given item ID is unknown.
     */
    "UnknownCollection": undefined;
    /**
     *The item ID has already been used for an item.
     */
    "AlreadyExists": undefined;
    /**
     *The approval had a deadline that expired, so the approval isn't valid anymore.
     */
    "ApprovalExpired": undefined;
    /**
     *The owner turned out to be different to what was expected.
     */
    "WrongOwner": undefined;
    /**
     *The witness data given does not match the current state of the chain.
     */
    "BadWitness": undefined;
    /**
     *Collection ID is already taken.
     */
    "CollectionIdInUse": undefined;
    /**
     *Items within that collection are non-transferable.
     */
    "ItemsNonTransferable": undefined;
    /**
     *The provided account is not a delegate.
     */
    "NotDelegate": undefined;
    /**
     *The delegate turned out to be different to what was expected.
     */
    "WrongDelegate": undefined;
    /**
     *No approval exists that would allow the transfer.
     */
    "Unapproved": undefined;
    /**
     *The named owner has not signed ownership acceptance of the collection.
     */
    "Unaccepted": undefined;
    /**
     *The item is locked (non-transferable).
     */
    "ItemLocked": undefined;
    /**
     *Item's attributes are locked.
     */
    "LockedItemAttributes": undefined;
    /**
     *Collection's attributes are locked.
     */
    "LockedCollectionAttributes": undefined;
    /**
     *Item's metadata is locked.
     */
    "LockedItemMetadata": undefined;
    /**
     *Collection's metadata is locked.
     */
    "LockedCollectionMetadata": undefined;
    /**
     *All items have been minted.
     */
    "MaxSupplyReached": undefined;
    /**
     *The max supply is locked and can't be changed.
     */
    "MaxSupplyLocked": undefined;
    /**
     *The provided max supply is less than the number of items a collection already has.
     */
    "MaxSupplyTooSmall": undefined;
    /**
     *The given item ID is unknown.
     */
    "UnknownItem": undefined;
    /**
     *Swap doesn't exist.
     */
    "UnknownSwap": undefined;
    /**
     *The given item has no metadata set.
     */
    "MetadataNotFound": undefined;
    /**
     *The provided attribute can't be found.
     */
    "AttributeNotFound": undefined;
    /**
     *Item is not for sale.
     */
    "NotForSale": undefined;
    /**
     *The provided bid is too low.
     */
    "BidTooLow": undefined;
    /**
     *The item has reached its approval limit.
     */
    "ReachedApprovalLimit": undefined;
    /**
     *The deadline has already expired.
     */
    "DeadlineExpired": undefined;
    /**
     *The duration provided should be less than or equal to `MaxDeadlineDuration`.
     */
    "WrongDuration": undefined;
    /**
     *The method is disabled by system settings.
     */
    "MethodDisabled": undefined;
    /**
     *The provided setting can't be set.
     */
    "WrongSetting": undefined;
    /**
     *Item's config already exists and should be equal to the provided one.
     */
    "InconsistentItemConfig": undefined;
    /**
     *Config for a collection or an item can't be found.
     */
    "NoConfig": undefined;
    /**
     *Some roles were not cleared.
     */
    "RolesNotCleared": undefined;
    /**
     *Mint has not started yet.
     */
    "MintNotStarted": undefined;
    /**
     *Mint has already ended.
     */
    "MintEnded": undefined;
    /**
     *The provided Item was already used for claiming.
     */
    "AlreadyClaimed": undefined;
    /**
     *The provided data is incorrect.
     */
    "IncorrectData": undefined;
    /**
     *The extrinsic was sent by the wrong origin.
     */
    "WrongOrigin": undefined;
    /**
     *The provided signature is incorrect.
     */
    "WrongSignature": undefined;
    /**
     *The provided metadata might be too long.
     */
    "IncorrectMetadata": undefined;
    /**
     *Can't set more attributes per one call.
     */
    "MaxAttributesLimitReached": undefined;
    /**
     *The provided namespace isn't supported in this call.
     */
    "WrongNamespace": undefined;
    /**
     *Can't delete non-empty collections.
     */
    "CollectionNotEmpty": undefined;
    /**
     *The witness data should be provided.
     */
    "WitnessRequired": undefined;
}>;
export type Ib24bvufha821j = AnonymousEnum<{
    /**
     *Asset ID does not correspond to locked NFT.
     */
    "IncorrectAssetId": undefined;
    /**
     *The signing account has no permission to do the operation.
     */
    "NoPermission": undefined;
    /**
     *NFT doesn't exist.
     */
    "NftNotFound": undefined;
    /**
     *NFT has not yet been fractionalised.
     */
    "NftNotFractionalized": undefined;
}>;
export type I4u78hb23uhvi2 = AnonymousEnum<{
    /**
     *Provided asset pair is not supported for pool.
     */
    "InvalidAssetPair": undefined;
    /**
     *Pool already exists.
     */
    "PoolExists": undefined;
    /**
     *Desired amount can't be zero.
     */
    "WrongDesiredAmount": undefined;
    /**
     *Provided amount should be greater than or equal to the existential deposit/asset's
     *minimal amount.
     */
    "AmountOneLessThanMinimal": undefined;
    /**
     *Provided amount should be greater than or equal to the existential deposit/asset's
     *minimal amount.
     */
    "AmountTwoLessThanMinimal": undefined;
    /**
     *Reserve needs to always be greater than or equal to the existential deposit/asset's
     *minimal amount.
     */
    "ReserveLeftLessThanMinimal": undefined;
    /**
     *Desired amount can't be equal to the pool reserve.
     */
    "AmountOutTooHigh": undefined;
    /**
     *The pool doesn't exist.
     */
    "PoolNotFound": undefined;
    /**
     *An overflow happened.
     */
    "Overflow": undefined;
    /**
     *The minimal amount requirement for the first token in the pair wasn't met.
     */
    "AssetOneDepositDidNotMeetMinimum": undefined;
    /**
     *The minimal amount requirement for the second token in the pair wasn't met.
     */
    "AssetTwoDepositDidNotMeetMinimum": undefined;
    /**
     *The minimal amount requirement for the first token in the pair wasn't met.
     */
    "AssetOneWithdrawalDidNotMeetMinimum": undefined;
    /**
     *The minimal amount requirement for the second token in the pair wasn't met.
     */
    "AssetTwoWithdrawalDidNotMeetMinimum": undefined;
    /**
     *Optimal calculated amount is less than desired.
     */
    "OptimalAmountLessThanDesired": undefined;
    /**
     *Insufficient liquidity minted.
     */
    "InsufficientLiquidityMinted": undefined;
    /**
     *Requested liquidity can't be zero.
     */
    "ZeroLiquidity": undefined;
    /**
     *Amount can't be zero.
     */
    "ZeroAmount": undefined;
    /**
     *Calculated amount out is less than provided minimum amount.
     */
    "ProvidedMinimumNotSufficientForSwap": undefined;
    /**
     *Provided maximum amount is not sufficient for swap.
     */
    "ProvidedMaximumNotSufficientForSwap": undefined;
    /**
     *The provided path must consists of 2 assets at least.
     */
    "InvalidPath": undefined;
    /**
     *The provided path must consists of unique assets.
     */
    "NonUniquePath": undefined;
    /**
     *It was not possible to get or increment the Id of the pool.
     */
    "IncorrectPoolAssetId": undefined;
    /**
     *The destination account cannot exist with the swapped funds.
     */
    "BelowMinimum": undefined;
}>;
export type Icbsekf57miplo = AnonymousEnum<{
    /**
     *The validation function has been scheduled to apply.
     */
    "ValidationFunctionStored": undefined;
    /**
     *The validation function was applied as of the contained relay chain block number.
     */
    "ValidationFunctionApplied": Anonymize<Idd7hd99u0ho0n>;
    /**
     *The relay-chain aborted the upgrade process.
     */
    "ValidationFunctionDiscarded": undefined;
    /**
     *Some downward messages have been received and will be processed.
     */
    "DownwardMessagesReceived": Anonymize<Iafscmv8tjf0ou>;
    /**
     *Downward messages were processed using the given weight.
     */
    "DownwardMessagesProcessed": Anonymize<I100l07kaehdlp>;
    /**
     *An upward message was sent to the relay chain.
     */
    "UpwardMessageSent": Anonymize<I6gnbnvip5vvdi>;
}>;
export type Idd7hd99u0ho0n = {
    "relay_chain_block_num": number;
};
export type I100l07kaehdlp = {
    "weight_used": Anonymize<I4q39t5hn830vp>;
    "dmq_head": FixedSizeBinary<32>;
};
export type I6gnbnvip5vvdi = {
    "message_hash"?: Anonymize<I4s6vifaf8k998>;
};
export type Ifagg2q2o5fgjl = AnonymousEnum<{
    /**
     *A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     *has been paid by `who` in an asset `asset_id`.
     */
    "AssetTxFeePaid": Anonymize<Iqjk6s1a2lmkt>;
    /**
     *A swap of the refund in native currency back to asset failed.
     */
    "AssetRefundFailed": Anonymize<Icjchvrijclvlv>;
}>;
export type Iqjk6s1a2lmkt = {
    "who": SS58String;
    "actual_fee": bigint;
    "tip": bigint;
    "asset_id": Anonymize<I4c0s5cioidn76>;
};
export type Icjchvrijclvlv = {
    "native_amount_kept": bigint;
};
export type I4srakrmf0fspo = AnonymousEnum<{
    /**
     *New Invulnerables were set.
     */
    "NewInvulnerables": Anonymize<I39t01nnod9109>;
    /**
     *A new Invulnerable was added.
     */
    "InvulnerableAdded": Anonymize<I6v8sm60vvkmk7>;
    /**
     *An Invulnerable was removed.
     */
    "InvulnerableRemoved": Anonymize<I6v8sm60vvkmk7>;
    /**
     *The number of desired candidates was set.
     */
    "NewDesiredCandidates": Anonymize<I1qmtmbe5so8r3>;
    /**
     *The candidacy bond was set.
     */
    "NewCandidacyBond": Anonymize<Ih99m6ehpcar7>;
    /**
     *A new candidate joined.
     */
    "CandidateAdded": Anonymize<Idgorhsbgdq2ap>;
    /**
     *Bond of a candidate updated.
     */
    "CandidateBondUpdated": Anonymize<Idgorhsbgdq2ap>;
    /**
     *A candidate was removed.
     */
    "CandidateRemoved": Anonymize<I6v8sm60vvkmk7>;
    /**
     *An account was replaced in the candidate list by another one.
     */
    "CandidateReplaced": Anonymize<I9ubb2kqevnu6t>;
    /**
     *An account was unable to be added to the Invulnerables because they did not have keys
     *registered. Other Invulnerables may have been set.
     */
    "InvalidInvulnerableSkipped": Anonymize<I6v8sm60vvkmk7>;
}>;
export type I6v8sm60vvkmk7 = {
    "account_id": SS58String;
};
export type I1qmtmbe5so8r3 = {
    "desired_candidates": number;
};
export type Ih99m6ehpcar7 = {
    "bond_amount": bigint;
};
export type Idgorhsbgdq2ap = {
    "account_id": SS58String;
    "deposit": bigint;
};
export type I9ubb2kqevnu6t = {
    "old": SS58String;
    "new": SS58String;
    "deposit": bigint;
};
export type Idsqc7mhp6nnle = AnonymousEnum<{
    /**
     *An HRMP message was sent to a sibling parachain.
     */
    "XcmpMessageSent": Anonymize<I137t1cld92pod>;
}>;
export type I137t1cld92pod = {
    "message_hash": FixedSizeBinary<32>;
};
export type Ibvp9t1gqae5ct = AnonymousEnum<{
    /**
     *Downward message is invalid XCM.
     *\[ id \]
     */
    "InvalidFormat": FixedSizeBinary<32>;
    /**
     *Downward message is unsupported version of XCM.
     *\[ id \]
     */
    "UnsupportedVersion": FixedSizeBinary<32>;
    /**
     *Downward message executed with the given outcome.
     *\[ id, outcome \]
     */
    "ExecutedDownward": Anonymize<Iea25i7vqm7ot3>;
}>;
export type Iea25i7vqm7ot3 = [FixedSizeBinary<32>, XcmV4TraitsOutcome];
export type I2kosejppk3jon = AnonymousEnum<{
    /**
     *Message discarded due to an error in the `MessageProcessor` (usually a format error).
     */
    "ProcessingFailed": Anonymize<I1rvj4ubaplho0>;
    /**
     *Message is processed.
     */
    "Processed": Anonymize<Ia3uu7lqcc1q1i>;
    /**
     *Message placed in overweight queue.
     */
    "OverweightEnqueued": Anonymize<I7crucfnonitkn>;
    /**
     *This page was reaped.
     */
    "PageReaped": Anonymize<I7tmrp94r9sq4n>;
}>;
export type I1rvj4ubaplho0 = {
    /**
     *The `blake2_256` hash of the message.
     */
    "id": FixedSizeBinary<32>;
    /**
     *The queue of the message.
     */
    "origin": Anonymize<Iejeo53sea6n4q>;
    /**
     *The error that occurred.
     *
     *This error is pretty opaque. More fine-grained errors need to be emitted as events
     *by the `MessageProcessor`.
     */
    "error": Anonymize<I5hhsj7l9obr84>;
};
export type Iejeo53sea6n4q = AnonymousEnum<{
    "Here": undefined;
    "Parent": undefined;
    "Sibling": number;
}>;
export type Ia3uu7lqcc1q1i = {
    /**
     *The `blake2_256` hash of the message.
     */
    "id": FixedSizeBinary<32>;
    /**
     *The queue of the message.
     */
    "origin": Anonymize<Iejeo53sea6n4q>;
    /**
     *How much weight was used to process the message.
     */
    "weight_used": Anonymize<I4q39t5hn830vp>;
    /**
     *Whether the message was processed.
     *
     *Note that this does not mean that the underlying `MessageProcessor` was internally
     *successful. It *solely* means that the MQ pallet will treat this as a success
     *condition and discard the message. Any internal error needs to be emitted as events
     *by the `MessageProcessor`.
     */
    "success": boolean;
};
export type I7crucfnonitkn = {
    /**
     *The `blake2_256` hash of the message.
     */
    "id": FixedSizeBinary<32>;
    /**
     *The queue of the message.
     */
    "origin": Anonymize<Iejeo53sea6n4q>;
    /**
     *The page of the message.
     */
    "page_index": number;
    /**
     *The index of the message within the page.
     */
    "message_index": number;
};
export type I7tmrp94r9sq4n = {
    /**
     *The queue of the page.
     */
    "origin": Anonymize<Iejeo53sea6n4q>;
    /**
     *The index of the page.
     */
    "index": number;
};
export type Ifa2o50qf1h6ig = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<I49i6rmkp2gvb6>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<Iaagj3es2lkuco>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Ibajidue483fc0>;
}>;
export type I49i6rmkp2gvb6 = {
    "index": number;
    "error": Anonymize<I768s0j7i6e52>;
};
export type Iaagj3es2lkuco = {
    "error": Anonymize<I768s0j7i6e52>;
};
export type Ibajidue483fc0 = {
    "result": Anonymize<I2l5r18t78b2o2>;
};
export type I2l5r18t78b2o2 = ResultPayload<undefined, Anonymize<I768s0j7i6e52>>;
export type I7qnqohr649r9q = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I9h4toth1em9je>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I9h4toth1em9je = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I2l5r18t78b2o2>;
};
export type Ic85iei8eo40i4 = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Ibajidue483fc0>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ie7cuj84ohvg56>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I8ioopvokvl3ud>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I8ioopvokvl3ud>;
}>;
export type Ie7cuj84ohvg56 = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<I5ftepkjop3g1u>;
    "disambiguation_index": number;
};
export type I5ftepkjop3g1u = AnonymousEnum<{
    "Any": undefined;
    "NonTransfer": undefined;
    "CancelProxy": undefined;
    "Assets": undefined;
    "AssetOwner": undefined;
    "AssetManager": undefined;
    "Collator": undefined;
}>;
export type I8ioopvokvl3ud = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<I5ftepkjop3g1u>;
    "delay": number;
};
export type I6avancvg8fd05 = AnonymousEnum<{
    /**
     *Some asset class was created.
     */
    "Created": Anonymize<I88ff3u4dpivk>;
    /**
     *Some assets were issued.
     */
    "Issued": Anonymize<I33cp947glv1ks>;
    /**
     *Some assets were transferred.
     */
    "Transferred": Anonymize<Ic9om1gmmqu7rq>;
    /**
     *Some assets were destroyed.
     */
    "Burned": Anonymize<I5hfov2b68ppb6>;
    /**
     *The management team changed.
     */
    "TeamChanged": Anonymize<Ibthhb2m9vneds>;
    /**
     *The owner changed.
     */
    "OwnerChanged": Anonymize<Iaitn5bqfacj7k>;
    /**
     *Some account `who` was frozen.
     */
    "Frozen": Anonymize<If4ebvclj2ugvi>;
    /**
     *Some account `who` was thawed.
     */
    "Thawed": Anonymize<If4ebvclj2ugvi>;
    /**
     *Some asset `asset_id` was frozen.
     */
    "AssetFrozen": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Some asset `asset_id` was thawed.
     */
    "AssetThawed": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Accounts were destroyed for given asset.
     */
    "AccountsDestroyed": Anonymize<Ieduc1e6frq8rb>;
    /**
     *Approvals were destroyed for given asset.
     */
    "ApprovalsDestroyed": Anonymize<I9h6gbtabovtm4>;
    /**
     *An asset class is in the process of being destroyed.
     */
    "DestructionStarted": Anonymize<Ia5le7udkgbaq9>;
    /**
     *An asset class was destroyed.
     */
    "Destroyed": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Some asset class was force-created.
     */
    "ForceCreated": Anonymize<Iaitn5bqfacj7k>;
    /**
     *New metadata has been set for an asset.
     */
    "MetadataSet": Anonymize<Ifnsa0dkkpf465>;
    /**
     *Metadata has been cleared for an asset.
     */
    "MetadataCleared": Anonymize<Ia5le7udkgbaq9>;
    /**
     *(Additional) funds have been approved for transfer to a destination account.
     */
    "ApprovedTransfer": Anonymize<I65dtqr2egjbc3>;
    /**
     *An approval for account `delegate` was cancelled by `owner`.
     */
    "ApprovalCancelled": Anonymize<Ibqj3vg5s5lk0c>;
    /**
     *An `amount` was transferred in its entirety from `owner` to `destination` by
     *the approved `delegate`.
     */
    "TransferredApproved": Anonymize<I6l73u513p8rna>;
    /**
     *An asset has had its attributes changed by the `Force` origin.
     */
    "AssetStatusChanged": Anonymize<Ia5le7udkgbaq9>;
    /**
     *The min_balance of an asset has been updated by the asset owner.
     */
    "AssetMinBalanceChanged": Anonymize<Iefqmt2htu1dlu>;
    /**
     *Some account `who` was created with a deposit from `depositor`.
     */
    "Touched": Anonymize<If8bgtgqrchjtu>;
    /**
     *Some account `who` was blocked.
     */
    "Blocked": Anonymize<If4ebvclj2ugvi>;
    /**
     *Some assets were deposited (e.g. for transaction fees).
     */
    "Deposited": Anonymize<Idusmq77988cmt>;
    /**
     *Some assets were withdrawn from the account (e.g. for transaction fees).
     */
    "Withdrawn": Anonymize<Idusmq77988cmt>;
}>;
export type I88ff3u4dpivk = {
    "asset_id": number;
    "creator": SS58String;
    "owner": SS58String;
};
export type I33cp947glv1ks = {
    "asset_id": number;
    "owner": SS58String;
    "amount": bigint;
};
export type Ic9om1gmmqu7rq = {
    "asset_id": number;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
};
export type I5hfov2b68ppb6 = {
    "asset_id": number;
    "owner": SS58String;
    "balance": bigint;
};
export type Ibthhb2m9vneds = {
    "asset_id": number;
    "issuer": SS58String;
    "admin": SS58String;
    "freezer": SS58String;
};
export type Iaitn5bqfacj7k = {
    "asset_id": number;
    "owner": SS58String;
};
export type If4ebvclj2ugvi = {
    "asset_id": number;
    "who": SS58String;
};
export type Ia5le7udkgbaq9 = {
    "asset_id": number;
};
export type Ieduc1e6frq8rb = {
    "asset_id": number;
    "accounts_destroyed": number;
    "accounts_remaining": number;
};
export type I9h6gbtabovtm4 = {
    "asset_id": number;
    "approvals_destroyed": number;
    "approvals_remaining": number;
};
export type Ifnsa0dkkpf465 = {
    "asset_id": number;
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
    "is_frozen": boolean;
};
export type I65dtqr2egjbc3 = {
    "asset_id": number;
    "source": SS58String;
    "delegate": SS58String;
    "amount": bigint;
};
export type Ibqj3vg5s5lk0c = {
    "asset_id": number;
    "owner": SS58String;
    "delegate": SS58String;
};
export type I6l73u513p8rna = {
    "asset_id": number;
    "owner": SS58String;
    "delegate": SS58String;
    "destination": SS58String;
    "amount": bigint;
};
export type Iefqmt2htu1dlu = {
    "asset_id": number;
    "new_min_balance": bigint;
};
export type If8bgtgqrchjtu = {
    "asset_id": number;
    "who": SS58String;
    "depositor": SS58String;
};
export type Idusmq77988cmt = {
    "asset_id": number;
    "who": SS58String;
    "amount": bigint;
};
export type Ia0j71vjrjqu9p = AnonymousEnum<{
    /**
     *A `collection` was created.
     */
    "Created": Anonymize<I9gqanbbbe917p>;
    /**
     *A `collection` was force-created.
     */
    "ForceCreated": Anonymize<Id1m1230297f7a>;
    /**
     *A `collection` was destroyed.
     */
    "Destroyed": Anonymize<I6cu7obfo0rr0o>;
    /**
     *An `item` was issued.
     */
    "Issued": Anonymize<Ifvb1p5munhhv4>;
    /**
     *An `item` was transferred.
     */
    "Transferred": Anonymize<I46h83ilqeed3g>;
    /**
     *An `item` was destroyed.
     */
    "Burned": Anonymize<Ifvb1p5munhhv4>;
    /**
     *Some `item` was frozen.
     */
    "Frozen": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Some `item` was thawed.
     */
    "Thawed": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Some `collection` was frozen.
     */
    "CollectionFrozen": Anonymize<I6cu7obfo0rr0o>;
    /**
     *Some `collection` was thawed.
     */
    "CollectionThawed": Anonymize<I6cu7obfo0rr0o>;
    /**
     *The owner changed.
     */
    "OwnerChanged": Anonymize<Icahse3uoi76n7>;
    /**
     *The management team changed.
     */
    "TeamChanged": Anonymize<I75sj3uv7gnemk>;
    /**
     *An `item` of a `collection` has been approved by the `owner` for transfer by
     *a `delegate`.
     */
    "ApprovedTransfer": Anonymize<I5fjkvcb5vr6nb>;
    /**
     *An approval for a `delegate` account to transfer the `item` of an item
     *`collection` was cancelled by its `owner`.
     */
    "ApprovalCancelled": Anonymize<I5fjkvcb5vr6nb>;
    /**
     *A `collection` has had its attributes changed by the `Force` origin.
     */
    "ItemStatusChanged": Anonymize<I6cu7obfo0rr0o>;
    /**
     *New metadata has been set for a `collection`.
     */
    "CollectionMetadataSet": Anonymize<I9viqhmdtuof5e>;
    /**
     *Metadata has been cleared for a `collection`.
     */
    "CollectionMetadataCleared": Anonymize<I6cu7obfo0rr0o>;
    /**
     *New metadata has been set for an item.
     */
    "MetadataSet": Anonymize<Iceq9fmmp9aeqv>;
    /**
     *Metadata has been cleared for an item.
     */
    "MetadataCleared": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Metadata has been cleared for an item.
     */
    "Redeposited": Anonymize<I2gr1toekv86b9>;
    /**
     *New attribute metadata has been set for a `collection` or `item`.
     */
    "AttributeSet": Anonymize<I5tvvgui05tn6e>;
    /**
     *Attribute metadata has been cleared for a `collection` or `item`.
     */
    "AttributeCleared": Anonymize<Ibal0joadvdc2h>;
    /**
     *Ownership acceptance has changed for an account.
     */
    "OwnershipAcceptanceChanged": Anonymize<I2v2ikqt2trp52>;
    /**
     *Max supply has been set for a collection.
     */
    "CollectionMaxSupplySet": Anonymize<I6h88h8vba22v8>;
    /**
     *The price was set for the instance.
     */
    "ItemPriceSet": Anonymize<If3057hi1g5qlo>;
    /**
     *The price for the instance was removed.
     */
    "ItemPriceRemoved": Anonymize<Iafkqus0ohh6l6>;
    /**
     *An item was bought.
     */
    "ItemBought": Anonymize<Iaii5qf41d5n3d>;
}>;
export type I9gqanbbbe917p = {
    "collection": number;
    "creator": SS58String;
    "owner": SS58String;
};
export type Id1m1230297f7a = {
    "collection": number;
    "owner": SS58String;
};
export type I6cu7obfo0rr0o = {
    "collection": number;
};
export type Ifvb1p5munhhv4 = {
    "collection": number;
    "item": number;
    "owner": SS58String;
};
export type I46h83ilqeed3g = {
    "collection": number;
    "item": number;
    "from": SS58String;
    "to": SS58String;
};
export type Iafkqus0ohh6l6 = {
    "collection": number;
    "item": number;
};
export type Icahse3uoi76n7 = {
    "collection": number;
    "new_owner": SS58String;
};
export type I75sj3uv7gnemk = {
    "collection": number;
    "issuer": SS58String;
    "admin": SS58String;
    "freezer": SS58String;
};
export type I5fjkvcb5vr6nb = {
    "collection": number;
    "item": number;
    "owner": SS58String;
    "delegate": SS58String;
};
export type I9viqhmdtuof5e = {
    "collection": number;
    "data": Binary;
    "is_frozen": boolean;
};
export type Iceq9fmmp9aeqv = {
    "collection": number;
    "item": number;
    "data": Binary;
    "is_frozen": boolean;
};
export type I2gr1toekv86b9 = {
    "collection": number;
    "successful_items": Anonymize<Icgljjb6j82uhn>;
};
export type I5tvvgui05tn6e = {
    "collection": number;
    "maybe_item"?: Anonymize<I4arjljr6dpflb>;
    "key": Binary;
    "value": Binary;
};
export type Ibal0joadvdc2h = {
    "collection": number;
    "maybe_item"?: Anonymize<I4arjljr6dpflb>;
    "key": Binary;
};
export type I2v2ikqt2trp52 = {
    "who": SS58String;
    "maybe_collection"?: Anonymize<I4arjljr6dpflb>;
};
export type I6h88h8vba22v8 = {
    "collection": number;
    "max_supply": number;
};
export type If3057hi1g5qlo = {
    "collection": number;
    "item": number;
    "price": bigint;
    "whitelisted_buyer"?: Anonymize<Ihfphjolmsqq1>;
};
export type Iaii5qf41d5n3d = {
    "collection": number;
    "item": number;
    "price": bigint;
    "seller": SS58String;
    "buyer": SS58String;
};
export type I6qicn8jn4fftj = AnonymousEnum<{
    /**
     *A `collection` was created.
     */
    "Created": Anonymize<I9gqanbbbe917p>;
    /**
     *A `collection` was force-created.
     */
    "ForceCreated": Anonymize<Id1m1230297f7a>;
    /**
     *A `collection` was destroyed.
     */
    "Destroyed": Anonymize<I6cu7obfo0rr0o>;
    /**
     *An `item` was issued.
     */
    "Issued": Anonymize<Ifvb1p5munhhv4>;
    /**
     *An `item` was transferred.
     */
    "Transferred": Anonymize<I46h83ilqeed3g>;
    /**
     *An `item` was destroyed.
     */
    "Burned": Anonymize<Ifvb1p5munhhv4>;
    /**
     *An `item` became non-transferable.
     */
    "ItemTransferLocked": Anonymize<Iafkqus0ohh6l6>;
    /**
     *An `item` became transferable.
     */
    "ItemTransferUnlocked": Anonymize<Iafkqus0ohh6l6>;
    /**
     *`item` metadata or attributes were locked.
     */
    "ItemPropertiesLocked": Anonymize<I1jj31tn29ie3c>;
    /**
     *Some `collection` was locked.
     */
    "CollectionLocked": Anonymize<I6cu7obfo0rr0o>;
    /**
     *The owner changed.
     */
    "OwnerChanged": Anonymize<Icahse3uoi76n7>;
    /**
     *The management team changed.
     */
    "TeamChanged": Anonymize<Ico8bnjc6taa27>;
    /**
     *An `item` of a `collection` has been approved by the `owner` for transfer by
     *a `delegate`.
     */
    "TransferApproved": Anonymize<I78i1bvlonei69>;
    /**
     *An approval for a `delegate` account to transfer the `item` of an item
     *`collection` was cancelled by its `owner`.
     */
    "ApprovalCancelled": Anonymize<I5fjkvcb5vr6nb>;
    /**
     *All approvals of an item got cancelled.
     */
    "AllApprovalsCancelled": Anonymize<Ifvb1p5munhhv4>;
    /**
     *A `collection` has had its config changed by the `Force` origin.
     */
    "CollectionConfigChanged": Anonymize<I6cu7obfo0rr0o>;
    /**
     *New metadata has been set for a `collection`.
     */
    "CollectionMetadataSet": Anonymize<I78u60nqh0etah>;
    /**
     *Metadata has been cleared for a `collection`.
     */
    "CollectionMetadataCleared": Anonymize<I6cu7obfo0rr0o>;
    /**
     *New metadata has been set for an item.
     */
    "ItemMetadataSet": Anonymize<Icrkms46uh8tpb>;
    /**
     *Metadata has been cleared for an item.
     */
    "ItemMetadataCleared": Anonymize<Iafkqus0ohh6l6>;
    /**
     *The deposit for a set of `item`s within a `collection` has been updated.
     */
    "Redeposited": Anonymize<I2gr1toekv86b9>;
    /**
     *New attribute metadata has been set for a `collection` or `item`.
     */
    "AttributeSet": Anonymize<I5llu6o6a0go5i>;
    /**
     *Attribute metadata has been cleared for a `collection` or `item`.
     */
    "AttributeCleared": Anonymize<I93r2effh7od84>;
    /**
     *A new approval to modify item attributes was added.
     */
    "ItemAttributesApprovalAdded": Anonymize<I9i1f9mrso1hmf>;
    /**
     *A new approval to modify item attributes was removed.
     */
    "ItemAttributesApprovalRemoved": Anonymize<I9i1f9mrso1hmf>;
    /**
     *Ownership acceptance has changed for an account.
     */
    "OwnershipAcceptanceChanged": Anonymize<I2v2ikqt2trp52>;
    /**
     *Max supply has been set for a collection.
     */
    "CollectionMaxSupplySet": Anonymize<I6h88h8vba22v8>;
    /**
     *Mint settings for a collection had changed.
     */
    "CollectionMintSettingsUpdated": Anonymize<I6cu7obfo0rr0o>;
    /**
     *Event gets emitted when the `NextCollectionId` gets incremented.
     */
    "NextCollectionIdIncremented": Anonymize<I9ksla2si91s56>;
    /**
     *The price was set for the item.
     */
    "ItemPriceSet": Anonymize<If3057hi1g5qlo>;
    /**
     *The price for the item was removed.
     */
    "ItemPriceRemoved": Anonymize<Iafkqus0ohh6l6>;
    /**
     *An item was bought.
     */
    "ItemBought": Anonymize<Iaii5qf41d5n3d>;
    /**
     *A tip was sent.
     */
    "TipSent": Anonymize<Id9j7b85otvjru>;
    /**
     *An `item` swap intent was created.
     */
    "SwapCreated": Anonymize<Iaihk9pek2ajl9>;
    /**
     *The swap was cancelled.
     */
    "SwapCancelled": Anonymize<Iaihk9pek2ajl9>;
    /**
     *The swap has been claimed.
     */
    "SwapClaimed": Anonymize<Id9av23h47ufb2>;
    /**
     *New attributes have been set for an `item` of the `collection`.
     */
    "PreSignedAttributesSet": Anonymize<Ib4kpnijas4jqp>;
    /**
     *A new attribute in the `Pallet` namespace was set for the `collection` or an `item`
     *within that `collection`.
     */
    "PalletAttributeSet": Anonymize<I2vnu5k0u1i65h>;
}>;
export type I1jj31tn29ie3c = {
    "collection": number;
    "item": number;
    "lock_metadata": boolean;
    "lock_attributes": boolean;
};
export type Ico8bnjc6taa27 = {
    "collection": number;
    "issuer"?: Anonymize<Ihfphjolmsqq1>;
    "admin"?: Anonymize<Ihfphjolmsqq1>;
    "freezer"?: Anonymize<Ihfphjolmsqq1>;
};
export type I78i1bvlonei69 = {
    "collection": number;
    "item": number;
    "owner": SS58String;
    "delegate": SS58String;
    "deadline"?: Anonymize<I4arjljr6dpflb>;
};
export type I78u60nqh0etah = {
    "collection": number;
    "data": Binary;
};
export type Icrkms46uh8tpb = {
    "collection": number;
    "item": number;
    "data": Binary;
};
export type I5llu6o6a0go5i = {
    "collection": number;
    "maybe_item"?: Anonymize<I4arjljr6dpflb>;
    "key": Binary;
    "value": Binary;
    "namespace": Anonymize<If3jjadhmug6qc>;
};
export type If3jjadhmug6qc = AnonymousEnum<{
    "Pallet": undefined;
    "CollectionOwner": undefined;
    "ItemOwner": undefined;
    "Account": SS58String;
}>;
export type I93r2effh7od84 = {
    "collection": number;
    "maybe_item"?: Anonymize<I4arjljr6dpflb>;
    "key": Binary;
    "namespace": Anonymize<If3jjadhmug6qc>;
};
export type I9i1f9mrso1hmf = {
    "collection": number;
    "item": number;
    "delegate": SS58String;
};
export type I9ksla2si91s56 = {
    "next_id"?: Anonymize<I4arjljr6dpflb>;
};
export type Id9j7b85otvjru = {
    "collection": number;
    "item": number;
    "sender": SS58String;
    "receiver": SS58String;
    "amount": bigint;
};
export type Iaihk9pek2ajl9 = {
    "offered_collection": number;
    "offered_item": number;
    "desired_collection": number;
    "desired_item"?: Anonymize<I4arjljr6dpflb>;
    "price"?: Anonymize<I6oogc1jbmmi81>;
    "deadline": number;
};
export type I6oogc1jbmmi81 = (Anonymize<I9b1jgmi22enn5>) | undefined;
export type I9b1jgmi22enn5 = {
    "amount": bigint;
    "direction": Anonymize<I1p7rj0j3gmh73>;
};
export type I1p7rj0j3gmh73 = AnonymousEnum<{
    "Send": undefined;
    "Receive": undefined;
}>;
export type Id9av23h47ufb2 = {
    "sent_collection": number;
    "sent_item": number;
    "sent_item_owner": SS58String;
    "received_collection": number;
    "received_item": number;
    "received_item_owner": SS58String;
    "price"?: Anonymize<I6oogc1jbmmi81>;
    "deadline": number;
};
export type Ib4kpnijas4jqp = {
    "collection": number;
    "item": number;
    "namespace": Anonymize<If3jjadhmug6qc>;
};
export type I2vnu5k0u1i65h = {
    "collection": number;
    "item"?: Anonymize<I4arjljr6dpflb>;
    "attribute": Anonymize<I75km45qj0eg5n>;
    "value": Binary;
};
export type I75km45qj0eg5n = AnonymousEnum<{
    "UsedToClaim": number;
    "TransferDisabled": undefined;
}>;
export type I81i2fkdo6nple = AnonymousEnum<{
    /**
     *Some asset class was created.
     */
    "Created": Anonymize<I36h211fbvstks>;
    /**
     *Some assets were issued.
     */
    "Issued": Anonymize<I2k9iu40qhp841>;
    /**
     *Some assets were transferred.
     */
    "Transferred": Anonymize<I3dufa2gr145hf>;
    /**
     *Some assets were destroyed.
     */
    "Burned": Anonymize<Ie66s9cr50m7sr>;
    /**
     *The management team changed.
     */
    "TeamChanged": Anonymize<I3msvtljqnu799>;
    /**
     *The owner changed.
     */
    "OwnerChanged": Anonymize<I467a79vcdbrec>;
    /**
     *Some account `who` was frozen.
     */
    "Frozen": Anonymize<Ia8imt144v3n25>;
    /**
     *Some account `who` was thawed.
     */
    "Thawed": Anonymize<Ia8imt144v3n25>;
    /**
     *Some asset `asset_id` was frozen.
     */
    "AssetFrozen": Anonymize<I35uvf5ij009e8>;
    /**
     *Some asset `asset_id` was thawed.
     */
    "AssetThawed": Anonymize<I35uvf5ij009e8>;
    /**
     *Accounts were destroyed for given asset.
     */
    "AccountsDestroyed": Anonymize<I1mmtcsmkng8nj>;
    /**
     *Approvals were destroyed for given asset.
     */
    "ApprovalsDestroyed": Anonymize<I30qmuqbs4i8i4>;
    /**
     *An asset class is in the process of being destroyed.
     */
    "DestructionStarted": Anonymize<I35uvf5ij009e8>;
    /**
     *An asset class was destroyed.
     */
    "Destroyed": Anonymize<I35uvf5ij009e8>;
    /**
     *Some asset class was force-created.
     */
    "ForceCreated": Anonymize<I467a79vcdbrec>;
    /**
     *New metadata has been set for an asset.
     */
    "MetadataSet": Anonymize<Iarmm62t3lm37e>;
    /**
     *Metadata has been cleared for an asset.
     */
    "MetadataCleared": Anonymize<I35uvf5ij009e8>;
    /**
     *(Additional) funds have been approved for transfer to a destination account.
     */
    "ApprovedTransfer": Anonymize<I9nm7qticlhmgl>;
    /**
     *An approval for account `delegate` was cancelled by `owner`.
     */
    "ApprovalCancelled": Anonymize<Iev4iv86ng02ck>;
    /**
     *An `amount` was transferred in its entirety from `owner` to `destination` by
     *the approved `delegate`.
     */
    "TransferredApproved": Anonymize<I5s8p7gejoudvh>;
    /**
     *An asset has had its attributes changed by the `Force` origin.
     */
    "AssetStatusChanged": Anonymize<I35uvf5ij009e8>;
    /**
     *The min_balance of an asset has been updated by the asset owner.
     */
    "AssetMinBalanceChanged": Anonymize<If4jtj68r1gabq>;
    /**
     *Some account `who` was created with a deposit from `depositor`.
     */
    "Touched": Anonymize<I8s66oebjsgqga>;
    /**
     *Some account `who` was blocked.
     */
    "Blocked": Anonymize<Ia8imt144v3n25>;
    /**
     *Some assets were deposited (e.g. for transaction fees).
     */
    "Deposited": Anonymize<I42gee3b9iotl3>;
    /**
     *Some assets were withdrawn from the account (e.g. for transaction fees).
     */
    "Withdrawn": Anonymize<I42gee3b9iotl3>;
}>;
export type I36h211fbvstks = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "creator": SS58String;
    "owner": SS58String;
};
export type I2k9iu40qhp841 = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "owner": SS58String;
    "amount": bigint;
};
export type I3dufa2gr145hf = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
};
export type Ie66s9cr50m7sr = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "owner": SS58String;
    "balance": bigint;
};
export type I3msvtljqnu799 = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "issuer": SS58String;
    "admin": SS58String;
    "freezer": SS58String;
};
export type I467a79vcdbrec = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "owner": SS58String;
};
export type Ia8imt144v3n25 = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "who": SS58String;
};
export type I35uvf5ij009e8 = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
};
export type I1mmtcsmkng8nj = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "accounts_destroyed": number;
    "accounts_remaining": number;
};
export type I30qmuqbs4i8i4 = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "approvals_destroyed": number;
    "approvals_remaining": number;
};
export type Iarmm62t3lm37e = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
    "is_frozen": boolean;
};
export type I9nm7qticlhmgl = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "source": SS58String;
    "delegate": SS58String;
    "amount": bigint;
};
export type Iev4iv86ng02ck = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "owner": SS58String;
    "delegate": SS58String;
};
export type I5s8p7gejoudvh = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "owner": SS58String;
    "delegate": SS58String;
    "destination": SS58String;
    "amount": bigint;
};
export type If4jtj68r1gabq = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "new_min_balance": bigint;
};
export type I8s66oebjsgqga = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "who": SS58String;
    "depositor": SS58String;
};
export type I42gee3b9iotl3 = {
    "asset_id": Anonymize<I4c0s5cioidn76>;
    "who": SS58String;
    "amount": bigint;
};
export type I41s7j0hsp2u0b = AnonymousEnum<{
    /**
     *An NFT was successfully fractionalized.
     */
    "NftFractionalized": Anonymize<Ib67harsthtcvr>;
    /**
     *An NFT was successfully returned back.
     */
    "NftUnified": Anonymize<Ic7ok3lq0728f7>;
}>;
export type Ib67harsthtcvr = {
    "nft_collection": number;
    "nft": number;
    "fractions": bigint;
    "asset": number;
    "beneficiary": SS58String;
};
export type Ic7ok3lq0728f7 = {
    "nft_collection": number;
    "nft": number;
    "asset": number;
    "beneficiary": SS58String;
};
export type I31lqq0fjfmnfv = AnonymousEnum<{
    /**
     *A successful call of the `CreatePool` extrinsic will create this event.
     */
    "PoolCreated": Anonymize<I9eo7u28un09g0>;
    /**
     *A successful call of the `AddLiquidity` extrinsic will create this event.
     */
    "LiquidityAdded": Anonymize<I99d21a0mjv4oo>;
    /**
     *A successful call of the `RemoveLiquidity` extrinsic will create this event.
     */
    "LiquidityRemoved": Anonymize<I6l4cdn6bhfq84>;
    /**
     *Assets have been converted from one to another. Both `SwapExactTokenForToken`
     *and `SwapTokenForExactToken` will generate this event.
     */
    "SwapExecuted": Anonymize<Iduk3pajm13p5c>;
    /**
     *Assets have been converted from one to another.
     */
    "SwapCreditExecuted": Anonymize<I9cgel74dg00ig>;
    /**
     *Pool has been touched in order to fulfill operational requirements.
     */
    "Touched": Anonymize<Ibkbs6pj6cn1hv>;
}>;
export type I9eo7u28un09g0 = {
    /**
     *The account that created the pool.
     */
    "creator": SS58String;
    /**
     *The pool id associated with the pool. Note that the order of the assets may not be
     *the same as the order specified in the create pool extrinsic.
     */
    "pool_id": Anonymize<Id0as9l3s817qs>;
    /**
     *The account ID of the pool.
     */
    "pool_account": SS58String;
    /**
     *The id of the liquidity tokens that will be minted when assets are added to this
     *pool.
     */
    "lp_token": number;
};
export type Id0as9l3s817qs = FixedSizeArray<2, Anonymize<I4c0s5cioidn76>>;
export type I99d21a0mjv4oo = {
    /**
     *The account that the liquidity was taken from.
     */
    "who": SS58String;
    /**
     *The account that the liquidity tokens were minted to.
     */
    "mint_to": SS58String;
    /**
     *The pool id of the pool that the liquidity was added to.
     */
    "pool_id": Anonymize<Id0as9l3s817qs>;
    /**
     *The amount of the first asset that was added to the pool.
     */
    "amount1_provided": bigint;
    /**
     *The amount of the second asset that was added to the pool.
     */
    "amount2_provided": bigint;
    /**
     *The id of the lp token that was minted.
     */
    "lp_token": number;
    /**
     *The amount of lp tokens that were minted of that id.
     */
    "lp_token_minted": bigint;
};
export type I6l4cdn6bhfq84 = {
    /**
     *The account that the liquidity tokens were burned from.
     */
    "who": SS58String;
    /**
     *The account that the assets were transferred to.
     */
    "withdraw_to": SS58String;
    /**
     *The pool id that the liquidity was removed from.
     */
    "pool_id": Anonymize<Id0as9l3s817qs>;
    /**
     *The amount of the first asset that was removed from the pool.
     */
    "amount1": bigint;
    /**
     *The amount of the second asset that was removed from the pool.
     */
    "amount2": bigint;
    /**
     *The id of the lp token that was burned.
     */
    "lp_token": number;
    /**
     *The amount of lp tokens that were burned of that id.
     */
    "lp_token_burned": bigint;
    /**
     *Liquidity withdrawal fee (%).
     */
    "withdrawal_fee": number;
};
export type Iduk3pajm13p5c = {
    /**
     *Which account was the instigator of the swap.
     */
    "who": SS58String;
    /**
     *The account that the assets were transferred to.
     */
    "send_to": SS58String;
    /**
     *The amount of the first asset that was swapped.
     */
    "amount_in": bigint;
    /**
     *The amount of the second asset that was received.
     */
    "amount_out": bigint;
    /**
     *The route of asset IDs with amounts that the swap went through.
     *E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
     */
    "path": Anonymize<Ibirh7ova056d>;
};
export type Ibirh7ova056d = Array<Anonymize<Iadrpn9mhdu2rp>>;
export type Iadrpn9mhdu2rp = [Anonymize<I4c0s5cioidn76>, bigint];
export type I9cgel74dg00ig = {
    /**
     *The amount of the first asset that was swapped.
     */
    "amount_in": bigint;
    /**
     *The amount of the second asset that was received.
     */
    "amount_out": bigint;
    /**
     *The route of asset IDs with amounts that the swap went through.
     *E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)
     */
    "path": Anonymize<Ibirh7ova056d>;
};
export type Ibkbs6pj6cn1hv = {
    /**
     *The ID of the pool.
     */
    "pool_id": Anonymize<Id0as9l3s817qs>;
    /**
     *The account initiating the touch.
     */
    "who": SS58String;
};
export type I1v7jbnil3tjns = Array<Anonymize<Ifv73m0cjq92it>>;
export type Ifv73m0cjq92it = {
    "used_bandwidth": Anonymize<Ieafp1gui1o4cl>;
    "para_head_hash"?: Anonymize<I4s6vifaf8k998>;
    "consumed_go_ahead_signal"?: Anonymize<Iav8k1edbj86k7>;
};
export type Ieafp1gui1o4cl = {
    "ump_msg_count": number;
    "ump_total_bytes": number;
    "hrmp_outgoing": Anonymize<I68brng9hc4b57>;
};
export type I68brng9hc4b57 = Array<Anonymize<I2hfpgo4vigap7>>;
export type I2hfpgo4vigap7 = [number, Anonymize<I37lfg356jmoof>];
export type I37lfg356jmoof = {
    "msg_count": number;
    "total_bytes": number;
};
export type Iav8k1edbj86k7 = (UpgradeGoAhead) | undefined;
export type I8jgj1nhcr2dg8 = {
    "used_bandwidth": Anonymize<Ieafp1gui1o4cl>;
    "hrmp_watermark"?: Anonymize<I4arjljr6dpflb>;
    "consumed_go_ahead_signal"?: Anonymize<Iav8k1edbj86k7>;
};
export type I4i91h98n3cv1b = {
    "dmq_mqc_head": FixedSizeBinary<32>;
    "relay_dispatch_queue_remaining_capacity": Anonymize<I3j1v1c2btq4bd>;
    "ingress_channels": Anonymize<I2d966pi8ko0ts>;
    "egress_channels": Anonymize<I2d966pi8ko0ts>;
};
export type I3j1v1c2btq4bd = {
    "remaining_count": number;
    "remaining_size": number;
};
export type I2d966pi8ko0ts = Array<Anonymize<Ib4li5mtsch8a1>>;
export type Ib4li5mtsch8a1 = [number, Anonymize<Ivvvdad7teq4e>];
export type Ivvvdad7teq4e = {
    "max_capacity": number;
    "max_total_size": number;
    "max_message_size": number;
    "msg_count": number;
    "total_size": number;
    "mqc_head"?: Anonymize<I4s6vifaf8k998>;
};
export type I4iumukclgj8ej = {
    "max_code_size": number;
    "max_head_data_size": number;
    "max_upward_queue_count": number;
    "max_upward_queue_size": number;
    "max_upward_message_size": number;
    "max_upward_message_num_per_candidate": number;
    "hrmp_max_message_num_per_candidate": number;
    "validation_upgrade_cooldown": number;
    "validation_upgrade_delay": number;
    "async_backing_params": Anonymize<Iavuvfkop6318c>;
};
export type I1fne82af6d4kj = Array<Anonymize<I28ehktv0m6sl8>>;
export type I28ehktv0m6sl8 = {
    "id": Anonymize<I7jce0najd0g3j>;
    "amount": bigint;
};
export type I7jce0najd0g3j = AnonymousEnum<{
    "NftFractionalization": Anonymize<I8bf8ma56td7eh>;
    "StateTrieMigration": Anonymize<I7lf1val3vmpq0>;
}>;
export type I8bf8ma56td7eh = AnonymousEnum<{
    "Fractionalized": undefined;
}>;
export type Ifi4da1gej1fri = Array<Anonymize<Iep1lmt6q3s6r3>>;
export type Iep1lmt6q3s6r3 = {
    "who": SS58String;
    "deposit": bigint;
};
export type Ifvgo9568rpmqc = Array<Anonymize<I8uo3fpd3bcc6f>>;
export type Ib77b0fp1a6mjr = Array<Anonymize<I1tbd609kokm4d>>;
export type I1tbd609kokm4d = {
    "recipient": number;
    "state": Anonymize<Ic2gg6ldfq068e>;
    "signals_exist": boolean;
    "first_index": number;
    "last_index": number;
};
export type Ic2gg6ldfq068e = AnonymousEnum<{
    "Ok": undefined;
    "Suspended": undefined;
}>;
export type Ifup3lg9ro8a0f = {
    "suspend_threshold": number;
    "drop_threshold": number;
    "resume_threshold": number;
};
export type I7f4alf2hnuu8s = {
    "delivery_fee_factor": bigint;
    "is_congested": boolean;
};
export type Idh2ug6ou4a8og = {
    "begin": number;
    "end": number;
    "count": number;
    "ready_neighbours"?: Anonymize<Ignpjhsnd42fu>;
    "message_count": bigint;
    "size": bigint;
};
export type Ignpjhsnd42fu = (Anonymize<I9d2uml1gs7v8>) | undefined;
export type I9d2uml1gs7v8 = {
    "prev": Anonymize<Iejeo53sea6n4q>;
    "next": Anonymize<Iejeo53sea6n4q>;
};
export type Ib4jhb8tt3uung = [Anonymize<Iejeo53sea6n4q>, number];
export type I32or1mos65f9o = [Anonymize<I8r6bfjpbrc70c>, bigint];
export type I8r6bfjpbrc70c = Array<Anonymize<I5temii03lnchi>>;
export type I5temii03lnchi = {
    "delegate": SS58String;
    "proxy_type": Anonymize<I5ftepkjop3g1u>;
    "delay": number;
};
export type I3qklfjubrljqh = {
    "owner": SS58String;
    "issuer": SS58String;
    "admin": SS58String;
    "freezer": SS58String;
    "supply": bigint;
    "deposit": bigint;
    "min_balance": bigint;
    "is_sufficient": boolean;
    "accounts": number;
    "sufficients": number;
    "approvals": number;
    "status": Anonymize<I3sd59779ndgs3>;
};
export type I3sd59779ndgs3 = AnonymousEnum<{
    "Live": undefined;
    "Frozen": undefined;
    "Destroying": undefined;
}>;
export type Iag3f1hum3p4c8 = {
    "balance": bigint;
    "status": Anonymize<Icvjt1ogfma62c>;
    "reason": Anonymize<Ia34prnt421tan>;
};
export type Icvjt1ogfma62c = AnonymousEnum<{
    "Liquid": undefined;
    "Frozen": undefined;
    "Blocked": undefined;
}>;
export type Ia34prnt421tan = AnonymousEnum<{
    "Consumer": undefined;
    "Sufficient": undefined;
    "DepositHeld": bigint;
    "DepositRefunded": undefined;
    "DepositFrom": Anonymize<I95l2k9b1re95f>;
}>;
export type I4s6jkha20aoh0 = {
    "amount": bigint;
    "deposit": bigint;
};
export type I2brm5b9jij1st = [number, SS58String, SS58String];
export type I78s05f59eoi8b = {
    "deposit": bigint;
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
    "is_frozen": boolean;
};
export type Ianufjuplcj6u4 = {
    "owner": SS58String;
    "issuer": SS58String;
    "admin": SS58String;
    "freezer": SS58String;
    "total_deposit": bigint;
    "free_holding": boolean;
    "items": number;
    "item_metadatas": number;
    "attributes": number;
    "is_frozen": boolean;
};
export type Id32h28hjj1tch = [SS58String, number, number];
export type I2mv9dvsaj3kcr = {
    "owner": SS58String;
    "approved"?: Anonymize<Ihfphjolmsqq1>;
    "is_frozen": boolean;
    "deposit": bigint;
};
export type I7781vnk0rm9eq = {
    "deposit": bigint;
    "data": Binary;
    "is_frozen": boolean;
};
export type Ie2iqtdb0stqo1 = [Binary, bigint];
export type I5irutptk105do = [number, Anonymize<I4arjljr6dpflb>, Binary];
export type Ic9nev69d8grv1 = [bigint, Anonymize<Ihfphjolmsqq1>];
export type I18m6a0sc4k7s9 = {
    "owner": SS58String;
    "owner_deposit": bigint;
    "items": number;
    "item_metadatas": number;
    "item_configs": number;
    "attributes": number;
};
export type Ic9iokm15iigt6 = {
    "owner": SS58String;
    "approvals": Anonymize<I4m61c4hi7qpuv>;
    "deposit": Anonymize<Ic262ibdoec56a>;
};
export type I4m61c4hi7qpuv = Array<Anonymize<I2bebbvuje4ra8>>;
export type I2bebbvuje4ra8 = [SS58String, Anonymize<I4arjljr6dpflb>];
export type I35m96p3u4vl0p = {
    "deposit": bigint;
    "data": Binary;
};
export type Iapmji0h53pmkn = {
    "deposit": Anonymize<I6e70ge7ubff75>;
    "data": Binary;
};
export type I6e70ge7ubff75 = {
    "account"?: Anonymize<Ihfphjolmsqq1>;
    "amount": bigint;
};
export type Idrr42svup341f = [Binary, Anonymize<I6e70ge7ubff75>];
export type I4ugih6gb4fmug = [number, Anonymize<I4arjljr6dpflb>, Anonymize<If3jjadhmug6qc>, Binary];
export type Idac0t49lnd4ls = {
    "desired_collection": number;
    "desired_item"?: Anonymize<I4arjljr6dpflb>;
    "price"?: Anonymize<I6oogc1jbmmi81>;
    "deadline": number;
};
export type I72ndo6phms8ik = {
    "settings": bigint;
    "max_supply"?: Anonymize<I4arjljr6dpflb>;
    "mint_settings": Anonymize<Ia3s8qquibn97v>;
};
export type Ia3s8qquibn97v = {
    "mint_type": Anonymize<I41p72ko7duf22>;
    "price"?: Anonymize<I35p85j063s0il>;
    "start_block"?: Anonymize<I4arjljr6dpflb>;
    "end_block"?: Anonymize<I4arjljr6dpflb>;
    "default_item_settings": bigint;
};
export type I41p72ko7duf22 = AnonymousEnum<{
    "Issuer": undefined;
    "Public": undefined;
    "HolderOf": number;
}>;
export type I7rv8d2nr55kkq = [Anonymize<I4c0s5cioidn76>, SS58String];
export type I6lh06el3bdfqq = [Anonymize<I4c0s5cioidn76>, SS58String, SS58String];
export type I1b2ckfeib3nig = {
    "asset": number;
    "fractions": bigint;
    "deposit": bigint;
    "asset_creator": SS58String;
};
export type I3jmip7qjlcqot = AnonymousEnum<{
    /**
     *Set the current validation data.
     *
     *This should be invoked exactly once per block. It will panic at the finalization
     *phase if the call was not invoked.
     *
     *The dispatch origin for this call must be `Inherent`
     *
     *As a side effect, this function upgrades the current validation function
     *if the appropriate time has come.
     */
    "set_validation_data": Anonymize<I60v7bikk54tpu>;
    "sudo_send_upward_message": Anonymize<Ifpj261e8s63m3>;
    /**
     *Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied
     *later.
     *
     *The `check_version` parameter sets a boolean flag for whether or not the runtime's spec
     *version and name should be verified on upgrade. Since the authorization only has a hash,
     *it cannot actually perform the verification.
     *
     *This call requires Root origin.
     */
    "authorize_upgrade": Anonymize<Ibgl04rn6nbfm6>;
    /**
     *Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.
     *
     *If the authorization required a version check, this call will ensure the spec name
     *remains unchanged and that the spec version has increased.
     *
     *Note that this function will not apply the new `code`, but only attempt to schedule the
     *upgrade with the Relay Chain.
     *
     *All origins are allowed.
     */
    "enact_authorized_upgrade": Anonymize<I6pjjpfvhvcfru>;
}>;
export type I60v7bikk54tpu = {
    "data": Anonymize<I1c673c4up9l62>;
};
export type I1c673c4up9l62 = {
    "validation_data": Anonymize<Ifn6q3equiq9qi>;
    "relay_chain_state": Anonymize<Itom7fk49o0c9>;
    "downward_messages": Anonymize<I6ljjd4b5fa4ov>;
    "horizontal_messages": Anonymize<I2pf0b05mc7sdr>;
};
export type Ifpj261e8s63m3 = {
    "message": Binary;
};
export type I9dpq5287dur8b = AnonymousEnum<{
    /**
     *Set the list of invulnerable (fixed) collators. These collators must do some
     *preparation, namely to have registered session keys.
     *
     *The call will remove any accounts that have not registered keys from the set. That is,
     *it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as
     *acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.
     *
     *This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It
     *is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A
     *`batch_all` can also be used to enforce atomicity. If any candidates are included in
     *`new`, they should be removed with `remove_invulnerable_candidate` after execution.
     *
     *Must be called by the `UpdateOrigin`.
     */
    "set_invulnerables": Anonymize<Ifccifqltb5obi>;
    /**
     *Set the ideal number of non-invulnerable collators. If lowering this number, then the
     *number of running collators could be higher than this figure. Aside from that edge case,
     *there should be no other way to have more candidates than the desired number.
     *
     *The origin for this call must be the `UpdateOrigin`.
     */
    "set_desired_candidates": Anonymize<Iadtsfv699cq8b>;
    /**
     *Set the candidacy bond amount.
     *
     *If the candidacy bond is increased by this call, all current candidates which have a
     *deposit lower than the new bond will be kicked from the list and get their deposits
     *back.
     *
     *The origin for this call must be the `UpdateOrigin`.
     */
    "set_candidacy_bond": Anonymize<Ialpmgmhr3gk5r>;
    /**
     *Register this account as a collator candidate. The account must (a) already have
     *registered session keys and (b) be able to reserve the `CandidacyBond`.
     *
     *This call is not available to `Invulnerable` collators.
     */
    "register_as_candidate": undefined;
    /**
     *Deregister `origin` as a collator candidate. Note that the collator can only leave on
     *session change. The `CandidacyBond` will be unreserved immediately.
     *
     *This call will fail if the total number of candidates would drop below
     *`MinEligibleCollators`.
     */
    "leave_intent": undefined;
    /**
     *Add a new account `who` to the list of `Invulnerables` collators. `who` must have
     *registered session keys. If `who` is a candidate, they will be removed.
     *
     *The origin for this call must be the `UpdateOrigin`.
     */
    "add_invulnerable": Anonymize<I4cbvqmqadhrea>;
    /**
     *Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must
     *be sorted.
     *
     *The origin for this call must be the `UpdateOrigin`.
     */
    "remove_invulnerable": Anonymize<I4cbvqmqadhrea>;
    /**
     *Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.
     *
     *Setting a `new_deposit` that is lower than the current deposit while `origin` is
     *occupying a top-`DesiredCandidates` slot is not allowed.
     *
     *This call will fail if `origin` is not a collator candidate, the updated bond is lower
     *than the minimum candidacy bond, and/or the amount cannot be reserved.
     */
    "update_bond": Anonymize<I3sdol54kg5jaq>;
    /**
     *The caller `origin` replaces a candidate `target` in the collator candidate list by
     *reserving `deposit`. The amount `deposit` reserved by the caller must be greater than
     *the existing bond of the target it is trying to replace.
     *
     *This call will fail if the caller is already a collator candidate or invulnerable, the
     *caller does not have registered session keys, the target is not a collator candidate,
     *and/or the `deposit` amount cannot be reserved.
     */
    "take_candidate_slot": Anonymize<I8fougodaj6di6>;
}>;
export type Ifccifqltb5obi = {
    "new": Anonymize<Ia2lhg7l2hilo3>;
};
export type Iadtsfv699cq8b = {
    "max": number;
};
export type Ialpmgmhr3gk5r = {
    "bond": bigint;
};
export type I3sdol54kg5jaq = {
    "new_deposit": bigint;
};
export type I8fougodaj6di6 = {
    "deposit": bigint;
    "target": SS58String;
};
export type I77dda7hps0u37 = AnonymousEnum<{
    /**
     *Sets the session key(s) of the function caller to `keys`.
     *Allows an account to set its session key prior to becoming a validator.
     *This doesn't take effect until the next session.
     *
     *The dispatch origin of this function must be signed.
     *
     *## Complexity
     *- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is
     *  fixed.
     */
    "set_keys": Anonymize<I81vt5eq60l4b6>;
    /**
     *Removes any session key(s) of the function caller.
     *
     *This doesn't take effect until the next session.
     *
     *The dispatch origin of this function must be Signed and the account must be either be
     *convertible to a validator ID using the chain's typical addressing system (this usually
     *means being a controller account) or directly convertible into a validator ID (which
     *usually means being a stash account).
     *
     *## Complexity
     *- `O(1)` in number of key types. Actual cost depends on the number of length of
     *  `T::Keys::key_ids()` which is fixed.
     */
    "purge_keys": undefined;
}>;
export type I81vt5eq60l4b6 = {
    "keys": FixedSizeBinary<32>;
    "proof": Binary;
};
export type Ib7tahn20bvsep = AnonymousEnum<{
    /**
     *Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.
     *
     *- `origin`: Must pass `ControllerOrigin`.
     */
    "suspend_xcm_execution": undefined;
    /**
     *Resumes all XCM executions for the XCMP queue.
     *
     *Note that this function doesn't change the status of the in/out bound channels.
     *
     *- `origin`: Must pass `ControllerOrigin`.
     */
    "resume_xcm_execution": undefined;
    /**
     *Overwrites the number of pages which must be in the queue for the other side to be
     *told to suspend their sending.
     *
     *- `origin`: Must pass `Root`.
     *- `new`: Desired value for `QueueConfigData.suspend_value`
     */
    "update_suspend_threshold": Anonymize<I3vh014cqgmrfd>;
    /**
     *Overwrites the number of pages which must be in the queue after which we drop any
     *further messages from the channel.
     *
     *- `origin`: Must pass `Root`.
     *- `new`: Desired value for `QueueConfigData.drop_threshold`
     */
    "update_drop_threshold": Anonymize<I3vh014cqgmrfd>;
    /**
     *Overwrites the number of pages which the queue must be reduced to before it signals
     *that message sending may recommence after it has been suspended.
     *
     *- `origin`: Must pass `Root`.
     *- `new`: Desired value for `QueueConfigData.resume_threshold`
     */
    "update_resume_threshold": Anonymize<I3vh014cqgmrfd>;
}>;
export type I6epb28bkd5aqn = AnonymousEnum<{
    /**
     *Notification about congested bridge queue.
     */
    "report_bridge_status": Anonymize<Idlampfle3vh6q>;
}>;
export type Idlampfle3vh6q = {
    "bridge_id": FixedSizeBinary<32>;
    "is_congested": boolean;
};
export type Ic2uoe7jdksosp = AnonymousEnum<{
    /**
     *Remove a page which has no more messages remaining to be processed or is stale.
     */
    "reap_page": Anonymize<I40pqum1mu8qg3>;
    /**
     *Execute an overweight message.
     *
     *Temporary processing errors will be propagated whereas permanent errors are treated
     *as success condition.
     *
     *- `origin`: Must be `Signed`.
     *- `message_origin`: The origin from which the message to be executed arrived.
     *- `page`: The page in the queue in which the message to be executed is sitting.
     *- `index`: The index into the queue of the message to be executed.
     *- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution
     *  of the message.
     *
     *Benchmark complexity considerations: O(index + weight_limit).
     */
    "execute_overweight": Anonymize<I1r4c2ghbtvjuc>;
}>;
export type I40pqum1mu8qg3 = {
    "message_origin": Anonymize<Iejeo53sea6n4q>;
    "page_index": number;
};
export type I1r4c2ghbtvjuc = {
    "message_origin": Anonymize<Iejeo53sea6n4q>;
    "page": number;
    "index": number;
    "weight_limit": Anonymize<I4q39t5hn830vp>;
};
export type Iaiepusmoquc50 = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<I5mod9tavlgqe8>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<I6sleg5o5amna2>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<I5mod9tavlgqe8>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<Id0n5pnq0r30r6>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<I5mod9tavlgqe8>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<I6cp97qkicedrr>;
}>;
export type I5mod9tavlgqe8 = {
    "calls": Anonymize<Ic3igrprqp80ij>;
};
export type Ic3igrprqp80ij = Array<TxCallData>;
export type I6sleg5o5amna2 = {
    "index": number;
    "call": TxCallData;
};
export type Id0n5pnq0r30r6 = {
    "as_origin": Anonymize<I48v5riethqckl>;
    "call": TxCallData;
};
export type I48v5riethqckl = AnonymousEnum<{
    "system": DispatchRawOrigin;
    "PolkadotXcm": XcmPalletOrigin;
    "CumulusXcm": Anonymize<I3in0d0lb61qi8>;
    "Void": undefined;
}>;
export type I3in0d0lb61qi8 = AnonymousEnum<{
    "Relay": undefined;
    "SiblingParachain": number;
}>;
export type I6cp97qkicedrr = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I3u9untpc138qp = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<I8482qvg0pm1q5>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<I72nhglras2gaj>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type I8482qvg0pm1q5 = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type I72nhglras2gaj = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I200lj10gn9ei0 = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<Ifp701ae7acqkk>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Iovrcu9bfelfq>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Iovrcu9bfelfq>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<Iefr8jgtgfk8um>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<I3j05hul54uj7q>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<I5s1186v7tfuqn>;
}>;
export type Ifp701ae7acqkk = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I7rk1n3vg3et43>;
    "call": TxCallData;
};
export type I7rk1n3vg3et43 = (Anonymize<I5ftepkjop3g1u>) | undefined;
export type Iovrcu9bfelfq = {
    "delegate": MultiAddress;
    "proxy_type": Anonymize<I5ftepkjop3g1u>;
    "delay": number;
};
export type Iefr8jgtgfk8um = {
    "proxy_type": Anonymize<I5ftepkjop3g1u>;
    "delay": number;
    "index": number;
};
export type I3j05hul54uj7q = {
    "spawner": MultiAddress;
    "proxy_type": Anonymize<I5ftepkjop3g1u>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type I5s1186v7tfuqn = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I7rk1n3vg3et43>;
    "call": TxCallData;
};
export type Ideusanoto4b1j = AnonymousEnum<{
    /**
     *Issue a new class of fungible assets from a public origin.
     *
     *This new asset class has no assets initially and its owner is the origin.
     *
     *The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
     *
     *Funds of sender are reserved by `AssetDeposit`.
     *
     *Parameters:
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `admin`: The admin of this class of assets. The admin is the initial address of each
     *member of the asset class's admin team.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `Created` event when successful.
     *
     *Weight: `O(1)`
     */
    "create": Anonymize<Ic357tcepuvo5c>;
    /**
     *Issue a new class of fungible assets from a privileged origin.
     *
     *This new asset class has no assets initially.
     *
     *The origin must conform to `ForceOrigin`.
     *
     *Unlike `create`, no funds are reserved.
     *
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `owner`: The owner of this class of assets. The owner has full superuser permissions
     *over this asset, but may later change and configure the permissions using
     *`transfer_ownership` and `set_team`.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `ForceCreated` event when successful.
     *
     *Weight: `O(1)`
     */
    "force_create": Anonymize<I2rnoam876ruhj>;
    /**
     *Start the process of destroying a fungible asset class.
     *
     *`start_destroy` is the first in a series of extrinsics that should be called, to allow
     *destruction of an asset class.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *The asset class must be frozen before calling `start_destroy`.
     */
    "start_destroy": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Destroy all accounts associated with a given asset.
     *
     *`destroy_accounts` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedAccounts` event.
     */
    "destroy_accounts": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
     *
     *`destroy_approvals` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedApprovals` event.
     */
    "destroy_approvals": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Complete destroying asset and unreserve currency.
     *
     *`finish_destroy` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state. All accounts or approvals should be destroyed before
     *hand.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each successful call emits the `Event::Destroyed` event.
     */
    "finish_destroy": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Mint assets of a particular class.
     *
     *The origin must be Signed and the sender must be the Issuer of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount minted.
     *- `beneficiary`: The account to be credited with the minted assets.
     *- `amount`: The amount of the asset to be minted.
     *
     *Emits `Issued` event when successful.
     *
     *Weight: `O(1)`
     *Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
     */
    "mint": Anonymize<Ib3qnc19gu633c>;
    /**
     *Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
     *
     *Origin must be Signed and the sender should be the Manager of the asset `id`.
     *
     *Bails with `NoAccount` if the `who` is already dead.
     *
     *- `id`: The identifier of the asset to have some amount burned.
     *- `who`: The account to be debited from.
     *- `amount`: The maximum amount by which `who`'s balance should be reduced.
     *
     *Emits `Burned` with the actual amount burned. If this takes the balance to below the
     *minimum for the asset, then the amount burned is increased to take it to zero.
     *
     *Weight: `O(1)`
     *Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
     */
    "burn": Anonymize<Ifira6u9hi7cu1>;
    /**
     *Move some assets from the sender account to another.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer": Anonymize<I72tqocvdoqfff>;
    /**
     *Move some assets from the sender account to another, keeping the sender account alive.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer_keep_alive": Anonymize<I72tqocvdoqfff>;
    /**
     *Move some assets from one account to another.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `source`: The account to be debited.
     *- `dest`: The account to be credited.
     *- `amount`: The amount by which the `source`'s balance of assets should be reduced and
     *`dest`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the `source` balance above zero but
     *below the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
     *`dest`.
     */
    "force_transfer": Anonymize<I2i27f3sfmvc05>;
    /**
     *Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
     *must already exist as an entry in `Account`s of the asset. If you want to freeze an
     *account that does not have an entry, use `touch_other` first.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze": Anonymize<I1nlrtd1epki2d>;
    /**
     *Allow unprivileged transfers to and from an account again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be unfrozen.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw": Anonymize<I1nlrtd1epki2d>;
    /**
     *Disallow further unprivileged transfers for the asset class.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze_asset": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Allow unprivileged transfers for the asset again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be thawed.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw_asset": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Change the Owner of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *
     *Emits `OwnerChanged`.
     *
     *Weight: `O(1)`
     */
    "transfer_ownership": Anonymize<I3abtumcmempjs>;
    /**
     *Change the Issuer, Admin and Freezer of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *
     *Emits `TeamChanged`.
     *
     *Weight: `O(1)`
     */
    "set_team": Anonymize<Id81m8flopt8ha>;
    /**
     *Set the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Funds of sender are reserved according to the formula:
     *`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
     *account any already reserved funds.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_metadata": Anonymize<I8hff7chabggkd>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Any deposit is freed for the asset owner.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_metadata": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Force the metadata for an asset to some value.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is left alone.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
     */
    "force_set_metadata": Anonymize<I49i39mtj1ivbs>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is returned.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "force_clear_metadata": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Alter the attributes of a given asset.
     *
     *Origin must be `ForceOrigin`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
     *value to account for the state bloat associated with its balance storage. If set to
     *`true`, then non-zero balances may be stored without a `consumer` reference (and thus
     *an ED in the Balances pallet or whatever else is used to control user-account state
     *growth).
     *- `is_frozen`: Whether this asset class is frozen except for permissioned/admin
     *instructions.
     *
     *Emits `AssetStatusChanged` with the identity of the asset.
     *
     *Weight: `O(1)`
     */
    "force_asset_status": Anonymize<Ifkr2kcak2vto1>;
    /**
     *Approve an amount of asset for transfer by a delegated third-party account.
     *
     *Origin must be Signed.
     *
     *Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
     *for the purpose of holding the approval. If some non-zero amount of assets is already
     *approved from signing account to `delegate`, then it is topped up or unreserved to
     *meet the right value.
     *
     *NOTE: The signing account does not need to own `amount` of assets at the point of
     *making this call.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account to delegate permission to transfer asset.
     *- `amount`: The amount of asset that may be transferred by `delegate`. If there is
     *already an approval in place, then this acts additively.
     *
     *Emits `ApprovedTransfer` on success.
     *
     *Weight: `O(1)`
     */
    "approve_transfer": Anonymize<I1ju6r8q0cs9jt>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be Signed and there must be an approval in place between signer and
     *`delegate`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "cancel_approval": Anonymize<I4kpeq6j7cd5bu>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be either ForceOrigin or Signed origin with the signer being the Admin
     *account of the asset `id`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "force_cancel_approval": Anonymize<I5na1ka76k6811>;
    /**
     *Transfer some asset balance from a previously delegated account to some third-party
     *account.
     *
     *Origin must be Signed and there must be an approval in place by the `owner` to the
     *signer.
     *
     *If the entire amount approved for transfer is transferred, then any deposit previously
     *reserved by `approve_transfer` is unreserved.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The account which previously approved for a transfer of at least `amount` and
     *from which the asset balance will be withdrawn.
     *- `destination`: The account to which the asset balance of `amount` will be transferred.
     *- `amount`: The amount of assets to transfer.
     *
     *Emits `TransferredApproved` on success.
     *
     *Weight: `O(1)`
     */
    "transfer_approved": Anonymize<I59mhdb9omdqfa>;
    /**
     *Create an asset account for non-provider assets.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
     *  to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Return the deposit (if any) of an asset account or a consumer reference (if any) of an
     *account.
     *
     *The origin must be Signed.
     *
     *- `id`: The identifier of the asset for which the caller would like the deposit
     *  refunded.
     *- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund": Anonymize<I9vl5kpk0fpakt>;
    /**
     *Sets the minimum balance of an asset.
     *
     *Only works if there aren't any accounts that are holding the asset or if
     *the new value of `min_balance` is less than the old one.
     *
     *Origin must be Signed and the sender has to be the Owner of the
     *asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `min_balance`: The new value of `min_balance`.
     *
     *Emits `AssetMinBalanceChanged` event when successful.
     */
    "set_min_balance": Anonymize<I717jt61hu19b4>;
    /**
     *Create an asset account for `who`.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
     *  must have sufficient funds for a deposit to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *- `who`: The account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch_other": Anonymize<I1nlrtd1epki2d>;
    /**
     *Return the deposit (if any) of a target asset account. Useful if you are the depositor.
     *
     *The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
     *order to burn a non-zero balance of the asset, the caller must be the account and should
     *use `refund`.
     *
     *- `id`: The identifier of the asset for the account holding a deposit.
     *- `who`: The account to refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund_other": Anonymize<I1nlrtd1epki2d>;
    /**
     *Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the account's asset.
     *- `who`: The account to be unblocked.
     *
     *Emits `Blocked`.
     *
     *Weight: `O(1)`
     */
    "block": Anonymize<I1nlrtd1epki2d>;
}>;
export type Ic357tcepuvo5c = {
    "id": number;
    "admin": MultiAddress;
    "min_balance": bigint;
};
export type I2rnoam876ruhj = {
    "id": number;
    "owner": MultiAddress;
    "is_sufficient": boolean;
    "min_balance": bigint;
};
export type Ib3qnc19gu633c = {
    "id": number;
    "beneficiary": MultiAddress;
    "amount": bigint;
};
export type Ifira6u9hi7cu1 = {
    "id": number;
    "who": MultiAddress;
    "amount": bigint;
};
export type I72tqocvdoqfff = {
    "id": number;
    "target": MultiAddress;
    "amount": bigint;
};
export type I2i27f3sfmvc05 = {
    "id": number;
    "source": MultiAddress;
    "dest": MultiAddress;
    "amount": bigint;
};
export type I1nlrtd1epki2d = {
    "id": number;
    "who": MultiAddress;
};
export type I3abtumcmempjs = {
    "id": number;
    "owner": MultiAddress;
};
export type Id81m8flopt8ha = {
    "id": number;
    "issuer": MultiAddress;
    "admin": MultiAddress;
    "freezer": MultiAddress;
};
export type I8hff7chabggkd = {
    "id": number;
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
};
export type I49i39mtj1ivbs = {
    "id": number;
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
    "is_frozen": boolean;
};
export type Ifkr2kcak2vto1 = {
    "id": number;
    "owner": MultiAddress;
    "issuer": MultiAddress;
    "admin": MultiAddress;
    "freezer": MultiAddress;
    "min_balance": bigint;
    "is_sufficient": boolean;
    "is_frozen": boolean;
};
export type I1ju6r8q0cs9jt = {
    "id": number;
    "delegate": MultiAddress;
    "amount": bigint;
};
export type I4kpeq6j7cd5bu = {
    "id": number;
    "delegate": MultiAddress;
};
export type I5na1ka76k6811 = {
    "id": number;
    "owner": MultiAddress;
    "delegate": MultiAddress;
};
export type I59mhdb9omdqfa = {
    "id": number;
    "owner": MultiAddress;
    "destination": MultiAddress;
    "amount": bigint;
};
export type I9vl5kpk0fpakt = {
    "id": number;
    "allow_burn": boolean;
};
export type I717jt61hu19b4 = {
    "id": number;
    "min_balance": bigint;
};
export type Icu49uv7rfej74 = AnonymousEnum<{
    /**
     *Issue a new collection of non-fungible items from a public origin.
     *
     *This new collection has no items initially and its owner is the origin.
     *
     *The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
     *
     *`ItemDeposit` funds of sender are reserved.
     *
     *Parameters:
     *- `collection`: The identifier of the new collection. This must not be currently in use.
     *- `admin`: The admin of this collection. The admin is the initial address of each
     *member of the collection's admin team.
     *
     *Emits `Created` event when successful.
     *
     *Weight: `O(1)`
     */
    "create": Anonymize<If66ivi02f7256>;
    /**
     *Issue a new collection of non-fungible items from a privileged origin.
     *
     *This new collection has no items initially.
     *
     *The origin must conform to `ForceOrigin`.
     *
     *Unlike `create`, no funds are reserved.
     *
     *- `collection`: The identifier of the new item. This must not be currently in use.
     *- `owner`: The owner of this collection of items. The owner has full superuser
     *  permissions
     *over this item, but may later change and configure the permissions using
     *`transfer_ownership` and `set_team`.
     *
     *Emits `ForceCreated` event when successful.
     *
     *Weight: `O(1)`
     */
    "force_create": Anonymize<I223jtcatlfkrc>;
    /**
     *Destroy a collection of fungible items.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
     *owner of the `collection`.
     *
     *- `collection`: The identifier of the collection to be destroyed.
     *- `witness`: Information on the items minted in the collection. This must be
     *correct.
     *
     *Emits `Destroyed` event when successful.
     *
     *Weight: `O(n + m)` where:
     *- `n = witness.items`
     *- `m = witness.item_metadatas`
     *- `a = witness.attributes`
     */
    "destroy": Anonymize<I223jg78mng8hq>;
    /**
     *Mint an item of a particular collection.
     *
     *The origin must be Signed and the sender must be the Issuer of the `collection`.
     *
     *- `collection`: The collection of the item to be minted.
     *- `item`: The item value of the item to be minted.
     *- `beneficiary`: The initial owner of the minted item.
     *
     *Emits `Issued` event when successful.
     *
     *Weight: `O(1)`
     */
    "mint": Anonymize<I4iiuiftkpq3fd>;
    /**
     *Destroy a single item.
     *
     *Origin must be Signed and the signing account must be either:
     *- the Admin of the `collection`;
     *- the Owner of the `item`;
     *
     *- `collection`: The collection of the item to be burned.
     *- `item`: The item of the item to be burned.
     *- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the
     *  item is owned by this value.
     *
     *Emits `Burned` with the actual amount burned.
     *
     *Weight: `O(1)`
     *Modes: `check_owner.is_some()`.
     */
    "burn": Anonymize<Ibra6533h92c0a>;
    /**
     *Move an item from the sender account to another.
     *
     *This resets the approved account of the item.
     *
     *Origin must be Signed and the signing account must be either:
     *- the Admin of the `collection`;
     *- the Owner of the `item`;
     *- the approved delegate for the `item` (in this case, the approval is reset).
     *
     *Arguments:
     *- `collection`: The collection of the item to be transferred.
     *- `item`: The item of the item to be transferred.
     *- `dest`: The account to receive ownership of the item.
     *
     *Emits `Transferred`.
     *
     *Weight: `O(1)`
     */
    "transfer": Anonymize<Ibgvkh96s68a66>;
    /**
     *Reevaluate the deposits on some items.
     *
     *Origin must be Signed and the sender should be the Owner of the `collection`.
     *
     *- `collection`: The collection to be frozen.
     *- `items`: The items of the collection whose deposits will be reevaluated.
     *
     *NOTE: This exists as a best-effort function. Any items which are unknown or
     *in the case that the owner account does not have reservable funds to pay for a
     *deposit increase are ignored. Generally the owner isn't going to call this on items
     *whose existing deposit is less than the refreshed deposit as it would only cost them,
     *so it's of little consequence.
     *
     *It will still return an error in the case that the collection is unknown of the signer
     *is not permitted to call it.
     *
     *Weight: `O(items.len())`
     */
    "redeposit": Anonymize<If9vko7pv0231m>;
    /**
     *Disallow further unprivileged transfer of an item.
     *
     *Origin must be Signed and the sender should be the Freezer of the `collection`.
     *
     *- `collection`: The collection of the item to be frozen.
     *- `item`: The item of the item to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Re-allow unprivileged transfer of an item.
     *
     *Origin must be Signed and the sender should be the Freezer of the `collection`.
     *
     *- `collection`: The collection of the item to be thawed.
     *- `item`: The item of the item to be thawed.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Disallow further unprivileged transfers for a whole collection.
     *
     *Origin must be Signed and the sender should be the Freezer of the `collection`.
     *
     *- `collection`: The collection to be frozen.
     *
     *Emits `CollectionFrozen`.
     *
     *Weight: `O(1)`
     */
    "freeze_collection": Anonymize<I6cu7obfo0rr0o>;
    /**
     *Re-allow unprivileged transfers for a whole collection.
     *
     *Origin must be Signed and the sender should be the Admin of the `collection`.
     *
     *- `collection`: The collection to be thawed.
     *
     *Emits `CollectionThawed`.
     *
     *Weight: `O(1)`
     */
    "thaw_collection": Anonymize<I6cu7obfo0rr0o>;
    /**
     *Change the Owner of a collection.
     *
     *Origin must be Signed and the sender should be the Owner of the `collection`.
     *
     *- `collection`: The collection whose owner should be changed.
     *- `owner`: The new Owner of this collection. They must have called
     *  `set_accept_ownership` with `collection` in order for this operation to succeed.
     *
     *Emits `OwnerChanged`.
     *
     *Weight: `O(1)`
     */
    "transfer_ownership": Anonymize<I736lv5q9m5bot>;
    /**
     *Change the Issuer, Admin and Freezer of a collection.
     *
     *Origin must be Signed and the sender should be the Owner of the `collection`.
     *
     *- `collection`: The collection whose team should be changed.
     *- `issuer`: The new Issuer of this collection.
     *- `admin`: The new Admin of this collection.
     *- `freezer`: The new Freezer of this collection.
     *
     *Emits `TeamChanged`.
     *
     *Weight: `O(1)`
     */
    "set_team": Anonymize<I1ap9tlenhr44l>;
    /**
     *Approve an item to be transferred by a delegated third-party account.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be
     *either the owner of the `item` or the admin of the collection.
     *
     *- `collection`: The collection of the item to be approved for delegated transfer.
     *- `item`: The item of the item to be approved for delegated transfer.
     *- `delegate`: The account to delegate permission to transfer the item.
     *
     *Important NOTE: The `approved` account gets reset after each transfer.
     *
     *Emits `ApprovedTransfer` on success.
     *
     *Weight: `O(1)`
     */
    "approve_transfer": Anonymize<Ib92t90p616grb>;
    /**
     *Cancel the prior approval for the transfer of an item by a delegate.
     *
     *Origin must be either:
     *- the `Force` origin;
     *- `Signed` with the signer being the Admin of the `collection`;
     *- `Signed` with the signer being the Owner of the `item`;
     *
     *Arguments:
     *- `collection`: The collection of the item of whose approval will be cancelled.
     *- `item`: The item of the item of whose approval will be cancelled.
     *- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to
     *  which permission of transfer is delegated.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "cancel_approval": Anonymize<Ieipuujd6879do>;
    /**
     *Alter the attributes of a given item.
     *
     *Origin must be `ForceOrigin`.
     *
     *- `collection`: The identifier of the item.
     *- `owner`: The new Owner of this item.
     *- `issuer`: The new Issuer of this item.
     *- `admin`: The new Admin of this item.
     *- `freezer`: The new Freezer of this item.
     *- `free_holding`: Whether a deposit is taken for holding an item of this collection.
     *- `is_frozen`: Whether this collection is frozen except for permissioned/admin
     *instructions.
     *
     *Emits `ItemStatusChanged` with the identity of the item.
     *
     *Weight: `O(1)`
     */
    "force_item_status": Anonymize<Ie56eq9sg1rsoc>;
    /**
     *Set an attribute for a collection or item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
     *`collection`.
     *
     *If the origin is Signed, then funds of signer are reserved according to the formula:
     *`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into
     *account any already reserved funds.
     *
     *- `collection`: The identifier of the collection whose item's metadata to set.
     *- `maybe_item`: The identifier of the item whose metadata to set.
     *- `key`: The key of the attribute.
     *- `value`: The value to which to set the attribute.
     *
     *Emits `AttributeSet`.
     *
     *Weight: `O(1)`
     */
    "set_attribute": Anonymize<I5tvvgui05tn6e>;
    /**
     *Clear an attribute for a collection or item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
     *`collection`.
     *
     *Any deposit is freed for the collection's owner.
     *
     *- `collection`: The identifier of the collection whose item's metadata to clear.
     *- `maybe_item`: The identifier of the item whose metadata to clear.
     *- `key`: The key of the attribute.
     *
     *Emits `AttributeCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_attribute": Anonymize<Ibal0joadvdc2h>;
    /**
     *Set the metadata for an item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
     *`collection`.
     *
     *If the origin is Signed, then funds of signer are reserved according to the formula:
     *`MetadataDepositBase + DepositPerByte * data.len` taking into
     *account any already reserved funds.
     *
     *- `collection`: The identifier of the collection whose item's metadata to set.
     *- `item`: The identifier of the item whose metadata to set.
     *- `data`: The general information of this item. Limited in length by `StringLimit`.
     *- `is_frozen`: Whether the metadata should be frozen against further changes.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_metadata": Anonymize<Iceq9fmmp9aeqv>;
    /**
     *Clear the metadata for an item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
     *`item`.
     *
     *Any deposit is freed for the collection's owner.
     *
     *- `collection`: The identifier of the collection whose item's metadata to clear.
     *- `item`: The identifier of the item whose metadata to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_metadata": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Set the metadata for a collection.
     *
     *Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
     *the `collection`.
     *
     *If the origin is `Signed`, then funds of signer are reserved according to the formula:
     *`MetadataDepositBase + DepositPerByte * data.len` taking into
     *account any already reserved funds.
     *
     *- `collection`: The identifier of the item whose metadata to update.
     *- `data`: The general information of this item. Limited in length by `StringLimit`.
     *- `is_frozen`: Whether the metadata should be frozen against further changes.
     *
     *Emits `CollectionMetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_collection_metadata": Anonymize<I9viqhmdtuof5e>;
    /**
     *Clear the metadata for a collection.
     *
     *Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
     *the `collection`.
     *
     *Any deposit is freed for the collection's owner.
     *
     *- `collection`: The identifier of the collection whose metadata to clear.
     *
     *Emits `CollectionMetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_collection_metadata": Anonymize<I6cu7obfo0rr0o>;
    /**
     *Set (or reset) the acceptance of ownership for a particular account.
     *
     *Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
     *provider reference.
     *
     *- `maybe_collection`: The identifier of the collection whose ownership the signer is
     *  willing to accept, or if `None`, an indication that the signer is willing to accept no
     *  ownership transferal.
     *
     *Emits `OwnershipAcceptanceChanged`.
     */
    "set_accept_ownership": Anonymize<Ibqooroq6rr5kr>;
    /**
     *Set the maximum amount of items a collection could have.
     *
     *Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
     *the `collection`.
     *
     *Note: This function can only succeed once per collection.
     *
     *- `collection`: The identifier of the collection to change.
     *- `max_supply`: The maximum amount of items a collection could have.
     *
     *Emits `CollectionMaxSupplySet` event when successful.
     */
    "set_collection_max_supply": Anonymize<I6h88h8vba22v8>;
    /**
     *Set (or reset) the price for an item.
     *
     *Origin must be Signed and must be the owner of the asset `item`.
     *
     *- `collection`: The collection of the item.
     *- `item`: The item to set the price for.
     *- `price`: The price for the item. Pass `None`, to reset the price.
     *- `buyer`: Restricts the buy operation to a specific account.
     *
     *Emits `ItemPriceSet` on success if the price is not `None`.
     *Emits `ItemPriceRemoved` on success if the price is `None`.
     */
    "set_price": Anonymize<Ia9cd4jqb5eecb>;
    /**
     *Allows to buy an item if it's up for sale.
     *
     *Origin must be Signed and must not be the owner of the `item`.
     *
     *- `collection`: The collection of the item.
     *- `item`: The item the sender wants to buy.
     *- `bid_price`: The price the sender is willing to pay.
     *
     *Emits `ItemBought` on success.
     */
    "buy_item": Anonymize<I19jiel1ftbcce>;
}>;
export type If66ivi02f7256 = {
    "collection": number;
    "admin": MultiAddress;
};
export type I223jtcatlfkrc = {
    "collection": number;
    "owner": MultiAddress;
    "free_holding": boolean;
};
export type I223jg78mng8hq = {
    "collection": number;
    "witness": Anonymize<I59th026dnaruk>;
};
export type I59th026dnaruk = {
    "items": number;
    "item_metadatas": number;
    "attributes": number;
};
export type I4iiuiftkpq3fd = {
    "collection": number;
    "item": number;
    "owner": MultiAddress;
};
export type Ibra6533h92c0a = {
    "collection": number;
    "item": number;
    "check_owner"?: Anonymize<Ia0jlc0rcbskuk>;
};
export type Ia0jlc0rcbskuk = (MultiAddress) | undefined;
export type Ibgvkh96s68a66 = {
    "collection": number;
    "item": number;
    "dest": MultiAddress;
};
export type If9vko7pv0231m = {
    "collection": number;
    "items": Anonymize<Icgljjb6j82uhn>;
};
export type I736lv5q9m5bot = {
    "collection": number;
    "new_owner": MultiAddress;
};
export type I1ap9tlenhr44l = {
    "collection": number;
    "issuer": MultiAddress;
    "admin": MultiAddress;
    "freezer": MultiAddress;
};
export type Ib92t90p616grb = {
    "collection": number;
    "item": number;
    "delegate": MultiAddress;
};
export type Ieipuujd6879do = {
    "collection": number;
    "item": number;
    "maybe_check_delegate"?: Anonymize<Ia0jlc0rcbskuk>;
};
export type Ie56eq9sg1rsoc = {
    "collection": number;
    "owner": MultiAddress;
    "issuer": MultiAddress;
    "admin": MultiAddress;
    "freezer": MultiAddress;
    "free_holding": boolean;
    "is_frozen": boolean;
};
export type Ibqooroq6rr5kr = {
    "maybe_collection"?: Anonymize<I4arjljr6dpflb>;
};
export type Ia9cd4jqb5eecb = {
    "collection": number;
    "item": number;
    "price"?: Anonymize<I35p85j063s0il>;
    "whitelisted_buyer"?: Anonymize<Ia0jlc0rcbskuk>;
};
export type I19jiel1ftbcce = {
    "collection": number;
    "item": number;
    "bid_price": bigint;
};
export type I1k4il7i5elhc7 = AnonymousEnum<{
    /**
     *Issue a new collection of non-fungible items from a public origin.
     *
     *This new collection has no items initially and its owner is the origin.
     *
     *The origin must be Signed and the sender must have sufficient funds free.
     *
     *`CollectionDeposit` funds of sender are reserved.
     *
     *Parameters:
     *- `admin`: The admin of this collection. The admin is the initial address of each
     *member of the collection's admin team.
     *
     *Emits `Created` event when successful.
     *
     *Weight: `O(1)`
     */
    "create": Anonymize<I43aobns89nbkh>;
    /**
     *Issue a new collection of non-fungible items from a privileged origin.
     *
     *This new collection has no items initially.
     *
     *The origin must conform to `ForceOrigin`.
     *
     *Unlike `create`, no funds are reserved.
     *
     *- `owner`: The owner of this collection of items. The owner has full superuser
     *  permissions over this item, but may later change and configure the permissions using
     *  `transfer_ownership` and `set_team`.
     *
     *Emits `ForceCreated` event when successful.
     *
     *Weight: `O(1)`
     */
    "force_create": Anonymize<Iamd7rovec1hfb>;
    /**
     *Destroy a collection of fungible items.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
     *owner of the `collection`.
     *
     *NOTE: The collection must have 0 items to be destroyed.
     *
     *- `collection`: The identifier of the collection to be destroyed.
     *- `witness`: Information on the items minted in the collection. This must be
     *correct.
     *
     *Emits `Destroyed` event when successful.
     *
     *Weight: `O(m + c + a)` where:
     *- `m = witness.item_metadatas`
     *- `c = witness.item_configs`
     *- `a = witness.attributes`
     */
    "destroy": Anonymize<I77ie723ncd4co>;
    /**
     *Mint an item of a particular collection.
     *
     *The origin must be Signed and the sender must comply with the `mint_settings` rules.
     *
     *- `collection`: The collection of the item to be minted.
     *- `item`: An identifier of the new item.
     *- `mint_to`: Account into which the item will be minted.
     *- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned
     *  item_id from that collection needs to be provided within the witness data object. If
     *  the mint price is set, then it should be additionally confirmed in the `witness_data`.
     *
     *Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.
     *
     *Emits `Issued` event when successful.
     *
     *Weight: `O(1)`
     */
    "mint": Anonymize<Ieebloeahma3ke>;
    /**
     *Mint an item of a particular collection from a privileged origin.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the
     *Issuer of the `collection`.
     *
     *- `collection`: The collection of the item to be minted.
     *- `item`: An identifier of the new item.
     *- `mint_to`: Account into which the item will be minted.
     *- `item_config`: A config of the new item.
     *
     *Emits `Issued` event when successful.
     *
     *Weight: `O(1)`
     */
    "force_mint": Anonymize<I4mbtpf4pu3rec>;
    /**
     *Destroy a single item.
     *
     *The origin must conform to `ForceOrigin` or must be Signed and the signing account must
     *be the owner of the `item`.
     *
     *- `collection`: The collection of the item to be burned.
     *- `item`: The item to be burned.
     *
     *Emits `Burned`.
     *
     *Weight: `O(1)`
     */
    "burn": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Move an item from the sender account to another.
     *
     *Origin must be Signed and the signing account must be either:
     *- the Owner of the `item`;
     *- the approved delegate for the `item` (in this case, the approval is reset).
     *
     *Arguments:
     *- `collection`: The collection of the item to be transferred.
     *- `item`: The item to be transferred.
     *- `dest`: The account to receive ownership of the item.
     *
     *Emits `Transferred`.
     *
     *Weight: `O(1)`
     */
    "transfer": Anonymize<Ibgvkh96s68a66>;
    /**
     *Re-evaluate the deposits on some items.
     *
     *Origin must be Signed and the sender should be the Owner of the `collection`.
     *
     *- `collection`: The collection of the items to be reevaluated.
     *- `items`: The items of the collection whose deposits will be reevaluated.
     *
     *NOTE: This exists as a best-effort function. Any items which are unknown or
     *in the case that the owner account does not have reservable funds to pay for a
     *deposit increase are ignored. Generally the owner isn't going to call this on items
     *whose existing deposit is less than the refreshed deposit as it would only cost them,
     *so it's of little consequence.
     *
     *It will still return an error in the case that the collection is unknown or the signer
     *is not permitted to call it.
     *
     *Weight: `O(items.len())`
     */
    "redeposit": Anonymize<If9vko7pv0231m>;
    /**
     *Disallow further unprivileged transfer of an item.
     *
     *Origin must be Signed and the sender should be the Freezer of the `collection`.
     *
     *- `collection`: The collection of the item to be changed.
     *- `item`: The item to become non-transferable.
     *
     *Emits `ItemTransferLocked`.
     *
     *Weight: `O(1)`
     */
    "lock_item_transfer": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Re-allow unprivileged transfer of an item.
     *
     *Origin must be Signed and the sender should be the Freezer of the `collection`.
     *
     *- `collection`: The collection of the item to be changed.
     *- `item`: The item to become transferable.
     *
     *Emits `ItemTransferUnlocked`.
     *
     *Weight: `O(1)`
     */
    "unlock_item_transfer": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Disallows specified settings for the whole collection.
     *
     *Origin must be Signed and the sender should be the Owner of the `collection`.
     *
     *- `collection`: The collection to be locked.
     *- `lock_settings`: The settings to be locked.
     *
     *Note: it's possible to only lock(set) the setting, but not to unset it.
     *
     *Emits `CollectionLocked`.
     *
     *Weight: `O(1)`
     */
    "lock_collection": Anonymize<I1ahf3pvgsgbu>;
    /**
     *Change the Owner of a collection.
     *
     *Origin must be Signed and the sender should be the Owner of the `collection`.
     *
     *- `collection`: The collection whose owner should be changed.
     *- `owner`: The new Owner of this collection. They must have called
     *  `set_accept_ownership` with `collection` in order for this operation to succeed.
     *
     *Emits `OwnerChanged`.
     *
     *Weight: `O(1)`
     */
    "transfer_ownership": Anonymize<I736lv5q9m5bot>;
    /**
     *Change the Issuer, Admin and Freezer of a collection.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
     *`collection`.
     *
     *Note: by setting the role to `None` only the `ForceOrigin` will be able to change it
     *after to `Some(account)`.
     *
     *- `collection`: The collection whose team should be changed.
     *- `issuer`: The new Issuer of this collection.
     *- `admin`: The new Admin of this collection.
     *- `freezer`: The new Freezer of this collection.
     *
     *Emits `TeamChanged`.
     *
     *Weight: `O(1)`
     */
    "set_team": Anonymize<I9uapdn16emsti>;
    /**
     *Change the Owner of a collection.
     *
     *Origin must be `ForceOrigin`.
     *
     *- `collection`: The identifier of the collection.
     *- `owner`: The new Owner of this collection.
     *
     *Emits `OwnerChanged`.
     *
     *Weight: `O(1)`
     */
    "force_collection_owner": Anonymize<Ie5i0q2glmr0md>;
    /**
     *Change the config of a collection.
     *
     *Origin must be `ForceOrigin`.
     *
     *- `collection`: The identifier of the collection.
     *- `config`: The new config of this collection.
     *
     *Emits `CollectionConfigChanged`.
     *
     *Weight: `O(1)`
     */
    "force_collection_config": Anonymize<I97qcg6i3l8gee>;
    /**
     *Approve an item to be transferred by a delegated third-party account.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
     *`item`.
     *
     *- `collection`: The collection of the item to be approved for delegated transfer.
     *- `item`: The item to be approved for delegated transfer.
     *- `delegate`: The account to delegate permission to transfer the item.
     *- `maybe_deadline`: Optional deadline for the approval. Specified by providing the
     *	number of blocks after which the approval will expire
     *
     *Emits `TransferApproved` on success.
     *
     *Weight: `O(1)`
     */
    "approve_transfer": Anonymize<Ib5udrahak005b>;
    /**
     *Cancel one of the transfer approvals for a specific item.
     *
     *Origin must be either:
     *- the `Force` origin;
     *- `Signed` with the signer being the Owner of the `item`;
     *
     *Arguments:
     *- `collection`: The collection of the item of whose approval will be cancelled.
     *- `item`: The item of the collection of whose approval will be cancelled.
     *- `delegate`: The account that is going to loose their approval.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "cancel_approval": Anonymize<Ib92t90p616grb>;
    /**
     *Cancel all the approvals of a specific item.
     *
     *Origin must be either:
     *- the `Force` origin;
     *- `Signed` with the signer being the Owner of the `item`;
     *
     *Arguments:
     *- `collection`: The collection of the item of whose approvals will be cleared.
     *- `item`: The item of the collection of whose approvals will be cleared.
     *
     *Emits `AllApprovalsCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "clear_all_transfer_approvals": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Disallows changing the metadata or attributes of the item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Admin
     *of the `collection`.
     *
     *- `collection`: The collection if the `item`.
     *- `item`: An item to be locked.
     *- `lock_metadata`: Specifies whether the metadata should be locked.
     *- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace
     *  should be locked.
     *
     *Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.
     *When the metadata or attributes are locked, it won't be possible the unlock them.
     *
     *Emits `ItemPropertiesLocked`.
     *
     *Weight: `O(1)`
     */
    "lock_item_properties": Anonymize<I1jj31tn29ie3c>;
    /**
     *Set an attribute for a collection or item.
     *
     *Origin must be Signed and must conform to the namespace ruleset:
     *- `CollectionOwner` namespace could be modified by the `collection` Admin only;
     *- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`
     *  should be set in that case;
     *- `Account(AccountId)` namespace could be modified only when the `origin` was given a
     *  permission to do so;
     *
     *The funds of `origin` are reserved according to the formula:
     *`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into
     *account any already reserved funds.
     *
     *- `collection`: The identifier of the collection whose item's metadata to set.
     *- `maybe_item`: The identifier of the item whose metadata to set.
     *- `namespace`: Attribute's namespace.
     *- `key`: The key of the attribute.
     *- `value`: The value to which to set the attribute.
     *
     *Emits `AttributeSet`.
     *
     *Weight: `O(1)`
     */
    "set_attribute": Anonymize<I5llu6o6a0go5i>;
    /**
     *Force-set an attribute for a collection or item.
     *
     *Origin must be `ForceOrigin`.
     *
     *If the attribute already exists and it was set by another account, the deposit
     *will be returned to the previous owner.
     *
     *- `set_as`: An optional owner of the attribute.
     *- `collection`: The identifier of the collection whose item's metadata to set.
     *- `maybe_item`: The identifier of the item whose metadata to set.
     *- `namespace`: Attribute's namespace.
     *- `key`: The key of the attribute.
     *- `value`: The value to which to set the attribute.
     *
     *Emits `AttributeSet`.
     *
     *Weight: `O(1)`
     */
    "force_set_attribute": Anonymize<Ic8b8561e6t9ie>;
    /**
     *Clear an attribute for a collection or item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the
     *attribute.
     *
     *Any deposit is freed for the collection's owner.
     *
     *- `collection`: The identifier of the collection whose item's metadata to clear.
     *- `maybe_item`: The identifier of the item whose metadata to clear.
     *- `namespace`: Attribute's namespace.
     *- `key`: The key of the attribute.
     *
     *Emits `AttributeCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_attribute": Anonymize<I93r2effh7od84>;
    /**
     *Approve item's attributes to be changed by a delegated third-party account.
     *
     *Origin must be Signed and must be an owner of the `item`.
     *
     *- `collection`: A collection of the item.
     *- `item`: The item that holds attributes.
     *- `delegate`: The account to delegate permission to change attributes of the item.
     *
     *Emits `ItemAttributesApprovalAdded` on success.
     */
    "approve_item_attributes": Anonymize<Ib92t90p616grb>;
    /**
     *Cancel the previously provided approval to change item's attributes.
     *All the previously set attributes by the `delegate` will be removed.
     *
     *Origin must be Signed and must be an owner of the `item`.
     *
     *- `collection`: Collection that the item is contained within.
     *- `item`: The item that holds attributes.
     *- `delegate`: The previously approved account to remove.
     *
     *Emits `ItemAttributesApprovalRemoved` on success.
     */
    "cancel_item_attributes_approval": Anonymize<I6afd7fllr8otc>;
    /**
     *Set the metadata for an item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
     *`collection`.
     *
     *If the origin is Signed, then funds of signer are reserved according to the formula:
     *`MetadataDepositBase + DepositPerByte * data.len` taking into
     *account any already reserved funds.
     *
     *- `collection`: The identifier of the collection whose item's metadata to set.
     *- `item`: The identifier of the item whose metadata to set.
     *- `data`: The general information of this item. Limited in length by `StringLimit`.
     *
     *Emits `ItemMetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_metadata": Anonymize<Icrkms46uh8tpb>;
    /**
     *Clear the metadata for an item.
     *
     *Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the
     *`collection`.
     *
     *Any deposit is freed for the collection's owner.
     *
     *- `collection`: The identifier of the collection whose item's metadata to clear.
     *- `item`: The identifier of the item whose metadata to clear.
     *
     *Emits `ItemMetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_metadata": Anonymize<Iafkqus0ohh6l6>;
    /**
     *Set the metadata for a collection.
     *
     *Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
     *the `collection`.
     *
     *If the origin is `Signed`, then funds of signer are reserved according to the formula:
     *`MetadataDepositBase + DepositPerByte * data.len` taking into
     *account any already reserved funds.
     *
     *- `collection`: The identifier of the item whose metadata to update.
     *- `data`: The general information of this item. Limited in length by `StringLimit`.
     *
     *Emits `CollectionMetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_collection_metadata": Anonymize<I78u60nqh0etah>;
    /**
     *Clear the metadata for a collection.
     *
     *Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of
     *the `collection`.
     *
     *Any deposit is freed for the collection's owner.
     *
     *- `collection`: The identifier of the collection whose metadata to clear.
     *
     *Emits `CollectionMetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_collection_metadata": Anonymize<I6cu7obfo0rr0o>;
    /**
     *Set (or reset) the acceptance of ownership for a particular account.
     *
     *Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a
     *provider reference.
     *
     *- `maybe_collection`: The identifier of the collection whose ownership the signer is
     *  willing to accept, or if `None`, an indication that the signer is willing to accept no
     *  ownership transferal.
     *
     *Emits `OwnershipAcceptanceChanged`.
     */
    "set_accept_ownership": Anonymize<Ibqooroq6rr5kr>;
    /**
     *Set the maximum number of items a collection could have.
     *
     *Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of
     *the `collection`.
     *
     *- `collection`: The identifier of the collection to change.
     *- `max_supply`: The maximum number of items a collection could have.
     *
     *Emits `CollectionMaxSupplySet` event when successful.
     */
    "set_collection_max_supply": Anonymize<I6h88h8vba22v8>;
    /**
     *Update mint settings.
     *
     *Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer
     *of the `collection`.
     *
     *- `collection`: The identifier of the collection to change.
     *- `mint_settings`: The new mint settings.
     *
     *Emits `CollectionMintSettingsUpdated` event when successful.
     */
    "update_mint_settings": Anonymize<I1lso3vlgherue>;
    /**
     *Set (or reset) the price for an item.
     *
     *Origin must be Signed and must be the owner of the `item`.
     *
     *- `collection`: The collection of the item.
     *- `item`: The item to set the price for.
     *- `price`: The price for the item. Pass `None`, to reset the price.
     *- `buyer`: Restricts the buy operation to a specific account.
     *
     *Emits `ItemPriceSet` on success if the price is not `None`.
     *Emits `ItemPriceRemoved` on success if the price is `None`.
     */
    "set_price": Anonymize<Ia9cd4jqb5eecb>;
    /**
     *Allows to buy an item if it's up for sale.
     *
     *Origin must be Signed and must not be the owner of the `item`.
     *
     *- `collection`: The collection of the item.
     *- `item`: The item the sender wants to buy.
     *- `bid_price`: The price the sender is willing to pay.
     *
     *Emits `ItemBought` on success.
     */
    "buy_item": Anonymize<I19jiel1ftbcce>;
    /**
     *Allows to pay the tips.
     *
     *Origin must be Signed.
     *
     *- `tips`: Tips array.
     *
     *Emits `TipSent` on every tip transfer.
     */
    "pay_tips": Anonymize<I26c8p47106toa>;
    /**
     *Register a new atomic swap, declaring an intention to send an `item` in exchange for
     *`desired_item` from origin to target on the current blockchain.
     *The target can execute the swap during the specified `duration` of blocks (if set).
     *Additionally, the price could be set for the desired `item`.
     *
     *Origin must be Signed and must be an owner of the `item`.
     *
     *- `collection`: The collection of the item.
     *- `item`: The item an owner wants to give.
     *- `desired_collection`: The collection of the desired item.
     *- `desired_item`: The desired item an owner wants to receive.
     *- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.
     *- `duration`: A deadline for the swap. Specified by providing the number of blocks
     *	after which the swap will expire.
     *
     *Emits `SwapCreated` on success.
     */
    "create_swap": Anonymize<Iq82b3qvf20ne>;
    /**
     *Cancel an atomic swap.
     *
     *Origin must be Signed.
     *Origin must be an owner of the `item` if the deadline hasn't expired.
     *
     *- `collection`: The collection of the item.
     *- `item`: The item an owner wants to give.
     *
     *Emits `SwapCancelled` on success.
     */
    "cancel_swap": Anonymize<Ic3j8ku6mbsms4>;
    /**
     *Claim an atomic swap.
     *This method executes a pending swap, that was created by a counterpart before.
     *
     *Origin must be Signed and must be an owner of the `item`.
     *
     *- `send_collection`: The collection of the item to be sent.
     *- `send_item`: The item to be sent.
     *- `receive_collection`: The collection of the item to be received.
     *- `receive_item`: The item to be received.
     *- `witness_price`: A price that was previously agreed on.
     *
     *Emits `SwapClaimed` on success.
     */
    "claim_swap": Anonymize<I3nvoqsi8f05ph>;
    /**
     *Mint an item by providing the pre-signed approval.
     *
     *Origin must be Signed.
     *
     *- `mint_data`: The pre-signed approval that consists of the information about the item,
     *  its metadata, attributes, who can mint it (`None` for anyone) and until what block
     *  number.
     *- `signature`: The signature of the `data` object.
     *- `signer`: The `data` object's signer. Should be an Issuer of the collection.
     *
     *Emits `Issued` on success.
     *Emits `AttributeSet` if the attributes were provided.
     *Emits `ItemMetadataSet` if the metadata was not empty.
     */
    "mint_pre_signed": Anonymize<I3eoft5md071do>;
    /**
     *Set attributes for an item by providing the pre-signed approval.
     *
     *Origin must be Signed and must be an owner of the `data.item`.
     *
     *- `data`: The pre-signed approval that consists of the information about the item,
     *  attributes to update and until what block number.
     *- `signature`: The signature of the `data` object.
     *- `signer`: The `data` object's signer. Should be an Admin of the collection for the
     *  `CollectionOwner` namespace.
     *
     *Emits `AttributeSet` for each provided attribute.
     *Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.
     *Emits `PreSignedAttributesSet` on success.
     */
    "set_attributes_pre_signed": Anonymize<I923eug653ra0o>;
}>;
export type I43aobns89nbkh = {
    "admin": MultiAddress;
    "config": Anonymize<I72ndo6phms8ik>;
};
export type Iamd7rovec1hfb = {
    "owner": MultiAddress;
    "config": Anonymize<I72ndo6phms8ik>;
};
export type I77ie723ncd4co = {
    "collection": number;
    "witness": Anonymize<Idqhe2sslgfeu8>;
};
export type Idqhe2sslgfeu8 = {
    "item_metadatas": number;
    "item_configs": number;
    "attributes": number;
};
export type Ieebloeahma3ke = {
    "collection": number;
    "item": number;
    "mint_to": MultiAddress;
    "witness_data"?: Anonymize<Ib0113vv89gbic>;
};
export type Ib0113vv89gbic = (Anonymize<Ia2e23n2425vqn>) | undefined;
export type Ia2e23n2425vqn = {
    "owned_item"?: Anonymize<I4arjljr6dpflb>;
    "mint_price"?: Anonymize<I35p85j063s0il>;
};
export type I4mbtpf4pu3rec = {
    "collection": number;
    "item": number;
    "mint_to": MultiAddress;
    "item_config": bigint;
};
export type I1ahf3pvgsgbu = {
    "collection": number;
    "lock_settings": bigint;
};
export type I9uapdn16emsti = {
    "collection": number;
    "issuer"?: Anonymize<Ia0jlc0rcbskuk>;
    "admin"?: Anonymize<Ia0jlc0rcbskuk>;
    "freezer"?: Anonymize<Ia0jlc0rcbskuk>;
};
export type Ie5i0q2glmr0md = {
    "collection": number;
    "owner": MultiAddress;
};
export type I97qcg6i3l8gee = {
    "collection": number;
    "config": Anonymize<I72ndo6phms8ik>;
};
export type Ib5udrahak005b = {
    "collection": number;
    "item": number;
    "delegate": MultiAddress;
    "maybe_deadline"?: Anonymize<I4arjljr6dpflb>;
};
export type Ic8b8561e6t9ie = {
    "set_as"?: Anonymize<Ihfphjolmsqq1>;
    "collection": number;
    "maybe_item"?: Anonymize<I4arjljr6dpflb>;
    "namespace": Anonymize<If3jjadhmug6qc>;
    "key": Binary;
    "value": Binary;
};
export type I6afd7fllr8otc = {
    "collection": number;
    "item": number;
    "delegate": MultiAddress;
    "witness": number;
};
export type I1lso3vlgherue = {
    "collection": number;
    "mint_settings": Anonymize<Ia3s8qquibn97v>;
};
export type I26c8p47106toa = {
    "tips": Anonymize<I73vqjhh9uvase>;
};
export type I73vqjhh9uvase = Array<Anonymize<I21hhoccptr6ko>>;
export type I21hhoccptr6ko = {
    "collection": number;
    "item": number;
    "receiver": SS58String;
    "amount": bigint;
};
export type Iq82b3qvf20ne = {
    "offered_collection": number;
    "offered_item": number;
    "desired_collection": number;
    "maybe_desired_item"?: Anonymize<I4arjljr6dpflb>;
    "maybe_price"?: Anonymize<I6oogc1jbmmi81>;
    "duration": number;
};
export type Ic3j8ku6mbsms4 = {
    "offered_collection": number;
    "offered_item": number;
};
export type I3nvoqsi8f05ph = {
    "send_collection": number;
    "send_item": number;
    "receive_collection": number;
    "receive_item": number;
    "witness_price"?: Anonymize<I6oogc1jbmmi81>;
};
export type I3eoft5md071do = {
    "mint_data": Anonymize<Icu0bim1kiuj19>;
    "signature": MultiSignature;
    "signer": SS58String;
};
export type Icu0bim1kiuj19 = {
    "collection": number;
    "item": number;
    "attributes": Anonymize<I6pi5ou8r1hblk>;
    "metadata": Binary;
    "only_account"?: Anonymize<Ihfphjolmsqq1>;
    "deadline": number;
    "mint_price"?: Anonymize<I35p85j063s0il>;
};
export type I923eug653ra0o = {
    "data": Anonymize<Id9tges27r8atl>;
    "signature": MultiSignature;
    "signer": SS58String;
};
export type Id9tges27r8atl = {
    "collection": number;
    "item": number;
    "attributes": Anonymize<I6pi5ou8r1hblk>;
    "namespace": Anonymize<If3jjadhmug6qc>;
    "deadline": number;
};
export type I2clougp67ufee = AnonymousEnum<{
    /**
     *Issue a new class of fungible assets from a public origin.
     *
     *This new asset class has no assets initially and its owner is the origin.
     *
     *The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
     *
     *Funds of sender are reserved by `AssetDeposit`.
     *
     *Parameters:
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `admin`: The admin of this class of assets. The admin is the initial address of each
     *member of the asset class's admin team.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `Created` event when successful.
     *
     *Weight: `O(1)`
     */
    "create": Anonymize<I7p44cr9g492tc>;
    /**
     *Issue a new class of fungible assets from a privileged origin.
     *
     *This new asset class has no assets initially.
     *
     *The origin must conform to `ForceOrigin`.
     *
     *Unlike `create`, no funds are reserved.
     *
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `owner`: The owner of this class of assets. The owner has full superuser permissions
     *over this asset, but may later change and configure the permissions using
     *`transfer_ownership` and `set_team`.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `ForceCreated` event when successful.
     *
     *Weight: `O(1)`
     */
    "force_create": Anonymize<Ibn8gm2jugarek>;
    /**
     *Start the process of destroying a fungible asset class.
     *
     *`start_destroy` is the first in a series of extrinsics that should be called, to allow
     *destruction of an asset class.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *The asset class must be frozen before calling `start_destroy`.
     */
    "start_destroy": Anonymize<Iekg0q69obfi0f>;
    /**
     *Destroy all accounts associated with a given asset.
     *
     *`destroy_accounts` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedAccounts` event.
     */
    "destroy_accounts": Anonymize<Iekg0q69obfi0f>;
    /**
     *Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
     *
     *`destroy_approvals` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedApprovals` event.
     */
    "destroy_approvals": Anonymize<Iekg0q69obfi0f>;
    /**
     *Complete destroying asset and unreserve currency.
     *
     *`finish_destroy` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state. All accounts or approvals should be destroyed before
     *hand.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each successful call emits the `Event::Destroyed` event.
     */
    "finish_destroy": Anonymize<Iekg0q69obfi0f>;
    /**
     *Mint assets of a particular class.
     *
     *The origin must be Signed and the sender must be the Issuer of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount minted.
     *- `beneficiary`: The account to be credited with the minted assets.
     *- `amount`: The amount of the asset to be minted.
     *
     *Emits `Issued` event when successful.
     *
     *Weight: `O(1)`
     *Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
     */
    "mint": Anonymize<I8dh2oimnihksg>;
    /**
     *Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
     *
     *Origin must be Signed and the sender should be the Manager of the asset `id`.
     *
     *Bails with `NoAccount` if the `who` is already dead.
     *
     *- `id`: The identifier of the asset to have some amount burned.
     *- `who`: The account to be debited from.
     *- `amount`: The maximum amount by which `who`'s balance should be reduced.
     *
     *Emits `Burned` with the actual amount burned. If this takes the balance to below the
     *minimum for the asset, then the amount burned is increased to take it to zero.
     *
     *Weight: `O(1)`
     *Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
     */
    "burn": Anonymize<Ib8mfkapk4u9hs>;
    /**
     *Move some assets from the sender account to another.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer": Anonymize<Ikm68gg7akl51>;
    /**
     *Move some assets from the sender account to another, keeping the sender account alive.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer_keep_alive": Anonymize<Ikm68gg7akl51>;
    /**
     *Move some assets from one account to another.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `source`: The account to be debited.
     *- `dest`: The account to be credited.
     *- `amount`: The amount by which the `source`'s balance of assets should be reduced and
     *`dest`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the `source` balance above zero but
     *below the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
     *`dest`.
     */
    "force_transfer": Anonymize<If3csb5ben9n1v>;
    /**
     *Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
     *must already exist as an entry in `Account`s of the asset. If you want to freeze an
     *account that does not have an entry, use `touch_other` first.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze": Anonymize<If90dk6l9lmtfv>;
    /**
     *Allow unprivileged transfers to and from an account again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be unfrozen.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw": Anonymize<If90dk6l9lmtfv>;
    /**
     *Disallow further unprivileged transfers for the asset class.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze_asset": Anonymize<Iekg0q69obfi0f>;
    /**
     *Allow unprivileged transfers for the asset again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be thawed.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw_asset": Anonymize<Iekg0q69obfi0f>;
    /**
     *Change the Owner of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *
     *Emits `OwnerChanged`.
     *
     *Weight: `O(1)`
     */
    "transfer_ownership": Anonymize<Ifoahm8m43v9q2>;
    /**
     *Change the Issuer, Admin and Freezer of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *
     *Emits `TeamChanged`.
     *
     *Weight: `O(1)`
     */
    "set_team": Anonymize<I1rrgcjpoiot5q>;
    /**
     *Set the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Funds of sender are reserved according to the formula:
     *`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
     *account any already reserved funds.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_metadata": Anonymize<I2hc61n7o8dso4>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Any deposit is freed for the asset owner.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_metadata": Anonymize<Iekg0q69obfi0f>;
    /**
     *Force the metadata for an asset to some value.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is left alone.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
     */
    "force_set_metadata": Anonymize<I5787kv2d05f94>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is returned.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "force_clear_metadata": Anonymize<Iekg0q69obfi0f>;
    /**
     *Alter the attributes of a given asset.
     *
     *Origin must be `ForceOrigin`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
     *value to account for the state bloat associated with its balance storage. If set to
     *`true`, then non-zero balances may be stored without a `consumer` reference (and thus
     *an ED in the Balances pallet or whatever else is used to control user-account state
     *growth).
     *- `is_frozen`: Whether this asset class is frozen except for permissioned/admin
     *instructions.
     *
     *Emits `AssetStatusChanged` with the identity of the asset.
     *
     *Weight: `O(1)`
     */
    "force_asset_status": Anonymize<Ia8g1imc1kclf4>;
    /**
     *Approve an amount of asset for transfer by a delegated third-party account.
     *
     *Origin must be Signed.
     *
     *Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
     *for the purpose of holding the approval. If some non-zero amount of assets is already
     *approved from signing account to `delegate`, then it is topped up or unreserved to
     *meet the right value.
     *
     *NOTE: The signing account does not need to own `amount` of assets at the point of
     *making this call.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account to delegate permission to transfer asset.
     *- `amount`: The amount of asset that may be transferred by `delegate`. If there is
     *already an approval in place, then this acts additively.
     *
     *Emits `ApprovedTransfer` on success.
     *
     *Weight: `O(1)`
     */
    "approve_transfer": Anonymize<Id26ouo5lt2551>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be Signed and there must be an approval in place between signer and
     *`delegate`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "cancel_approval": Anonymize<Iap1up3prsbtvg>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be either ForceOrigin or Signed origin with the signer being the Admin
     *account of the asset `id`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "force_cancel_approval": Anonymize<I8m5mvhifj6pm>;
    /**
     *Transfer some asset balance from a previously delegated account to some third-party
     *account.
     *
     *Origin must be Signed and there must be an approval in place by the `owner` to the
     *signer.
     *
     *If the entire amount approved for transfer is transferred, then any deposit previously
     *reserved by `approve_transfer` is unreserved.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The account which previously approved for a transfer of at least `amount` and
     *from which the asset balance will be withdrawn.
     *- `destination`: The account to which the asset balance of `amount` will be transferred.
     *- `amount`: The amount of assets to transfer.
     *
     *Emits `TransferredApproved` on success.
     *
     *Weight: `O(1)`
     */
    "transfer_approved": Anonymize<I8ucc4915s9qvj>;
    /**
     *Create an asset account for non-provider assets.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
     *  to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch": Anonymize<Iekg0q69obfi0f>;
    /**
     *Return the deposit (if any) of an asset account or a consumer reference (if any) of an
     *account.
     *
     *The origin must be Signed.
     *
     *- `id`: The identifier of the asset for which the caller would like the deposit
     *  refunded.
     *- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund": Anonymize<I1pjcv2ha0997v>;
    /**
     *Sets the minimum balance of an asset.
     *
     *Only works if there aren't any accounts that are holding the asset or if
     *the new value of `min_balance` is less than the old one.
     *
     *Origin must be Signed and the sender has to be the Owner of the
     *asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `min_balance`: The new value of `min_balance`.
     *
     *Emits `AssetMinBalanceChanged` event when successful.
     */
    "set_min_balance": Anonymize<Ifnm6nai2i47ar>;
    /**
     *Create an asset account for `who`.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
     *  must have sufficient funds for a deposit to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *- `who`: The account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch_other": Anonymize<If90dk6l9lmtfv>;
    /**
     *Return the deposit (if any) of a target asset account. Useful if you are the depositor.
     *
     *The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
     *order to burn a non-zero balance of the asset, the caller must be the account and should
     *use `refund`.
     *
     *- `id`: The identifier of the asset for the account holding a deposit.
     *- `who`: The account to refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund_other": Anonymize<If90dk6l9lmtfv>;
    /**
     *Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the account's asset.
     *- `who`: The account to be unblocked.
     *
     *Emits `Blocked`.
     *
     *Weight: `O(1)`
     */
    "block": Anonymize<If90dk6l9lmtfv>;
}>;
export type I7p44cr9g492tc = {
    "id": Anonymize<I4c0s5cioidn76>;
    "admin": MultiAddress;
    "min_balance": bigint;
};
export type Ibn8gm2jugarek = {
    "id": Anonymize<I4c0s5cioidn76>;
    "owner": MultiAddress;
    "is_sufficient": boolean;
    "min_balance": bigint;
};
export type Iekg0q69obfi0f = {
    "id": Anonymize<I4c0s5cioidn76>;
};
export type I8dh2oimnihksg = {
    "id": Anonymize<I4c0s5cioidn76>;
    "beneficiary": MultiAddress;
    "amount": bigint;
};
export type Ib8mfkapk4u9hs = {
    "id": Anonymize<I4c0s5cioidn76>;
    "who": MultiAddress;
    "amount": bigint;
};
export type Ikm68gg7akl51 = {
    "id": Anonymize<I4c0s5cioidn76>;
    "target": MultiAddress;
    "amount": bigint;
};
export type If3csb5ben9n1v = {
    "id": Anonymize<I4c0s5cioidn76>;
    "source": MultiAddress;
    "dest": MultiAddress;
    "amount": bigint;
};
export type If90dk6l9lmtfv = {
    "id": Anonymize<I4c0s5cioidn76>;
    "who": MultiAddress;
};
export type Ifoahm8m43v9q2 = {
    "id": Anonymize<I4c0s5cioidn76>;
    "owner": MultiAddress;
};
export type I1rrgcjpoiot5q = {
    "id": Anonymize<I4c0s5cioidn76>;
    "issuer": MultiAddress;
    "admin": MultiAddress;
    "freezer": MultiAddress;
};
export type I2hc61n7o8dso4 = {
    "id": Anonymize<I4c0s5cioidn76>;
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
};
export type I5787kv2d05f94 = {
    "id": Anonymize<I4c0s5cioidn76>;
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
    "is_frozen": boolean;
};
export type Ia8g1imc1kclf4 = {
    "id": Anonymize<I4c0s5cioidn76>;
    "owner": MultiAddress;
    "issuer": MultiAddress;
    "admin": MultiAddress;
    "freezer": MultiAddress;
    "min_balance": bigint;
    "is_sufficient": boolean;
    "is_frozen": boolean;
};
export type Id26ouo5lt2551 = {
    "id": Anonymize<I4c0s5cioidn76>;
    "delegate": MultiAddress;
    "amount": bigint;
};
export type Iap1up3prsbtvg = {
    "id": Anonymize<I4c0s5cioidn76>;
    "delegate": MultiAddress;
};
export type I8m5mvhifj6pm = {
    "id": Anonymize<I4c0s5cioidn76>;
    "owner": MultiAddress;
    "delegate": MultiAddress;
};
export type I8ucc4915s9qvj = {
    "id": Anonymize<I4c0s5cioidn76>;
    "owner": MultiAddress;
    "destination": MultiAddress;
    "amount": bigint;
};
export type I1pjcv2ha0997v = {
    "id": Anonymize<I4c0s5cioidn76>;
    "allow_burn": boolean;
};
export type Ifnm6nai2i47ar = {
    "id": Anonymize<I4c0s5cioidn76>;
    "min_balance": bigint;
};
export type Ifrervtb291iin = AnonymousEnum<{
    /**
     *Lock the NFT and mint a new fungible asset.
     *
     *The dispatch origin for this call must be Signed.
     *The origin must be the owner of the NFT they are trying to lock.
     *
     *`Deposit` funds of sender are reserved.
     *
     *- `nft_collection_id`: The ID used to identify the collection of the NFT.
     *Is used within the context of `pallet_nfts`.
     *- `nft_id`: The ID used to identify the NFT within the given collection.
     *Is used within the context of `pallet_nfts`.
     *- `asset_id`: The ID of the new asset. It must not exist.
     *Is used within the context of `pallet_assets`.
     *- `beneficiary`: The account that will receive the newly created asset.
     *- `fractions`: The total issuance of the newly created asset class.
     *
     *Emits `NftFractionalized` event when successful.
     */
    "fractionalize": Anonymize<I9gf2bs80kgbnk>;
    /**
     *Burn the total issuance of the fungible asset and return (unlock) the locked NFT.
     *
     *The dispatch origin for this call must be Signed.
     *
     *`Deposit` funds will be returned to `asset_creator`.
     *
     *- `nft_collection_id`: The ID used to identify the collection of the NFT.
     *Is used within the context of `pallet_nfts`.
     *- `nft_id`: The ID used to identify the NFT within the given collection.
     *Is used within the context of `pallet_nfts`.
     *- `asset_id`: The ID of the asset being returned and destroyed. Must match
     *the original ID of the created asset, corresponding to the NFT.
     *Is used within the context of `pallet_assets`.
     *- `beneficiary`: The account that will receive the unified NFT.
     *
     *Emits `NftUnified` event when successful.
     */
    "unify": Anonymize<I5urb3tva4ave5>;
}>;
export type I9gf2bs80kgbnk = {
    "nft_collection_id": number;
    "nft_id": number;
    "asset_id": number;
    "beneficiary": MultiAddress;
    "fractions": bigint;
};
export type I5urb3tva4ave5 = {
    "nft_collection_id": number;
    "nft_id": number;
    "asset_id": number;
    "beneficiary": MultiAddress;
};
export type I9eemk0c7gip8o = AnonymousEnum<{
    /**
     *Creates an empty liquidity pool and an associated new `lp_token` asset
     *(the id of which is returned in the `Event::PoolCreated` event).
     *
     *Once a pool is created, someone may [`Pallet::add_liquidity`] to it.
     */
    "create_pool": Anonymize<I8eoqk45hnet27>;
    /**
     *Provide liquidity into the pool of `asset1` and `asset2`.
     *NOTE: an optimal amount of asset1 and asset2 will be calculated and
     *might be different than the provided `amount1_desired`/`amount2_desired`
     *thus you should provide the min amount you're happy to provide.
     *Params `amount1_min`/`amount2_min` represent that.
     *`mint_to` will be sent the liquidity tokens that represent this share of the pool.
     *
     *NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,
     *batch an atomic call with [`Pallet::add_liquidity`] and
     *[`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]
     *calls to render the liquidity withdrawable and rectify the exchange rate.
     *
     *Once liquidity is added, someone may successfully call
     *[`Pallet::swap_exact_tokens_for_tokens`] successfully.
     */
    "add_liquidity": Anonymize<Iddvk596rbl31l>;
    /**
     *Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be
     *burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`
     *it's possible to control the min amount of returned tokens you're happy with.
     */
    "remove_liquidity": Anonymize<I3iap9ri572kjf>;
    /**
     *Swap the exact amount of `asset1` into `asset2`.
     *`amount_out_min` param allows you to specify the min amount of the `asset2`
     *you're happy to receive.
     *
     *[`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called
     *for a quote.
     */
    "swap_exact_tokens_for_tokens": Anonymize<I48iqqqmt2pr38>;
    /**
     *Swap any amount of `asset1` to get the exact amount of `asset2`.
     *`amount_in_max` param allows to specify the max amount of the `asset1`
     *you're happy to provide.
     *
     *[`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called
     *for a quote.
     */
    "swap_tokens_for_exact_tokens": Anonymize<I90ob4vr51rue4>;
    /**
     *Touch an existing pool to fulfill prerequisites before providing liquidity, such as
     *ensuring that the pool's accounts are in place. It is typically useful when a pool
     *creator removes the pool's accounts and does not provide a liquidity. This action may
     *involve holding assets from the caller as a deposit for creating the pool's accounts.
     *
     *The origin must be Signed.
     *
     *- `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).
     *- `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).
     *
     *Emits `Touched` event when successful.
     */
    "touch": Anonymize<I8eoqk45hnet27>;
}>;
export type I8eoqk45hnet27 = {
    "asset1": Anonymize<I4c0s5cioidn76>;
    "asset2": Anonymize<I4c0s5cioidn76>;
};
export type Iddvk596rbl31l = {
    "asset1": Anonymize<I4c0s5cioidn76>;
    "asset2": Anonymize<I4c0s5cioidn76>;
    "amount1_desired": bigint;
    "amount2_desired": bigint;
    "amount1_min": bigint;
    "amount2_min": bigint;
    "mint_to": SS58String;
};
export type I3iap9ri572kjf = {
    "asset1": Anonymize<I4c0s5cioidn76>;
    "asset2": Anonymize<I4c0s5cioidn76>;
    "lp_token_burn": bigint;
    "amount1_min_receive": bigint;
    "amount2_min_receive": bigint;
    "withdraw_to": SS58String;
};
export type I48iqqqmt2pr38 = {
    "path": Anonymize<Ia88a8r9e89e2p>;
    "amount_in": bigint;
    "amount_out_min": bigint;
    "send_to": SS58String;
    "keep_alive": boolean;
};
export type Ia88a8r9e89e2p = Array<Anonymize<I4c0s5cioidn76>>;
export type I90ob4vr51rue4 = {
    "path": Anonymize<Ia88a8r9e89e2p>;
    "amount_out": bigint;
    "amount_in_max": bigint;
    "send_to": SS58String;
    "keep_alive": boolean;
};
export type I56sv83honje13 = ResultPayload<Anonymize<I2l5r18t78b2o2>, TransactionValidityError>;
export type I5vv5n03oo8gas = (Anonymize<I200n1ov5tbcvr>) | undefined;
export type Id47ece6fiiom0 = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "ParachainInfo": undefined;
    "Balances": Anonymize<I9svldsp29mh87>;
    "Vesting": Anonymize<Icgf8vmtkbnu4u>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I9nbjvlrb9bp1g>;
    "CumulusXcm": undefined;
    "ToPolkadotXcmRouter": Anonymize<I6epb28bkd5aqn>;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Utility": Anonymize<Iaiepusmoquc50>;
    "Multisig": Anonymize<I3u9untpc138qp>;
    "Proxy": Anonymize<I200lj10gn9ei0>;
    "Assets": Anonymize<Ideusanoto4b1j>;
    "Uniques": Anonymize<Icu49uv7rfej74>;
    "Nfts": Anonymize<I1k4il7i5elhc7>;
    "ForeignAssets": Anonymize<I2clougp67ufee>;
    "NftFractionalization": Anonymize<Ifrervtb291iin>;
    "PoolAssets": Anonymize<Ideusanoto4b1j>;
    "AssetConversion": Anonymize<I9eemk0c7gip8o>;
}>;
export type If9gsu4ujg5rjd = ResultPayload<Anonymize<Iubqu4h82cm6n>, Anonymize<I55ku9c5gk50hb>>;
export type Iubqu4h82cm6n = {
    "execution_result": Anonymize<I4091giheuuepn>;
    "emitted_events": Anonymize<Iv1f7go66h5h1>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I4091giheuuepn = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I87mg5bcftiiia>>;
export type I87mg5bcftiiia = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<I768s0j7i6e52>;
};
export type Iv1f7go66h5h1 = Array<Anonymize<Ieuoa5a0k2id2n>>;
export type I1d8rh8ql0shan = ResultPayload<Anonymize<Id4hfd0ank82eg>, Anonymize<I55ku9c5gk50hb>>;
export type Id4hfd0ank82eg = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<Iv1f7go66h5h1>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I93k1anhb5gs2q = ResultPayload<XcmVersionedAssets, Anonymize<I5tspd7e422fr9>>;
export type I5tspd7e422fr9 = AnonymousEnum<{
    "AssetIdConversionFailed": undefined;
    "AmountToBalanceConversionFailed": undefined;
}>;
export type I1hlvpg2lj4n5s = Array<Anonymize<I6iinqvramfdvh>>;
export type I6iinqvramfdvh = {
    "phase": Phase;
    "event": Anonymize<I3oc703s9dsgi8>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I3oc703s9dsgi8 = AnonymousEnum<{
    "System": Anonymize<I3b5s8sk4a68na>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "MessageQueue": Anonymize<I2kosejppk3jon>;
    "Utility": Anonymize<Ifn2susda9ab9h>;
    "Multisig": Anonymize<Ifeoi63q5cdk2c>;
    "Proxy": Anonymize<I5fh5tr57gn204>;
    "Identity": Anonymize<Ibju6hjiipokne>;
}>;
export type I3b5s8sk4a68na = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I9fpov6d3p55u8>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I9fpov6d3p55u8 = {
    "dispatch_error": Anonymize<Iamndt5i5pec5s>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type Iamndt5i5pec5s = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I6quloa3t2qjtv>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I6quloa3t2qjtv = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "Timestamp": undefined;
    "ParachainInfo": undefined;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "XcmpQueue": Anonymize<Idnnbndsjjeqqs>;
    "PolkadotXcm": Anonymize<I87j95aq93d7dq>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Identity": Anonymize<I9mq328955mgb8>;
}>;
export type I9mq328955mgb8 = AnonymousEnum<{
    /**
     *Too many subs-accounts.
     */
    "TooManySubAccounts": undefined;
    /**
     *Account isn't found.
     */
    "NotFound": undefined;
    /**
     *Account isn't named.
     */
    "NotNamed": undefined;
    /**
     *Empty index.
     */
    "EmptyIndex": undefined;
    /**
     *Fee is changed.
     */
    "FeeChanged": undefined;
    /**
     *No identity found.
     */
    "NoIdentity": undefined;
    /**
     *Sticky judgement.
     */
    "StickyJudgement": undefined;
    /**
     *Judgement given.
     */
    "JudgementGiven": undefined;
    /**
     *Invalid judgement.
     */
    "InvalidJudgement": undefined;
    /**
     *The index is invalid.
     */
    "InvalidIndex": undefined;
    /**
     *The target is invalid.
     */
    "InvalidTarget": undefined;
    /**
     *Maximum amount of registrars reached. Cannot add any more.
     */
    "TooManyRegistrars": undefined;
    /**
     *Account ID is already named.
     */
    "AlreadyClaimed": undefined;
    /**
     *Sender is not a sub-account.
     */
    "NotSub": undefined;
    /**
     *Sub-account isn't owned by sender.
     */
    "NotOwned": undefined;
    /**
     *The provided judgement was for a different identity.
     */
    "JudgementForDifferentIdentity": undefined;
    /**
     *Error that occurs when there is an issue paying for judgement.
     */
    "JudgementPaymentFailed": undefined;
    /**
     *The provided suffix is too long.
     */
    "InvalidSuffix": undefined;
    /**
     *The sender does not have permission to issue a username.
     */
    "NotUsernameAuthority": undefined;
    /**
     *The authority cannot allocate any more usernames.
     */
    "NoAllocation": undefined;
    /**
     *The signature on a username was not valid.
     */
    "InvalidSignature": undefined;
    /**
     *Setting this username requires a signature, but none was provided.
     */
    "RequiresSignature": undefined;
    /**
     *The username does not meet the requirements.
     */
    "InvalidUsername": undefined;
    /**
     *The username is already taken.
     */
    "UsernameTaken": undefined;
    /**
     *The requested username does not exist.
     */
    "NoUsername": undefined;
    /**
     *The username cannot be forcefully removed because it can still be accepted.
     */
    "NotExpired": undefined;
}>;
export type Ifn2susda9ab9h = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<Ib2pn7cj2a8mjt>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<Ie045pa6p0ffrh>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<I80goa4fatbh6c>;
}>;
export type Ib2pn7cj2a8mjt = {
    "index": number;
    "error": Anonymize<Iamndt5i5pec5s>;
};
export type Ie045pa6p0ffrh = {
    "error": Anonymize<Iamndt5i5pec5s>;
};
export type I80goa4fatbh6c = {
    "result": Anonymize<Iaevk4mhupc113>;
};
export type Iaevk4mhupc113 = ResultPayload<undefined, Anonymize<Iamndt5i5pec5s>>;
export type Ifeoi63q5cdk2c = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<Im2ctqm5i9u4l>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type Im2ctqm5i9u4l = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Iaevk4mhupc113>;
};
export type I5fh5tr57gn204 = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<I80goa4fatbh6c>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<I7ntcg8dtn6d9g>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I8v2su1f60qoae>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I8v2su1f60qoae>;
}>;
export type I7ntcg8dtn6d9g = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<Ieuemnllefri8h>;
    "disambiguation_index": number;
};
export type Ieuemnllefri8h = AnonymousEnum<{
    "Any": undefined;
    "NonTransfer": undefined;
    "CancelProxy": undefined;
    "Identity": undefined;
    "IdentityJudgement": undefined;
    "Collator": undefined;
}>;
export type I8v2su1f60qoae = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<Ieuemnllefri8h>;
    "delay": number;
};
export type Ibju6hjiipokne = AnonymousEnum<{
    /**
     *A name was set or reset (which will remove all judgements).
     */
    "IdentitySet": Anonymize<I4cbvqmqadhrea>;
    /**
     *A name was cleared, and the given balance returned.
     */
    "IdentityCleared": Anonymize<Iep1lmt6q3s6r3>;
    /**
     *A name was removed and the given balance slashed.
     */
    "IdentityKilled": Anonymize<Iep1lmt6q3s6r3>;
    /**
     *A judgement was asked from a registrar.
     */
    "JudgementRequested": Anonymize<I1fac16213rie2>;
    /**
     *A judgement request was retracted.
     */
    "JudgementUnrequested": Anonymize<I1fac16213rie2>;
    /**
     *A judgement was given by a registrar.
     */
    "JudgementGiven": Anonymize<Ifjt77oc391o43>;
    /**
     *A registrar was added.
     */
    "RegistrarAdded": Anonymize<Itvt1jsipv0lc>;
    /**
     *A sub-identity was added to an identity and the deposit paid.
     */
    "SubIdentityAdded": Anonymize<Ick3mveut33f44>;
    /**
     *A sub-identity was removed from an identity and the deposit freed.
     */
    "SubIdentityRemoved": Anonymize<Ick3mveut33f44>;
    /**
     *A sub-identity was cleared, and the given deposit repatriated from the
     *main identity account to the sub-identity account.
     */
    "SubIdentityRevoked": Anonymize<Ick3mveut33f44>;
    /**
     *A username authority was added.
     */
    "AuthorityAdded": Anonymize<I2rg5btjrsqec0>;
    /**
     *A username authority was removed.
     */
    "AuthorityRemoved": Anonymize<I2rg5btjrsqec0>;
    /**
     *A username was set for `who`.
     */
    "UsernameSet": Anonymize<Ibdqerrooruuq9>;
    /**
     *A username was queued, but `who` must accept it prior to `expiration`.
     */
    "UsernameQueued": Anonymize<I8u2ba9jeiu6q0>;
    /**
     *A queued username passed its expiration without being claimed and was removed.
     */
    "PreapprovalExpired": Anonymize<I7ieadb293k6b4>;
    /**
     *A username was set as a primary and can be looked up from `who`.
     */
    "PrimaryUsernameSet": Anonymize<Ibdqerrooruuq9>;
    /**
     *A dangling username (as in, a username corresponding to an account that has removed its
     *identity) has been removed.
     */
    "DanglingUsernameRemoved": Anonymize<Ibdqerrooruuq9>;
}>;
export type I1fac16213rie2 = {
    "who": SS58String;
    "registrar_index": number;
};
export type Ifjt77oc391o43 = {
    "target": SS58String;
    "registrar_index": number;
};
export type Itvt1jsipv0lc = {
    "registrar_index": number;
};
export type Ick3mveut33f44 = {
    "sub": SS58String;
    "main": SS58String;
    "deposit": bigint;
};
export type I2rg5btjrsqec0 = {
    "authority": SS58String;
};
export type Ibdqerrooruuq9 = {
    "who": SS58String;
    "username": Binary;
};
export type I8u2ba9jeiu6q0 = {
    "who": SS58String;
    "username": Binary;
    "expiration": number;
};
export type I7ieadb293k6b4 = {
    "whose": SS58String;
};
export type I48e2fe747rjco = [Anonymize<Idu1glf8aopeq1>, bigint];
export type Idu1glf8aopeq1 = Array<Anonymize<I8no7bnb3d22c5>>;
export type I8no7bnb3d22c5 = {
    "delegate": SS58String;
    "proxy_type": Anonymize<Ieuemnllefri8h>;
    "delay": number;
};
export type I3ruf36ao08o1o = [Anonymize<Ib1i64ek701lf6>, Anonymize<Iabpgqcjikia83>];
export type Ib1i64ek701lf6 = {
    "judgements": Anonymize<I5lbssihti472g>;
    "deposit": bigint;
    "info": Anonymize<Ibr5qtvptt8691>;
};
export type I5lbssihti472g = Array<Anonymize<I7uhmpkgp9kq6>>;
export type I7uhmpkgp9kq6 = [number, Anonymize<IdentityJudgement>];
export type IdentityJudgement = Enum<{
    "Unknown": undefined;
    "FeePaid": bigint;
    "Reasonable": undefined;
    "KnownGood": undefined;
    "OutOfDate": undefined;
    "LowQuality": undefined;
    "Erroneous": undefined;
}>;
export declare const IdentityJudgement: GetEnum<IdentityJudgement>;
export type Ibr5qtvptt8691 = {
    "display": Anonymize<IdentityData>;
    "legal": Anonymize<IdentityData>;
    "web": Anonymize<IdentityData>;
    "matrix": Anonymize<IdentityData>;
    "email": Anonymize<IdentityData>;
    "pgp_fingerprint"?: Anonymize<If7b8240vgt2q5>;
    "image": Anonymize<IdentityData>;
    "twitter": Anonymize<IdentityData>;
    "github": Anonymize<IdentityData>;
    "discord": Anonymize<IdentityData>;
};
export type IdentityData = Enum<{
    "None": undefined;
    "Raw0": undefined;
    "Raw1": number;
    "Raw2": FixedSizeBinary<2>;
    "Raw3": FixedSizeBinary<3>;
    "Raw4": FixedSizeBinary<4>;
    "Raw5": FixedSizeBinary<5>;
    "Raw6": FixedSizeBinary<6>;
    "Raw7": FixedSizeBinary<7>;
    "Raw8": FixedSizeBinary<8>;
    "Raw9": FixedSizeBinary<9>;
    "Raw10": FixedSizeBinary<10>;
    "Raw11": FixedSizeBinary<11>;
    "Raw12": FixedSizeBinary<12>;
    "Raw13": FixedSizeBinary<13>;
    "Raw14": FixedSizeBinary<14>;
    "Raw15": FixedSizeBinary<15>;
    "Raw16": FixedSizeBinary<16>;
    "Raw17": FixedSizeBinary<17>;
    "Raw18": FixedSizeBinary<18>;
    "Raw19": FixedSizeBinary<19>;
    "Raw20": FixedSizeBinary<20>;
    "Raw21": FixedSizeBinary<21>;
    "Raw22": FixedSizeBinary<22>;
    "Raw23": FixedSizeBinary<23>;
    "Raw24": FixedSizeBinary<24>;
    "Raw25": FixedSizeBinary<25>;
    "Raw26": FixedSizeBinary<26>;
    "Raw27": FixedSizeBinary<27>;
    "Raw28": FixedSizeBinary<28>;
    "Raw29": FixedSizeBinary<29>;
    "Raw30": FixedSizeBinary<30>;
    "Raw31": FixedSizeBinary<31>;
    "Raw32": FixedSizeBinary<32>;
    "BlakeTwo256": FixedSizeBinary<32>;
    "Sha256": FixedSizeBinary<32>;
    "Keccak256": FixedSizeBinary<32>;
    "ShaThree256": FixedSizeBinary<32>;
}>;
export declare const IdentityData: GetEnum<IdentityData>;
export type If7b8240vgt2q5 = (FixedSizeBinary<20>) | undefined;
export type I910puuahutflf = [SS58String, Anonymize<IdentityData>];
export type I4nfjdef0ibh44 = [bigint, Anonymize<Ia2lhg7l2hilo3>];
export type I74af64m08r6as = Array<Anonymize<I48v3sekdprq30>>;
export type I48v3sekdprq30 = (Anonymize<Icj8lp9f0lq0bm>) | undefined;
export type Icj8lp9f0lq0bm = {
    "account": SS58String;
    "fee": bigint;
    "fields": bigint;
};
export type I9bhbof2vim227 = {
    "suffix": Binary;
    "allocation": number;
};
export type I1gjb4fujt8rh8 = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<I6n9iacva5r3rk>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<I5l2a85l996orr>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<I6n9iacva5r3rk>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<I3r22fhs60crah>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<I6n9iacva5r3rk>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<Iakltmod4pcpa7>;
}>;
export type I6n9iacva5r3rk = {
    "calls": Anonymize<I8lo01ib8c4s98>;
};
export type I8lo01ib8c4s98 = Array<TxCallData>;
export type I5l2a85l996orr = {
    "index": number;
    "call": TxCallData;
};
export type I3r22fhs60crah = {
    "as_origin": Anonymize<I48v5riethqckl>;
    "call": TxCallData;
};
export type Iakltmod4pcpa7 = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type Idlar27fcn1i0u = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<Ia51i944an6soh>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<Idoenh01titkrj>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Ia51i944an6soh = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Idoenh01titkrj = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Icoop096k3te6g = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<I65vcof2homb48>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<I6hk7temg1mga7>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<I6hk7temg1mga7>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<I2lbmfajhc5gdu>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<I2siheq6f2djrd>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<Id5vftigd4mtji>;
}>;
export type I65vcof2homb48 = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Icdvjlkfnoshag>;
    "call": TxCallData;
};
export type Icdvjlkfnoshag = (Anonymize<Ieuemnllefri8h>) | undefined;
export type I6hk7temg1mga7 = {
    "delegate": MultiAddress;
    "proxy_type": Anonymize<Ieuemnllefri8h>;
    "delay": number;
};
export type I2lbmfajhc5gdu = {
    "proxy_type": Anonymize<Ieuemnllefri8h>;
    "delay": number;
    "index": number;
};
export type I2siheq6f2djrd = {
    "spawner": MultiAddress;
    "proxy_type": Anonymize<Ieuemnllefri8h>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type Id5vftigd4mtji = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Icdvjlkfnoshag>;
    "call": TxCallData;
};
export type Ids8vscs1lcqvc = AnonymousEnum<{
    /**
     *Add a registrar to the system.
     *
     *The dispatch origin for this call must be `T::RegistrarOrigin`.
     *
     *- `account`: the account of the registrar.
     *
     *Emits `RegistrarAdded` if successful.
     */
    "add_registrar": Anonymize<Ic6cqd9g0t65v0>;
    /**
     *Set an account's identity information and reserve the appropriate deposit.
     *
     *If the account already has identity information, the deposit is taken as part payment
     *for the new deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `info`: The identity information.
     *
     *Emits `IdentitySet` if successful.
     */
    "set_identity": Anonymize<I5sv83ib1q5mod>;
    /**
     *Set the sub-accounts of the sender.
     *
     *Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned
     *and an amount `SubAccountDeposit` will be reserved for each item in `subs`.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *identity.
     *
     *- `subs`: The identity's (new) sub-accounts.
     */
    "set_subs": Anonymize<Ia9mkdf6l44shb>;
    /**
     *Clear an account's identity info and all sub-accounts and return all deposits.
     *
     *Payment: All reserved balances on the account are returned.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *identity.
     *
     *Emits `IdentityCleared` if successful.
     */
    "clear_identity": undefined;
    /**
     *Request a judgement from a registrar.
     *
     *Payment: At most `max_fee` will be reserved for payment to the registrar if judgement
     *given.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a
     *registered identity.
     *
     *- `reg_index`: The index of the registrar whose judgement is requested.
     *- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:
     *
     *```nocompile
     *Self::registrars().get(reg_index).unwrap().fee
     *```
     *
     *Emits `JudgementRequested` if successful.
     */
    "request_judgement": Anonymize<I9l2s4klu0831o>;
    /**
     *Cancel a previous request.
     *
     *Payment: A previously reserved deposit is returned on success.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a
     *registered identity.
     *
     *- `reg_index`: The index of the registrar whose judgement is no longer requested.
     *
     *Emits `JudgementUnrequested` if successful.
     */
    "cancel_request": Anonymize<I2ctrt5nqb8o7c>;
    /**
     *Set the fee required for a judgement to be requested from a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `fee`: the new fee.
     */
    "set_fee": Anonymize<I711qahikocb1c>;
    /**
     *Change the account associated with a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `new`: the new account ID.
     */
    "set_account_id": Anonymize<I6o1er683vod1j>;
    /**
     *Set the field information for a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `fields`: the fields that the registrar concerns themselves with.
     */
    "set_fields": Anonymize<Id6gojh30v9ib2>;
    /**
     *Provide a judgement for an account's identity.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `reg_index`.
     *
     *- `reg_index`: the index of the registrar whose judgement is being made.
     *- `target`: the account whose identity the judgement is upon. This must be an account
     *  with a registered identity.
     *- `judgement`: the judgement of the registrar of index `reg_index` about `target`.
     *- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is
     *  provided.
     *
     *Note: Judgements do not apply to a username.
     *
     *Emits `JudgementGiven` if successful.
     */
    "provide_judgement": Anonymize<Ide1bahhh47lj9>;
    /**
     *Remove an account's identity and sub-account information and slash the deposits.
     *
     *Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by
     *`Slash`. Verification request deposits are not returned; they should be cancelled
     *manually using `cancel_request`.
     *
     *The dispatch origin for this call must match `T::ForceOrigin`.
     *
     *- `target`: the account whose identity the judgement is upon. This must be an account
     *  with a registered identity.
     *
     *Emits `IdentityKilled` if successful.
     */
    "kill_identity": Anonymize<Id9uqtigc0il3v>;
    /**
     *Add the given account to the sender's subs.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "add_sub": Anonymize<Ic68lsi7chpv5k>;
    /**
     *Alter the associated name of the given sub-account.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "rename_sub": Anonymize<Ic68lsi7chpv5k>;
    /**
     *Remove the given account from the sender's subs.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "remove_sub": Anonymize<Iek0boln8pgnko>;
    /**
     *Remove the sender as a sub-account.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender (*not* the original depositor).
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *super-identity.
     *
     *NOTE: This should not normally be used, but is provided in the case that the non-
     *controller of an account is maliciously registered as a sub-account.
     */
    "quit_sub": undefined;
    /**
     *Add an `AccountId` with permission to grant usernames with a given `suffix` appended.
     *
     *The authority can grant up to `allocation` usernames. To top up their allocation, they
     *should just issue (or request via governance) a new `add_username_authority` call.
     */
    "add_username_authority": Anonymize<I452bkd71b385t>;
    /**
     *Remove `authority` from the username authorities.
     */
    "remove_username_authority": Anonymize<I2mk62irjfqdo1>;
    /**
     *Set the username for `who`. Must be called by a username authority.
     *
     *The authority must have an `allocation`. Users can either pre-sign their usernames or
     *accept them later.
     *
     *Usernames must:
     *  - Only contain lowercase ASCII characters or digits.
     *  - When combined with the suffix of the issuing authority be _less than_ the
     *    `MaxUsernameLength`.
     */
    "set_username_for": Anonymize<I9pnrh0ioo3e3p>;
    /**
     *Accept a given username that an `authority` granted. The call must include the full
     *username, as in `username.suffix`.
     */
    "accept_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *Remove an expired username approval. The username was approved by an authority but never
     *accepted by the user and must now be beyond its expiration. The call must include the
     *full username, as in `username.suffix`.
     */
    "remove_expired_approval": Anonymize<Ie5l999tf7t2te>;
    /**
     *Set a given username as the primary. The username should include the suffix.
     */
    "set_primary_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *Remove a username that corresponds to an account with no identity. Exists when a user
     *gets a username but then calls `clear_identity`.
     */
    "remove_dangling_username": Anonymize<Ie5l999tf7t2te>;
}>;
export type I5sv83ib1q5mod = {
    "info": Anonymize<Ibr5qtvptt8691>;
};
export type Ia9mkdf6l44shb = {
    "subs": Anonymize<I2ugvgusn08dsq>;
};
export type I2ugvgusn08dsq = Array<Anonymize<I910puuahutflf>>;
export type I9l2s4klu0831o = {
    "reg_index": number;
    "max_fee": bigint;
};
export type I2ctrt5nqb8o7c = {
    "reg_index": number;
};
export type I711qahikocb1c = {
    "index": number;
    "fee": bigint;
};
export type Id6gojh30v9ib2 = {
    "index": number;
    "fields": bigint;
};
export type Ide1bahhh47lj9 = {
    "reg_index": number;
    "target": MultiAddress;
    "judgement": Anonymize<IdentityJudgement>;
    "identity": FixedSizeBinary<32>;
};
export type Ic68lsi7chpv5k = {
    "sub": MultiAddress;
    "data": Anonymize<IdentityData>;
};
export type Iek0boln8pgnko = {
    "sub": MultiAddress;
};
export type I452bkd71b385t = {
    "authority": MultiAddress;
    "suffix": Binary;
    "allocation": number;
};
export type I2mk62irjfqdo1 = {
    "authority": MultiAddress;
};
export type I9pnrh0ioo3e3p = {
    "who": MultiAddress;
    "username": Binary;
    "signature"?: Anonymize<I86cdjmsf3a81s>;
};
export type Ie5l999tf7t2te = {
    "username": Binary;
};
export type I3qkdheercd6dl = ResultPayload<Anonymize<Iaevk4mhupc113>, TransactionValidityError>;
export type I4ao9sb94fm3jj = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "ParachainInfo": undefined;
    "Balances": Anonymize<I9svldsp29mh87>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I9nbjvlrb9bp1g>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Utility": Anonymize<I1gjb4fujt8rh8>;
    "Multisig": Anonymize<Idlar27fcn1i0u>;
    "Proxy": Anonymize<Icoop096k3te6g>;
    "Identity": Anonymize<Ids8vscs1lcqvc>;
}>;
export type I55tccq1hakv9c = ResultPayload<Anonymize<I4a8a5lh6b2gki>, Anonymize<I55ku9c5gk50hb>>;
export type I4a8a5lh6b2gki = {
    "execution_result": Anonymize<Ifcpe7be13aoac>;
    "emitted_events": Anonymize<Icvg5r1n1nej9d>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type Ifcpe7be13aoac = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I5jlilvtjc833b>>;
export type I5jlilvtjc833b = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<Iamndt5i5pec5s>;
};
export type Icvg5r1n1nej9d = Array<Anonymize<I3oc703s9dsgi8>>;
export type Ie4781qov6lot1 = ResultPayload<Anonymize<I4c6crbsd26868>, Anonymize<I55ku9c5gk50hb>>;
export type I4c6crbsd26868 = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<Icvg5r1n1nej9d>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I337ai2btcivaq = Array<Anonymize<I11cj6t2vcmlfq>>;
export type I11cj6t2vcmlfq = {
    "phase": Phase;
    "event": Anonymize<I668na8k863p14>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I668na8k863p14 = AnonymousEnum<{
    "System": Anonymize<I2t5vkq7dgaeal>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "AssetTxPayment": Anonymize<Ifagg2q2o5fgjl>;
    "Vesting": VestingEvent;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "MessageQueue": Anonymize<I2kosejppk3jon>;
    "Utility": Anonymize<I45vovbl28u5ob>;
    "Multisig": Anonymize<Icjl5oqk1eo6sb>;
    "Proxy": Anonymize<I8qme4qa965a0r>;
    "Assets": Anonymize<I6avancvg8fd05>;
    "Uniques": Anonymize<Ia0j71vjrjqu9p>;
    "Nfts": Anonymize<I6qicn8jn4fftj>;
    "ForeignAssets": Anonymize<I81i2fkdo6nple>;
    "PoolAssets": Anonymize<I6avancvg8fd05>;
    "AssetConversion": Anonymize<I31lqq0fjfmnfv>;
}>;
export type I2t5vkq7dgaeal = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<Iane057r2vqar>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type Iane057r2vqar = {
    "dispatch_error": Anonymize<Icogrvf0inr18b>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type Icogrvf0inr18b = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<Iasm4f970q7bf9>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type Iasm4f970q7bf9 = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "Timestamp": undefined;
    "ParachainInfo": undefined;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "AssetTxPayment": undefined;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "XcmpQueue": Anonymize<Idnnbndsjjeqqs>;
    "PolkadotXcm": Anonymize<I87j95aq93d7dq>;
    "CumulusXcm": undefined;
    "ToKusamaXcmRouter": undefined;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Assets": Anonymize<Iapedqb0veh71>;
    "Uniques": Anonymize<Ienq2ge2rhv4jm>;
    "Nfts": Anonymize<I58r1150kmj18u>;
    "ForeignAssets": Anonymize<Iapedqb0veh71>;
    "PoolAssets": Anonymize<Iapedqb0veh71>;
    "AssetConversion": Anonymize<I4u78hb23uhvi2>;
}>;
export type I45vovbl28u5ob = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<Ia916s7j8ucmdd>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I6a0k8t8strmou>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Iboobuvtv2hqbg>;
}>;
export type Ia916s7j8ucmdd = {
    "index": number;
    "error": Anonymize<Icogrvf0inr18b>;
};
export type I6a0k8t8strmou = {
    "error": Anonymize<Icogrvf0inr18b>;
};
export type Iboobuvtv2hqbg = {
    "result": Anonymize<I6sjjdpu2cscpe>;
};
export type I6sjjdpu2cscpe = ResultPayload<undefined, Anonymize<Icogrvf0inr18b>>;
export type Icjl5oqk1eo6sb = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I5f1j6imiigvdh>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I5f1j6imiigvdh = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I6sjjdpu2cscpe>;
};
export type I8qme4qa965a0r = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Iboobuvtv2hqbg>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ie7cuj84ohvg56>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I8ioopvokvl3ud>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I8ioopvokvl3ud>;
}>;
export type I8ikgojd2kp4nr = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<Ia6kc29epld8oe>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<Icjjfgkss9ab50>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<Ia6kc29epld8oe>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<Ifabdf8qm932q0>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<Ia6kc29epld8oe>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<I4u9de6jls8otm>;
}>;
export type Ia6kc29epld8oe = {
    "calls": Anonymize<Ifhubbh45t5b6a>;
};
export type Ifhubbh45t5b6a = Array<TxCallData>;
export type Icjjfgkss9ab50 = {
    "index": number;
    "call": TxCallData;
};
export type Ifabdf8qm932q0 = {
    "as_origin": Anonymize<I48v5riethqckl>;
    "call": TxCallData;
};
export type I4u9de6jls8otm = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I2i3jnq078uco0 = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<I9rge57146rvbl>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<Id5a43kc4r5p31>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type I9rge57146rvbl = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Id5a43kc4r5p31 = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I6qfut29tv8are = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<I3mbtn2eb315ar>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Iovrcu9bfelfq>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Iovrcu9bfelfq>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<Iefr8jgtgfk8um>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<I3j05hul54uj7q>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<Iem4jetr2c8nf8>;
}>;
export type I3mbtn2eb315ar = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I7rk1n3vg3et43>;
    "call": TxCallData;
};
export type Iem4jetr2c8nf8 = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I7rk1n3vg3et43>;
    "call": TxCallData;
};
export type Iai7icf56nsvk8 = ResultPayload<Anonymize<I6sjjdpu2cscpe>, TransactionValidityError>;
export type I2g5nrfnsbr9n0 = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "ParachainInfo": undefined;
    "Balances": Anonymize<I9svldsp29mh87>;
    "Vesting": Anonymize<Icgf8vmtkbnu4u>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I9nbjvlrb9bp1g>;
    "CumulusXcm": undefined;
    "ToKusamaXcmRouter": Anonymize<I6epb28bkd5aqn>;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Utility": Anonymize<I8ikgojd2kp4nr>;
    "Multisig": Anonymize<I2i3jnq078uco0>;
    "Proxy": Anonymize<I6qfut29tv8are>;
    "Assets": Anonymize<Ideusanoto4b1j>;
    "Uniques": Anonymize<Icu49uv7rfej74>;
    "Nfts": Anonymize<I1k4il7i5elhc7>;
    "ForeignAssets": Anonymize<I2clougp67ufee>;
    "PoolAssets": Anonymize<Ideusanoto4b1j>;
    "AssetConversion": Anonymize<I9eemk0c7gip8o>;
}>;
export type Id5e0bqoki0bb0 = ResultPayload<Anonymize<I2b61r7oveqvlt>, Anonymize<I55ku9c5gk50hb>>;
export type I2b61r7oveqvlt = {
    "execution_result": Anonymize<Ic6s0p82uhoidt>;
    "emitted_events": Anonymize<I6ulg2ml1s5o2p>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type Ic6s0p82uhoidt = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I3n1v5i2efq6rh>>;
export type I3n1v5i2efq6rh = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<Icogrvf0inr18b>;
};
export type I6ulg2ml1s5o2p = Array<Anonymize<I668na8k863p14>>;
export type I6sn3ln0su7un5 = ResultPayload<Anonymize<I16uv813m3c1lh>, Anonymize<I55ku9c5gk50hb>>;
export type I16uv813m3c1lh = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<I6ulg2ml1s5o2p>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I6e7s380uusirm = Array<Anonymize<I799p056odotp0>>;
export type I799p056odotp0 = {
    "phase": Phase;
    "event": Anonymize<I3jc9icijh2rgp>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I3jc9icijh2rgp = AnonymousEnum<{
    "System": Anonymize<Idp3jnivo8v7da>;
    "Indices": Anonymize<IndicesEvent>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "Parameters": Anonymize<I1uhphtcpakvvo>;
    "TransactionPayment": TransactionPaymentEvent;
    "Offences": OffencesEvent;
    "Session": SessionEvent;
    "Grandpa": GrandpaEvent;
    "Treasury": Anonymize<Iceo3qo846468b>;
    "ConvictionVoting": Anonymize<Itdqso6dq8jq1>;
    "Referenda": Anonymize<Idfraa3b4eu018>;
    "FellowshipCollective": Anonymize<Ifuucdgpuglunu>;
    "FellowshipReferenda": Anonymize<I28aoa43r171jt>;
    "Whitelist": Anonymize<Iesqtuic08q87i>;
    "Claims": CommonClaimsEvent;
    "Utility": Anonymize<I2r9v6ae6pqbrv>;
    "Identity": Anonymize<Ibju6hjiipokne>;
    "Society": Anonymize<Ifhcq78pr9md4e>;
    "Recovery": RecoveryEvent;
    "Vesting": VestingEvent;
    "Scheduler": Anonymize<Id0qft8pp7326l>;
    "Proxy": Anonymize<I3be54d5mm8l5l>;
    "Multisig": Anonymize<I2ep816mj9uoc4>;
    "Preimage": PreimageEvent;
    "AssetRate": AssetRateEvent;
    "Bounties": BountiesEvent;
    "ChildBounties": ChildBountiesEvent;
    "Nis": Anonymize<I9dmlhfape78ke>;
    "NisCounterpartBalances": Anonymize<Iao8h4hv7atnq3>;
    "ParaInclusion": ParachainsInclusionEvent;
    "Paras": ParachainsParasEvent;
    "Hrmp": ParachainsHrmpEvent;
    "ParasDisputes": ParachainsDisputesEvent;
    "MessageQueue": Anonymize<I13vul90391uuv>;
    "OnDemandAssignmentProvider": Anonymize<Icuu6jjue8o6eb>;
    "Registrar": CommonParasRegistrarEvent;
    "Slots": CommonSlotsEvent;
    "Auctions": CommonAuctionsEvent;
    "Crowdloan": Anonymize<Ic3782sp09o0a6>;
    "Coretime": PolkadotRuntimeParachainsCoretimeEvent;
    "XcmPallet": Anonymize<I5ce1ru810vv9d>;
    "IdentityMigrator": PolkadotRuntimeCommonIdentityMigratorEvent;
    "AssignedSlots": PolkadotRuntimeCommonAssignedSlotsEvent;
    "ValidatorManager": Anonymize<I7plqehk7ifitb>;
    "StateTrieMigration": Anonymize<I61dksvl51aujo>;
    "RootTesting": RootTestingEvent;
    "Sudo": Anonymize<Ic81u3mcveutk0>;
}>;
export type Idp3jnivo8v7da = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I4j95hn2vqs1md>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I4j95hn2vqs1md = {
    "dispatch_error": Anonymize<I259rde4954hok>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I259rde4954hok = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I120u9hg0t9ngp>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I120u9hg0t9ngp = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "Babe": Anonymize<Ib6q602k6o213a>;
    "Timestamp": undefined;
    "Indices": Anonymize<Icq1825fru3di2>;
    "Balances": Anonymize<Idj13i7adlomht>;
    "Parameters": undefined;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "Offences": undefined;
    "Historical": undefined;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Grandpa": Anonymize<I7q8i0pp1gkas6>;
    "AuthorityDiscovery": undefined;
    "Treasury": Anonymize<I36uss0m9fpcsf>;
    "ConvictionVoting": Anonymize<Idfa8k8ikssbsf>;
    "Referenda": Anonymize<I84u4ul208g742>;
    "FellowshipCollective": Anonymize<Ib69hbq04ogo7t>;
    "FellowshipReferenda": Anonymize<I84u4ul208g742>;
    "Origins": undefined;
    "Whitelist": Anonymize<I15nctscutpbeh>;
    "Claims": Anonymize<Ijh2jbbqvb176>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Identity": Anonymize<I9mq328955mgb8>;
    "Society": Anonymize<I6n8dkudb3ed0r>;
    "Recovery": Anonymize<I29mqdjoga49c9>;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Preimage": Anonymize<I4cfhml1prt4lu>;
    "AssetRate": Anonymize<I3qgd61cgli6cp>;
    "Bounties": Anonymize<Ibfvjqqblobf53>;
    "ChildBounties": Anonymize<I4u5ou5u3tthff>;
    "Nis": Anonymize<I3lqplv82e2f8f>;
    "NisCounterpartBalances": Anonymize<Idj13i7adlomht>;
    "ParachainsOrigin": undefined;
    "Configuration": Anonymize<In1jctfv299lm>;
    "ParasShared": undefined;
    "ParaInclusion": Anonymize<I4rrcn97hglfls>;
    "ParaInherent": Anonymize<Idfqgoii3heb2f>;
    "ParaScheduler": undefined;
    "Paras": Anonymize<Ieo97unb4d08rl>;
    "Initializer": undefined;
    "Dmp": undefined;
    "Hrmp": Anonymize<Ibns95nfmm92df>;
    "ParaSessionInfo": undefined;
    "ParasDisputes": Anonymize<Iakburbqot4g58>;
    "ParasSlashing": Anonymize<I1v70p1j0r2q1j>;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "OnDemandAssignmentProvider": Anonymize<I8htscm3ert491>;
    "CoretimeAssignmentProvider": Anonymize<Ie3b9qd0nd59gs>;
    "Registrar": Anonymize<I97vkspnd0b8bh>;
    "Slots": Anonymize<Iers095sa65pbg>;
    "Auctions": Anonymize<I4kgo47o2v3701>;
    "Crowdloan": Anonymize<I9o6l1c4r4qc3s>;
    "Coretime": Anonymize<Ifju0orssp9h7o>;
    "XcmPallet": Anonymize<I87j95aq93d7dq>;
    "Beefy": Anonymize<Iflve6qd33ah68>;
    "Mmr": undefined;
    "MmrLeaf": undefined;
    "IdentityMigrator": undefined;
    "ParasSudoWrapper": Anonymize<Ieq0677kv2oqb2>;
    "AssignedSlots": Anonymize<I40te5bcfc046n>;
    "ValidatorManager": undefined;
    "StateTrieMigration": Anonymize<I96objte63brjr>;
    "RootTesting": undefined;
    "Sudo": Anonymize<Iaug04qjhbli00>;
}>;
export type I4cfhml1prt4lu = AnonymousEnum<{
    /**
     *Preimage is too large to store on-chain.
     */
    "TooBig": undefined;
    /**
     *Preimage has already been noted on-chain.
     */
    "AlreadyNoted": undefined;
    /**
     *The user is not authorized to perform this action.
     */
    "NotAuthorized": undefined;
    /**
     *The preimage cannot be removed since it has not yet been noted.
     */
    "NotNoted": undefined;
    /**
     *A preimage may not be removed when there are outstanding requests.
     */
    "Requested": undefined;
    /**
     *The preimage request cannot be removed since no outstanding requests exist.
     */
    "NotRequested": undefined;
    /**
     *More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
     */
    "TooMany": undefined;
    /**
     *Too few hashes were requested to be upgraded (i.e. zero).
     */
    "TooFew": undefined;
}>;
export type I4rrcn97hglfls = AnonymousEnum<{
    /**
     *Validator index out of bounds.
     */
    "ValidatorIndexOutOfBounds": undefined;
    /**
     *Candidate submitted but para not scheduled.
     */
    "UnscheduledCandidate": undefined;
    /**
     *Head data exceeds the configured maximum.
     */
    "HeadDataTooLarge": undefined;
    /**
     *Code upgrade prematurely.
     */
    "PrematureCodeUpgrade": undefined;
    /**
     *Output code is too large
     */
    "NewCodeTooLarge": undefined;
    /**
     *The candidate's relay-parent was not allowed. Either it was
     *not recent enough or it didn't advance based on the last parachain block.
     */
    "DisallowedRelayParent": undefined;
    /**
     *Failed to compute group index for the core: either it's out of bounds
     *or the relay parent doesn't belong to the current session.
     */
    "InvalidAssignment": undefined;
    /**
     *Invalid group index in core assignment.
     */
    "InvalidGroupIndex": undefined;
    /**
     *Insufficient (non-majority) backing.
     */
    "InsufficientBacking": undefined;
    /**
     *Invalid (bad signature, unknown validator, etc.) backing.
     */
    "InvalidBacking": undefined;
    /**
     *The validation data hash does not match expected.
     */
    "ValidationDataHashMismatch": undefined;
    /**
     *The downward message queue is not processed correctly.
     */
    "IncorrectDownwardMessageHandling": undefined;
    /**
     *At least one upward message sent does not pass the acceptance criteria.
     */
    "InvalidUpwardMessages": undefined;
    /**
     *The candidate didn't follow the rules of HRMP watermark advancement.
     */
    "HrmpWatermarkMishandling": undefined;
    /**
     *The HRMP messages sent by the candidate is not valid.
     */
    "InvalidOutboundHrmp": undefined;
    /**
     *The validation code hash of the candidate is not valid.
     */
    "InvalidValidationCodeHash": undefined;
    /**
     *The `para_head` hash in the candidate descriptor doesn't match the hash of the actual
     *para head in the commitments.
     */
    "ParaHeadMismatch": undefined;
}>;
export type Iflve6qd33ah68 = AnonymousEnum<{
    /**
     *A key ownership proof provided as part of an equivocation report is invalid.
     */
    "InvalidKeyOwnershipProof": undefined;
    /**
     *A double voting proof provided as part of an equivocation report is invalid.
     */
    "InvalidDoubleVotingProof": undefined;
    /**
     *A fork voting proof provided as part of an equivocation report is invalid.
     */
    "InvalidForkVotingProof": undefined;
    /**
     *A future block voting proof provided as part of an equivocation report is invalid.
     */
    "InvalidFutureBlockVotingProof": undefined;
    /**
     *The session of the equivocation proof is invalid
     */
    "InvalidEquivocationProofSession": undefined;
    /**
     *A given equivocation report is valid but already previously reported.
     */
    "DuplicateOffenceReport": undefined;
    /**
     *Submitted configuration is invalid.
     */
    "InvalidConfiguration": undefined;
}>;
export type Ieq0677kv2oqb2 = AnonymousEnum<{
    /**
     *The specified parachain is not registered.
     */
    "ParaDoesntExist": undefined;
    /**
     *The specified parachain is already registered.
     */
    "ParaAlreadyExists": undefined;
    /**
     *A DMP message couldn't be sent because it exceeds the maximum size allowed for a
     *downward message.
     */
    "ExceedsMaxMessageSize": undefined;
    /**
     *Could not schedule para cleanup.
     */
    "CouldntCleanup": undefined;
    /**
     *Not a parathread (on-demand parachain).
     */
    "NotParathread": undefined;
    /**
     *Not a lease holding parachain.
     */
    "NotParachain": undefined;
    /**
     *Cannot upgrade on-demand parachain to lease holding parachain.
     */
    "CannotUpgrade": undefined;
    /**
     *Cannot downgrade lease holding parachain to on-demand.
     */
    "CannotDowngrade": undefined;
    /**
     *There are more cores than supported by the runtime.
     */
    "TooManyCores": undefined;
}>;
export type I40te5bcfc046n = AnonymousEnum<{
    /**
     *The specified parachain is not registered.
     */
    "ParaDoesntExist": undefined;
    /**
     *Not a parathread (on-demand parachain).
     */
    "NotParathread": undefined;
    /**
     *Cannot upgrade on-demand parachain to lease holding
     *parachain.
     */
    "CannotUpgrade": undefined;
    /**
     *Cannot downgrade lease holding parachain to
     *on-demand.
     */
    "CannotDowngrade": undefined;
    /**
     *Permanent or Temporary slot already assigned.
     */
    "SlotAlreadyAssigned": undefined;
    /**
     *Permanent or Temporary slot has not been assigned.
     */
    "SlotNotAssigned": undefined;
    /**
     *An ongoing lease already exists.
     */
    "OngoingLeaseExists": undefined;
    "MaxPermanentSlotsExceeded": undefined;
    "MaxTemporarySlotsExceeded": undefined;
}>;
export type Iaug04qjhbli00 = AnonymousEnum<{
    /**
     *Sender must be the Sudo account.
     */
    "RequireSudo": undefined;
}>;
export type I1uhphtcpakvvo = AnonymousEnum<{
    /**
     *A Parameter was set.
     *
     *Is also emitted when the value was not changed.
     */
    "Updated": Anonymize<I6mffe5unmp0ad>;
}>;
export type I6mffe5unmp0ad = {
    /**
     *The key that was updated.
     */
    "key": Anonymize<I4i0em5af770sp>;
    /**
     *The old value before this call.
     */
    "old_value"?: Anonymize<If5iuar7eq13oq>;
    /**
     *The new value after this call.
     */
    "new_value"?: Anonymize<If5iuar7eq13oq>;
};
export type I4i0em5af770sp = AnonymousEnum<{
    "Nis": Anonymize<Ifog358bdsmu7o>;
    "Preimage": Anonymize<I6ufmvt894dfbc>;
}>;
export type Ifog358bdsmu7o = AnonymousEnum<{
    "Target": undefined;
    "MinBid": undefined;
}>;
export type I6ufmvt894dfbc = AnonymousEnum<{
    "BaseDeposit": undefined;
    "ByteDeposit": undefined;
}>;
export type If5iuar7eq13oq = (Anonymize<I4flf7plgffps8>) | undefined;
export type I4flf7plgffps8 = AnonymousEnum<{
    "Nis": Anonymize<I5ej7cv84u5t5c>;
    "Preimage": Anonymize<I3kp27l0iq0772>;
}>;
export type I5ej7cv84u5t5c = AnonymousEnum<{
    "Target": bigint;
    "MinBid": bigint;
}>;
export type I3kp27l0iq0772 = AnonymousEnum<{
    "BaseDeposit": bigint;
    "ByteDeposit": bigint;
}>;
export type Itdqso6dq8jq1 = AnonymousEnum<{
    /**
     *An account has delegated their vote to another account. \[who, target\]
     */
    "Delegated": Anonymize<I2na29tt2afp0j>;
    /**
     *An \[account\] has cancelled a previous delegation operation.
     */
    "Undelegated": SS58String;
    /**
     *An account that has voted
     */
    "Voted": Anonymize<I9qfchhljqsjjl>;
    /**
     *A vote that been removed
     */
    "VoteRemoved": Anonymize<I9qfchhljqsjjl>;
}>;
export type I9qfchhljqsjjl = {
    "who": SS58String;
    "vote": ConvictionVotingVoteAccountVote;
};
export type Iesqtuic08q87i = AnonymousEnum<{
    "CallWhitelisted": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallRemoved": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallDispatched": Anonymize<I9ula0s43ggqn2>;
}>;
export type I9ula0s43ggqn2 = {
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I6dq26ml3560jf>;
};
export type I6dq26ml3560jf = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I1buqpgpefilpb>>;
export type I1buqpgpefilpb = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<I259rde4954hok>;
};
export type I2r9v6ae6pqbrv = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<Iadt6rrne4bg0u>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I6dprr11b8a02k>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<I1mjggjjmbkvqt>;
}>;
export type Iadt6rrne4bg0u = {
    "index": number;
    "error": Anonymize<I259rde4954hok>;
};
export type I6dprr11b8a02k = {
    "error": Anonymize<I259rde4954hok>;
};
export type I1mjggjjmbkvqt = {
    "result": Anonymize<I39lk73h89tehn>;
};
export type I39lk73h89tehn = ResultPayload<undefined, Anonymize<I259rde4954hok>>;
export type Id0qft8pp7326l = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<Ifvpj07qai1mcc>;
    /**
     *Set a retry configuration for some task.
     */
    "RetrySet": Anonymize<Ia3c82eadg79bj>;
    /**
     *Cancel a retry configuration for some task.
     */
    "RetryCancelled": Anonymize<Ienusoeb625ftq>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be retried since the agenda is full at that block or there
     *was not enough weight to reschedule it.
     */
    "RetryFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type Ifvpj07qai1mcc = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<I39lk73h89tehn>;
};
export type I3be54d5mm8l5l = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<I1mjggjjmbkvqt>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<I11qg727ndsej5>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I9oa54vd4qpdo6>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I9oa54vd4qpdo6>;
}>;
export type I11qg727ndsej5 = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<Ibacj1mt14hfmr>;
    "disambiguation_index": number;
};
export type Ibacj1mt14hfmr = AnonymousEnum<{
    "Any": undefined;
    "NonTransfer": undefined;
    "Governance": undefined;
    "IdentityJudgement": undefined;
    "CancelProxy": undefined;
    "Auction": undefined;
    "Society": undefined;
    "OnDemandOrdering": undefined;
}>;
export type I9oa54vd4qpdo6 = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<Ibacj1mt14hfmr>;
    "delay": number;
};
export type I2ep816mj9uoc4 = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I84khf19pdo5bl>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I84khf19pdo5bl = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I39lk73h89tehn>;
};
export type Ic3782sp09o0a6 = AnonymousEnum<{
    /**
     *Create a new crowdloaning campaign.
     */
    "Created": Anonymize<I37r4bdai8o9mp>;
    /**
     *Contributed to a crowd sale.
     */
    "Contributed": Anonymize<I8ve4g3egaln6a>;
    /**
     *Withdrew full balance of a contributor.
     */
    "Withdrew": Anonymize<I8ve4g3egaln6a>;
    /**
     *The loans in a fund have been partially dissolved, i.e. there are some left
     *over child keys that still need to be killed.
     */
    "PartiallyRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *All loans in a fund have been refunded.
     */
    "AllRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *Fund is dissolved.
     */
    "Dissolved": Anonymize<I37r4bdai8o9mp>;
    /**
     *The result of trying to submit a new bid to the Slots pallet.
     */
    "HandleBidResult": Anonymize<I16r4u64duhpsu>;
    /**
     *The configuration to a crowdloan has been edited.
     */
    "Edited": Anonymize<I37r4bdai8o9mp>;
    /**
     *A memo has been updated.
     */
    "MemoUpdated": Anonymize<If4hvqaeoqq5us>;
    /**
     *A parachain has been moved to `NewRaise`
     */
    "AddedToNewRaise": Anonymize<I37r4bdai8o9mp>;
}>;
export type I16r4u64duhpsu = {
    "para_id": number;
    "result": Anonymize<I39lk73h89tehn>;
};
export type PolkadotRuntimeCommonIdentityMigratorEvent = Enum<{
    /**
     *The identity and all sub accounts were reaped for `who`.
     */
    "IdentityReaped": Anonymize<I4cbvqmqadhrea>;
    /**
     *The deposits held for `who` were updated. `identity` is the new deposit held for
     *identity info, and `subs` is the new deposit held for the sub-accounts.
     */
    "DepositUpdated": Anonymize<I4i3u9uui7ktsd>;
}>;
export declare const PolkadotRuntimeCommonIdentityMigratorEvent: GetEnum<PolkadotRuntimeCommonIdentityMigratorEvent>;
export type I4i3u9uui7ktsd = {
    "who": SS58String;
    "identity": bigint;
    "subs": bigint;
};
export type PolkadotRuntimeCommonAssignedSlotsEvent = Enum<{
    /**
     *A parachain was assigned a permanent parachain slot
     */
    "PermanentSlotAssigned": number;
    /**
     *A parachain was assigned a temporary parachain slot
     */
    "TemporarySlotAssigned": number;
    /**
     *The maximum number of permanent slots has been changed
     */
    "MaxPermanentSlotsChanged": Anonymize<I9d5h5irbki7mm>;
    /**
     *The maximum number of temporary slots has been changed
     */
    "MaxTemporarySlotsChanged": Anonymize<I9d5h5irbki7mm>;
}>;
export declare const PolkadotRuntimeCommonAssignedSlotsEvent: GetEnum<PolkadotRuntimeCommonAssignedSlotsEvent>;
export type I9d5h5irbki7mm = {
    "slots": number;
};
export type I7plqehk7ifitb = AnonymousEnum<{
    /**
     *New validators were added to the set.
     */
    "ValidatorsRegistered": Anonymize<Ia2lhg7l2hilo3>;
    /**
     *Validators were removed from the set.
     */
    "ValidatorsDeregistered": Anonymize<Ia2lhg7l2hilo3>;
}>;
export type RootTestingEvent = Enum<{
    /**
     *Event dispatched when the trigger_defensive extrinsic is called.
     */
    "DefensiveTestCall": undefined;
}>;
export declare const RootTestingEvent: GetEnum<RootTestingEvent>;
export type Ic81u3mcveutk0 = AnonymousEnum<{
    /**
     *A sudo call just took place.
     */
    "Sudid": Anonymize<I53h81etmgivs8>;
    /**
     *The sudo key has been updated.
     */
    "KeyChanged": Anonymize<I5rtkmhm2dng4u>;
    /**
     *The key was permanently removed.
     */
    "KeyRemoved": undefined;
    /**
     *A [sudo_as](Pallet::sudo_as) call just took place.
     */
    "SudoAsDone": Anonymize<I53h81etmgivs8>;
}>;
export type I53h81etmgivs8 = {
    /**
     *The result of the call made by the sudo user.
     */
    "sudo_result": Anonymize<I39lk73h89tehn>;
};
export type I5rtkmhm2dng4u = {
    /**
     *The old sudo key (if one was previously set).
     */
    "old"?: Anonymize<Ihfphjolmsqq1>;
    /**
     *The new sudo key (if one was set).
     */
    "new": SS58String;
};
export type I48tkhravj8gau = Array<Anonymize<I3c82mv0k8eupf>>;
export type I3c82mv0k8eupf = {
    "id": Anonymize<I5ho9puq3rkp8h>;
    "amount": bigint;
};
export type I5ho9puq3rkp8h = AnonymousEnum<{
    "Preimage": PreimagePalletHoldReason;
    "Nis": Anonymize<I8492esr84fcem>;
    "StateTrieMigration": Anonymize<I7lf1val3vmpq0>;
}>;
export type I852a7otva6hbr = {
    "offender": Anonymize<Ifvqn3ldat80ai>;
    "reporters": Anonymize<Ia2lhg7l2hilo3>;
};
export type Ifvqn3ldat80ai = [SS58String, undefined];
export type ReferendaTypesReferendumInfo = Enum<{
    "Ongoing": Anonymize<I2akg6pgdabnsr>;
    "Approved": Anonymize<Ini94eljn5lj8>;
    "Rejected": Anonymize<Ini94eljn5lj8>;
    "Cancelled": Anonymize<Ini94eljn5lj8>;
    "TimedOut": Anonymize<Ini94eljn5lj8>;
    "Killed": number;
}>;
export declare const ReferendaTypesReferendumInfo: GetEnum<ReferendaTypesReferendumInfo>;
export type I2akg6pgdabnsr = {
    "track": number;
    "origin": WestendRuntimeOriginCaller;
    "proposal": PreimagesBounded;
    "enactment": TraitsScheduleDispatchTime;
    "submitted": number;
    "submission_deposit": Anonymize<Id5fm4p8lj5qgi>;
    "decision_deposit"?: Anonymize<Ibd24caul84kv2>;
    "deciding"?: Anonymize<Ibcbcndfmk0jd9>;
    "tally": Anonymize<Ifsk7cbmtit1jd>;
    "in_queue": boolean;
    "alarm"?: Anonymize<I3aj03qk2o5mdm>;
};
export type WestendRuntimeOriginCaller = Enum<{
    "system": DispatchRawOrigin;
    "Origins": WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin;
    "ParachainsOrigin": ParachainsOrigin;
    "XcmPallet": XcmPalletOrigin;
    "Void": undefined;
}>;
export declare const WestendRuntimeOriginCaller: GetEnum<WestendRuntimeOriginCaller>;
export type WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin = Enum<{
    "StakingAdmin": undefined;
    "Treasurer": undefined;
    "FellowshipAdmin": undefined;
    "GeneralAdmin": undefined;
    "AuctionAdmin": undefined;
    "LeaseAdmin": undefined;
    "ReferendumCanceller": undefined;
    "ReferendumKiller": undefined;
    "SmallTipper": undefined;
    "BigTipper": undefined;
    "SmallSpender": undefined;
    "MediumSpender": undefined;
    "BigSpender": undefined;
    "WhitelistedCaller": undefined;
    "FellowshipInitiates": undefined;
    "Fellows": undefined;
    "FellowshipExperts": undefined;
    "FellowshipMasters": undefined;
    "Fellowship1Dan": undefined;
    "Fellowship2Dan": undefined;
    "Fellowship3Dan": undefined;
    "Fellowship4Dan": undefined;
    "Fellowship5Dan": undefined;
    "Fellowship6Dan": undefined;
    "Fellowship7Dan": undefined;
    "Fellowship8Dan": undefined;
    "Fellowship9Dan": undefined;
}>;
export declare const WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin: GetEnum<WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin>;
export type I4d1fr40jlaega = AnonymousEnum<{
    "Ongoing": Anonymize<Ic2fmtnrf10r2a>;
    "Approved": Anonymize<Ini94eljn5lj8>;
    "Rejected": Anonymize<Ini94eljn5lj8>;
    "Cancelled": Anonymize<Ini94eljn5lj8>;
    "TimedOut": Anonymize<Ini94eljn5lj8>;
    "Killed": number;
}>;
export type Ic2fmtnrf10r2a = {
    "track": number;
    "origin": WestendRuntimeOriginCaller;
    "proposal": PreimagesBounded;
    "enactment": TraitsScheduleDispatchTime;
    "submitted": number;
    "submission_deposit": Anonymize<Id5fm4p8lj5qgi>;
    "decision_deposit"?: Anonymize<Ibd24caul84kv2>;
    "deciding"?: Anonymize<Ibcbcndfmk0jd9>;
    "tally": Anonymize<I6d634btv7misu>;
    "in_queue": boolean;
    "alarm"?: Anonymize<I3aj03qk2o5mdm>;
};
export type I1evsr8hplu1lg = [Anonymize<I4ftk0glls7946>, Anonymize<Iabpgqcjikia83>];
export type I4ftk0glls7946 = {
    "judgements": Anonymize<I5lbssihti472g>;
    "deposit": bigint;
    "info": Anonymize<I1o57snqt6f4v5>;
};
export type I1o57snqt6f4v5 = {
    "additional": Anonymize<I9rp1vd8cfo0na>;
    "display": Anonymize<IdentityData>;
    "legal": Anonymize<IdentityData>;
    "web": Anonymize<IdentityData>;
    "riot": Anonymize<IdentityData>;
    "email": Anonymize<IdentityData>;
    "pgp_fingerprint"?: Anonymize<If7b8240vgt2q5>;
    "image": Anonymize<IdentityData>;
    "twitter": Anonymize<IdentityData>;
};
export type I9rp1vd8cfo0na = Array<Anonymize<Ifqv6alck9pqqn>>;
export type Ifqv6alck9pqqn = FixedSizeArray<2, Anonymize<IdentityData>>;
export type I1mf59em7allv3 = Array<Anonymize<Iaahi58uf1b1is>>;
export type Iaahi58uf1b1is = (Anonymize<Ifjkfje8ssht>) | undefined;
export type Ifjkfje8ssht = {
    "maybe_id"?: Anonymize<I4s6vifaf8k998>;
    "priority": number;
    "call": PreimagesBounded;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "origin": WestendRuntimeOriginCaller;
};
export type Ib54bia2uil13s = [Anonymize<I40tufuqkagjma>, bigint];
export type I40tufuqkagjma = Array<Anonymize<I193c61lkk93ea>>;
export type I193c61lkk93ea = {
    "delegate": SS58String;
    "proxy_type": Anonymize<Ibacj1mt14hfmr>;
    "delay": number;
};
export type I6ucbdbrsslk4l = {
    "manager": SS58String;
    "period_begin": number;
    "period_count": number;
    "last_lease"?: Anonymize<I4arjljr6dpflb>;
    "lease_count": number;
};
export type I37004qavmmmjh = AnonymousEnum<{
    /**
     *Set the value of a parameter.
     *
     *The dispatch origin of this call must be `AdminOrigin` for the given `key`. Values be
     *deleted by setting them to `None`.
     */
    "set_parameter": Anonymize<I7eds1nhcf6m3t>;
}>;
export type I7eds1nhcf6m3t = {
    "key_value": Anonymize<I2vff01mvdsf5>;
};
export type I2vff01mvdsf5 = AnonymousEnum<{
    "Nis": Anonymize<I47tghgn188ik8>;
    "Preimage": Anonymize<I3gav76kbvfe4q>;
}>;
export type I47tghgn188ik8 = AnonymousEnum<{
    "Target": Anonymize<Ia023ofm66k1pj>;
    "MinBid": Anonymize<Ia023ofm66k1pj>;
}>;
export type I3gav76kbvfe4q = AnonymousEnum<{
    "BaseDeposit": Anonymize<Ia023ofm66k1pj>;
    "ByteDeposit": Anonymize<Ia023ofm66k1pj>;
}>;
export type I4n17hls1edfih = AnonymousEnum<{
    /**
     *Propose a referendum on a privileged action.
     *
     *- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
     *  available.
     *- `proposal_origin`: The origin from which the proposal should be executed.
     *- `proposal`: The proposal.
     *- `enactment_moment`: The moment that the proposal should be enacted.
     *
     *Emits `Submitted`.
     */
    "submit": Anonymize<I73f6tj4cj5rot>;
    /**
     *Post the Decision Deposit for a referendum.
     *
     *- `origin`: must be `Signed` and the account must have funds available for the
     *  referendum's track's Decision Deposit.
     *- `index`: The index of the submitted referendum whose Decision Deposit is yet to be
     *  posted.
     *
     *Emits `DecisionDepositPlaced`.
     */
    "place_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Refund the Decision Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Decision Deposit has not yet been
     *  refunded.
     *
     *Emits `DecisionDepositRefunded`.
     */
    "refund_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum.
     *
     *- `origin`: must be the `CancelOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Cancelled`.
     */
    "cancel": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum and slash the deposits.
     *
     *- `origin`: must be the `KillOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Killed` and `DepositSlashed`.
     */
    "kill": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a referendum onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `index`: the referendum to be advanced.
     */
    "nudge_referendum": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a track onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `track`: the track to be advanced.
     *
     *Action item for when there is now one fewer referendum in the deciding phase and the
     *`DecidingCount` is not yet updated. This means that we should either:
     *- begin deciding another referendum (and leave `DecidingCount` alone); or
     *- decrement `DecidingCount`.
     */
    "one_fewer_deciding": Anonymize<Icbio0e1f0034b>;
    /**
     *Refund the Submission Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Submission Deposit has not yet been
     *  refunded.
     *
     *Emits `SubmissionDepositRefunded`.
     */
    "refund_submission_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Set or clear metadata of a referendum.
     *
     *Parameters:
     *- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
     *  metadata of a finished referendum.
     *- `index`:  The index of a referendum to set or clear metadata for.
     *- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
     */
    "set_metadata": Anonymize<I8c0vkqjjipnuj>;
}>;
export type I73f6tj4cj5rot = {
    "proposal_origin": WestendRuntimeOriginCaller;
    "proposal": PreimagesBounded;
    "enactment_moment": TraitsScheduleDispatchTime;
};
export type I5lsn6nfhm4pdt = AnonymousEnum<{
    "whitelist_call": Anonymize<I1adbcfi5uc62r>;
    "remove_whitelisted_call": Anonymize<I1adbcfi5uc62r>;
    "dispatch_whitelisted_call": Anonymize<Ibf6ucefn8fh49>;
    "dispatch_whitelisted_call_with_preimage": Anonymize<I8s0f6ab5kodm9>;
}>;
export type I8s0f6ab5kodm9 = {
    "call": TxCallData;
};
export type Ibi249o5trugie = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<I7lgd9is2dq6b2>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<I1rg2ecvuem701>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<I7lgd9is2dq6b2>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<I3bhl9a0pvjkql>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<I7lgd9is2dq6b2>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<I4cfi81g4bqp5u>;
}>;
export type I7lgd9is2dq6b2 = {
    "calls": Anonymize<I733ilflvs4dbo>;
};
export type I733ilflvs4dbo = Array<TxCallData>;
export type I1rg2ecvuem701 = {
    "index": number;
    "call": TxCallData;
};
export type I3bhl9a0pvjkql = {
    "as_origin": WestendRuntimeOriginCaller;
    "call": TxCallData;
};
export type I4cfi81g4bqp5u = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I276doi9hm655d = AnonymousEnum<{
    /**
     *Add a registrar to the system.
     *
     *The dispatch origin for this call must be `T::RegistrarOrigin`.
     *
     *- `account`: the account of the registrar.
     *
     *Emits `RegistrarAdded` if successful.
     */
    "add_registrar": Anonymize<Ic6cqd9g0t65v0>;
    /**
     *Set an account's identity information and reserve the appropriate deposit.
     *
     *If the account already has identity information, the deposit is taken as part payment
     *for the new deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `info`: The identity information.
     *
     *Emits `IdentitySet` if successful.
     */
    "set_identity": Anonymize<I2kds5jji7slh8>;
    /**
     *Set the sub-accounts of the sender.
     *
     *Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned
     *and an amount `SubAccountDeposit` will be reserved for each item in `subs`.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *identity.
     *
     *- `subs`: The identity's (new) sub-accounts.
     */
    "set_subs": Anonymize<Ia9mkdf6l44shb>;
    /**
     *Clear an account's identity info and all sub-accounts and return all deposits.
     *
     *Payment: All reserved balances on the account are returned.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *identity.
     *
     *Emits `IdentityCleared` if successful.
     */
    "clear_identity": undefined;
    /**
     *Request a judgement from a registrar.
     *
     *Payment: At most `max_fee` will be reserved for payment to the registrar if judgement
     *given.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a
     *registered identity.
     *
     *- `reg_index`: The index of the registrar whose judgement is requested.
     *- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:
     *
     *```nocompile
     *Registrars::<T>::get().get(reg_index).unwrap().fee
     *```
     *
     *Emits `JudgementRequested` if successful.
     */
    "request_judgement": Anonymize<I9l2s4klu0831o>;
    /**
     *Cancel a previous request.
     *
     *Payment: A previously reserved deposit is returned on success.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a
     *registered identity.
     *
     *- `reg_index`: The index of the registrar whose judgement is no longer requested.
     *
     *Emits `JudgementUnrequested` if successful.
     */
    "cancel_request": Anonymize<I2ctrt5nqb8o7c>;
    /**
     *Set the fee required for a judgement to be requested from a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `fee`: the new fee.
     */
    "set_fee": Anonymize<I711qahikocb1c>;
    /**
     *Change the account associated with a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `new`: the new account ID.
     */
    "set_account_id": Anonymize<I6o1er683vod1j>;
    /**
     *Set the field information for a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `fields`: the fields that the registrar concerns themselves with.
     */
    "set_fields": Anonymize<Id6gojh30v9ib2>;
    /**
     *Provide a judgement for an account's identity.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `reg_index`.
     *
     *- `reg_index`: the index of the registrar whose judgement is being made.
     *- `target`: the account whose identity the judgement is upon. This must be an account
     *  with a registered identity.
     *- `judgement`: the judgement of the registrar of index `reg_index` about `target`.
     *- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is
     *  provided.
     *
     *Note: Judgements do not apply to a username.
     *
     *Emits `JudgementGiven` if successful.
     */
    "provide_judgement": Anonymize<Ide1bahhh47lj9>;
    /**
     *Remove an account's identity and sub-account information and slash the deposits.
     *
     *Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by
     *`Slash`. Verification request deposits are not returned; they should be cancelled
     *manually using `cancel_request`.
     *
     *The dispatch origin for this call must match `T::ForceOrigin`.
     *
     *- `target`: the account whose identity the judgement is upon. This must be an account
     *  with a registered identity.
     *
     *Emits `IdentityKilled` if successful.
     */
    "kill_identity": Anonymize<Id9uqtigc0il3v>;
    /**
     *Add the given account to the sender's subs.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "add_sub": Anonymize<Ic68lsi7chpv5k>;
    /**
     *Alter the associated name of the given sub-account.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "rename_sub": Anonymize<Ic68lsi7chpv5k>;
    /**
     *Remove the given account from the sender's subs.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "remove_sub": Anonymize<Iek0boln8pgnko>;
    /**
     *Remove the sender as a sub-account.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender (*not* the original depositor).
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *super-identity.
     *
     *NOTE: This should not normally be used, but is provided in the case that the non-
     *controller of an account is maliciously registered as a sub-account.
     */
    "quit_sub": undefined;
    /**
     *Add an `AccountId` with permission to grant usernames with a given `suffix` appended.
     *
     *The authority can grant up to `allocation` usernames. To top up their allocation, they
     *should just issue (or request via governance) a new `add_username_authority` call.
     */
    "add_username_authority": Anonymize<I452bkd71b385t>;
    /**
     *Remove `authority` from the username authorities.
     */
    "remove_username_authority": Anonymize<I2mk62irjfqdo1>;
    /**
     *Set the username for `who`. Must be called by a username authority.
     *
     *The authority must have an `allocation`. Users can either pre-sign their usernames or
     *accept them later.
     *
     *Usernames must:
     *  - Only contain lowercase ASCII characters or digits.
     *  - When combined with the suffix of the issuing authority be _less than_ the
     *    `MaxUsernameLength`.
     */
    "set_username_for": Anonymize<I9pnrh0ioo3e3p>;
    /**
     *Accept a given username that an `authority` granted. The call must include the full
     *username, as in `username.suffix`.
     */
    "accept_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *Remove an expired username approval. The username was approved by an authority but never
     *accepted by the user and must now be beyond its expiration. The call must include the
     *full username, as in `username.suffix`.
     */
    "remove_expired_approval": Anonymize<Ie5l999tf7t2te>;
    /**
     *Set a given username as the primary. The username should include the suffix.
     */
    "set_primary_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *Remove a username that corresponds to an account with no identity. Exists when a user
     *gets a username but then calls `clear_identity`.
     */
    "remove_dangling_username": Anonymize<Ie5l999tf7t2te>;
}>;
export type I2kds5jji7slh8 = {
    "info": Anonymize<I1o57snqt6f4v5>;
};
export type Imikl0elbjmnn = AnonymousEnum<{
    /**
     *Send a call through a recovered account.
     *
     *The dispatch origin for this call must be _Signed_ and registered to
     *be able to make calls on behalf of the recovered account.
     *
     *Parameters:
     *- `account`: The recovered account you want to make a call on-behalf-of.
     *- `call`: The call you want to make with the recovered account.
     */
    "as_recovered": Anonymize<I5q8jr82ftoa46>;
    /**
     *Allow ROOT to bypass the recovery process and set an a rescuer account
     *for a lost account directly.
     *
     *The dispatch origin for this call must be _ROOT_.
     *
     *Parameters:
     *- `lost`: The "lost account" to be recovered.
     *- `rescuer`: The "rescuer account" which can call as the lost account.
     */
    "set_recovered": Anonymize<I7pqmhr25d3dqq>;
    /**
     *Create a recovery configuration for your account. This makes your account recoverable.
     *
     *Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance
     *will be reserved for storing the recovery configuration. This deposit is returned
     *in full when the user calls `remove_recovery`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `friends`: A list of friends you trust to vouch for recovery attempts. Should be
     *  ordered and contain no duplicate values.
     *- `threshold`: The number of friends that must vouch for a recovery attempt before the
     *  account can be recovered. Should be less than or equal to the length of the list of
     *  friends.
     *- `delay_period`: The number of blocks after a recovery attempt is initialized that
     *  needs to pass before the account can be recovered.
     */
    "create_recovery": Anonymize<I6s6ihmfj6j5qq>;
    /**
     *Initiate the process for recovering a recoverable account.
     *
     *Payment: `RecoveryDeposit` balance will be reserved for initiating the
     *recovery process. This deposit will always be repatriated to the account
     *trying to be recovered. See `close_recovery`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `account`: The lost account that you want to recover. This account needs to be
     *  recoverable (i.e. have a recovery configuration).
     */
    "initiate_recovery": Anonymize<Ic6cqd9g0t65v0>;
    /**
     *Allow a "friend" of a recoverable account to vouch for an active recovery
     *process for that account.
     *
     *The dispatch origin for this call must be _Signed_ and must be a "friend"
     *for the recoverable account.
     *
     *Parameters:
     *- `lost`: The lost account that you want to recover.
     *- `rescuer`: The account trying to rescue the lost account that you want to vouch for.
     *
     *The combination of these two parameters must point to an active recovery
     *process.
     */
    "vouch_recovery": Anonymize<I7pqmhr25d3dqq>;
    /**
     *Allow a successful rescuer to claim their recovered account.
     *
     *The dispatch origin for this call must be _Signed_ and must be a "rescuer"
     *who has successfully completed the account recovery process: collected
     *`threshold` or more vouches, waited `delay_period` blocks since initiation.
     *
     *Parameters:
     *- `account`: The lost account that you want to claim has been successfully recovered by
     *  you.
     */
    "claim_recovery": Anonymize<Ic6cqd9g0t65v0>;
    /**
     *As the controller of a recoverable account, close an active recovery
     *process for your account.
     *
     *Payment: By calling this function, the recoverable account will receive
     *the recovery deposit `RecoveryDeposit` placed by the rescuer.
     *
     *The dispatch origin for this call must be _Signed_ and must be a
     *recoverable account with an active recovery process for it.
     *
     *Parameters:
     *- `rescuer`: The account trying to rescue this recoverable account.
     */
    "close_recovery": Anonymize<I7ka1pdlbuevh2>;
    /**
     *Remove the recovery process for your account. Recovered accounts are still accessible.
     *
     *NOTE: The user must make sure to call `close_recovery` on all active
     *recovery attempts before calling this function else it will fail.
     *
     *Payment: By calling this function the recoverable account will unreserve
     *their recovery configuration deposit.
     *(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)
     *
     *The dispatch origin for this call must be _Signed_ and must be a
     *recoverable account (i.e. has a recovery configuration).
     */
    "remove_recovery": undefined;
    /**
     *Cancel the ability to use `as_recovered` for `account`.
     *
     *The dispatch origin for this call must be _Signed_ and registered to
     *be able to make calls on behalf of the recovered account.
     *
     *Parameters:
     *- `account`: The recovered account you are able to call on-behalf-of.
     */
    "cancel_recovered": Anonymize<Ic6cqd9g0t65v0>;
}>;
export type I5q8jr82ftoa46 = {
    "account": MultiAddress;
    "call": TxCallData;
};
export type I6jhj2prghg0ig = AnonymousEnum<{
    /**
     *Anonymously schedule a task.
     */
    "schedule": Anonymize<Iacgp3nbm60bjh>;
    /**
     *Cancel an anonymously scheduled task.
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *Schedule a named task.
     */
    "schedule_named": Anonymize<I4nv31ho66b106>;
    /**
     *Cancel a named scheduled task.
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *Anonymously schedule a task after a delay.
     */
    "schedule_after": Anonymize<I7kklllt38hvm6>;
    /**
     *Schedule a named task after a delay.
     */
    "schedule_named_after": Anonymize<I6otmhqvmhc4qp>;
    /**
     *Set a retry configuration for a task so that, in case its scheduled run fails, it will
     *be retried after `period` blocks, for a total amount of `retries` retries or until it
     *succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry": Anonymize<Ieg3fd8p4pkt10>;
    /**
     *Set a retry configuration for a named task so that, in case its scheduled run fails, it
     *will be retried after `period` blocks, for a total amount of `retries` retries or until
     *it succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry_named": Anonymize<I8kg5ll427kfqq>;
    /**
     *Removes the retry configuration of a task.
     */
    "cancel_retry": Anonymize<I467333262q1l9>;
    /**
     *Cancel the retry configuration of a named task.
     */
    "cancel_retry_named": Anonymize<Ifs1i5fk9cqvr6>;
}>;
export type Iacgp3nbm60bjh = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I4nv31ho66b106 = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I7kklllt38hvm6 = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I6otmhqvmhc4qp = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I36vdr0hbe46am = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<I44ss9eciim21a>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Itsnjiijhekf8>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Itsnjiijhekf8>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<Ibosecf4lc3351>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<Iek6gniluqtauu>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<I73kgbdmt4m2cv>;
}>;
export type I44ss9eciim21a = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I5dfuo8fd7io8d>;
    "call": TxCallData;
};
export type I5dfuo8fd7io8d = (Anonymize<Ibacj1mt14hfmr>) | undefined;
export type Itsnjiijhekf8 = {
    "delegate": MultiAddress;
    "proxy_type": Anonymize<Ibacj1mt14hfmr>;
    "delay": number;
};
export type Ibosecf4lc3351 = {
    "proxy_type": Anonymize<Ibacj1mt14hfmr>;
    "delay": number;
    "index": number;
};
export type Iek6gniluqtauu = {
    "spawner": MultiAddress;
    "proxy_type": Anonymize<Ibacj1mt14hfmr>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type I73kgbdmt4m2cv = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I5dfuo8fd7io8d>;
    "call": TxCallData;
};
export type I6kkau03b30s77 = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<Ie9p5m20l5rv8s>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<Idqan23p1qau7n>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Ie9p5m20l5rv8s = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Idqan23p1qau7n = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Idmcmrk34p8gic = AnonymousEnum<{
    /**
     *Report voter equivocation/misbehavior. This method will verify the
     *equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence
     *will be reported.
     */
    "report_double_voting": Anonymize<I3pirohb0sp3ic>;
    /**
     *Report voter equivocation/misbehavior. This method will verify the
     *equivocation proof and validate the given key ownership proof
     *against the extracted offender. If both are valid, the offence
     *will be reported.
     *
     *This extrinsic must be called unsigned and it is expected that only
     *block authors will call it (validated in `ValidateUnsigned`), as such
     *if the block author is defined it will be defined as the equivocation
     *reporter.
     */
    "report_double_voting_unsigned": Anonymize<I3pirohb0sp3ic>;
    /**
     *Reset BEEFY consensus by setting a new BEEFY genesis at `delay_in_blocks` blocks in the
     *future.
     *
     *Note: `delay_in_blocks` has to be at least 1.
     */
    "set_new_genesis": Anonymize<Iemqna2uucuei9>;
    /**
     *Report fork voting equivocation. This method will verify the equivocation proof
     *and validate the given key ownership proof against the extracted offender.
     *If both are valid, the offence will be reported.
     */
    "report_fork_voting": Anonymize<Idrvp50hbkv2k2>;
    /**
     *Report fork voting equivocation. This method will verify the equivocation proof
     *and validate the given key ownership proof against the extracted offender.
     *If both are valid, the offence will be reported.
     *
     *This extrinsic must be called unsigned and it is expected that only
     *block authors will call it (validated in `ValidateUnsigned`), as such
     *if the block author is defined it will be defined as the equivocation
     *reporter.
     */
    "report_fork_voting_unsigned": Anonymize<Idrvp50hbkv2k2>;
    /**
     *Report future block voting equivocation. This method will verify the equivocation proof
     *and validate the given key ownership proof against the extracted offender.
     *If both are valid, the offence will be reported.
     */
    "report_future_block_voting": Anonymize<Ie11u326g2gsj3>;
    /**
     *Report future block voting equivocation. This method will verify the equivocation proof
     *and validate the given key ownership proof against the extracted offender.
     *If both are valid, the offence will be reported.
     *
     *This extrinsic must be called unsigned and it is expected that only
     *block authors will call it (validated in `ValidateUnsigned`), as such
     *if the block author is defined it will be defined as the equivocation
     *reporter.
     */
    "report_future_block_voting_unsigned": Anonymize<Ie11u326g2gsj3>;
}>;
export type Idrvp50hbkv2k2 = {
    "equivocation_proof": Anonymize<Ie1uhej0oopvs5>;
    "key_owner_proof": Anonymize<I3ia7aufsoj0l1>;
};
export type Ie1uhej0oopvs5 = {
    "vote": Anonymize<I3eao7ea0kppv8>;
    "ancestry_proof": Anonymize<I499ogutcm86mj>;
    "header": Anonymize<Ic952bubvq4k7d>;
};
export type I499ogutcm86mj = {
    "prev_peaks": Anonymize<Ic5m5lp1oioo8r>;
    "prev_leaf_count": bigint;
    "leaf_count": bigint;
    "items": Anonymize<I7b7fp94l51vcq>;
};
export type I7b7fp94l51vcq = Array<Anonymize<Idsa6q9es8ufjv>>;
export type Idsa6q9es8ufjv = [bigint, FixedSizeBinary<32>];
export type Ie11u326g2gsj3 = {
    "equivocation_proof": Anonymize<I3eao7ea0kppv8>;
    "key_owner_proof": Anonymize<I3ia7aufsoj0l1>;
};
export type I67t4bps9r5c4k = AnonymousEnum<{
    /**
     *Reap the `IdentityInfo` of `who` from the Identity pallet of `T`, unreserving any
     *deposits held and removing storage items associated with `who`.
     */
    "reap_identity": Anonymize<I4cbvqmqadhrea>;
    /**
     *Update the deposit of `who`. Meant to be called by the system with an XCM `Transact`
     *Instruction.
     */
    "poke_deposit": Anonymize<I4cbvqmqadhrea>;
}>;
export type I8tnfu4hpnpsg = AnonymousEnum<{
    /**
     *Schedule a para to be initialized at the start of the next session.
     *
     *This should only be used for TESTING and not on PRODUCTION chains. It automatically
     *assigns Coretime to the chain and increases the number of cores. Thus, there is no
     *running coretime chain required.
     */
    "sudo_schedule_para_initialize": Anonymize<I9geq5evbpu4im>;
    /**
     *Schedule a para to be cleaned up at the start of the next session.
     */
    "sudo_schedule_para_cleanup": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Upgrade a parathread (on-demand parachain) to a lease holding parachain
     */
    "sudo_schedule_parathread_upgrade": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Downgrade a lease holding parachain to an on-demand parachain
     */
    "sudo_schedule_parachain_downgrade": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Send a downward XCM to the given para.
     *
     *The given parachain should exist and the payload should not exceed the preconfigured
     *size `config.max_downward_message_size`.
     */
    "sudo_queue_downward_xcm": Anonymize<I7mlkc61s5tj4l>;
    /**
     *Forcefully establish a channel from the sender to the recipient.
     *
     *This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic followed by
     *`Hrmp::hrmp_accept_open_channel`.
     */
    "sudo_establish_hrmp_channel": Anonymize<Ic3430470j4mbv>;
}>;
export type I9geq5evbpu4im = {
    "id": number;
    "genesis": Anonymize<I2duhnt686rv0q>;
};
export type I7mlkc61s5tj4l = {
    "id": number;
    "xcm": XcmVersionedXcm;
};
export type Idlqs78vqqscm0 = AnonymousEnum<{
    /**
     *Assign a permanent parachain slot and immediately create a lease for it.
     */
    "assign_perm_parachain_slot": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Assign a temporary parachain slot. The function tries to create a lease for it
     *immediately if `SlotLeasePeriodStart::Current` is specified, and if the number
     *of currently active temporary slots is below `MaxTemporarySlotPerLeasePeriod`.
     */
    "assign_temp_parachain_slot": Anonymize<I6d2lhsacea7au>;
    /**
     *Unassign a permanent or temporary parachain slot
     */
    "unassign_parachain_slot": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Sets the storage value [`MaxPermanentSlots`].
     */
    "set_max_permanent_slots": Anonymize<I9d5h5irbki7mm>;
    /**
     *Sets the storage value [`MaxTemporarySlots`].
     */
    "set_max_temporary_slots": Anonymize<I9d5h5irbki7mm>;
}>;
export type I6d2lhsacea7au = {
    "id": number;
    "lease_period_start": PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart;
};
export type PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart = Enum<{
    "Current": undefined;
    "Next": undefined;
}>;
export declare const PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart: GetEnum<PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart>;
export type I8rur6c856tfev = AnonymousEnum<{
    /**
     *Add new validators to the set.
     *
     *The new validators will be active from current session + 2.
     */
    "register_validators": Anonymize<I97hfovkaaqb7h>;
    /**
     *Remove validators from the set.
     *
     *The removed validators will be deactivated from current session + 2.
     */
    "deregister_validators": Anonymize<I97hfovkaaqb7h>;
}>;
export type I97hfovkaaqb7h = {
    "validators": Anonymize<Ia2lhg7l2hilo3>;
};
export type I9rkc7eqejp3rj = AnonymousEnum<{
    /**
     *A dispatch that will fill the block weight up to the given ratio.
     */
    "fill_block": Anonymize<Ienjibnb78vnl0>;
    "trigger_defensive": undefined;
}>;
export type Ienjibnb78vnl0 = {
    "ratio": number;
};
export type Ifudf00c2v093a = AnonymousEnum<{
    /**
     *Authenticates the sudo key and dispatches a function call with `Root` origin.
     */
    "sudo": Anonymize<I8s0f6ab5kodm9>;
    /**
     *Authenticates the sudo key and dispatches a function call with `Root` origin.
     *This function does not check the weight of the call, and instead allows the
     *Sudo user to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "sudo_unchecked_weight": Anonymize<I4cfi81g4bqp5u>;
    /**
     *Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
     *key.
     */
    "set_key": Anonymize<I8k3rnvpeeh4hv>;
    /**
     *Authenticates the sudo key and dispatches a function call with `Signed` origin from
     *a given account.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "sudo_as": Anonymize<I6vire3mpbknd1>;
    /**
     *Permanently removes the sudo key.
     *
     ***This cannot be un-done.**
     */
    "remove_key": undefined;
}>;
export type I8k3rnvpeeh4hv = {
    "new": MultiAddress;
};
export type I6vire3mpbknd1 = {
    "who": MultiAddress;
    "call": TxCallData;
};
export type I9qb925vapit68 = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "Babe": Anonymize<I1jeo0dpbkma5g>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Indices": Anonymize<I66vlm8f4l1oll>;
    "Balances": Anonymize<I9svldsp29mh87>;
    "Parameters": Anonymize<I37004qavmmmjh>;
    "Session": Anonymize<Iceajactc9a8pc>;
    "Grandpa": Anonymize<I5u9ggmn8umfqm>;
    "Treasury": Anonymize<I1s28h18nhih63>;
    "ConvictionVoting": Anonymize<Ie5kd08tutk56t>;
    "Referenda": Anonymize<I4n17hls1edfih>;
    "FellowshipCollective": Anonymize<I5bt1lc4doakmu>;
    "FellowshipReferenda": Anonymize<I4n17hls1edfih>;
    "Whitelist": Anonymize<I5lsn6nfhm4pdt>;
    "Claims": Anonymize<Id0dj18ct09hlp>;
    "Utility": Anonymize<Ibi249o5trugie>;
    "Identity": Anonymize<I276doi9hm655d>;
    "Society": Anonymize<Iaup05df56f0nc>;
    "Recovery": Anonymize<Imikl0elbjmnn>;
    "Vesting": Anonymize<Icgf8vmtkbnu4u>;
    "Scheduler": Anonymize<I6jhj2prghg0ig>;
    "Proxy": Anonymize<I36vdr0hbe46am>;
    "Multisig": Anonymize<I6kkau03b30s77>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "AssetRate": Anonymize<I85dm8mgt48css>;
    "Bounties": Anonymize<I91kpi5kjh9on2>;
    "ChildBounties": Anonymize<I1b6drdhvt5hl9>;
    "Nis": Anonymize<Iaq5q67idam8ll>;
    "NisCounterpartBalances": Anonymize<I9svldsp29mh87>;
    "Configuration": Anonymize<Ia9ptue949ognv>;
    "ParasShared": undefined;
    "ParaInclusion": undefined;
    "ParaInherent": Anonymize<Id5l4f3jqtnb0u>;
    "Paras": Anonymize<Ie2dden5k4kk7t>;
    "Initializer": Anonymize<Ieggtnkc96vvt7>;
    "Hrmp": Anonymize<I45adic8nko129>;
    "ParasDisputes": Anonymize<Ifkh1ep7g9h3rv>;
    "ParasSlashing": Anonymize<I3jj054kp2bjol>;
    "MessageQueue": Anonymize<I3lic4llm6egbr>;
    "OnDemandAssignmentProvider": Anonymize<I9s7urueli180g>;
    "Registrar": Anonymize<Icclqj5sge2nc7>;
    "Slots": Anonymize<Iafhis924j14hg>;
    "Auctions": Anonymize<I4a8qeimc5p3qn>;
    "Crowdloan": Anonymize<Iaj4q75nu5v2i2>;
    "Coretime": Anonymize<Idu7bbtd2jtnb9>;
    "XcmPallet": Anonymize<I9nbjvlrb9bp1g>;
    "Beefy": Anonymize<Idmcmrk34p8gic>;
    "IdentityMigrator": Anonymize<I67t4bps9r5c4k>;
    "ParasSudoWrapper": Anonymize<I8tnfu4hpnpsg>;
    "AssignedSlots": Anonymize<Idlqs78vqqscm0>;
    "ValidatorManager": Anonymize<I8rur6c856tfev>;
    "StateTrieMigration": Anonymize<I39l72gdmkk30t>;
    "RootTesting": Anonymize<I9rkc7eqejp3rj>;
    "Sudo": Anonymize<Ifudf00c2v093a>;
}>;
export type I8dbq35rnf08qf = ResultPayload<Anonymize<I3kkpb5u80f9v9>, Anonymize<I55ku9c5gk50hb>>;
export type I3kkpb5u80f9v9 = {
    "execution_result": Anonymize<I6dq26ml3560jf>;
    "emitted_events": Anonymize<I8jprt4rdj6rj0>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I8jprt4rdj6rj0 = Array<Anonymize<I3jc9icijh2rgp>>;
export type I79da1aesgo8mv = ResultPayload<Anonymize<I5jfv3671dgqv2>, Anonymize<I55ku9c5gk50hb>>;
export type I5jfv3671dgqv2 = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<I8jprt4rdj6rj0>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type Iaabtj68sg4j5a = ResultPayload<Anonymize<I39lk73h89tehn>, TransactionValidityError>;
export type I25plekc1moieu = {
    "vote": Anonymize<I3eao7ea0kppv8>;
    "ancestry_proof": Binary;
    "header": Anonymize<Ic952bubvq4k7d>;
};
export type Iep6r71alq30pn = Array<Anonymize<I8s103gmoicltp>>;
export type I8s103gmoicltp = {
    "phase": Phase;
    "event": Anonymize<I5urk4g8ujr7a4>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I5urk4g8ujr7a4 = AnonymousEnum<{
    "System": Anonymize<Ia6mpmav8kg98d>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "AssetTxPayment": Anonymize<Ifagg2q2o5fgjl>;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "MessageQueue": Anonymize<I2kosejppk3jon>;
    "Utility": Anonymize<I37jt57kntmti2>;
    "Multisig": Anonymize<I8n3oeu3cpmjqt>;
    "Proxy": Anonymize<Ibhnfkvhvcrf6c>;
    "ToWestendXcmRouter": Anonymize<Ift4p4jnj5bri1>;
    "Assets": Anonymize<I6avancvg8fd05>;
    "Uniques": Anonymize<Ia0j71vjrjqu9p>;
    "Nfts": Anonymize<I6qicn8jn4fftj>;
    "ForeignAssets": Anonymize<I81i2fkdo6nple>;
    "NftFractionalization": Anonymize<I41s7j0hsp2u0b>;
    "PoolAssets": Anonymize<I6avancvg8fd05>;
    "AssetConversion": Anonymize<I31lqq0fjfmnfv>;
    "AssetsFreezer": Anonymize<I7omheqbc53plq>;
    "ForeignAssetsFreezer": Anonymize<I333qu8mt9e30l>;
    "PoolAssetsFreezer": Anonymize<I7omheqbc53plq>;
    "AssetConversionMigration": Anonymize<Icmi8oiqg2biti>;
}>;
export type Ia6mpmav8kg98d = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<Icmnp3seup5048>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type Icmnp3seup5048 = {
    "dispatch_error": Anonymize<Idb44iss70omh4>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type Idb44iss70omh4 = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I4dfdrg2cpnn3q>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I4dfdrg2cpnn3q = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "Timestamp": undefined;
    "ParachainInfo": undefined;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "AssetTxPayment": undefined;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "XcmpQueue": Anonymize<Idnnbndsjjeqqs>;
    "PolkadotXcm": Anonymize<I87j95aq93d7dq>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "ToWestendXcmRouter": undefined;
    "Assets": Anonymize<Iapedqb0veh71>;
    "Uniques": Anonymize<Ienq2ge2rhv4jm>;
    "Nfts": Anonymize<I58r1150kmj18u>;
    "ForeignAssets": Anonymize<Iapedqb0veh71>;
    "NftFractionalization": Anonymize<Ib24bvufha821j>;
    "PoolAssets": Anonymize<Iapedqb0veh71>;
    "AssetConversion": Anonymize<I4u78hb23uhvi2>;
    "AssetsFreezer": Anonymize<I4dd4ctqfnk5kr>;
    "ForeignAssetsFreezer": Anonymize<I4dd4ctqfnk5kr>;
    "PoolAssetsFreezer": Anonymize<I4dd4ctqfnk5kr>;
    "AssetConversionMigration": Anonymize<I1t0slqjho4lh4>;
}>;
export type I4dd4ctqfnk5kr = AnonymousEnum<{
    /**
     *Number of freezes on an account would exceed `MaxFreezes`.
     */
    "TooManyFreezes": undefined;
}>;
export type I1t0slqjho4lh4 = AnonymousEnum<{
    /**
     *Provided asset pair is not supported for pool.
     */
    "InvalidAssetPair": undefined;
    /**
     *The pool doesn't exist.
     */
    "PoolNotFound": undefined;
    /**
     *Pool's balance cannot be zero.
     */
    "ZeroBalance": undefined;
    /**
     *Indicates a partial transfer of balance to the new account during a migration.
     */
    "PartialTransfer": undefined;
}>;
export type I37jt57kntmti2 = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<I3cdmbbljpm4r4>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<Ibi2eqcirs7khr>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<If0ip15ume9htr>;
}>;
export type I3cdmbbljpm4r4 = {
    "index": number;
    "error": Anonymize<Idb44iss70omh4>;
};
export type Ibi2eqcirs7khr = {
    "error": Anonymize<Idb44iss70omh4>;
};
export type If0ip15ume9htr = {
    "result": Anonymize<I6ahk67gc97ucb>;
};
export type I6ahk67gc97ucb = ResultPayload<undefined, Anonymize<Idb44iss70omh4>>;
export type I8n3oeu3cpmjqt = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I7n66lbvia9mpt>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I7n66lbvia9mpt = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I6ahk67gc97ucb>;
};
export type Ibhnfkvhvcrf6c = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<If0ip15ume9htr>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ie7cuj84ohvg56>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I8ioopvokvl3ud>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I8ioopvokvl3ud>;
}>;
export type Ift4p4jnj5bri1 = AnonymousEnum<{
    /**
     *Delivery fee factor has been decreased.
     */
    "DeliveryFeeFactorDecreased": Anonymize<Ie8hpsm3jhsvo3>;
    /**
     *Delivery fee factor has been increased.
     */
    "DeliveryFeeFactorIncreased": Anonymize<Ie8hpsm3jhsvo3>;
}>;
export type Ie8hpsm3jhsvo3 = {
    /**
     *New value of the `DeliveryFeeFactor`.
     */
    "new_value": bigint;
};
export type I7omheqbc53plq = AnonymousEnum<{
    "Frozen": Anonymize<Idusmq77988cmt>;
    "Thawed": Anonymize<Idusmq77988cmt>;
}>;
export type I333qu8mt9e30l = AnonymousEnum<{
    "Frozen": Anonymize<I42gee3b9iotl3>;
    "Thawed": Anonymize<I42gee3b9iotl3>;
}>;
export type Icmi8oiqg2biti = AnonymousEnum<{
    /**
     *Indicates that a pool has been migrated to the new account ID.
     */
    "MigratedToNewAccount": Anonymize<I39hnp3oiidp2i>;
}>;
export type I39hnp3oiidp2i = {
    /**
     *Pool's ID.
     */
    "pool_id": Anonymize<Id0as9l3s817qs>;
    /**
     *Pool's prior account ID.
     */
    "prior_account": SS58String;
    /**
     *Pool's new account ID.
     */
    "new_account": SS58String;
};
export type I1qnkddanljven = Array<Anonymize<I2oj9cslmaqn2q>>;
export type I2oj9cslmaqn2q = {
    "id": Anonymize<I4noh7b3r61d5i>;
    "amount": bigint;
};
export type I4noh7b3r61d5i = AnonymousEnum<{
    "NftFractionalization": Anonymize<I8bf8ma56td7eh>;
}>;
export type I5kev21p7u6ajb = AnonymousEnum<{
    /**
     *Set the current validation data.
     *
     *This should be invoked exactly once per block. It will panic at the finalization
     *phase if the call was not invoked.
     *
     *The dispatch origin for this call must be `Inherent`
     *
     *As a side effect, this function upgrades the current validation function
     *if the appropriate time has come.
     */
    "set_validation_data": Anonymize<I60v7bikk54tpu>;
    "sudo_send_upward_message": Anonymize<Ifpj261e8s63m3>;
}>;
export type I3nemso0f0oce8 = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<I6mahckc73q3cs>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<I8a9e2stm5p30l>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<I6mahckc73q3cs>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<If6v5itji4rjo>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<I6mahckc73q3cs>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<I97v4sqr61qvjh>;
}>;
export type I6mahckc73q3cs = {
    "calls": Anonymize<Ialktr8cmq7vp0>;
};
export type Ialktr8cmq7vp0 = Array<TxCallData>;
export type I8a9e2stm5p30l = {
    "index": number;
    "call": TxCallData;
};
export type If6v5itji4rjo = {
    "as_origin": Anonymize<I48v5riethqckl>;
    "call": TxCallData;
};
export type I97v4sqr61qvjh = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I1vclv36as3glh = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<Iep045leqeq26j>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<Ifenifpb8c4eua>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Iep045leqeq26j = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Ifenifpb8c4eua = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I8adrcb08eeqop = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<I8jssk3qb2ii4c>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Iovrcu9bfelfq>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Iovrcu9bfelfq>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<Iefr8jgtgfk8um>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<I3j05hul54uj7q>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<Ia5solf5a3q97l>;
}>;
export type I8jssk3qb2ii4c = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I7rk1n3vg3et43>;
    "call": TxCallData;
};
export type Ia5solf5a3q97l = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<I7rk1n3vg3et43>;
    "call": TxCallData;
};
export type I84851acvod2ic = AnonymousEnum<{
    /**
     *Issue a new class of fungible assets from a public origin.
     *
     *This new asset class has no assets initially and its owner is the origin.
     *
     *The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
     *
     *Funds of sender are reserved by `AssetDeposit`.
     *
     *Parameters:
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `admin`: The admin of this class of assets. The admin is the initial address of each
     *member of the asset class's admin team.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `Created` event when successful.
     *
     *Weight: `O(1)`
     */
    "create": Anonymize<Ic357tcepuvo5c>;
    /**
     *Issue a new class of fungible assets from a privileged origin.
     *
     *This new asset class has no assets initially.
     *
     *The origin must conform to `ForceOrigin`.
     *
     *Unlike `create`, no funds are reserved.
     *
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `owner`: The owner of this class of assets. The owner has full superuser permissions
     *over this asset, but may later change and configure the permissions using
     *`transfer_ownership` and `set_team`.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `ForceCreated` event when successful.
     *
     *Weight: `O(1)`
     */
    "force_create": Anonymize<I2rnoam876ruhj>;
    /**
     *Start the process of destroying a fungible asset class.
     *
     *`start_destroy` is the first in a series of extrinsics that should be called, to allow
     *destruction of an asset class.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     */
    "start_destroy": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Destroy all accounts associated with a given asset.
     *
     *`destroy_accounts` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedAccounts` event.
     */
    "destroy_accounts": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
     *
     *`destroy_approvals` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedApprovals` event.
     */
    "destroy_approvals": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Complete destroying asset and unreserve currency.
     *
     *`finish_destroy` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state. All accounts or approvals should be destroyed before
     *hand.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each successful call emits the `Event::Destroyed` event.
     */
    "finish_destroy": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Mint assets of a particular class.
     *
     *The origin must be Signed and the sender must be the Issuer of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount minted.
     *- `beneficiary`: The account to be credited with the minted assets.
     *- `amount`: The amount of the asset to be minted.
     *
     *Emits `Issued` event when successful.
     *
     *Weight: `O(1)`
     *Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
     */
    "mint": Anonymize<Ib3qnc19gu633c>;
    /**
     *Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
     *
     *Origin must be Signed and the sender should be the Manager of the asset `id`.
     *
     *Bails with `NoAccount` if the `who` is already dead.
     *
     *- `id`: The identifier of the asset to have some amount burned.
     *- `who`: The account to be debited from.
     *- `amount`: The maximum amount by which `who`'s balance should be reduced.
     *
     *Emits `Burned` with the actual amount burned. If this takes the balance to below the
     *minimum for the asset, then the amount burned is increased to take it to zero.
     *
     *Weight: `O(1)`
     *Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
     */
    "burn": Anonymize<Ifira6u9hi7cu1>;
    /**
     *Move some assets from the sender account to another.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer": Anonymize<I72tqocvdoqfff>;
    /**
     *Move some assets from the sender account to another, keeping the sender account alive.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer_keep_alive": Anonymize<I72tqocvdoqfff>;
    /**
     *Move some assets from one account to another.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `source`: The account to be debited.
     *- `dest`: The account to be credited.
     *- `amount`: The amount by which the `source`'s balance of assets should be reduced and
     *`dest`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the `source` balance above zero but
     *below the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
     *`dest`.
     */
    "force_transfer": Anonymize<I2i27f3sfmvc05>;
    /**
     *Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
     *must already exist as an entry in `Account`s of the asset. If you want to freeze an
     *account that does not have an entry, use `touch_other` first.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze": Anonymize<I1nlrtd1epki2d>;
    /**
     *Allow unprivileged transfers to and from an account again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be unfrozen.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw": Anonymize<I1nlrtd1epki2d>;
    /**
     *Disallow further unprivileged transfers for the asset class.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze_asset": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Allow unprivileged transfers for the asset again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be thawed.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw_asset": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Change the Owner of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *
     *Emits `OwnerChanged`.
     *
     *Weight: `O(1)`
     */
    "transfer_ownership": Anonymize<I3abtumcmempjs>;
    /**
     *Change the Issuer, Admin and Freezer of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *
     *Emits `TeamChanged`.
     *
     *Weight: `O(1)`
     */
    "set_team": Anonymize<Id81m8flopt8ha>;
    /**
     *Set the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Funds of sender are reserved according to the formula:
     *`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
     *account any already reserved funds.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_metadata": Anonymize<I8hff7chabggkd>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Any deposit is freed for the asset owner.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_metadata": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Force the metadata for an asset to some value.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is left alone.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
     */
    "force_set_metadata": Anonymize<I49i39mtj1ivbs>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is returned.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "force_clear_metadata": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Alter the attributes of a given asset.
     *
     *Origin must be `ForceOrigin`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
     *value to account for the state bloat associated with its balance storage. If set to
     *`true`, then non-zero balances may be stored without a `consumer` reference (and thus
     *an ED in the Balances pallet or whatever else is used to control user-account state
     *growth).
     *- `is_frozen`: Whether this asset class is frozen except for permissioned/admin
     *instructions.
     *
     *Emits `AssetStatusChanged` with the identity of the asset.
     *
     *Weight: `O(1)`
     */
    "force_asset_status": Anonymize<Ifkr2kcak2vto1>;
    /**
     *Approve an amount of asset for transfer by a delegated third-party account.
     *
     *Origin must be Signed.
     *
     *Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
     *for the purpose of holding the approval. If some non-zero amount of assets is already
     *approved from signing account to `delegate`, then it is topped up or unreserved to
     *meet the right value.
     *
     *NOTE: The signing account does not need to own `amount` of assets at the point of
     *making this call.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account to delegate permission to transfer asset.
     *- `amount`: The amount of asset that may be transferred by `delegate`. If there is
     *already an approval in place, then this acts additively.
     *
     *Emits `ApprovedTransfer` on success.
     *
     *Weight: `O(1)`
     */
    "approve_transfer": Anonymize<I1ju6r8q0cs9jt>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be Signed and there must be an approval in place between signer and
     *`delegate`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "cancel_approval": Anonymize<I4kpeq6j7cd5bu>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be either ForceOrigin or Signed origin with the signer being the Admin
     *account of the asset `id`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "force_cancel_approval": Anonymize<I5na1ka76k6811>;
    /**
     *Transfer some asset balance from a previously delegated account to some third-party
     *account.
     *
     *Origin must be Signed and there must be an approval in place by the `owner` to the
     *signer.
     *
     *If the entire amount approved for transfer is transferred, then any deposit previously
     *reserved by `approve_transfer` is unreserved.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The account which previously approved for a transfer of at least `amount` and
     *from which the asset balance will be withdrawn.
     *- `destination`: The account to which the asset balance of `amount` will be transferred.
     *- `amount`: The amount of assets to transfer.
     *
     *Emits `TransferredApproved` on success.
     *
     *Weight: `O(1)`
     */
    "transfer_approved": Anonymize<I59mhdb9omdqfa>;
    /**
     *Create an asset account for non-provider assets.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
     *  to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch": Anonymize<Ic5b47dj4coa3r>;
    /**
     *Return the deposit (if any) of an asset account or a consumer reference (if any) of an
     *account.
     *
     *The origin must be Signed.
     *
     *- `id`: The identifier of the asset for which the caller would like the deposit
     *  refunded.
     *- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund": Anonymize<I9vl5kpk0fpakt>;
    /**
     *Sets the minimum balance of an asset.
     *
     *Only works if there aren't any accounts that are holding the asset or if
     *the new value of `min_balance` is less than the old one.
     *
     *Origin must be Signed and the sender has to be the Owner of the
     *asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `min_balance`: The new value of `min_balance`.
     *
     *Emits `AssetMinBalanceChanged` event when successful.
     */
    "set_min_balance": Anonymize<I717jt61hu19b4>;
    /**
     *Create an asset account for `who`.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
     *  must have sufficient funds for a deposit to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *- `who`: The account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch_other": Anonymize<I1nlrtd1epki2d>;
    /**
     *Return the deposit (if any) of a target asset account. Useful if you are the depositor.
     *
     *The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
     *order to burn a non-zero balance of the asset, the caller must be the account and should
     *use `refund`.
     *
     *- `id`: The identifier of the asset for the account holding a deposit.
     *- `who`: The account to refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund_other": Anonymize<I1nlrtd1epki2d>;
    /**
     *Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the account's asset.
     *- `who`: The account to be unblocked.
     *
     *Emits `Blocked`.
     *
     *Weight: `O(1)`
     */
    "block": Anonymize<I1nlrtd1epki2d>;
    /**
     *Transfer the entire transferable balance from the caller asset account.
     *
     *NOTE: This function only attempts to transfer _transferable_ balances. This means that
     *any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
     *transferred by this function. To ensure that this function results in a killed account,
     *you might need to prepare the account by removing any reference counters, storage
     *deposits, etc...
     *
     *The dispatch origin of this call must be Signed.
     *
     *- `id`: The identifier of the asset for the account holding a deposit.
     *- `dest`: The recipient of the transfer.
     *- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
     *  of the funds the asset account has, causing the sender asset account to be killed
     *  (false), or transfer everything except at least the minimum balance, which will
     *  guarantee to keep the sender asset account alive (true).
     */
    "transfer_all": Anonymize<I7f7v8192r1lmq>;
}>;
export type I7f7v8192r1lmq = {
    "id": number;
    "dest": MultiAddress;
    "keep_alive": boolean;
};
export type I8ktel4pq9nbjk = AnonymousEnum<{
    /**
     *Issue a new class of fungible assets from a public origin.
     *
     *This new asset class has no assets initially and its owner is the origin.
     *
     *The origin must conform to the configured `CreateOrigin` and have sufficient funds free.
     *
     *Funds of sender are reserved by `AssetDeposit`.
     *
     *Parameters:
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `admin`: The admin of this class of assets. The admin is the initial address of each
     *member of the asset class's admin team.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `Created` event when successful.
     *
     *Weight: `O(1)`
     */
    "create": Anonymize<I7p44cr9g492tc>;
    /**
     *Issue a new class of fungible assets from a privileged origin.
     *
     *This new asset class has no assets initially.
     *
     *The origin must conform to `ForceOrigin`.
     *
     *Unlike `create`, no funds are reserved.
     *
     *- `id`: The identifier of the new asset. This must not be currently in use to identify
     *an existing asset. If [`NextAssetId`] is set, then this must be equal to it.
     *- `owner`: The owner of this class of assets. The owner has full superuser permissions
     *over this asset, but may later change and configure the permissions using
     *`transfer_ownership` and `set_team`.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *
     *Emits `ForceCreated` event when successful.
     *
     *Weight: `O(1)`
     */
    "force_create": Anonymize<Ibn8gm2jugarek>;
    /**
     *Start the process of destroying a fungible asset class.
     *
     *`start_destroy` is the first in a series of extrinsics that should be called, to allow
     *destruction of an asset class.
     *
     *The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     */
    "start_destroy": Anonymize<Iekg0q69obfi0f>;
    /**
     *Destroy all accounts associated with a given asset.
     *
     *`destroy_accounts` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedAccounts` event.
     */
    "destroy_accounts": Anonymize<Iekg0q69obfi0f>;
    /**
     *Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).
     *
     *`destroy_approvals` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state.
     *
     *Due to weight restrictions, this function may need to be called multiple times to fully
     *destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each call emits the `Event::DestroyedApprovals` event.
     */
    "destroy_approvals": Anonymize<Iekg0q69obfi0f>;
    /**
     *Complete destroying asset and unreserve currency.
     *
     *`finish_destroy` should only be called after `start_destroy` has been called, and the
     *asset is in a `Destroying` state. All accounts or approvals should be destroyed before
     *hand.
     *
     *- `id`: The identifier of the asset to be destroyed. This must identify an existing
     *  asset.
     *
     *Each successful call emits the `Event::Destroyed` event.
     */
    "finish_destroy": Anonymize<Iekg0q69obfi0f>;
    /**
     *Mint assets of a particular class.
     *
     *The origin must be Signed and the sender must be the Issuer of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount minted.
     *- `beneficiary`: The account to be credited with the minted assets.
     *- `amount`: The amount of the asset to be minted.
     *
     *Emits `Issued` event when successful.
     *
     *Weight: `O(1)`
     *Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`.
     */
    "mint": Anonymize<I8dh2oimnihksg>;
    /**
     *Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.
     *
     *Origin must be Signed and the sender should be the Manager of the asset `id`.
     *
     *Bails with `NoAccount` if the `who` is already dead.
     *
     *- `id`: The identifier of the asset to have some amount burned.
     *- `who`: The account to be debited from.
     *- `amount`: The maximum amount by which `who`'s balance should be reduced.
     *
     *Emits `Burned` with the actual amount burned. If this takes the balance to below the
     *minimum for the asset, then the amount burned is increased to take it to zero.
     *
     *Weight: `O(1)`
     *Modes: Post-existence of `who`; Pre & post Zombie-status of `who`.
     */
    "burn": Anonymize<Ib8mfkapk4u9hs>;
    /**
     *Move some assets from the sender account to another.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer": Anonymize<Ikm68gg7akl51>;
    /**
     *Move some assets from the sender account to another, keeping the sender account alive.
     *
     *Origin must be Signed.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `target`: The account to be credited.
     *- `amount`: The amount by which the sender's balance of assets should be reduced and
     *`target`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the sender balance above zero but below
     *the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of
     *`target`.
     */
    "transfer_keep_alive": Anonymize<Ikm68gg7akl51>;
    /**
     *Move some assets from one account to another.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to have some amount transferred.
     *- `source`: The account to be debited.
     *- `dest`: The account to be credited.
     *- `amount`: The amount by which the `source`'s balance of assets should be reduced and
     *`dest`'s balance increased. The amount actually transferred may be slightly greater in
     *the case that the transfer would otherwise take the `source` balance above zero but
     *below the minimum balance. Must be greater than zero.
     *
     *Emits `Transferred` with the actual amount transferred. If this takes the source balance
     *to below the minimum for the asset, then the amount transferred is increased to take it
     *to zero.
     *
     *Weight: `O(1)`
     *Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of
     *`dest`.
     */
    "force_transfer": Anonymize<If3csb5ben9n1v>;
    /**
     *Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`
     *must already exist as an entry in `Account`s of the asset. If you want to freeze an
     *account that does not have an entry, use `touch_other` first.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze": Anonymize<If90dk6l9lmtfv>;
    /**
     *Allow unprivileged transfers to and from an account again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `who`: The account to be unfrozen.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw": Anonymize<If90dk6l9lmtfv>;
    /**
     *Disallow further unprivileged transfers for the asset class.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *
     *Emits `Frozen`.
     *
     *Weight: `O(1)`
     */
    "freeze_asset": Anonymize<Iekg0q69obfi0f>;
    /**
     *Allow unprivileged transfers for the asset again.
     *
     *Origin must be Signed and the sender should be the Admin of the asset `id`.
     *
     *- `id`: The identifier of the asset to be thawed.
     *
     *Emits `Thawed`.
     *
     *Weight: `O(1)`
     */
    "thaw_asset": Anonymize<Iekg0q69obfi0f>;
    /**
     *Change the Owner of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *
     *Emits `OwnerChanged`.
     *
     *Weight: `O(1)`
     */
    "transfer_ownership": Anonymize<Ifoahm8m43v9q2>;
    /**
     *Change the Issuer, Admin and Freezer of an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *- `id`: The identifier of the asset to be frozen.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *
     *Emits `TeamChanged`.
     *
     *Weight: `O(1)`
     */
    "set_team": Anonymize<I1rrgcjpoiot5q>;
    /**
     *Set the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Funds of sender are reserved according to the formula:
     *`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into
     *account any already reserved funds.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(1)`
     */
    "set_metadata": Anonymize<I2hc61n7o8dso4>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be Signed and the sender should be the Owner of the asset `id`.
     *
     *Any deposit is freed for the asset owner.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "clear_metadata": Anonymize<Iekg0q69obfi0f>;
    /**
     *Force the metadata for an asset to some value.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is left alone.
     *
     *- `id`: The identifier of the asset to update.
     *- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.
     *- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.
     *- `decimals`: The number of decimals this asset uses to represent one unit.
     *
     *Emits `MetadataSet`.
     *
     *Weight: `O(N + S)` where N and S are the length of the name and symbol respectively.
     */
    "force_set_metadata": Anonymize<I5787kv2d05f94>;
    /**
     *Clear the metadata for an asset.
     *
     *Origin must be ForceOrigin.
     *
     *Any deposit is returned.
     *
     *- `id`: The identifier of the asset to clear.
     *
     *Emits `MetadataCleared`.
     *
     *Weight: `O(1)`
     */
    "force_clear_metadata": Anonymize<Iekg0q69obfi0f>;
    /**
     *Alter the attributes of a given asset.
     *
     *Origin must be `ForceOrigin`.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The new Owner of this asset.
     *- `issuer`: The new Issuer of this asset.
     *- `admin`: The new Admin of this asset.
     *- `freezer`: The new Freezer of this asset.
     *- `min_balance`: The minimum balance of this new asset that any single account must
     *have. If an account's balance is reduced below this, then it collapses to zero.
     *- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient
     *value to account for the state bloat associated with its balance storage. If set to
     *`true`, then non-zero balances may be stored without a `consumer` reference (and thus
     *an ED in the Balances pallet or whatever else is used to control user-account state
     *growth).
     *- `is_frozen`: Whether this asset class is frozen except for permissioned/admin
     *instructions.
     *
     *Emits `AssetStatusChanged` with the identity of the asset.
     *
     *Weight: `O(1)`
     */
    "force_asset_status": Anonymize<Ia8g1imc1kclf4>;
    /**
     *Approve an amount of asset for transfer by a delegated third-party account.
     *
     *Origin must be Signed.
     *
     *Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account
     *for the purpose of holding the approval. If some non-zero amount of assets is already
     *approved from signing account to `delegate`, then it is topped up or unreserved to
     *meet the right value.
     *
     *NOTE: The signing account does not need to own `amount` of assets at the point of
     *making this call.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account to delegate permission to transfer asset.
     *- `amount`: The amount of asset that may be transferred by `delegate`. If there is
     *already an approval in place, then this acts additively.
     *
     *Emits `ApprovedTransfer` on success.
     *
     *Weight: `O(1)`
     */
    "approve_transfer": Anonymize<Id26ouo5lt2551>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be Signed and there must be an approval in place between signer and
     *`delegate`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "cancel_approval": Anonymize<Iap1up3prsbtvg>;
    /**
     *Cancel all of some asset approved for delegated transfer by a third-party account.
     *
     *Origin must be either ForceOrigin or Signed origin with the signer being the Admin
     *account of the asset `id`.
     *
     *Unreserves any deposit previously reserved by `approve_transfer` for the approval.
     *
     *- `id`: The identifier of the asset.
     *- `delegate`: The account delegated permission to transfer asset.
     *
     *Emits `ApprovalCancelled` on success.
     *
     *Weight: `O(1)`
     */
    "force_cancel_approval": Anonymize<I8m5mvhifj6pm>;
    /**
     *Transfer some asset balance from a previously delegated account to some third-party
     *account.
     *
     *Origin must be Signed and there must be an approval in place by the `owner` to the
     *signer.
     *
     *If the entire amount approved for transfer is transferred, then any deposit previously
     *reserved by `approve_transfer` is unreserved.
     *
     *- `id`: The identifier of the asset.
     *- `owner`: The account which previously approved for a transfer of at least `amount` and
     *from which the asset balance will be withdrawn.
     *- `destination`: The account to which the asset balance of `amount` will be transferred.
     *- `amount`: The amount of assets to transfer.
     *
     *Emits `TransferredApproved` on success.
     *
     *Weight: `O(1)`
     */
    "transfer_approved": Anonymize<I8ucc4915s9qvj>;
    /**
     *Create an asset account for non-provider assets.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit
     *  to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch": Anonymize<Iekg0q69obfi0f>;
    /**
     *Return the deposit (if any) of an asset account or a consumer reference (if any) of an
     *account.
     *
     *The origin must be Signed.
     *
     *- `id`: The identifier of the asset for which the caller would like the deposit
     *  refunded.
     *- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund": Anonymize<I1pjcv2ha0997v>;
    /**
     *Sets the minimum balance of an asset.
     *
     *Only works if there aren't any accounts that are holding the asset or if
     *the new value of `min_balance` is less than the old one.
     *
     *Origin must be Signed and the sender has to be the Owner of the
     *asset `id`.
     *
     *- `id`: The identifier of the asset.
     *- `min_balance`: The new value of `min_balance`.
     *
     *Emits `AssetMinBalanceChanged` event when successful.
     */
    "set_min_balance": Anonymize<Ifnm6nai2i47ar>;
    /**
     *Create an asset account for `who`.
     *
     *A deposit will be taken from the signer account.
     *
     *- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account
     *  must have sufficient funds for a deposit to be taken.
     *- `id`: The identifier of the asset for the account to be created.
     *- `who`: The account to be created.
     *
     *Emits `Touched` event when successful.
     */
    "touch_other": Anonymize<If90dk6l9lmtfv>;
    /**
     *Return the deposit (if any) of a target asset account. Useful if you are the depositor.
     *
     *The origin must be Signed and either the account owner, depositor, or asset `Admin`. In
     *order to burn a non-zero balance of the asset, the caller must be the account and should
     *use `refund`.
     *
     *- `id`: The identifier of the asset for the account holding a deposit.
     *- `who`: The account to refund.
     *
     *Emits `Refunded` event when successful.
     */
    "refund_other": Anonymize<If90dk6l9lmtfv>;
    /**
     *Disallow further unprivileged transfers of an asset `id` to and from an account `who`.
     *
     *Origin must be Signed and the sender should be the Freezer of the asset `id`.
     *
     *- `id`: The identifier of the account's asset.
     *- `who`: The account to be unblocked.
     *
     *Emits `Blocked`.
     *
     *Weight: `O(1)`
     */
    "block": Anonymize<If90dk6l9lmtfv>;
    /**
     *Transfer the entire transferable balance from the caller asset account.
     *
     *NOTE: This function only attempts to transfer _transferable_ balances. This means that
     *any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be
     *transferred by this function. To ensure that this function results in a killed account,
     *you might need to prepare the account by removing any reference counters, storage
     *deposits, etc...
     *
     *The dispatch origin of this call must be Signed.
     *
     *- `id`: The identifier of the asset for the account holding a deposit.
     *- `dest`: The recipient of the transfer.
     *- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
     *  of the funds the asset account has, causing the sender asset account to be killed
     *  (false), or transfer everything except at least the minimum balance, which will
     *  guarantee to keep the sender asset account alive (true).
     */
    "transfer_all": Anonymize<Ic6a3rlcsqmjnp>;
}>;
export type Ic6a3rlcsqmjnp = {
    "id": Anonymize<I4c0s5cioidn76>;
    "dest": MultiAddress;
    "keep_alive": boolean;
};
export type I45a9m9dkljdu8 = AnonymousEnum<{
    /**
     *Migrates an existing pool to a new account ID derivation method for a given asset pair.
     *If the migration is successful, transaction fees are refunded to the caller.
     *
     *Must be signed.
     */
    "migrate_to_new_account": Anonymize<I8eoqk45hnet27>;
}>;
export type I1qr7k9oo5fdrg = ResultPayload<Anonymize<I6ahk67gc97ucb>, TransactionValidityError>;
export type I8g3e3pmb9v816 = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "ParachainSystem": Anonymize<I5kev21p7u6ajb>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "ParachainInfo": undefined;
    "Balances": Anonymize<I9svldsp29mh87>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I9nbjvlrb9bp1g>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Utility": Anonymize<I3nemso0f0oce8>;
    "Multisig": Anonymize<I1vclv36as3glh>;
    "Proxy": Anonymize<I8adrcb08eeqop>;
    "Assets": Anonymize<I84851acvod2ic>;
    "Uniques": Anonymize<Icu49uv7rfej74>;
    "Nfts": Anonymize<I1k4il7i5elhc7>;
    "ForeignAssets": Anonymize<I8ktel4pq9nbjk>;
    "NftFractionalization": Anonymize<Ifrervtb291iin>;
    "PoolAssets": Anonymize<I84851acvod2ic>;
    "AssetConversion": Anonymize<I9eemk0c7gip8o>;
    "AssetConversionMigration": Anonymize<I45a9m9dkljdu8>;
}>;
export type Ifbmf7o7289slt = ResultPayload<Anonymize<I5ka9slih620sq>, Anonymize<I55ku9c5gk50hb>>;
export type I5ka9slih620sq = {
    "execution_result": Anonymize<I9vekuvj479fff>;
    "emitted_events": Anonymize<I2os5e8v65epd6>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I9vekuvj479fff = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I9kf03kbffmqji>>;
export type I9kf03kbffmqji = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<Idb44iss70omh4>;
};
export type I2os5e8v65epd6 = Array<Anonymize<I5urk4g8ujr7a4>>;
export type Idmol6r5dudrkc = ResultPayload<Anonymize<I3ni4srles5gbo>, Anonymize<I55ku9c5gk50hb>>;
export type I3ni4srles5gbo = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<I2os5e8v65epd6>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I8tgtenllrm1ae = Array<Anonymize<Ib0un0pd4qngp6>>;
export type Ib0un0pd4qngp6 = {
    "phase": Phase;
    "event": Anonymize<Isd86dk9i1fn0>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type Isd86dk9i1fn0 = AnonymousEnum<{
    "System": Anonymize<If8c3bv2d323nr>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "MessageQueue": Anonymize<I2kosejppk3jon>;
    "Utility": Anonymize<Ie8842ihec3eod>;
    "Multisig": Anonymize<I78lcpdkej6t6r>;
    "Proxy": Anonymize<I370pmbcqspcgp>;
    "Identity": Anonymize<Ibju6hjiipokne>;
    "IdentityMigrator": PolkadotRuntimeCommonIdentityMigratorEvent;
}>;
export type If8c3bv2d323nr = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I5l9iaam3hu7m3>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I5l9iaam3hu7m3 = {
    "dispatch_error": Anonymize<I1ef1l2i5ktcdn>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I1ef1l2i5ktcdn = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I2vpuv30jtunqk>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I2vpuv30jtunqk = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "Timestamp": undefined;
    "ParachainInfo": undefined;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "XcmpQueue": Anonymize<Idnnbndsjjeqqs>;
    "PolkadotXcm": Anonymize<I87j95aq93d7dq>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Identity": Anonymize<I9mq328955mgb8>;
    "IdentityMigrator": undefined;
}>;
export type Ie8842ihec3eod = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<I1pa6ab6c1hbck>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I1i430gb97s77a>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Iajbtu2g0pu61r>;
}>;
export type I1pa6ab6c1hbck = {
    "index": number;
    "error": Anonymize<I1ef1l2i5ktcdn>;
};
export type I1i430gb97s77a = {
    "error": Anonymize<I1ef1l2i5ktcdn>;
};
export type Iajbtu2g0pu61r = {
    "result": Anonymize<Ict0q218vtntml>;
};
export type Ict0q218vtntml = ResultPayload<undefined, Anonymize<I1ef1l2i5ktcdn>>;
export type I78lcpdkej6t6r = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I425n1kmnbfa6t>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I425n1kmnbfa6t = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Ict0q218vtntml>;
};
export type I370pmbcqspcgp = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Iajbtu2g0pu61r>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<I7ntcg8dtn6d9g>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I8v2su1f60qoae>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I8v2su1f60qoae>;
}>;
export type Ieil33mmuef6k3 = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<Idgh1708iud79i>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<Idg9nued7rj9lu>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<Idgh1708iud79i>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<Ibmffmjbk0g7fc>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<Idgh1708iud79i>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<Iganvp80uojlv>;
}>;
export type Idgh1708iud79i = {
    "calls": Anonymize<I53fussd0tosbi>;
};
export type I53fussd0tosbi = Array<TxCallData>;
export type Idg9nued7rj9lu = {
    "index": number;
    "call": TxCallData;
};
export type Ibmffmjbk0g7fc = {
    "as_origin": Anonymize<I48v5riethqckl>;
    "call": TxCallData;
};
export type Iganvp80uojlv = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type Ia37lmck0lchht = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<I83coh41ncldih>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<Iaicsiknal51kq>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type I83coh41ncldih = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Iaicsiknal51kq = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Ia6gpaqtrbpj29 = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<I3g63irosbs6te>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<I6hk7temg1mga7>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<I6hk7temg1mga7>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<I2lbmfajhc5gdu>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<I2siheq6f2djrd>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<If7mcg44kqffo5>;
}>;
export type I3g63irosbs6te = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Icdvjlkfnoshag>;
    "call": TxCallData;
};
export type If7mcg44kqffo5 = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Icdvjlkfnoshag>;
    "call": TxCallData;
};
export type Idp330e7njpu21 = ResultPayload<Anonymize<Ict0q218vtntml>, TransactionValidityError>;
export type Idrssolrvf38li = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "ParachainSystem": Anonymize<I5kev21p7u6ajb>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "ParachainInfo": undefined;
    "Balances": Anonymize<I9svldsp29mh87>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I9nbjvlrb9bp1g>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Utility": Anonymize<Ieil33mmuef6k3>;
    "Multisig": Anonymize<Ia37lmck0lchht>;
    "Proxy": Anonymize<Ia6gpaqtrbpj29>;
    "Identity": Anonymize<Ids8vscs1lcqvc>;
    "IdentityMigrator": Anonymize<I67t4bps9r5c4k>;
}>;
export type I7qbmi3qlph772 = ResultPayload<Anonymize<I6v2m2u7b5lhfd>, Anonymize<I55ku9c5gk50hb>>;
export type I6v2m2u7b5lhfd = {
    "execution_result": Anonymize<Ia9kg7dcejuebn>;
    "emitted_events": Anonymize<Iaep6umncbu8ra>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type Ia9kg7dcejuebn = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<Iavpvb0roajf6>>;
export type Iavpvb0roajf6 = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<I1ef1l2i5ktcdn>;
};
export type Iaep6umncbu8ra = Array<Anonymize<Isd86dk9i1fn0>>;
export type I8jorigq0ltvq4 = ResultPayload<Anonymize<I28u93uv907q6l>, Anonymize<I55ku9c5gk50hb>>;
export type I28u93uv907q6l = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<Iaep6umncbu8ra>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I9c7e78u1qjnal = Array<Anonymize<Id1qfc3ngrn5es>>;
export type Id1qfc3ngrn5es = {
    "phase": Phase;
    "event": Anonymize<I4l809c8hbes5e>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I4l809c8hbes5e = AnonymousEnum<{
    "System": Anonymize<I84ilsc7k2tf3h>;
    "Indices": Anonymize<IndicesEvent>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "TxPause": Anonymize<I9ulgod11dfvq5>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "Democracy": Anonymize<Icfq8ap3e5p73t>;
    "Council": Anonymize<I97rrqmqp25dka>;
    "TechnicalCommittee": Anonymize<I97rrqmqp25dka>;
    "PhragmenElection": Anonymize<I4iamd5rd51ec2>;
    "CouncilMembership": Anonymize<Ibraem55mlft17>;
    "TechnicalMembership": Anonymize<Ibraem55mlft17>;
    "ConvictionVoting": ConvictionVotingEvent;
    "Referenda": Anonymize<Idfraa3b4eu018>;
    "Whitelist": Anonymize<I2693nv2kqqtg7>;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "MessageQueue": Anonymize<I2kosejppk3jon>;
    "Utility": Anonymize<Ib2c650d819bsc>;
    "Scheduler": Anonymize<Ib0ggpt3l9h2dt>;
    "Proxy": Anonymize<I76gm2kc82842t>;
    "Multisig": Anonymize<I7flng91pbg27d>;
    "Identity": Anonymize<Ibju6hjiipokne>;
    "Vesting": VestingEvent;
    "Treasury": Anonymize<I3f75km8j5v1nd>;
    "Preimage": PreimageEvent;
    "Ethereum": Anonymize<I510u4q1qqh897>;
    "EVM": Anonymize<I9k071kk4cn1u8>;
    "EVMAccounts": Anonymize<I71u7do1ao6vjp>;
    "XTokens": Anonymize<Ie93bvvt769opj>;
    "Tokens": Anonymize<I4oigsiqtj1dkn>;
    "UnknownTokens": Anonymize<Ia2698nr6jkt>;
    "OrmlXcm": Anonymize<I1615emstntqta>;
    "ZenlinkProtocol": Anonymize<I148v60cekcg36>;
    "MerkleDistributor": Anonymize<I6b02mu7kb5dhv>;
    "FlexibleFee": Anonymize<I24fohni592gvp>;
    "Salp": Anonymize<I87g1igl7tl927>;
    "AssetRegistry": Anonymize<I2j5hk6ear7ial>;
    "VtokenMinting": Anonymize<Iuelnuu9jk45g>;
    "Slp": Anonymize<I5jumpe7oiv3dr>;
    "XcmInterface": Anonymize<Ifdbh69clar5fi>;
    "TokenConversion": Anonymize<I6rndlmfeiieis>;
    "Farming": Anonymize<Ib4kfr029k1p67>;
    "SystemStaking": Anonymize<Iasccjvgh979uu>;
    "SystemMaker": Anonymize<I14o240sgpd5l0>;
    "FeeShare": Anonymize<Ickekbsj4u887j>;
    "CrossInOut": Anonymize<I9mn9kur5pfvb9>;
    "BbBNC": Anonymize<Icv422q6sojb69>;
    "Slpx": Anonymize<I2226d83nk0n8o>;
    "FellowshipCollective": Anonymize<Ifuucdgpuglunu>;
    "FellowshipReferenda": Anonymize<I28aoa43r171jt>;
    "StableAsset": Anonymize<Ibg67a9p342rqq>;
    "VtokenVoting": Anonymize<I9odc3mk2kl3gi>;
    "LendMarket": Anonymize<Iff94km1u4n3pd>;
    "Prices": Anonymize<Iaja1q8oji7pdd>;
    "Oracle": Anonymize<Id1jj7irh4fvu1>;
    "OracleMembership": Anonymize<Ibraem55mlft17>;
    "LeverageStaking": Anonymize<I7t9fm1af55at9>;
    "ChannelCommission": Anonymize<Ib4n9pq4bi5nv6>;
    "CloudsConvert": Anonymize<I3tig0oab4mvlr>;
    "BuyBack": Anonymize<I2kcq0r7qlj1i7>;
    "SlpV2": Anonymize<I1gd6ndmiptbsv>;
}>;
export type I84ilsc7k2tf3h = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<Iegg8ak569f003>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type Iegg8ak569f003 = {
    "dispatch_error": Anonymize<I8vqm6ghktndjq>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I8vqm6ghktndjq = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<Ic5r12drqketag>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type Ic5r12drqketag = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "Timestamp": undefined;
    "Indices": Anonymize<Icq1825fru3di2>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "ParachainInfo": undefined;
    "TxPause": Anonymize<Ifku1elmu8hk3i>;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "Democracy": Anonymize<I67neb7i10udig>;
    "Council": Anonymize<Icapevgbpfn5p9>;
    "TechnicalCommittee": Anonymize<Icapevgbpfn5p9>;
    "PhragmenElection": Anonymize<I96u72l8br1ego>;
    "CouncilMembership": Anonymize<Ie3flrv31mi7gh>;
    "TechnicalMembership": Anonymize<Ie3flrv31mi7gh>;
    "ConvictionVoting": Anonymize<Idfa8k8ikssbsf>;
    "Referenda": Anonymize<I84u4ul208g742>;
    "Origins": undefined;
    "Whitelist": Anonymize<I15nctscutpbeh>;
    "XcmpQueue": Anonymize<Idnnbndsjjeqqs>;
    "PolkadotXcm": Anonymize<I87j95aq93d7dq>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Identity": Anonymize<I9mq328955mgb8>;
    "Vesting": Anonymize<I5vocqfqrr94pk>;
    "Treasury": Anonymize<I7dodf8ccnun1b>;
    "Preimage": Anonymize<I4cfhml1prt4lu>;
    "Ethereum": Anonymize<I1mp6vnoh32l4q>;
    "EVM": Anonymize<I4pkfap0t7vk0t>;
    "EVMChainId": undefined;
    "DynamicFee": undefined;
    "EVMAccounts": Anonymize<Ie65vecqacffpm>;
    "XTokens": Anonymize<I8g8tbk0anjali>;
    "Tokens": Anonymize<Icc7o7ep6n36h2>;
    "Currencies": Anonymize<Icgcafv5q5cios>;
    "UnknownTokens": Anonymize<I5llpdov40t5vu>;
    "OrmlXcm": Anonymize<Ifv4efjta13rhe>;
    "ZenlinkProtocol": Anonymize<I8dt4sn2f9onud>;
    "MerkleDistributor": Anonymize<Ia934irb7mv2no>;
    "FlexibleFee": Anonymize<I7j9jeujnjqtk7>;
    "Salp": Anonymize<Ikmpj1qpmlgg2>;
    "AssetRegistry": Anonymize<Ifdrdolunm5asr>;
    "VtokenMinting": Anonymize<I27ft4gj1sasb0>;
    "Slp": Anonymize<Iecomiq02k50kt>;
    "XcmInterface": Anonymize<Ifmm8ns0709ao2>;
    "TokenConversion": Anonymize<Iahrplfbd63p1f>;
    "Farming": Anonymize<I528037nr68s4l>;
    "SystemStaking": Anonymize<Ieniv8hksct2tu>;
    "SystemMaker": Anonymize<Iahrplfbd63p1f>;
    "FeeShare": Anonymize<Ierlpnhjmvhm3t>;
    "CrossInOut": Anonymize<I2nk8nvu1sk8u3>;
    "BbBNC": Anonymize<I2rtkikevjo6qt>;
    "Slpx": Anonymize<Ifk14dubp0urdi>;
    "FellowshipCollective": Anonymize<I3q0e70tll8g0d>;
    "FellowshipReferenda": Anonymize<I84u4ul208g742>;
    "StableAsset": Anonymize<Idhsrli8e2qcvl>;
    "StablePool": Anonymize<I37baq92usopm0>;
    "VtokenVoting": Anonymize<I1ud3ea62m8hn7>;
    "LendMarket": Anonymize<I7f77bk6c70633>;
    "Prices": undefined;
    "Oracle": Anonymize<Ibbhs1otrrm5i1>;
    "OracleMembership": Anonymize<Ie3flrv31mi7gh>;
    "LeverageStaking": Anonymize<I5hife89is4rs2>;
    "ChannelCommission": Anonymize<Id04uq7iljjav9>;
    "CloudsConvert": Anonymize<If5rlmcl3m09tr>;
    "BuyBack": Anonymize<Iqrtuhjkceatk>;
    "SlpV2": Anonymize<I2e3a0uivkcoam>;
}>;
export type Ifku1elmu8hk3i = AnonymousEnum<{
    /**
     *The call is paused.
     */
    "IsPaused": undefined;
    /**
     *The call is unpaused.
     */
    "IsUnpaused": undefined;
    /**
     *The call is whitelisted and cannot be paused.
     */
    "Unpausable": undefined;
    "NotFound": undefined;
}>;
export type I67neb7i10udig = AnonymousEnum<{
    /**
     *Value too low
     */
    "ValueLow": undefined;
    /**
     *Proposal does not exist
     */
    "ProposalMissing": undefined;
    /**
     *Cannot cancel the same proposal twice
     */
    "AlreadyCanceled": undefined;
    /**
     *Proposal already made
     */
    "DuplicateProposal": undefined;
    /**
     *Proposal still blacklisted
     */
    "ProposalBlacklisted": undefined;
    /**
     *Next external proposal not simple majority
     */
    "NotSimpleMajority": undefined;
    /**
     *Invalid hash
     */
    "InvalidHash": undefined;
    /**
     *No external proposal
     */
    "NoProposal": undefined;
    /**
     *Identity may not veto a proposal twice
     */
    "AlreadyVetoed": undefined;
    /**
     *Vote given for invalid referendum
     */
    "ReferendumInvalid": undefined;
    /**
     *No proposals waiting
     */
    "NoneWaiting": undefined;
    /**
     *The given account did not vote on the referendum.
     */
    "NotVoter": undefined;
    /**
     *The actor has no permission to conduct the action.
     */
    "NoPermission": undefined;
    /**
     *The account is already delegating.
     */
    "AlreadyDelegating": undefined;
    /**
     *Too high a balance was provided that the account cannot afford.
     */
    "InsufficientFunds": undefined;
    /**
     *The account is not currently delegating.
     */
    "NotDelegating": undefined;
    /**
     *The account currently has votes attached to it and the operation cannot succeed until
     *these are removed, either through `unvote` or `reap_vote`.
     */
    "VotesExist": undefined;
    /**
     *The instant referendum origin is currently disallowed.
     */
    "InstantNotAllowed": undefined;
    /**
     *Delegation to oneself makes no sense.
     */
    "Nonsense": undefined;
    /**
     *Invalid upper bound.
     */
    "WrongUpperBound": undefined;
    /**
     *Maximum number of votes reached.
     */
    "MaxVotesReached": undefined;
    /**
     *Maximum number of items reached.
     */
    "TooMany": undefined;
    /**
     *Voting period too low
     */
    "VotingPeriodLow": undefined;
    /**
     *The preimage does not exist.
     */
    "PreimageNotExist": undefined;
}>;
export type Icapevgbpfn5p9 = AnonymousEnum<{
    /**
     *Account is not a member
     */
    "NotMember": undefined;
    /**
     *Duplicate proposals not allowed
     */
    "DuplicateProposal": undefined;
    /**
     *Proposal must exist
     */
    "ProposalMissing": undefined;
    /**
     *Mismatched index
     */
    "WrongIndex": undefined;
    /**
     *Duplicate vote ignored
     */
    "DuplicateVote": undefined;
    /**
     *Members are already initialized!
     */
    "AlreadyInitialized": undefined;
    /**
     *The close call was made too early, before the end of the voting.
     */
    "TooEarly": undefined;
    /**
     *There can only be a maximum of `MaxProposals` active proposals.
     */
    "TooManyProposals": undefined;
    /**
     *The given weight bound for the proposal was too low.
     */
    "WrongProposalWeight": undefined;
    /**
     *The given length bound for the proposal was too low.
     */
    "WrongProposalLength": undefined;
    /**
     *Prime account is not a member
     */
    "PrimeAccountNotMember": undefined;
}>;
export type I96u72l8br1ego = AnonymousEnum<{
    /**
     *Cannot vote when no candidates or members exist.
     */
    "UnableToVote": undefined;
    /**
     *Must vote for at least one candidate.
     */
    "NoVotes": undefined;
    /**
     *Cannot vote more than candidates.
     */
    "TooManyVotes": undefined;
    /**
     *Cannot vote more than maximum allowed.
     */
    "MaximumVotesExceeded": undefined;
    /**
     *Cannot vote with stake less than minimum balance.
     */
    "LowBalance": undefined;
    /**
     *Voter can not pay voting bond.
     */
    "UnableToPayBond": undefined;
    /**
     *Must be a voter.
     */
    "MustBeVoter": undefined;
    /**
     *Duplicated candidate submission.
     */
    "DuplicatedCandidate": undefined;
    /**
     *Too many candidates have been created.
     */
    "TooManyCandidates": undefined;
    /**
     *Member cannot re-submit candidacy.
     */
    "MemberSubmit": undefined;
    /**
     *Runner cannot re-submit candidacy.
     */
    "RunnerUpSubmit": undefined;
    /**
     *Candidate does not have enough funds.
     */
    "InsufficientCandidateFunds": undefined;
    /**
     *Not a member.
     */
    "NotMember": undefined;
    /**
     *The provided count of number of candidates is incorrect.
     */
    "InvalidWitnessData": undefined;
    /**
     *The provided count of number of votes is incorrect.
     */
    "InvalidVoteCount": undefined;
    /**
     *The renouncing origin presented a wrong `Renouncing` parameter.
     */
    "InvalidRenouncing": undefined;
    /**
     *Prediction regarding replacement after member removal is wrong.
     */
    "InvalidReplacement": undefined;
}>;
export type Ie3flrv31mi7gh = AnonymousEnum<{
    /**
     *Already a member.
     */
    "AlreadyMember": undefined;
    /**
     *Not a member.
     */
    "NotMember": undefined;
    /**
     *Too many members.
     */
    "TooManyMembers": undefined;
}>;
export type I5vocqfqrr94pk = AnonymousEnum<{
    /**
     *The account given is not vesting.
     */
    "NotVesting": undefined;
    /**
     *The account already has `MaxVestingSchedules` count of schedules and thus
     *cannot add another one. Consider merging existing schedules in order to add another.
     */
    "AtMaxVestingSchedules": undefined;
    /**
     *Amount being transferred is too low to create a vesting schedule.
     */
    "AmountLow": undefined;
    /**
     *An index was out of bounds of the vesting schedules.
     */
    "ScheduleIndexOutOfBounds": undefined;
    /**
     *Failed to create a new schedule because some parameter was invalid.
     */
    "InvalidScheduleParams": undefined;
    /**
     *change to the same per_block param
     */
    "SamePerBlock": undefined;
    /**
     *VestingStartAt storage is not set
     */
    "VestingStartAtNotSet": undefined;
    /**
     *Wrong amount
     */
    "WrongLockedAmount": undefined;
    /**
     *Wrong vesting during cliff period
     */
    "WrongCliffVesting": undefined;
}>;
export type I7dodf8ccnun1b = AnonymousEnum<{
    /**
     *Proposer's balance is too low.
     */
    "InsufficientProposersBalance": undefined;
    /**
     *No proposal, bounty or spend at that index.
     */
    "InvalidIndex": undefined;
    /**
     *Too many approvals in the queue.
     */
    "TooManyApprovals": undefined;
    /**
     *The spend origin is valid but the amount it is allowed to spend is lower than the
     *amount to be spent.
     */
    "InsufficientPermission": undefined;
    /**
     *Proposal has not been approved.
     */
    "ProposalNotApproved": undefined;
    /**
     *The balance of the asset kind is not convertible to the balance of the native asset.
     */
    "FailedToConvertBalance": undefined;
    /**
     *The spend has expired and cannot be claimed.
     */
    "SpendExpired": undefined;
    /**
     *The spend is not yet eligible for payout.
     */
    "EarlyPayout": undefined;
    /**
     *The payment has already been attempted.
     */
    "AlreadyAttempted": undefined;
    /**
     *There was some issue with the mechanism of payment.
     */
    "PayoutError": undefined;
    /**
     *The payout was not yet attempted/claimed.
     */
    "NotAttempted": undefined;
    /**
     *The payment has neither failed nor succeeded yet.
     */
    "Inconclusive": undefined;
}>;
export type I1mp6vnoh32l4q = AnonymousEnum<{
    /**
     *Signature is invalid.
     */
    "InvalidSignature": undefined;
    /**
     *Pre-log is present, therefore transact is not allowed.
     */
    "PreLogExists": undefined;
}>;
export type I4pkfap0t7vk0t = AnonymousEnum<{
    /**
     *Not enough balance to perform action
     */
    "BalanceLow": undefined;
    /**
     *Calculating total fee overflowed
     */
    "FeeOverflow": undefined;
    /**
     *Calculating total payment overflowed
     */
    "PaymentOverflow": undefined;
    /**
     *Withdraw fee failed
     */
    "WithdrawFailed": undefined;
    /**
     *Gas price is too low.
     */
    "GasPriceTooLow": undefined;
    /**
     *Nonce is invalid
     */
    "InvalidNonce": undefined;
    /**
     *Gas limit is too low.
     */
    "GasLimitTooLow": undefined;
    /**
     *Gas limit is too high.
     */
    "GasLimitTooHigh": undefined;
    /**
     *The chain id is invalid.
     */
    "InvalidChainId": undefined;
    /**
     *the signature is invalid.
     */
    "InvalidSignature": undefined;
    /**
     *EVM reentrancy
     */
    "Reentrancy": undefined;
    /**
     *EIP-3607,
     */
    "TransactionMustComeFromEOA": undefined;
    /**
     *Undefined error.
     */
    "Undefined": undefined;
}>;
export type Ie65vecqacffpm = AnonymousEnum<{
    /**
     *EVM Account's nonce is not zero
     */
    "TruncatedAccountAlreadyUsed": undefined;
    /**
     *Address is already bound
     */
    "AddressAlreadyBound": undefined;
    /**
     *Bound address cannot be used
     */
    "BoundAddressCannotBeUsed": undefined;
    /**
     *Address not whitelisted
     */
    "AddressNotWhitelisted": undefined;
}>;
export type I8g8tbk0anjali = AnonymousEnum<{
    /**
     *Asset has no reserve location.
     */
    "AssetHasNoReserve": undefined;
    /**
     *Not cross-chain transfer.
     */
    "NotCrossChainTransfer": undefined;
    /**
     *Invalid transfer destination.
     */
    "InvalidDest": undefined;
    /**
     *Currency is not cross-chain transferable.
     */
    "NotCrossChainTransferableCurrency": undefined;
    /**
     *The message's weight could not be determined.
     */
    "UnweighableMessage": undefined;
    /**
     *XCM execution failed.
     */
    "XcmExecutionFailed": undefined;
    /**
     *Could not re-anchor the assets to declare the fees for the
     *destination chain.
     */
    "CannotReanchor": undefined;
    /**
     *Could not get ancestry of asset reserve location.
     */
    "InvalidAncestry": undefined;
    /**
     *The Asset is invalid.
     */
    "InvalidAsset": undefined;
    /**
     *The destination `Location` provided cannot be inverted.
     */
    "DestinationNotInvertible": undefined;
    /**
     *The version of the `Versioned` value used is not able to be
     *interpreted.
     */
    "BadVersion": undefined;
    /**
     *We tried sending distinct asset and fee but they have different
     *reserve chains.
     */
    "DistinctReserveForAssetAndFee": undefined;
    /**
     *The fee is zero.
     */
    "ZeroFee": undefined;
    /**
     *The transfering asset amount is zero.
     */
    "ZeroAmount": undefined;
    /**
     *The number of assets to be sent is over the maximum.
     */
    "TooManyAssetsBeingSent": undefined;
    /**
     *The specified index does not exist in a Assets struct.
     */
    "AssetIndexNonExistent": undefined;
    /**
     *Fee is not enough.
     */
    "FeeNotEnough": undefined;
    /**
     *Not supported Location
     */
    "NotSupportedLocation": undefined;
    /**
     *MinXcmFee not registered for certain reserve location
     */
    "MinXcmFeeNotDefined": undefined;
    /**
     *Asset transfer is limited by RateLimiter.
     */
    "RateLimited": undefined;
}>;
export type Icc7o7ep6n36h2 = AnonymousEnum<{
    /**
     *The balance is too low
     */
    "BalanceTooLow": undefined;
    /**
     *Cannot convert Amount into Balance type
     */
    "AmountIntoBalanceFailed": undefined;
    /**
     *Failed because liquidity restrictions due to locking
     */
    "LiquidityRestrictions": undefined;
    /**
     *Failed because the maximum locks was exceeded
     */
    "MaxLocksExceeded": undefined;
    /**
     *Transfer/payment would kill account
     */
    "KeepAlive": undefined;
    /**
     *Value too low to create account due to existential deposit
     */
    "ExistentialDeposit": undefined;
    /**
     *Beneficiary account must pre-exist
     */
    "DeadAccount": undefined;
    "TooManyReserves": undefined;
}>;
export type Icgcafv5q5cios = AnonymousEnum<{
    /**
     *Unable to convert the Amount type into Balance.
     */
    "AmountIntoBalanceFailed": undefined;
    /**
     *Balance is too low.
     */
    "BalanceTooLow": undefined;
    /**
     *Deposit result is not expected
     */
    "DepositFailed": undefined;
}>;
export type I5llpdov40t5vu = AnonymousEnum<{
    /**
     *The balance is too low.
     */
    "BalanceTooLow": undefined;
    /**
     *The operation will cause balance to overflow.
     */
    "BalanceOverflow": undefined;
    /**
     *Unhandled asset.
     */
    "UnhandledAsset": undefined;
}>;
export type Ifv4efjta13rhe = AnonymousEnum<{
    /**
     *The message and destination combination was not recognized as being
     *reachable.
     */
    "Unreachable": undefined;
    /**
     *The message and destination was recognized as being reachable but
     *the operation could not be completed.
     */
    "SendFailure": undefined;
    /**
     *The version of the `Versioned` value used is not able to be
     *interpreted.
     */
    "BadVersion": undefined;
}>;
export type I8dt4sn2f9onud = AnonymousEnum<{
    /**
     *Require the admin who can reset the admin and receiver of the protocol fee.
     */
    "RequireProtocolAdmin": undefined;
    /**
     *Require the admin candidate who can become new admin after confirm.
     */
    "RequireProtocolAdminCandidate": undefined;
    /**
     *Invalid fee_point
     */
    "InvalidFeePoint": undefined;
    /**
     *Unsupported AssetId by this ZenlinkProtocol Version.
     */
    "UnsupportedAssetType": undefined;
    /**
     *Account balance must be greater than or equal to the transfer amount.
     */
    "InsufficientAssetBalance": undefined;
    /**
     *Account native currency balance must be greater than ExistentialDeposit.
     */
    "NativeBalanceTooLow": undefined;
    /**
     *Trading pair can't be created.
     */
    "DeniedCreatePair": undefined;
    /**
     *Trading pair already exists.
     */
    "PairAlreadyExists": undefined;
    /**
     *Trading pair does not exist.
     */
    "PairNotExists": undefined;
    /**
     *Asset does not exist.
     */
    "AssetNotExists": undefined;
    /**
     *Liquidity is not enough.
     */
    "InsufficientLiquidity": undefined;
    /**
     *Trading pair does have enough foreign.
     */
    "InsufficientPairReserve": undefined;
    /**
     *Get target amount is less than exception.
     */
    "InsufficientTargetAmount": undefined;
    /**
     *Sold amount is more than exception.
     */
    "ExcessiveSoldAmount": undefined;
    /**
     *Can't find pair though trading path.
     */
    "InvalidPath": undefined;
    /**
     *Incorrect foreign amount range.
     */
    "IncorrectAssetAmountRange": undefined;
    /**
     *Overflow.
     */
    "Overflow": undefined;
    /**
     *Transaction block number is larger than the end block number.
     */
    "Deadline": undefined;
    /**
     *Location given was invalid or unsupported.
     */
    "AccountIdBadLocation": undefined;
    /**
     *XCM execution failed.
     */
    "ExecutionFailed": undefined;
    /**
     *Transfer to self by XCM message.
     */
    "DeniedTransferToSelf": undefined;
    /**
     *Not in ZenlinkRegistedParaChains.
     */
    "TargetChainNotRegistered": undefined;
    /**
     *Can't pass the K value check
     */
    "InvariantCheckFailed": undefined;
    /**
     *Created pair can't create now
     */
    "PairCreateForbidden": undefined;
    /**
     *Pair is not in bootstrap
     */
    "NotInBootstrap": undefined;
    /**
     *Amount of contribution is invalid.
     */
    "InvalidContributionAmount": undefined;
    /**
     *Amount of contribution is invalid.
     */
    "UnqualifiedBootstrap": undefined;
    /**
     *Zero contribute in bootstrap
     */
    "ZeroContribute": undefined;
    /**
     *Bootstrap deny refund
     */
    "DenyRefund": undefined;
    /**
     *Bootstrap is disable
     */
    "DisableBootstrap": undefined;
    /**
     *Not eligible to contribute
     */
    "NotQualifiedAccount": undefined;
    /**
     *Reward of bootstrap is not set.
     */
    "NoRewardTokens": undefined;
    /**
     *Charge bootstrap extrinsic args has error,
     */
    "ChargeRewardParamsError": undefined;
    /**
     *Exist some reward in bootstrap,
     */
    "ExistRewardsInBootstrap": undefined;
}>;
export type Ia934irb7mv2no = AnonymousEnum<{
    /**
     *Invalid metadata given.
     */
    "BadDescription": undefined;
    /**
     *The id is not exist.
     */
    "InvalidMerkleDistributorId": undefined;
    /**
     *The proof is invalid
     */
    "MerkleVerifyFailed": undefined;
    /**
     *The reward is already distributed.
     */
    "Claimed": undefined;
    /**
     *The reward is already charged.
     */
    "Charged": undefined;
    /**
     *Withdraw amount exceed charge amount.
     */
    "WithdrawAmountExceed": undefined;
    /**
     *
     */
    "BadChargeAccount": undefined;
    /**
     *Account has already in the set who can create merkle distributor
     */
    "AlreadyInWhiteList": undefined;
    /**
     *Account is no in the set who can create merkle distributor
     */
    "NotInWhiteList": undefined;
}>;
export type I7j9jeujnjqtk7 = AnonymousEnum<{
    "NotEnoughBalance": undefined;
    "Overflow": undefined;
    "ConversionError": undefined;
    "WrongListLength": undefined;
    "WeightAndFeeNotExist": undefined;
    "DexFailedToGetAmountInByPath": undefined;
    "UnweighableMessage": undefined;
    "XcmExecutionFailed": undefined;
    /**
     *Maximum number of currencies reached.
     */
    "MaxCurrenciesReached": undefined;
    "CurrencyNotSupport": undefined;
}>;
export type Ikmpj1qpmlgg2 = AnonymousEnum<{
    /**
     *The first slot needs to at least be less than 3 `max_value`.
     */
    "FirstSlotTooFarInFuture": undefined;
    /**
     *Last slot must be greater than first slot.
     */
    "LastSlotBeforeFirstSlot": undefined;
    /**
     *The last slot cannot be more then 3 slots after the first slot.
     */
    "LastSlotTooFarInFuture": undefined;
    /**
     *There was an overflow.
     */
    "Overflow": undefined;
    /**
     *The contribution was below the minimum, `MinContribution`.
     */
    "ContributionTooSmall": undefined;
    /**
     *The account doesn't have any contribution to the fund.
     */
    "ZeroContribution": undefined;
    /**
     *Invalid fund index.
     */
    "InvalidParaId": undefined;
    /**
     *Invalid fund status.
     */
    "InvalidFundStatus": undefined;
    /**
     *Invalid contribution status.
     */
    "InvalidContributionStatus": undefined;
    /**
     *Contributions exceed maximum amount.
     */
    "CapExceeded": undefined;
    /**
     *The fund has been registered.
     */
    "FundAlreadyCreated": undefined;
    /**
     *Crosschain xcm failed
     */
    "XcmFailed": undefined;
    /**
     *Don't have enough vsToken/vsBond to refund
     */
    "NotEnoughReservedAssetsToRefund": undefined;
    /**
     *Don't have enough token to refund by users
     */
    "NotEnoughBalanceInRefundPool": undefined;
    /**
     *Don't have enough vsToken/vsBond to unlock
     */
    "NotEnoughBalanceToUnlock": undefined;
    /**
     *The vsBond is expired now
     */
    "VSBondExpired": undefined;
    /**
     *The vsBond cannot be redeemed by now
     */
    "UnRedeemableNow": undefined;
    /**
     *Dont have enough vsToken/vsBond to redeem
     */
    "NotEnoughFreeAssetsToRedeem": undefined;
    /**
     *Don't have enough token to redeem by users
     */
    "NotEnoughBalanceInRedeemPool": undefined;
    "NotEnoughBalanceInFund": undefined;
    "InvalidFundSameSlot": undefined;
    "InvalidFundNotExist": undefined;
    "InvalidRefund": undefined;
    "NotEnoughBalanceToContribute": undefined;
    "NotSupportTokenType": undefined;
    /**
     *Responder is not a relay chain
     */
    "ResponderNotRelayChain": undefined;
    /**
     *No contribution record found
     */
    "NotFindContributionValue": undefined;
    "ArgumentsError": undefined;
}>;
export type Ifdrdolunm5asr = AnonymousEnum<{
    /**
     *The given location could not be used (e.g. because it cannot be expressed in the
     *desired version of XCM).
     */
    "BadLocation": undefined;
    /**
     *Location existed
     */
    "LocationExisted": undefined;
    /**
     *AssetId not exists
     */
    "AssetIdNotExists": undefined;
    /**
     *AssetId exists
     */
    "AssetIdExisted": undefined;
    /**
     *CurrencyId not exists
     */
    "CurrencyIdNotExists": undefined;
    /**
     *CurrencyId exists
     */
    "CurrencyIdExisted": undefined;
}>;
export type I27ft4gj1sasb0 = AnonymousEnum<{
    "BelowMinimumMint": undefined;
    "BelowMinimumRedeem": undefined;
    /**
     *Invalid token to rebond.
     */
    "InvalidRebondToken": undefined;
    /**
     *Token type not support.
     */
    "NotSupportTokenType": undefined;
    "NotEnoughBalanceToUnlock": undefined;
    "TokenToRebondNotZero": undefined;
    "OngoingTimeUnitNotSet": undefined;
    "TokenUnlockLedgerNotFound": undefined;
    "UserUnlockLedgerNotFound": undefined;
    "TimeUnitUnlockLedgerNotFound": undefined;
    "UnlockDurationNotFound": undefined;
    "Unexpected": undefined;
    "CalculationOverflow": undefined;
    "ExceedMaximumUnlockId": undefined;
    "TooManyRedeems": undefined;
    "CanNotRedeem": undefined;
    "CanNotRebond": undefined;
    "NotEnoughBalance": undefined;
    "VeBNCCheckingError": undefined;
    "IncentiveCoefNotFound": undefined;
    "TooManyLocks": undefined;
    "ConvertError": undefined;
    "NoUnlockRecord": undefined;
    "FailToRemoveLock": undefined;
    "BalanceZero": undefined;
    "IncentiveLockBlocksNotSet": undefined;
}>;
export type Iecomiq02k50kt = AnonymousEnum<{
    "OperateOriginNotSet": undefined;
    "NotAuthorized": undefined;
    "NotSupportedCurrencyId": undefined;
    "FailToAddDelegator": undefined;
    "OverFlow": undefined;
    "UnderFlow": undefined;
    "NotExist": undefined;
    "LowerThanMinimum": undefined;
    "GreaterThanMaximum": undefined;
    "AlreadyBonded": undefined;
    "AccountNotExist": undefined;
    "DelegatorNotExist": undefined;
    "XcmFailure": undefined;
    "DelegatorNotBonded": undefined;
    "ExceedActiveMaximum": undefined;
    "ProblematicLedger": undefined;
    "NotEnoughToUnbond": undefined;
    "ExceedUnlockingRecords": undefined;
    "RebondExceedUnlockingAmount": undefined;
    "DecodingError": undefined;
    "EncodingError": undefined;
    "VectorEmpty": undefined;
    "ValidatorSetNotExist": undefined;
    "ValidatorNotExist": undefined;
    "InvalidTimeUnit": undefined;
    "AmountZero": undefined;
    "AmountNotZero": undefined;
    "AlreadyExist": undefined;
    "ValidatorStillInUse": undefined;
    "TimeUnitNotExist": undefined;
    "FeeSourceNotExist": undefined;
    "WeightAndFeeNotExists": undefined;
    "MinimumsAndMaximumsNotExist": undefined;
    "QueryNotExist": undefined;
    "DelaysNotExist": undefined;
    "Unexpected": undefined;
    "QueryResponseRemoveError": undefined;
    "InvalidHostingFee": undefined;
    "InvalidAccount": undefined;
    "IncreaseTokenPoolError": undefined;
    "TuneExchangeRateLimitNotSet": undefined;
    "CurrencyLatestTuneRecordNotExist": undefined;
    "InvalidTransferSource": undefined;
    "ValidatorNotProvided": undefined;
    "Unsupported": undefined;
    "ValidatorNotBonded": undefined;
    "AlreadyRequested": undefined;
    "RequestNotExist": undefined;
    "AlreadyLeaving": undefined;
    "DelegatorNotLeaving": undefined;
    "RequestNotDue": undefined;
    "LeavingNotDue": undefined;
    "DelegatorSetNotExist": undefined;
    "DelegatorLeaving": undefined;
    "DelegatorAlreadyLeaving": undefined;
    "ValidatorError": undefined;
    "AmountNone": undefined;
    "InvalidDelays": undefined;
    "OngoingTimeUnitUpdateIntervalNotExist": undefined;
    "LastTimeUpdatedOngoingTimeUnitNotExist": undefined;
    "TooFrequent": undefined;
    "DestAccountNotValid": undefined;
    "WhiteListNotExist": undefined;
    "DelegatorAlreadyTuned": undefined;
    "FeeTooHigh": undefined;
    "NotEnoughBalance": undefined;
    "VectorTooLong": undefined;
    "MultiCurrencyError": undefined;
    "NotDelegateValidator": undefined;
    "DividedByZero": undefined;
    "SharePriceNotValid": undefined;
    "InvalidAmount": undefined;
    "ValidatorMultilocationNotvalid": undefined;
    "AmountNotProvided": undefined;
    "FailToConvert": undefined;
    "ExceedMaxLengthLimit": undefined;
    /**
     *Transfer to failed
     */
    "TransferToError": undefined;
    "StablePoolNotFound": undefined;
    "StablePoolTokenIndexNotFound": undefined;
    "ExceedLimit": undefined;
    "InvalidPageNumber": undefined;
    "NoMoreValidatorBoostListForCurrency": undefined;
}>;
export type Ifmm8ns0709ao2 = AnonymousEnum<{
    "FeeConvertFailed": undefined;
    "XcmExecutionFailed": undefined;
    "XcmSendFailed": undefined;
    "OperationWeightAndFeeNotExist": undefined;
    "FailToConvert": undefined;
    "UnweighableMessage": undefined;
    "LocalExecutionIncomplete": undefined;
}>;
export type Iahrplfbd63p1f = AnonymousEnum<{
    "NotEnoughBalance": undefined;
    "NotSupportTokenType": undefined;
    "CalculationOverflow": undefined;
}>;
export type I528037nr68s4l = AnonymousEnum<{
    "NotNullable": undefined;
    "PoolDoesNotExist": undefined;
    "GaugePoolNotExist": undefined;
    "GaugeInfoNotExist": undefined;
    "InvalidPoolState": undefined;
    "LastGaugeNotClaim": undefined;
    /**
     *claim_limit_time exceeded
     */
    "CanNotClaim": undefined;
    /**
     *gauge pool max_block exceeded
     */
    "GaugeMaxBlockOverflow": undefined;
    /**
     *withdraw_limit_time exceeded
     */
    "WithdrawLimitCountExceeded": undefined;
    "ShareInfoNotExists": undefined;
    "CanNotDeposit": undefined;
    "WhitelistEmpty": undefined;
    "RoundNotOver": undefined;
    "RoundLengthNotSet": undefined;
    "WhitelistLimitExceeded": undefined;
    "NobodyVoting": undefined;
    "NotInWhitelist": undefined;
    "PercentOverflow": undefined;
    "PoolNotCleared": undefined;
}>;
export type Ieniv8hksct2tu = AnonymousEnum<{
    /**
     *Invalid token config params
     */
    "InvalidTokenConfig": undefined;
    /**
     *exceed max token len
     */
    "ExceedMaxTokenLen": undefined;
    /**
     *exceed max poolid len
     */
    "ExceedMaxFarmingPoolidLen": undefined;
    /**
     *Token info not found
     */
    "TokenInfoNotFound": undefined;
    /**
     *payout error
     */
    "PayoutFailed": undefined;
}>;
export type Ierlpnhjmvhm3t = AnonymousEnum<{
    /**
     *Not support proportion
     */
    "NotSupportProportion": undefined;
    /**
     *Existential deposit
     */
    "ExistentialDeposit": undefined;
    /**
     *Distribution not exist
     */
    "DistributionNotExist": undefined;
    /**
     *Price oracle not ready
     */
    "PriceOracleNotReady": undefined;
    /**
     *Price is zero
     */
    "PriceIsZero": undefined;
    /**
     *Interval is zero
     */
    "IntervalIsZero": undefined;
    /**
     *Value is zero
     */
    "ValueIsZero": undefined;
    /**
     *Tokens proportions not cleared
     */
    "TokensProportionsNotCleared": undefined;
}>;
export type I2nk8nvu1sk8u3 = AnonymousEnum<{
    "NotEnoughBalance": undefined;
    "NotExist": undefined;
    "NotAllowed": undefined;
    "CurrencyNotSupportCrossInAndOut": undefined;
    "NoMultilocationMapping": undefined;
    "NoAccountIdMapping": undefined;
    "AlreadyExist": undefined;
    "NoCrossingMinimumSet": undefined;
    "AmountLowerThanMinimum": undefined;
    "ExceedMaxLengthLimit": undefined;
    "FailedToConvert": undefined;
}>;
export type I2rtkikevjo6qt = AnonymousEnum<{
    "NotEnoughBalance": undefined;
    "Expired": undefined;
    "BelowMinimumMint": undefined;
    "LockNotExist": undefined;
    "LockExist": undefined;
    "ArgumentsError": undefined;
    "ExceedsMaxPositions": undefined;
    "NoController": undefined;
    "UserFarmingPoolOverflow": undefined;
}>;
export type Ifk14dubp0urdi = AnonymousEnum<{
    /**
     *Token not found in vtoken minting
     */
    "TokenNotFoundInVtokenMinting": undefined;
    /**
     *Token not found in zenlink
     */
    "TokenNotFoundInZenlink": undefined;
    /**
     *Contract Account already exists in the whitelist
     */
    "AccountIdAlreadyInWhitelist": undefined;
    /**
     *Contract Account is not in the whitelist
     */
    "AccountIdNotInWhitelist": undefined;
    /**
     *The maximum number of whitelist addresses is 10
     */
    "ExceededWhitelistMaxNumber": undefined;
    /**
     *Execution fee not set
     */
    "NotSetExecutionFee": undefined;
    /**
     *Insufficient balance to execute the fee
     */
    "FreeBalanceTooLow": undefined;
    /**
     *ArgumentsError
     */
    "ArgumentsError": undefined;
    "ErrorConvertVtoken": undefined;
    "ErrorValidating": undefined;
    "ErrorDelivering": undefined;
    "Unsupported": undefined;
}>;
export type I3q0e70tll8g0d = AnonymousEnum<{
    /**
     *Account is already a member.
     */
    "AlreadyMember": undefined;
    /**
     *Account is not a member.
     */
    "NotMember": undefined;
    /**
     *The given poll index is unknown or has closed.
     */
    "NotPolling": undefined;
    /**
     *The given poll is still ongoing.
     */
    "Ongoing": undefined;
    /**
     *There are no further records to be removed.
     */
    "NoneRemaining": undefined;
    /**
     *Unexpected error in state.
     */
    "Corruption": undefined;
    /**
     *The member's rank is too low to vote.
     */
    "RankTooLow": undefined;
    /**
     *The information provided is incorrect.
     */
    "InvalidWitness": undefined;
    /**
     *The origin is not sufficiently privileged to do the operation.
     */
    "NoPermission": undefined;
    /**
     *The new member to exchange is the same as the old member
     */
    "SameMember": undefined;
}>;
export type Idhsrli8e2qcvl = AnonymousEnum<{
    "InconsistentStorage": undefined;
    "InvalidPoolAsset": undefined;
    "ArgumentsMismatch": undefined;
    "ArgumentsError": undefined;
    "PoolNotFound": undefined;
    "Math": undefined;
    "InvalidPoolValue": undefined;
    "MintUnderMin": undefined;
    "SwapUnderMin": undefined;
    "RedeemUnderMin": undefined;
    "RedeemOverMax": undefined;
    "TokenRateNotCleared": undefined;
}>;
export type I37baq92usopm0 = AnonymousEnum<{
    "SwapUnderMin": undefined;
    "MintUnderMin": undefined;
    "CantMint": undefined;
    "RedeemOverMax": undefined;
    "TokenRateNotSet": undefined;
}>;
export type I1ud3ea62m8hn7 = AnonymousEnum<{
    /**
     *XCM execution Failure
     */
    "XcmFailure": undefined;
    /**
     *The given currency is not supported.
     */
    "VTokenNotSupport": undefined;
    /**
     *Derivative index occupied.
     */
    "DerivativeIndexOccupied": undefined;
    /**
     *Another vote is pending.
     */
    "PendingVote": undefined;
    /**
     *Another update referendum status is pending.
     */
    "PendingUpdateReferendumStatus": undefined;
    /**
     *No data available in storage.
     */
    "NoData": undefined;
    /**
     *Poll is not ongoing.
     */
    "NotOngoing": undefined;
    /**
     *Poll is not completed.
     */
    "NotCompleted": undefined;
    /**
     *Poll is not killed.
     */
    "NotKilled": undefined;
    /**
     *Poll is not expired.
     */
    "NotExpired": undefined;
    /**
     *The given account did not vote on the poll.
     */
    "NotVoter": undefined;
    /**
     *The actor has no permission to conduct the action.
     */
    "NoPermission": undefined;
    /**
     *The actor has no permission to conduct the action right now but will do in the future.
     */
    "NoPermissionYet": undefined;
    /**
     *The account is already delegating.
     */
    "AlreadyDelegating": undefined;
    /**
     *Too high a balance was provided that the account cannot afford.
     */
    "InsufficientFunds": undefined;
    /**
     *Maximum number of votes reached.
     */
    "MaxVotesReached": undefined;
    /**
     *Maximum number of items reached.
     */
    "TooMany": undefined;
    /**
     *The given vote is not Standard vote.
     */
    "NotStandardVote": undefined;
    /**
     *The given conviction is not valid.
     */
    "InvalidConviction": undefined;
    /**
     *The given value is out of range.
     */
    "OutOfRange": undefined;
}>;
export type I7f77bk6c70633 = AnonymousEnum<{
    /**
     *Insufficient liquidity to borrow more or disable collateral
     */
    "InsufficientLiquidity": undefined;
    /**
     *Insufficient deposit to redeem
     */
    "InsufficientDeposit": undefined;
    /**
     *Repay amount greater than allowed
     */
    "TooMuchRepay": undefined;
    /**
     *Asset already enabled/disabled collateral
     */
    "DuplicateOperation": undefined;
    /**
     *No deposit asset
     */
    "NoDeposit": undefined;
    /**
     *Repay amount more than collateral amount
     */
    "InsufficientCollateral": undefined;
    /**
     *Liquidator is same as borrower
     */
    "LiquidatorIsBorrower": undefined;
    /**
     *Deposits are not used as a collateral
     */
    "DepositsAreNotCollateral": undefined;
    /**
     *Insufficient shortfall to repay
     */
    "InsufficientShortfall": undefined;
    /**
     *Insufficient reserves
     */
    "InsufficientReserves": undefined;
    /**
     *Invalid rate model params
     */
    "InvalidRateModelParam": undefined;
    /**
     *Market not activated
     */
    "MarketNotActivated": undefined;
    /**
     *Oracle price not ready
     */
    "PriceOracleNotReady": undefined;
    /**
     *Oracle price is zero
     */
    "PriceIsZero": undefined;
    /**
     *Invalid asset id
     */
    "InvalidCurrencyId": undefined;
    /**
     *Invalid lend token id
     */
    "InvalidLendTokenId": undefined;
    /**
     *Market does not exist
     */
    "MarketDoesNotExist": undefined;
    /**
     *Market already exists
     */
    "MarketAlreadyExists": undefined;
    /**
     *New markets must have a pending state
     */
    "NewMarketMustHavePendingState": undefined;
    /**
     *Upper bound of supplying is exceeded
     */
    "SupplyCapacityExceeded": undefined;
    /**
     *Upper bound of borrowing is exceeded
     */
    "BorrowCapacityExceeded": undefined;
    /**
     *Insufficient cash in the pool
     */
    "InsufficientCash": undefined;
    /**
     *The factor should be greater than 0% and less than 100%
     */
    "InvalidFactor": undefined;
    /**
     *The supply cap cannot be zero
     */
    "InvalidSupplyCap": undefined;
    /**
     *The exchange rate should be greater than 0.02 and less than 1
     */
    "InvalidExchangeRate": undefined;
    /**
     *Amount cannot be zero
     */
    "InvalidAmount": undefined;
    /**
     *Payer cannot be signer
     */
    "PayerIsSigner": undefined;
    /**
     *Codec error
     */
    "CodecError": undefined;
    /**
     *Collateral is reserved and cannot be liquidated
     */
    "CollateralReserved": undefined;
    /**
     *Market bond does not exist
     */
    "MarketBondDoesNotExist": undefined;
}>;
export type Ibbhs1otrrm5i1 = AnonymousEnum<{
    /**
     *Sender does not have permission
     */
    "NoPermission": undefined;
    /**
     *Feeder has already feeded at this block
     */
    "AlreadyFeeded": undefined;
}>;
export type I5hife89is4rs2 = AnonymousEnum<{
    "ArgumentsError": undefined;
    "NotSupportTokenType": undefined;
}>;
export type Id04uq7iljjav9 = AnonymousEnum<{
    "Overflow": undefined;
    "ChannelNameTooLong": undefined;
    "ConversionError": undefined;
    "ChannelNotExist": undefined;
    "TransferError": undefined;
    "VtokenNotConfiguredForCommission": undefined;
    "InvalidCommissionRate": undefined;
    "CommissionTokenAlreadySet": undefined;
    "InvalidVtoken": undefined;
    /**
     *Error indicating that no changes were made during a modification operation.
     */
    "NoChangesMade": undefined;
    /**
     *Represents an error that occurs when a division operation encounters a divisor of zero.
     *This is a critical error, as division by zero is undefined and cannot be performed.
     */
    "DivisionByZero": undefined;
    /**
     *Error indicating that the removal operation was not completed successfully.
     */
    "RemovalNotComplete": undefined;
}>;
export type If5rlmcl3m09tr = AnonymousEnum<{
    "NotEnoughBalance": undefined;
    "CalculationOverflow": undefined;
    "LessThanExpected": undefined;
    "LessThanExistentialDeposit": undefined;
}>;
export type Iqrtuhjkceatk = AnonymousEnum<{
    /**
     *Insufficient balance.
     */
    "NotEnoughBalance": undefined;
    /**
     *Currency does not exist.
     */
    "CurrencyIdNotExists": undefined;
    /**
     *Currency is not supported.
     */
    "CurrencyIdError": undefined;
    /**
     *Duration can't be zero.
     */
    "ZeroDuration": undefined;
    /**
     *Field min_swap_value can't be zero.
     */
    "ZeroMinSwapValue": undefined;
}>;
export type I2e3a0uivkcoam = AnonymousEnum<{
    /**
     *Delegator index has exceeded the maximum allowed value of 65535.
     */
    "DelegatorIndexOverflow": undefined;
    /**
     *The maximum number of validators has been reached.
     */
    "ValidatorsOverflow": undefined;
    /**
     *UnlockRecordOverflow
     */
    "UnlockRecordOverflow": undefined;
    /**
     *The staking protocol is not supported.
     */
    "UnsupportedStakingProtocol": undefined;
    /**
     *The delegator index was not found.
     */
    "DelegatorIndexNotFound": undefined;
    /**
     *The Configuration was not found.
     */
    "ConfigurationNotFound": undefined;
    /**
     *The delegator was not found.
     */
    "DelegatorNotFound": undefined;
    /**
     *The ledger was not found.
     */
    "LedgerNotFound": undefined;
    /**
     *The validator was not found.
     */
    "ValidatorNotFound": undefined;
    /**
     *Missing XCM fee value.
     */
    "XcmFeeNotFound": undefined;
    /**
     *Missing pending status.
     */
    "PendingStatusNotFound": undefined;
    /**
     *The specified time unit does not exist.
     */
    "TimeUnitNotFound": undefined;
    /**
     *The delegator already exists.
     */
    "DelegatorAlreadyExists": undefined;
    /**
     *The delegator index already exists.
     */
    "DelegatorIndexAlreadyExists": undefined;
    /**
     *The validator already exists.
     */
    "ValidatorAlreadyExists": undefined;
    /**
     *Failed to derive the derivative account ID.
     */
    "DerivativeAccountIdFailed": undefined;
    /**
     *Error during validation.
     */
    "ValidatingFailed": undefined;
    /**
     *Error during delivery.
     */
    "DeliveringFailed": undefined;
    /**
     *calculate protocol fee failed.
     */
    "CalculateProtocolFeeFailed": undefined;
    /**
     *IncreaseTokenPoolFailed
     */
    "IncreaseTokenPoolFailed": undefined;
    /**
     *The update interval is too short.
     */
    "UpdateIntervalTooShort": undefined;
    /**
     *The specified token exchange rate amount is too large.
     */
    "UpdateTokenExchangeRateAmountTooLarge": undefined;
    /**
     *Invalid parameter.
     */
    "InvalidParameter": undefined;
    /**
     *Not authorized.
     */
    "NotAuthorized": undefined;
}>;
export type I9ulgod11dfvq5 = AnonymousEnum<{
    /**
     *This pallet, or a specific call is now paused.
     */
    "CallPaused": Anonymize<Iba7pefg0d11kh>;
    /**
     *This pallet, or a specific call is now unpaused.
     */
    "CallUnpaused": Anonymize<Iba7pefg0d11kh>;
}>;
export type Iba7pefg0d11kh = {
    "full_name": Anonymize<Idkbvh6dahk1v7>;
};
export type Icfq8ap3e5p73t = AnonymousEnum<{
    /**
     *A motion has been proposed by a public account.
     */
    "Proposed": Anonymize<I3peh714diura8>;
    /**
     *A public proposal has been tabled for referendum vote.
     */
    "Tabled": Anonymize<I3peh714diura8>;
    /**
     *An external proposal has been tabled.
     */
    "ExternalTabled": undefined;
    /**
     *A referendum has begun.
     */
    "Started": Anonymize<I62ffgu6q2478o>;
    /**
     *A proposal has been approved by referendum.
     */
    "Passed": Anonymize<Ied9mja4bq7va8>;
    /**
     *A proposal has been rejected by referendum.
     */
    "NotPassed": Anonymize<Ied9mja4bq7va8>;
    /**
     *A referendum has been cancelled.
     */
    "Cancelled": Anonymize<Ied9mja4bq7va8>;
    /**
     *An account has delegated their vote to another account.
     */
    "Delegated": Anonymize<I10r7il4gvbcae>;
    /**
     *An account has cancelled a previous delegation operation.
     */
    "Undelegated": Anonymize<Icbccs0ug47ilf>;
    /**
     *An external proposal has been vetoed.
     */
    "Vetoed": Anonymize<I2c00i2bngegk9>;
    /**
     *A proposal_hash has been blacklisted permanently.
     */
    "Blacklisted": Anonymize<I2ev73t79f46tb>;
    /**
     *An account has voted in a referendum
     */
    "Voted": Anonymize<Iet7kfijhihjik>;
    /**
     *An account has seconded a proposal
     */
    "Seconded": Anonymize<I2vrbos7ogo6ps>;
    /**
     *A proposal got canceled.
     */
    "ProposalCanceled": Anonymize<I9mnj4k4u8ls2c>;
    /**
     *Metadata for a proposal or a referendum has been set.
     */
    "MetadataSet": Anonymize<Iffeo46j957abe>;
    /**
     *Metadata for a proposal or a referendum has been cleared.
     */
    "MetadataCleared": Anonymize<Iffeo46j957abe>;
    /**
     *Metadata has been transferred to new owner.
     */
    "MetadataTransferred": Anonymize<I4ljshcevmm3p2>;
}>;
export type I3peh714diura8 = {
    "proposal_index": number;
    "deposit": bigint;
};
export type I62ffgu6q2478o = {
    "ref_index": number;
    "threshold": Anonymize<Ivbp9821csvot>;
};
export type Ivbp9821csvot = AnonymousEnum<{
    "SuperMajorityApprove": undefined;
    "SuperMajorityAgainst": undefined;
    "SimpleMajority": undefined;
}>;
export type Ied9mja4bq7va8 = {
    "ref_index": number;
};
export type I10r7il4gvbcae = {
    "who": SS58String;
    "target": SS58String;
};
export type I2c00i2bngegk9 = {
    "who": SS58String;
    "proposal_hash": FixedSizeBinary<32>;
    "until": number;
};
export type I2ev73t79f46tb = {
    "proposal_hash": FixedSizeBinary<32>;
};
export type Iet7kfijhihjik = {
    "voter": SS58String;
    "ref_index": number;
    "vote": Anonymize<Ia9hdots6g53fs>;
};
export type Ia9hdots6g53fs = AnonymousEnum<{
    "Standard": Anonymize<Ib024p97ls1cla>;
    "Split": Anonymize<I5pi71t9bosoiv>;
}>;
export type I2vrbos7ogo6ps = {
    "seconder": SS58String;
    "prop_index": number;
};
export type I9mnj4k4u8ls2c = {
    "prop_index": number;
};
export type Iffeo46j957abe = {
    /**
     *Metadata owner.
     */
    "owner": Anonymize<I2itl2k1j2q8nf>;
    /**
     *Preimage hash.
     */
    "hash": FixedSizeBinary<32>;
};
export type I2itl2k1j2q8nf = AnonymousEnum<{
    "External": undefined;
    "Proposal": number;
    "Referendum": number;
}>;
export type I4ljshcevmm3p2 = {
    /**
     *Previous metadata owner.
     */
    "prev_owner": Anonymize<I2itl2k1j2q8nf>;
    /**
     *New metadata owner.
     */
    "owner": Anonymize<I2itl2k1j2q8nf>;
    /**
     *Preimage hash.
     */
    "hash": FixedSizeBinary<32>;
};
export type I97rrqmqp25dka = AnonymousEnum<{
    /**
     *A motion (given hash) has been proposed (by given account) with a threshold (given
     *`MemberCount`).
     */
    "Proposed": Anonymize<Ift6f10887nk72>;
    /**
     *A motion (given hash) has been voted on by given account, leaving
     *a tally (yes votes and no votes given respectively as `MemberCount`).
     */
    "Voted": Anonymize<I7qc53b1tvqjg2>;
    /**
     *A motion was approved by the required threshold.
     */
    "Approved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was not approved by the required threshold.
     */
    "Disapproved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was executed; result will be `Ok` if it returned without error.
     */
    "Executed": Anonymize<I4s25thrhpiql>;
    /**
     *A single member did some action; result will be `Ok` if it returned without error.
     */
    "MemberExecuted": Anonymize<I4s25thrhpiql>;
    /**
     *A proposal was closed because its threshold was reached or after its duration was up.
     */
    "Closed": Anonymize<Iak7fhrgb9jnnq>;
}>;
export type Ift6f10887nk72 = {
    "account": SS58String;
    "proposal_index": number;
    "proposal_hash": FixedSizeBinary<32>;
    "threshold": number;
};
export type I7qc53b1tvqjg2 = {
    "account": SS58String;
    "proposal_hash": FixedSizeBinary<32>;
    "voted": boolean;
    "yes": number;
    "no": number;
};
export type I4s25thrhpiql = {
    "proposal_hash": FixedSizeBinary<32>;
    "result": Anonymize<Ifeo1jafbstdai>;
};
export type Ifeo1jafbstdai = ResultPayload<undefined, Anonymize<I8vqm6ghktndjq>>;
export type Iak7fhrgb9jnnq = {
    "proposal_hash": FixedSizeBinary<32>;
    "yes": number;
    "no": number;
};
export type I4iamd5rd51ec2 = AnonymousEnum<{
    /**
     *A new term with new_members. This indicates that enough candidates existed to run
     *the election, not that enough have has been elected. The inner value must be examined
     *for this purpose. A `NewTerm(\[\])` indicates that some candidates got their bond
     *slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to
     *begin with.
     */
    "NewTerm": Anonymize<Iaofef34v2445a>;
    /**
     *No (or not enough) candidates existed for this round. This is different from
     *`NewTerm(\[\])`. See the description of `NewTerm`.
     */
    "EmptyTerm": undefined;
    /**
     *Internal error happened while trying to perform election.
     */
    "ElectionError": undefined;
    /**
     *A member has been removed. This should always be followed by either `NewTerm` or
     *`EmptyTerm`.
     */
    "MemberKicked": Anonymize<Ie3gphha4ejh40>;
    /**
     *Someone has renounced their candidacy.
     */
    "Renounced": Anonymize<I4b66js88p45m8>;
    /**
     *A candidate was slashed by amount due to failing to obtain a seat as member or
     *runner-up.
     *
     *Note that old members and runners-up are also candidates.
     */
    "CandidateSlashed": Anonymize<I50d9r8lrdga93>;
    /**
     *A seat holder was slashed by amount by being forcefully removed from the set.
     */
    "SeatHolderSlashed": Anonymize<I27avf13g71mla>;
}>;
export type Iaofef34v2445a = {
    "new_members": Anonymize<Iba9inugg1atvo>;
};
export type I50d9r8lrdga93 = {
    "candidate": SS58String;
    "amount": bigint;
};
export type I27avf13g71mla = {
    "seat_holder": SS58String;
    "amount": bigint;
};
export type Ibraem55mlft17 = AnonymousEnum<{
    /**
     *The given member was added; see the transaction for who.
     */
    "MemberAdded": undefined;
    /**
     *The given member was removed; see the transaction for who.
     */
    "MemberRemoved": undefined;
    /**
     *Two members were swapped; see the transaction for who.
     */
    "MembersSwapped": undefined;
    /**
     *The membership was reset; see the transaction for who the new set is.
     */
    "MembersReset": undefined;
    /**
     *One of the members' keys changed.
     */
    "KeyChanged": undefined;
    /**
     *Phantom member, never used.
     */
    "Dummy": undefined;
}>;
export type I2693nv2kqqtg7 = AnonymousEnum<{
    "CallWhitelisted": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallRemoved": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallDispatched": Anonymize<I6kg7bhenahr1c>;
}>;
export type I6kg7bhenahr1c = {
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I98nloe3qr73k5>;
};
export type I98nloe3qr73k5 = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I2l986oel7ueue>>;
export type I2l986oel7ueue = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<I8vqm6ghktndjq>;
};
export type Ib2c650d819bsc = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<Ie048vclmk114d>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<Ieenot9p3du2jq>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<I9dtcee8vhssnd>;
}>;
export type Ie048vclmk114d = {
    "index": number;
    "error": Anonymize<I8vqm6ghktndjq>;
};
export type Ieenot9p3du2jq = {
    "error": Anonymize<I8vqm6ghktndjq>;
};
export type I9dtcee8vhssnd = {
    "result": Anonymize<Ifeo1jafbstdai>;
};
export type Ib0ggpt3l9h2dt = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<I7itflu6klchel>;
    /**
     *Set a retry configuration for some task.
     */
    "RetrySet": Anonymize<Ia3c82eadg79bj>;
    /**
     *Cancel a retry configuration for some task.
     */
    "RetryCancelled": Anonymize<Ienusoeb625ftq>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be retried since the agenda is full at that block or there
     *was not enough weight to reschedule it.
     */
    "RetryFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type I7itflu6klchel = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<Ifeo1jafbstdai>;
};
export type I76gm2kc82842t = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<I9dtcee8vhssnd>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ifvd7v8crj3oo6>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I4jaa15tfvpb9p>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I4jaa15tfvpb9p>;
}>;
export type Ifvd7v8crj3oo6 = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<I376r4jplmhe8p>;
    "disambiguation_index": number;
};
export type I376r4jplmhe8p = AnonymousEnum<{
    "Any": undefined;
    "NonTransfer": undefined;
    "Governance": undefined;
    "CancelProxy": undefined;
    "IdentityJudgement": undefined;
}>;
export type I4jaa15tfvpb9p = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<I376r4jplmhe8p>;
    "delay": number;
};
export type I7flng91pbg27d = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I9lma4rgq3f10u>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I9lma4rgq3f10u = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Ifeo1jafbstdai>;
};
export type I3f75km8j5v1nd = AnonymousEnum<{
    /**
     *New proposal.
     */
    "Proposed": Anonymize<I44hc4lgsn4o1j>;
    /**
     *We have ended a spend period and will now allocate funds.
     */
    "Spending": Anonymize<I8iksqi3eani0a>;
    /**
     *Some funds have been allocated.
     */
    "Awarded": Anonymize<I16enopmju1p0q>;
    /**
     *A proposal was rejected; funds were slashed.
     */
    "Rejected": Anonymize<Ifgqhle2413de7>;
    /**
     *Some of our funds have been burnt.
     */
    "Burnt": Anonymize<I43kq8qudg7pq9>;
    /**
     *Spending has finished; this is the amount that rolls over until next spend.
     */
    "Rollover": Anonymize<I76riseemre533>;
    /**
     *Some funds have been deposited.
     */
    "Deposit": Anonymize<Ie5v6njpckr05b>;
    /**
     *A new spend proposal has been approved.
     */
    "SpendApproved": Anonymize<I38bmcrmh852rk>;
    /**
     *The inactive funds of the pallet have been updated.
     */
    "UpdatedInactive": Anonymize<I4hcillge8de5f>;
    /**
     *A new asset spend proposal has been approved.
     */
    "AssetSpendApproved": Anonymize<I8usdc6tg7829p>;
    /**
     *An approved spend was voided.
     */
    "AssetSpendVoided": Anonymize<I666bl2fqjkejo>;
    /**
     *A payment happened.
     */
    "Paid": Anonymize<I666bl2fqjkejo>;
    /**
     *A payment failed and can be retried.
     */
    "PaymentFailed": Anonymize<I666bl2fqjkejo>;
    /**
     *A spend was processed and removed from the storage. It might have been successfully
     *paid or it may have expired.
     */
    "SpendProcessed": Anonymize<I666bl2fqjkejo>;
}>;
export type I44hc4lgsn4o1j = {
    "proposal_index": number;
};
export type Ifgqhle2413de7 = {
    "proposal_index": number;
    "slashed": bigint;
};
export type I8usdc6tg7829p = {
    "index": number;
    "amount": bigint;
    "beneficiary": SS58String;
    "valid_from": number;
    "expire_at": number;
};
export type I510u4q1qqh897 = AnonymousEnum<{
    /**
     *An ethereum transaction was successfully executed.
     */
    "Executed": Anonymize<Iea4g5ovhnolus>;
}>;
export type Iea4g5ovhnolus = {
    "from": FixedSizeBinary<20>;
    "to": FixedSizeBinary<20>;
    "transaction_hash": FixedSizeBinary<32>;
    "exit_reason": Anonymize<Iag9iovb9j5ijo>;
    "extra_data": Binary;
};
export type Iag9iovb9j5ijo = AnonymousEnum<{
    "Succeed": Anonymize<Ifbj2gu50vf7nt>;
    "Error": Anonymize<I5ksr7ru2gk4nh>;
    "Revert": Anonymize<I802eqdju1ngib>;
    "Fatal": Anonymize<I85tliolbaj39g>;
}>;
export type Ifbj2gu50vf7nt = AnonymousEnum<{
    "Stopped": undefined;
    "Returned": undefined;
    "Suicided": undefined;
}>;
export type I5ksr7ru2gk4nh = AnonymousEnum<{
    "StackUnderflow": undefined;
    "StackOverflow": undefined;
    "InvalidJump": undefined;
    "InvalidRange": undefined;
    "DesignatedInvalid": undefined;
    "CallTooDeep": undefined;
    "CreateCollision": undefined;
    "CreateContractLimit": undefined;
    "InvalidCode": number;
    "OutOfOffset": undefined;
    "OutOfGas": undefined;
    "OutOfFund": undefined;
    "PCUnderflow": undefined;
    "CreateEmpty": undefined;
    "Other": string;
    "MaxNonce": undefined;
}>;
export type I802eqdju1ngib = AnonymousEnum<{
    "Reverted": undefined;
}>;
export type I85tliolbaj39g = AnonymousEnum<{
    "NotSupported": undefined;
    "UnhandledInterrupt": undefined;
    "CallErrorAsFatal": Anonymize<I5ksr7ru2gk4nh>;
    "Other": string;
}>;
export type I9k071kk4cn1u8 = AnonymousEnum<{
    /**
     *Ethereum events from contracts.
     */
    "Log": Anonymize<Ifmc9boeeia623>;
    /**
     *A contract has been created at given address.
     */
    "Created": Anonymize<Itmchvgqfl28g>;
    /**
     *A contract was attempted to be created, but the execution failed.
     */
    "CreatedFailed": Anonymize<Itmchvgqfl28g>;
    /**
     *A contract has been executed successfully with states applied.
     */
    "Executed": Anonymize<Itmchvgqfl28g>;
    /**
     *A contract has been executed with errors. States are reverted with only gas fees applied.
     */
    "ExecutedFailed": Anonymize<Itmchvgqfl28g>;
}>;
export type Ifmc9boeeia623 = {
    "log": Anonymize<I10qb03fpuk6em>;
};
export type I10qb03fpuk6em = {
    "address": FixedSizeBinary<20>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
    "data": Binary;
};
export type Itmchvgqfl28g = {
    "address": FixedSizeBinary<20>;
};
export type I71u7do1ao6vjp = AnonymousEnum<{
    /**
     *Binding was created.
     */
    "Bound": Anonymize<I8363i1h1dgh0n>;
    /**
     *Deployer was added.
     */
    "DeployerAdded": Anonymize<Ibqjgs3foip9fb>;
    /**
     *Deployer was removed.
     */
    "DeployerRemoved": Anonymize<Ibqjgs3foip9fb>;
}>;
export type I8363i1h1dgh0n = {
    "account": SS58String;
    "address": FixedSizeBinary<20>;
};
export type Ibqjgs3foip9fb = {
    "who": FixedSizeBinary<20>;
};
export type Ie93bvvt769opj = AnonymousEnum<{
    /**
     *Transferred `Asset` with fee.
     */
    "TransferredAssets": Anonymize<Ic04t5m0ihvrp5>;
}>;
export type Ic04t5m0ihvrp5 = {
    "sender": SS58String;
    "assets": Anonymize<I50mli3hb64f9b>;
    "fee": Anonymize<Ia5l7mu5a6v49o>;
    "dest": Anonymize<I4c0s5cioidn76>;
};
export type I4oigsiqtj1dkn = AnonymousEnum<{
    /**
     *An account was created with some free balance.
     */
    "Endowed": Anonymize<I3d8ss06imalrs>;
    /**
     *An account was removed whose balance was non-zero but below
     *ExistentialDeposit, resulting in an outright loss.
     */
    "DustLost": Anonymize<I3d8ss06imalrs>;
    /**
     *Transfer succeeded.
     */
    "Transfer": Anonymize<I1452l7htqmdul>;
    /**
     *Some balance was reserved (moved from free to reserved).
     */
    "Reserved": Anonymize<I3d8ss06imalrs>;
    /**
     *Some balance was unreserved (moved from reserved to free).
     */
    "Unreserved": Anonymize<I3d8ss06imalrs>;
    /**
     *Some reserved balance was repatriated (moved from reserved to
     *another account).
     */
    "ReserveRepatriated": Anonymize<I5k7trgmhddpc9>;
    /**
     *A balance was set by root.
     */
    "BalanceSet": Anonymize<Ifg1v23kle5pvs>;
    /**
     *The total issuance of an currency has been set
     */
    "TotalIssuanceSet": Anonymize<Ic7aob2k1l1jfu>;
    /**
     *Some balances were withdrawn (e.g. pay for transaction fee)
     */
    "Withdrawn": Anonymize<I3d8ss06imalrs>;
    /**
     *Some balances were slashed (e.g. due to mis-behavior)
     */
    "Slashed": Anonymize<Idog3297nuhubu>;
    /**
     *Deposited some balance into an account
     */
    "Deposited": Anonymize<I3d8ss06imalrs>;
    /**
     *Some funds are locked
     */
    "LockSet": Anonymize<I7aphsup25pr8u>;
    /**
     *Some locked funds were unlocked
     */
    "LockRemoved": Anonymize<Id9ivc2gke7kda>;
    /**
     *Some free balance was locked.
     */
    "Locked": Anonymize<I3d8ss06imalrs>;
    /**
     *Some locked balance was freed.
     */
    "Unlocked": Anonymize<I3d8ss06imalrs>;
    "Issued": Anonymize<Ic7aob2k1l1jfu>;
    "Rescinded": Anonymize<Ic7aob2k1l1jfu>;
}>;
export type I3d8ss06imalrs = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": SS58String;
    "amount": bigint;
};
export type Iebirugq1dbhv6 = AnonymousEnum<{
    "Native": Anonymize<I3tfkbkbc856i7>;
    "VToken": Anonymize<I3tfkbkbc856i7>;
    "Token": Anonymize<I3tfkbkbc856i7>;
    "Stable": Anonymize<I3tfkbkbc856i7>;
    "VSToken": Anonymize<I3tfkbkbc856i7>;
    "VSBond": Anonymize<I5d6pire86rksa>;
    "LPToken": Anonymize<Ierlo06if3b4qb>;
    "ForeignAsset": number;
    "Token2": number;
    "VToken2": number;
    "VSToken2": number;
    "VSBond2": Anonymize<I6eon79p2t4ecj>;
    "StableLpToken": number;
    "BLP": number;
    "Lend": number;
}>;
export type I3tfkbkbc856i7 = AnonymousEnum<{
    "ASG": undefined;
    "BNC": undefined;
    "KUSD": undefined;
    "DOT": undefined;
    "KSM": undefined;
    "ETH": undefined;
    "KAR": undefined;
    "ZLK": undefined;
    "PHA": undefined;
    "RMRK": undefined;
    "MOVR": undefined;
}>;
export type I5d6pire86rksa = [Anonymize<I3tfkbkbc856i7>, number, number, number];
export type Ierlo06if3b4qb = [Anonymize<I3tfkbkbc856i7>, number, Anonymize<I3tfkbkbc856i7>, number];
export type I6eon79p2t4ecj = [number, number, number, number];
export type I1452l7htqmdul = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
};
export type I5k7trgmhddpc9 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
    "status": BalanceStatus;
};
export type Ifg1v23kle5pvs = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": SS58String;
    "free": bigint;
    "reserved": bigint;
};
export type Ic7aob2k1l1jfu = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type Idog3297nuhubu = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": SS58String;
    "free_amount": bigint;
    "reserved_amount": bigint;
};
export type I7aphsup25pr8u = {
    "lock_id": FixedSizeBinary<8>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": SS58String;
    "amount": bigint;
};
export type Id9ivc2gke7kda = {
    "lock_id": FixedSizeBinary<8>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": SS58String;
};
export type Ia2698nr6jkt = AnonymousEnum<{
    /**
     *Deposit success.
     */
    "Deposited": Anonymize<I7id9rd759h17f>;
    /**
     *Withdraw success.
     */
    "Withdrawn": Anonymize<I7id9rd759h17f>;
}>;
export type I7id9rd759h17f = {
    "asset": Anonymize<Ia5l7mu5a6v49o>;
    "who": Anonymize<I4c0s5cioidn76>;
};
export type I1615emstntqta = AnonymousEnum<{
    /**
     *XCM message sent. \[to, message\]
     */
    "Sent": Anonymize<Id3ajno3thjgec>;
}>;
export type Id3ajno3thjgec = {
    "to": Anonymize<I4c0s5cioidn76>;
    "message": Anonymize<Iegrepoo0c1jc5>;
};
export type I148v60cekcg36 = AnonymousEnum<{
    /**
     *Foreign Asset
     *Some assets were transferred. \[asset_id, owner, target, amount\]
     */
    "Transferred": Anonymize<I1kmrn95024uj4>;
    /**
     *Some assets were burned. \[asset_id, owner, amount\]
     */
    "Burned": Anonymize<Ibianp5jdpolv7>;
    /**
     *Some assets were minted. \[asset_id, owner, amount\]
     */
    "Minted": Anonymize<Ibianp5jdpolv7>;
    /**
     *Swap
     *Create a trading pair. \[asset_0, asset_1\]
     */
    "PairCreated": Anonymize<I84fmreorpmm3e>;
    /**
     *Add liquidity. \[owner, asset_0, asset_1, add_balance_0, add_balance_1,
     *mint_balance_lp\]
     */
    "LiquidityAdded": Anonymize<I9e73asfoaqs2i>;
    /**
     *Remove liquidity. \[owner, recipient, asset_0, asset_1, rm_balance_0, rm_balance_1,
     *burn_balance_lp\]
     */
    "LiquidityRemoved": Anonymize<I9ugpnf3tjcb6b>;
    /**
     *Transact in trading \[owner, recipient, swap_path, balances\]
     */
    "AssetSwap": Anonymize<Idg56vb718jpor>;
    /**
     *Transfer by xcm
     *Transferred to parachain. \[asset_id, src, para_id, dest, amount, used_weight\]
     */
    "TransferredToParachain": Anonymize<Icjttivfuq4kl0>;
    /**
     *Contribute to bootstrap pair. \[who, asset_0, asset_0_contribute, asset_1_contribute\]
     */
    "BootstrapContribute": Anonymize<I7aqqpfb5d3acb>;
    /**
     *A bootstrap pair end. \[asset_0, asset_1, asset_0_amount, asset_1_amount,
     *total_lp_supply]
     */
    "BootstrapEnd": Anonymize<I67tkv8m7b9as3>;
    /**
     *Create a bootstrap pair. \[bootstrap_pair_account, asset_0, asset_1,
     *total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1, end\]
     */
    "BootstrapCreated": Anonymize<I53hhk4qo3m9a6>;
    /**
     *Claim a bootstrap pair. \[bootstrap_pair_account, claimer, receiver, asset_0, asset_1,
     *asset_0_refund, asset_1_refund, lp_amount\]
     */
    "BootstrapClaim": Anonymize<I73e059ch622rh>;
    /**
     *Update a bootstrap pair. \[caller, asset_0, asset_1,
     *total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1\]
     */
    "BootstrapUpdate": Anonymize<I53hhk4qo3m9a6>;
    /**
     *Refund from disable bootstrap pair. \[bootstrap_pair_account, caller, asset_0, asset_1,
     *asset_0_refund, asset_1_refund\]
     */
    "BootstrapRefund": Anonymize<I8s0297rim8oc1>;
    /**
     *Bootstrap distribute some rewards to contributors.
     */
    "DistributeReward": Anonymize<Ibanc5bru9o3gt>;
    /**
     *Charge reward into a bootstrap.
     */
    "ChargeReward": Anonymize<Ibanc5bru9o3gt>;
    /**
     *Withdraw all reward from a bootstrap.
     */
    "WithdrawReward": Anonymize<Ia9haecbvl560l>;
}>;
export type I1kmrn95024uj4 = [Anonymize<Icu3qllmbdnj89>, SS58String, SS58String, bigint];
export type Icu3qllmbdnj89 = {
    "chain_id": number;
    "asset_type": number;
    "asset_index": bigint;
};
export type Ibianp5jdpolv7 = [Anonymize<Icu3qllmbdnj89>, SS58String, bigint];
export type I84fmreorpmm3e = FixedSizeArray<2, Anonymize<Icu3qllmbdnj89>>;
export type I9e73asfoaqs2i = [SS58String, Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, bigint, bigint, bigint];
export type I9ugpnf3tjcb6b = [SS58String, SS58String, Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, bigint, bigint, bigint];
export type Idg56vb718jpor = [SS58String, SS58String, Anonymize<Idhafor8sovqeu>, Anonymize<Iafqnechp3omqg>];
export type Idhafor8sovqeu = Array<Anonymize<Icu3qllmbdnj89>>;
export type Icjttivfuq4kl0 = [Anonymize<Icu3qllmbdnj89>, SS58String, number, SS58String, bigint, bigint];
export type I7aqqpfb5d3acb = [SS58String, Anonymize<Icu3qllmbdnj89>, bigint, Anonymize<Icu3qllmbdnj89>, bigint];
export type I67tkv8m7b9as3 = [Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, bigint, bigint, bigint];
export type I53hhk4qo3m9a6 = [SS58String, Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, bigint, bigint, bigint, bigint, number];
export type I73e059ch622rh = [SS58String, SS58String, SS58String, Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, bigint, bigint, bigint];
export type I8s0297rim8oc1 = [SS58String, SS58String, Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, bigint, bigint];
export type Ibanc5bru9o3gt = [Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, SS58String, Anonymize<I6sn46nd9sjbst>];
export type I6sn46nd9sjbst = Array<Anonymize<I8ete8au04h5ud>>;
export type I8ete8au04h5ud = [Anonymize<Icu3qllmbdnj89>, bigint];
export type Ia9haecbvl560l = [Anonymize<Icu3qllmbdnj89>, Anonymize<Icu3qllmbdnj89>, SS58String];
export type I6b02mu7kb5dhv = AnonymousEnum<{
    /**
     *create a merkle distributor. \ [merkle distributor id, merkle tree root, total reward
     *balance]
     */
    "Create": Anonymize<Inkkt4kut4uln>;
    /**
     *claim reward. \[merkle distributor id, account, balance]
     */
    "Claim": Anonymize<Icsknfl0f6r973>;
    /**
     *withdraw reward. \ [merkle distributor id, account, balance]
     */
    "Withdraw": Anonymize<Icsknfl0f6r973>;
    /**
     *add account who can create merkle distributor. \ [account]
     */
    "AddToWhiteList": SS58String;
    /**
     *remove account from the set who can create merkle distributor. \ [account]
     */
    "RemoveFromWhiteList": SS58String;
}>;
export type Inkkt4kut4uln = [number, FixedSizeBinary<32>, bigint];
export type Icsknfl0f6r973 = [number, SS58String, bigint];
export type I24fohni592gvp = AnonymousEnum<{
    "TransferTo": Anonymize<I7c48q22j7l1q8>;
    "FlexibleFeeExchanged": Anonymize<I51jchdmsddl7g>;
    "FixedRateFeeExchanged": Anonymize<Ifrnnpj83g127a>;
    "ExtraFeeDeducted": Anonymize<I6k4ii4m9s9088>;
}>;
export type I7c48q22j7l1q8 = {
    "from": SS58String;
    "target_chain": Anonymize<I4f3h5dkevfsu9>;
    "amount": bigint;
};
export type I4f3h5dkevfsu9 = AnonymousEnum<{
    "AssetHub": undefined;
    "RelayChain": undefined;
}>;
export type I51jchdmsddl7g = {
    "transaction_fee_currency": Anonymize<Iebirugq1dbhv6>;
    "transaction_fee_amount": bigint;
};
export type Ifrnnpj83g127a = [Anonymize<Iebirugq1dbhv6>, bigint];
export type I6k4ii4m9s9088 = {
    "operation": Anonymize<I2lb050h3aoir8>;
    "transaction_extra_fee_currency": Anonymize<Iebirugq1dbhv6>;
    "transaction_extra_fee_amount": bigint;
    "transaction_extra_fee_bnc_amount": bigint;
    "transaction_extra_fee_receiver": SS58String;
};
export type I2lb050h3aoir8 = AnonymousEnum<{
    "SalpContribute": undefined;
    "StatemineTransfer": undefined;
    "VoteVtoken": undefined;
    "VoteRemoveDelegatorVote": undefined;
    "NoExtraFee": undefined;
    "EthereumTransfer": undefined;
}>;
export type I87g1igl7tl927 = AnonymousEnum<{
    /**
     *Create a new crowdloaning campaign. [fund_index]
     */
    "Created": number;
    /**
     *Contributing to a crowd sale. [who, fund_index, amount]
     */
    "Contributing": Anonymize<Ic4lis4f2abd9o>;
    /**
     *Contributed to a crowd sale. [who, fund_index, amount]
     */
    "Contributed": Anonymize<I7fcree6lak6uv>;
    /**
     *Fail on contribute to crowd sale. [who, fund_index, amount]
     */
    "ContributeFailed": Anonymize<I7fcree6lak6uv>;
    /**
     *Withdrew full balance of a contributor. [who, fund_index, amount]
     */
    "Withdrew": Anonymize<I4ojmnsk1dchql>;
    /**
     *refund to account. [who, fund_index,value]
     */
    "Refunded": Anonymize<Icl5s4108hio7m>;
    /**
     *all refund
     */
    "AllRefunded": number;
    /**
     *redeem to account. [who, fund_index, first_slot, last_slot, value]
     */
    "Redeemed": Anonymize<Icl5s4108hio7m>;
    /**
     *Fund is edited. [fund_index]
     */
    "Edited": number;
    /**
     *Fund is dissolved. [fund_index]
     */
    "Dissolved": number;
    /**
     *The vsToken/vsBond was be unlocked. [who, fund_index, value]
     */
    "Unlocked": Anonymize<I7fcree6lak6uv>;
    "AllUnlocked": number;
    /**
     *Fund status change
     */
    "Failed": number;
    "Success": number;
    "Retired": number;
    "End": number;
    "Continued": Anonymize<Ielgh4t8o7rcvt>;
    "RefundedDissolved": Anonymize<Ielgh4t8o7rcvt>;
    "Buyback": bigint;
    "VstokenUnlocked": SS58String;
    "BuybackByStablePool": Anonymize<Iv901693moogd>;
    "Reserved": Anonymize<I93gagnlb9gm3u>;
    "ReservationCancelled": Anonymize<Idn2ghub1o4i40>;
    "ReservationFullyHandled": Anonymize<I37r4bdai8o9mp>;
    "ReservationHandled": Anonymize<I37r4bdai8o9mp>;
}>;
export type Ic4lis4f2abd9o = [SS58String, number, bigint, FixedSizeBinary<32>];
export type Icl5s4108hio7m = [SS58String, number, number, number, bigint];
export type Ielgh4t8o7rcvt = FixedSizeArray<3, number>;
export type Iv901693moogd = {
    "pool_id": number;
    "currency_id_in": Anonymize<Iebirugq1dbhv6>;
    "value": bigint;
};
export type I93gagnlb9gm3u = {
    "who": SS58String;
    "para_id": number;
    "value": bigint;
    "if_mint": boolean;
};
export type I2j5hk6ear7ial = AnonymousEnum<{
    /**
     *The asset registered.
     */
    "AssetRegistered": Anonymize<Ij8p6ct1brfmo>;
    /**
     *The asset updated.
     */
    "AssetUpdated": Anonymize<Ij8p6ct1brfmo>;
    /**
     *The CurrencyId registered.
     */
    "CurrencyIdRegistered": Anonymize<I7utese4puubr9>;
    /**
     *Location Force set.
     */
    "LocationSet": Anonymize<Id66lun10a9rk8>;
    /**
     *The CurrencyId updated.
     */
    "CurrencyIdUpdated": Anonymize<I7utese4puubr9>;
}>;
export type Ij8p6ct1brfmo = {
    "asset_id": Anonymize<I810b83nplvppm>;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type I810b83nplvppm = AnonymousEnum<{
    "ForeignAssetId": number;
    "NativeAssetId": Anonymize<Iebirugq1dbhv6>;
}>;
export type Ievgjq5dn6rae7 = {
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
    "minimal_balance": bigint;
};
export type I7utese4puubr9 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type Id66lun10a9rk8 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "location": Anonymize<I4c0s5cioidn76>;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type Iuelnuu9jk45g = AnonymousEnum<{
    "Minted": Anonymize<Ic8qh6l1k7b980>;
    "Redeemed": Anonymize<I9k1n93h3cgo9c>;
    "RedeemSuccess": Anonymize<I2926g4h7p9e6b>;
    "Rebonded": Anonymize<I58ljmqqpidpgt>;
    "RebondedByUnlockId": Anonymize<I9k1n93h3cgo9c>;
    "UnlockDurationSet": Anonymize<I53vlfub8vbal3>;
    "MinimumMintSet": Anonymize<Iaqh0vk9puj2m1>;
    "MinimumRedeemSet": Anonymize<Iaqh0vk9puj2m1>;
    "SupportRebondTokenAdded": Anonymize<Iaub8vq6tggv2c>;
    "SupportRebondTokenRemoved": Anonymize<Iaub8vq6tggv2c>;
    /**
     *Several fees has been set.
     */
    "FeeSet": Anonymize<Idkdd97l7v4t7o>;
    "HookIterationLimitSet": Anonymize<Iamlqp3gs21baf>;
    "UnlockingTotalSet": Anonymize<Iaqh0vk9puj2m1>;
    "MinTimeUnitSet": Anonymize<Ib8jf5ko4vdfjl>;
    "FastRedeemFailed": Anonymize<Ie5hdgsdibkjpr>;
    "CurrencyTimeUnitRecreated": Anonymize<Ib8jf5ko4vdfjl>;
    "IncentivizedMinting": Anonymize<I5t937m0prpjtt>;
    "VtokenIncentiveCoefSet": Anonymize<I3qnba6688atis>;
    "VtokenIncentiveLockBlocksSet": Anonymize<Ibost4cg9esf17>;
}>;
export type Ic8qh6l1k7b980 = {
    "address": SS58String;
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
    "vtoken_amount": bigint;
    "fee": bigint;
    "remark": Binary;
    "channel_id"?: Anonymize<I4arjljr6dpflb>;
};
export type I9k1n93h3cgo9c = {
    "address": SS58String;
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
    "vtoken_amount": bigint;
    "fee": bigint;
    "unlock_id": number;
};
export type I2926g4h7p9e6b = {
    "unlock_id": number;
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "to": Anonymize<I52c52m8jh00fs>;
    "token_amount": bigint;
};
export type I52c52m8jh00fs = AnonymousEnum<{
    "Native": SS58String;
    "Astar": SS58String;
    "Moonbeam": FixedSizeBinary<20>;
    "Hydradx": SS58String;
    "Interlay": SS58String;
    "Manta": SS58String;
}>;
export type I58ljmqqpidpgt = {
    "address": SS58String;
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
    "vtoken_amount": bigint;
    "fee": bigint;
};
export type I53vlfub8vbal3 = {
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "unlock_duration": Anonymize<Id6ihttoi261us>;
};
export type Id6ihttoi261us = AnonymousEnum<{
    "Era": number;
    "SlashingSpan": number;
    "Round": number;
    "Kblock": number;
    "Hour": number;
}>;
export type Iaqh0vk9puj2m1 = {
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type Iaub8vq6tggv2c = {
    "token_id": Anonymize<Iebirugq1dbhv6>;
};
export type Idkdd97l7v4t7o = {
    "mint_fee": number;
    "redeem_fee": number;
};
export type Iamlqp3gs21baf = {
    "limit": number;
};
export type Ib8jf5ko4vdfjl = {
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "time_unit": Anonymize<Id6ihttoi261us>;
};
export type Ie5hdgsdibkjpr = {
    "err": Anonymize<I8vqm6ghktndjq>;
};
export type I5t937m0prpjtt = {
    "address": SS58String;
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
    "locked_vtoken_amount": bigint;
    "incentive_vtoken_amount": bigint;
};
export type I3qnba6688atis = {
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
    "coefficient"?: Anonymize<I35p85j063s0il>;
};
export type Ibost4cg9esf17 = {
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
    "blocks"?: Anonymize<I4arjljr6dpflb>;
};
export type I5jumpe7oiv3dr = AnonymousEnum<{
    "DelegatorInitialized": Anonymize<Iab17gup71picv>;
    "DelegatorBonded": Anonymize<I2p503tvhr95gj>;
    "DelegatorBondExtra": Anonymize<I9grg7g6ua578n>;
    "DelegatorUnbond": Anonymize<I6umd4hgu2puph>;
    "DelegatorUnbondAll": Anonymize<I44127qd8nvu47>;
    "DelegatorRebond": Anonymize<I5tdcum59p9pac>;
    "Delegated": Anonymize<I2dgahqu6ln4jl>;
    "Undelegated": Anonymize<I1hn8tvlbussv>;
    "Payout": Anonymize<I96on68vm4ih94>;
    "Liquidize": Anonymize<Idgas9g0pc3k9g>;
    "Chill": Anonymize<I44127qd8nvu47>;
    "TransferBack": Anonymize<Ibu6i8jb58o30n>;
    "TransferTo": Anonymize<Ibu6i8jb58o30n>;
    "ConvertAsset": Anonymize<Iaevo3h2jsoemi>;
    "DelegatorAdded": Anonymize<Iep8a74k7e6r72>;
    "DelegatorRemoved": Anonymize<Iab17gup71picv>;
    "ValidatorsAdded": Anonymize<Ib6t0ubljgp22u>;
    "ValidatorsRemoved": Anonymize<Ib6t0ubljgp22u>;
    "Refund": Anonymize<I3rgoh4223434f>;
    "FundMoveFromExitToEntrance": Anonymize<Ic7aob2k1l1jfu>;
    "TimeUnitUpdated": Anonymize<I2vfuukfl5d6al>;
    "PoolTokenIncreased": Anonymize<Ic7aob2k1l1jfu>;
    "HostingFeeCharged": Anonymize<Ic7aob2k1l1jfu>;
    "PoolTokenDecreased": Anonymize<Ic7aob2k1l1jfu>;
    "FeeSupplemented": Anonymize<Ibu6i8jb58o30n>;
    "ValidatorsByDelegatorSet": Anonymize<I9ns66h5mcst21>;
    "OperateOriginSet": Anonymize<I5ch6hqvso9cfc>;
    "FeeSourceSet": Anonymize<Inp8hn3mu8c5j>;
    "DelegatorLedgerSet": Anonymize<I81p9lds919n0g>;
    "DelegatorLedgerQueryResponseConfirmed": Anonymize<I87hura2cobcv1>;
    "DelegatorLedgerQueryResponseFailed": Anonymize<I30pg328m00nr3>;
    "ValidatorsByDelegatorQueryResponseConfirmed": Anonymize<I3lbtb6q8ittcg>;
    "ValidatorsByDelegatorQueryResponseFailed": Anonymize<I30pg328m00nr3>;
    "MinimumsMaximumsSet": Anonymize<I788n87nobc2o6>;
    "CurrencyDelaysSet": Anonymize<I99tkds5qdlj77>;
    "HostingFeesSet": Anonymize<Ian267bdq9joaf>;
    "CurrencyTuneExchangeRateLimitSet": Anonymize<I91fa8tnsgpjgh>;
    "OngoingTimeUnitUpdateIntervalSet": Anonymize<Iemo1133hhf28q>;
    "SupplementFeeAccountWhitelistAdded": Anonymize<Iaba972j3va7k>;
    "SupplementFeeAccountWhitelistRemoved": Anonymize<Iaba972j3va7k>;
    "ValidatorsReset": Anonymize<Id37b9l6bk2ii9>;
    "ValidatorBoostListSet": Anonymize<I8o6tg2fcd6krf>;
    "ValidatorBoostListAdded": Anonymize<Iouj49kqoegp1>;
    "RemovedFromBoostList": Anonymize<Iaba972j3va7k>;
    "OutdatedValidatorBoostListCleaned": Anonymize<Ife8sj002g6s56>;
    "BurnFeeFailed": Anonymize<Ic7aob2k1l1jfu>;
}>;
export type Iab17gup71picv = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
};
export type I2p503tvhr95gj = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "bonded_amount": bigint;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
    "validator"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I9grg7g6ua578n = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "extra_bonded_amount": bigint;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
    "validator"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I6umd4hgu2puph = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "unbond_amount": bigint;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
    "validator"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I44127qd8nvu47 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
};
export type I5tdcum59p9pac = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "rebond_amount"?: Anonymize<I35p85j063s0il>;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
    "validator"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I2dgahqu6ln4jl = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "targets"?: Anonymize<Ia866hqrh833qa>;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
};
export type Ia866hqrh833qa = (Anonymize<Ia88a8r9e89e2p>) | undefined;
export type I1hn8tvlbussv = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "targets": Anonymize<Ia88a8r9e89e2p>;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
};
export type I96on68vm4ih94 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "validator": Anonymize<I4c0s5cioidn76>;
    "time_unit"?: Anonymize<I6o0vlee7cr3h2>;
};
export type I6o0vlee7cr3h2 = (Anonymize<Id6ihttoi261us>) | undefined;
export type Idgas9g0pc3k9g = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "time_unit"?: Anonymize<I6o0vlee7cr3h2>;
    "query_id": bigint;
    "query_id_hash": FixedSizeBinary<32>;
    "amount"?: Anonymize<I35p85j063s0il>;
};
export type Ibu6i8jb58o30n = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "from": Anonymize<I4c0s5cioidn76>;
    "to": Anonymize<I4c0s5cioidn76>;
    "amount": bigint;
};
export type Iaevo3h2jsoemi = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "amount": bigint;
};
export type Iep8a74k7e6r72 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "index": number;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
};
export type Ib6t0ubljgp22u = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "validator_id": Anonymize<I4c0s5cioidn76>;
};
export type I3rgoh4223434f = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "time_unit": Anonymize<Id6ihttoi261us>;
    "index": number;
    "amount": bigint;
};
export type I2vfuukfl5d6al = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "old"?: Anonymize<I6o0vlee7cr3h2>;
    "new": Anonymize<Id6ihttoi261us>;
};
export type I9ns66h5mcst21 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "validators_list": Anonymize<Ia88a8r9e89e2p>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
};
export type I5ch6hqvso9cfc = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "operator"?: Anonymize<Ihfphjolmsqq1>;
};
export type Inp8hn3mu8c5j = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who_and_fee"?: Anonymize<I6vmgaj8a8bva0>;
};
export type I6vmgaj8a8bva0 = (Anonymize<Iadrpn9mhdu2rp>) | undefined;
export type I81p9lds919n0g = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator": Anonymize<I4c0s5cioidn76>;
    "ledger"?: Anonymize<I9plp53g8mj92d>;
};
export type I9plp53g8mj92d = (Anonymize<I65gcqchov0ds9>) | undefined;
export type I65gcqchov0ds9 = AnonymousEnum<{
    "Substrate": Anonymize<I3kimt5gdk24e6>;
    "Moonbeam": Anonymize<It4uapc90peik>;
    "ParachainStaking": Anonymize<It4uapc90peik>;
    "Filecoin": Anonymize<I2k6ddevt40fdq>;
    "Phala": Anonymize<Ieir0q0o6tf5i2>;
}>;
export type I3kimt5gdk24e6 = {
    "account": Anonymize<I4c0s5cioidn76>;
    "total": bigint;
    "active": bigint;
    "unlocking": Anonymize<I87khbpnb2el8c>;
};
export type I87khbpnb2el8c = Array<Anonymize<Iadtma10dh4d48>>;
export type Iadtma10dh4d48 = {
    "value": bigint;
    "unlock_time": Anonymize<Id6ihttoi261us>;
};
export type It4uapc90peik = {
    "account": Anonymize<I4c0s5cioidn76>;
    "delegations": Anonymize<Ibirh7ova056d>;
    "total": bigint;
    "less_total": bigint;
    "requests": Anonymize<I2osq34ldgd4j1>;
    "request_briefs": Anonymize<I4k04k0f2ak215>;
    "status": Anonymize<Ic3rl115lef0o8>;
};
export type I2osq34ldgd4j1 = Array<Anonymize<Id9uf38j5h7dbt>>;
export type Id9uf38j5h7dbt = {
    "validator": Anonymize<I4c0s5cioidn76>;
    "when_executable": Anonymize<Id6ihttoi261us>;
    "action": Anonymize<Ibtq25m1pbdmfs>;
};
export type Ibtq25m1pbdmfs = AnonymousEnum<{
    "Revoke": bigint;
    "Decrease": bigint;
}>;
export type I4k04k0f2ak215 = Array<Anonymize<I5udsshs0iv9ur>>;
export type I5udsshs0iv9ur = [Anonymize<I4c0s5cioidn76>, Anonymize<I3d62rveoevdu7>];
export type I3d62rveoevdu7 = [Anonymize<Id6ihttoi261us>, bigint];
export type Ic3rl115lef0o8 = AnonymousEnum<{
    "Active": undefined;
    "Leaving": Anonymize<Id6ihttoi261us>;
}>;
export type I2k6ddevt40fdq = {
    "account": Anonymize<I4c0s5cioidn76>;
    "initial_pledge": bigint;
};
export type Ieir0q0o6tf5i2 = {
    "account": Anonymize<I4c0s5cioidn76>;
    "active_shares": bigint;
    "unlocking_shares": bigint;
    "unlocking_time_unit"?: Anonymize<I6o0vlee7cr3h2>;
    "bonded_pool_id"?: Anonymize<I35p85j063s0il>;
    "bonded_pool_collection_id"?: Anonymize<I4arjljr6dpflb>;
    "bonded_is_vault"?: Anonymize<I8ie0dco0kcuq5>;
};
export type I87hura2cobcv1 = {
    "query_id": bigint;
    "entry": Anonymize<Ib9sn2bmfqddi7>;
};
export type Ib9sn2bmfqddi7 = AnonymousEnum<{
    "Substrate": Anonymize<Ie9ntesuf6urds>;
    "Moonbeam": Anonymize<I49tbsgaog64m7>;
    "ParachainStaking": Anonymize<I49tbsgaog64m7>;
}>;
export type Ie9ntesuf6urds = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "update_operation": Anonymize<I8tcqv74pl8teo>;
    "amount": bigint;
    "unlock_time"?: Anonymize<I6o0vlee7cr3h2>;
};
export type I8tcqv74pl8teo = AnonymousEnum<{
    "Bond": undefined;
    "Unlock": undefined;
    "Rebond": undefined;
    "Liquidize": undefined;
}>;
export type I49tbsgaog64m7 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "validator_id"?: Anonymize<Ia9cgf4r40b26h>;
    "update_operation": Anonymize<I9ss9ki15b8s18>;
    "amount": bigint;
    "unlock_time"?: Anonymize<I6o0vlee7cr3h2>;
};
export type I9ss9ki15b8s18 = AnonymousEnum<{
    "Bond": undefined;
    "BondLess": undefined;
    "Revoke": undefined;
    "CancelRequest": undefined;
    "LeaveDelegator": undefined;
    "CancelLeave": undefined;
    "ExecuteLeave": undefined;
    "ExecuteRequest": undefined;
}>;
export type I3lbtb6q8ittcg = {
    "query_id": bigint;
    "entry": Anonymize<I14u04kl21424d>;
};
export type I14u04kl21424d = AnonymousEnum<{
    "Substrate": Anonymize<I6liagp13kpvgu>;
}>;
export type I6liagp13kpvgu = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_id": Anonymize<I4c0s5cioidn76>;
    "validators": Anonymize<Ia88a8r9e89e2p>;
};
export type I788n87nobc2o6 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "minimums_and_maximums"?: Anonymize<Iavcon0kdmah9g>;
};
export type Iavcon0kdmah9g = (Anonymize<Idmnfldthdnj8h>) | undefined;
export type Idmnfldthdnj8h = {
    "delegator_bonded_minimum": bigint;
    "bond_extra_minimum": bigint;
    "unbond_minimum": bigint;
    "rebond_minimum": bigint;
    "unbond_record_maximum": number;
    "validators_back_maximum": number;
    "delegator_active_staking_maximum": bigint;
    "validators_reward_maximum": number;
    "delegation_amount_minimum": bigint;
    "delegators_maximum": number;
    "validators_maximum": number;
};
export type I99tkds5qdlj77 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delays"?: Anonymize<I2fl7rg40jnqc3>;
};
export type I2fl7rg40jnqc3 = (Anonymize<I98pjho0jvtfaa>) | undefined;
export type I98pjho0jvtfaa = {
    "unlock_delay": Anonymize<Id6ihttoi261us>;
    "leave_delegators_delay": Anonymize<Id6ihttoi261us>;
};
export type Ian267bdq9joaf = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "fees"?: Anonymize<Ibpetveugk1l63>;
};
export type Ibpetveugk1l63 = (Anonymize<I7uhs5s0pidt2q>) | undefined;
export type I7uhs5s0pidt2q = [number, Anonymize<I4c0s5cioidn76>];
export type I91fa8tnsgpjgh = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "tune_exchange_rate_limit"?: Anonymize<Iep7au1720bm0e>;
};
export type Iemo1133hhf28q = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "interval"?: Anonymize<I4arjljr6dpflb>;
};
export type Iaba972j3va7k = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
};
export type Id37b9l6bk2ii9 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "validator_list": Anonymize<Ia88a8r9e89e2p>;
};
export type I8o6tg2fcd6krf = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "validator_boost_list": Anonymize<I4qitokr7lpmpu>;
};
export type I4qitokr7lpmpu = Array<Anonymize<I1n4n0aivvpoko>>;
export type I1n4n0aivvpoko = [Anonymize<I4c0s5cioidn76>, number];
export type Iouj49kqoegp1 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "due_block_number": number;
};
export type Ife8sj002g6s56 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "page": number;
    "remove_num": number;
    "num_left": number;
};
export type Ifdbh69clar5fi = AnonymousEnum<{
    "XcmDestWeightAndFeeUpdated": Anonymize<I400tsccl54f69>;
    "TransferredStatemineMultiAsset": Anonymize<I95l2k9b1re95f>;
    "TransferredEthereumAssets": Anonymize<I7i2rquf9o1sc4>;
}>;
export type I400tsccl54f69 = [Anonymize<I8vi5hrpkv8lci>, Anonymize<Iebirugq1dbhv6>, Anonymize<I4q39t5hn830vp>, bigint];
export type I8vi5hrpkv8lci = AnonymousEnum<{
    "UmpContributeTransact": undefined;
    "StatemineTransfer": undefined;
    "Bond": undefined;
    "WithdrawUnbonded": undefined;
    "BondExtra": undefined;
    "Unbond": undefined;
    "Rebond": undefined;
    "Delegate": undefined;
    "Payout": undefined;
    "Liquidize": undefined;
    "TransferBack": undefined;
    "TransferTo": undefined;
    "Chill": undefined;
    "Undelegate": undefined;
    "CancelLeave": undefined;
    "XtokensTransferBack": undefined;
    "ExecuteLeave": undefined;
    "ConvertAsset": undefined;
    "Vote": undefined;
    "RemoveVote": undefined;
    "Any": undefined;
    "SupplementaryFee": undefined;
    "EthereumTransfer": undefined;
    "TeleportAssets": undefined;
}>;
export type I7i2rquf9o1sc4 = [SS58String, FixedSizeBinary<20>, bigint];
export type I6rndlmfeiieis = AnonymousEnum<{
    "VsbondConvertToVsksm": Anonymize<I41epceuu5tcos>;
    "VsksmConvertToVsbond": Anonymize<I41epceuu5tcos>;
    "VsbondConvertToVsdot": Anonymize<I44sdvnu7uoqf6>;
    "VsdotConvertToVsbond": Anonymize<I44sdvnu7uoqf6>;
    "VsbondConvertToVstoken": Anonymize<I75rts6phosqgv>;
    "VstokenConvertToVsbond": Anonymize<I75rts6phosqgv>;
    "ExchangeFeeSet": Anonymize<I7dim4s22d4cc>;
    "ExchangeRateSet": Anonymize<I9adoavqh7j1qm>;
    "RelaychainLeaseSet": Anonymize<I2cnb8psb4ovvm>;
}>;
export type I41epceuu5tcos = {
    "address": SS58String;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "vsbond_amount": bigint;
    "vsksm_amount": bigint;
};
export type I44sdvnu7uoqf6 = {
    "address": SS58String;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "vsbond_amount": bigint;
    "vsdot_amount": bigint;
};
export type I75rts6phosqgv = {
    "address": SS58String;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "vsbond_amount": bigint;
    "vstoken_amount": bigint;
};
export type I7dim4s22d4cc = {
    "exchange_fee": Anonymize<I8pl16po8ngde>;
};
export type I8pl16po8ngde = {
    "vstoken_exchange_fee": bigint;
    "vsbond_exchange_fee_of_vstoken": bigint;
};
export type I9adoavqh7j1qm = {
    "lease": number;
    "exchange_rate": Anonymize<Icq8st9st73vh1>;
};
export type Icq8st9st73vh1 = {
    "vsbond_convert_to_vstoken": number;
    "vstoken_convert_to_vsbond": number;
};
export type I2cnb8psb4ovvm = {
    "lease": number;
};
export type Ib4kfr029k1p67 = AnonymousEnum<{
    "FarmingPoolCreated": Anonymize<Ier970hnn9pgrj>;
    "FarmingPoolReset": Anonymize<Ier970hnn9pgrj>;
    "FarmingPoolClosed": Anonymize<Ier970hnn9pgrj>;
    "FarmingPoolKilled": Anonymize<Ier970hnn9pgrj>;
    "FarmingPoolEdited": Anonymize<Ier970hnn9pgrj>;
    "Charged": Anonymize<Icb02sf8acip7e>;
    "Deposited": Anonymize<Icuvu3196vt9at>;
    "Withdrawn": Anonymize<Ibjg5nv0nue710>;
    "Claimed": Anonymize<Ic7bjpulvng8ff>;
    "WithdrawClaimed": Anonymize<Ic7bjpulvng8ff>;
    "GaugeWithdrawn": Anonymize<I821hq5m5igcn>;
    "AllForceGaugeClaimed": Anonymize<Ial5va0b0vs25o>;
    "PartiallyForceGaugeClaimed": Anonymize<Ial5va0b0vs25o>;
    "AllRetired": Anonymize<Ier970hnn9pgrj>;
    "PartiallyRetired": Anonymize<Ier970hnn9pgrj>;
    "RetireLimitSet": Anonymize<Iamlqp3gs21baf>;
    "RoundEnd": Anonymize<I1fd2u5ls04lpi>;
    "RoundStartError": Anonymize<If0231b9rdj4o8>;
    "RoundStart": Anonymize<Icn7fuqv1aq0de>;
    "Voted": Anonymize<I2d67dgvoue7rb>;
    "BoostCharged": Anonymize<I2sfpbn9h49adg>;
}>;
export type Ier970hnn9pgrj = {
    "pid": number;
};
export type Icb02sf8acip7e = {
    "who": SS58String;
    "pid": number;
    "rewards": Anonymize<I2dbamvpq4935>;
    "if_gauge": boolean;
};
export type I2dbamvpq4935 = Array<Anonymize<Ifrnnpj83g127a>>;
export type Icuvu3196vt9at = {
    "who": SS58String;
    "pid": number;
    "add_value": bigint;
    "gauge_info"?: Anonymize<I76de2jfh8ds4a>;
};
export type I76de2jfh8ds4a = (Anonymize<I6cs1itejju2vv>) | undefined;
export type Ibjg5nv0nue710 = {
    "who": SS58String;
    "pid": number;
    "remove_value"?: Anonymize<I35p85j063s0il>;
};
export type Ic7bjpulvng8ff = {
    "who": SS58String;
    "pid": number;
};
export type I821hq5m5igcn = {
    "who": SS58String;
    "gid": number;
};
export type Ial5va0b0vs25o = {
    "gid": number;
};
export type I1fd2u5ls04lpi = {
    "total_votes": bigint;
    "start_round": number;
    "end_round": number;
};
export type If0231b9rdj4o8 = {
    "info": Anonymize<I8vqm6ghktndjq>;
};
export type Icn7fuqv1aq0de = {
    "round_length": number;
};
export type I2d67dgvoue7rb = {
    "who": SS58String;
    "vote_list": Anonymize<Iep4uo61810hfs>;
};
export type I2sfpbn9h49adg = {
    "who": SS58String;
    "rewards": Anonymize<I2dbamvpq4935>;
};
export type Iasccjvgh979uu = AnonymousEnum<{
    "NewRound": Anonymize<Ial6i7mt9utr8>;
    "TokenConfigChanged": Anonymize<I1fb7qva1sdhbi>;
    "DepositFailed": Anonymize<I87f6s7muvahou>;
    "MintSuccess": Anonymize<I87f6s7muvahou>;
    "MintFailed": Anonymize<I87f6s7muvahou>;
    "WithdrawSuccess": Anonymize<I87f6s7muvahou>;
    "WithdrawFailed": Anonymize<I87f6s7muvahou>;
    "Redeemed": Anonymize<I87f6s7muvahou>;
    "RedeemFailed": Anonymize<I87f6s7muvahou>;
    "VtokenNotFound": Anonymize<Ibmoqhjadutned>;
    "TokenInfoRefreshed": Anonymize<Ibmoqhjadutned>;
    "Payout": Anonymize<Idmkbek876hj4c>;
}>;
export type Ial6i7mt9utr8 = {
    "current": number;
    "first": number;
    "length": number;
};
export type I1fb7qva1sdhbi = {
    "token": Anonymize<Iebirugq1dbhv6>;
    "exec_delay": number;
    "system_stakable_farming_rate": number;
    "add_or_sub": boolean;
    "system_stakable_base": bigint;
    "farming_poolids": Anonymize<Icgljjb6j82uhn>;
    "lptoken_rates": Anonymize<Icgljjb6j82uhn>;
};
export type I87f6s7muvahou = {
    "token": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
    "farming_staking_amount": bigint;
    "system_stakable_amount": bigint;
    "system_shadow_amount": bigint;
    "pending_redeem_amount": bigint;
};
export type Ibmoqhjadutned = {
    "token": Anonymize<Iebirugq1dbhv6>;
};
export type Idmkbek876hj4c = {
    "token": Anonymize<Iebirugq1dbhv6>;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
    "free": bigint;
    "vfree": bigint;
    "shadow": bigint;
};
export type I14o240sgpd5l0 = AnonymousEnum<{
    "Charged": Anonymize<Icglvublte8208>;
    "ConfigSet": Anonymize<Idtq61tuc2ualk>;
    "Closed": Anonymize<I6dlum3cbrie3d>;
    "Paid": Anonymize<I6e7p4l5e6t7n6>;
    "RedeemFailed": Anonymize<Iee34otfoboion>;
}>;
export type Icglvublte8208 = {
    "who": SS58String;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "value": bigint;
};
export type Idtq61tuc2ualk = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "info": Anonymize<I17n1fg1r6mg6q>;
};
export type I17n1fg1r6mg6q = {
    "vcurrency_id": Anonymize<Iebirugq1dbhv6>;
    "annualization": number;
    "granularity": bigint;
    "minimum_redeem": bigint;
};
export type I6dlum3cbrie3d = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
};
export type I6e7p4l5e6t7n6 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "value": bigint;
};
export type Iee34otfoboion = {
    "vcurrency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type Ickekbsj4u887j = AnonymousEnum<{
    /**
     *A successful call of the `CreateDistribution` extrinsic will create this event.
     */
    "Created": Anonymize<I3096t0on20q3r>;
    /**
     *A successful call of the `EditDistribution` extrinsic will create this event.
     */
    "Edited": Anonymize<I3096t0on20q3r>;
    /**
     *A successful call of the `SetEraLength` extrinsic will create this event.
     */
    "EraLengthSet": Anonymize<I1s5stmgs1hmpi>;
    /**
     *A successful call of the `ExecuteDistribute` extrinsic will create this event.
     */
    "Executed": Anonymize<I6d2fsv919ackd>;
    /**
     *A successful call of the `DeleteDistribution` extrinsic will create this event.
     */
    "Deleted": Anonymize<I6d2fsv919ackd>;
    /**
     *A failed call of the `ExecuteDistribute` extrinsic will create this event.
     */
    "ExecuteFailed": Anonymize<Im4b2ikida3i9>;
    /**
     *A successful call of the `SetUSDConfig` extrinsic will create this event.
     */
    "USDConfigSet": Anonymize<Ia6mtguicisar7>;
}>;
export type I3096t0on20q3r = {
    /**
     *Distribution ID
     */
    "distribution_id": number;
    /**
     *Distribution information
     */
    "info": Anonymize<Ifm7mj15s63a8e>;
};
export type Ifm7mj15s63a8e = {
    "fee_share_account_id": SS58String;
    "token_type": Anonymize<I6ae21pstqk9et>;
    "if_auto": boolean;
};
export type I6ae21pstqk9et = Array<Anonymize<Iebirugq1dbhv6>>;
export type I1s5stmgs1hmpi = {
    /**
     *The interval between distribution executions
     */
    "era_length": number;
    /**
     *The block number of the next era
     */
    "next_era": number;
};
export type I6d2fsv919ackd = {
    /**
     *Distribution ID
     */
    "distribution_id": number;
};
export type Im4b2ikida3i9 = {
    /**
     *Distribution ID
     */
    "distribution_id": number;
    /**
     *Distribution information
     */
    "info": Anonymize<Ifm7mj15s63a8e>;
    /**
     *The block number of the next era
     */
    "next_era": number;
};
export type Ia6mtguicisar7 = {
    /**
     *Distribution ID
     */
    "distribution_id": number;
    /**
     *USD standard information
     */
    "info": Anonymize<Ieqteqhnicu2mf>;
};
export type Ieqteqhnicu2mf = {
    "target_value": bigint;
    "cumulative": bigint;
    "target_account_id": SS58String;
    "target_block": number;
    "interval": number;
};
export type I9mn9kur5pfvb9 = AnonymousEnum<{
    "CrossedOut": Anonymize<I98o48iiltrobs>;
    "CrossedIn": Anonymize<I2p9m6o5aeern2>;
    "CurrencyRegistered": Anonymize<I6dlum3cbrie3d>;
    "CurrencyDeregistered": Anonymize<I6dlum3cbrie3d>;
    "AddedToIssueList": Anonymize<Iapol5cojcq8jr>;
    "RemovedFromIssueList": Anonymize<Iapol5cojcq8jr>;
    "LinkedAccountRegistered": Anonymize<I6jagi4fq1m7jf>;
    "AddedToRegisterList": Anonymize<Iapol5cojcq8jr>;
    "RemovedFromRegisterList": Anonymize<Iapol5cojcq8jr>;
    "CrossingMinimumAmountSet": Anonymize<Iarqih3rei93nj>;
}>;
export type I98o48iiltrobs = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "crosser": SS58String;
    "location": Anonymize<I4frqunb5hj2km>;
    "amount": bigint;
};
export type I2p9m6o5aeern2 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "dest": SS58String;
    "location": Anonymize<I4frqunb5hj2km>;
    "amount": bigint;
    "remark"?: Anonymize<Iabpgqcjikia83>;
};
export type Iapol5cojcq8jr = {
    "account": SS58String;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
};
export type I6jagi4fq1m7jf = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": SS58String;
    "foreign_location": Anonymize<I4frqunb5hj2km>;
};
export type Iarqih3rei93nj = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "cross_in_minimum": bigint;
    "cross_out_minimum": bigint;
};
export type Icv422q6sojb69 = AnonymousEnum<{
    "ConfigSet": Anonymize<Ia1c7uq2ou2f8e>;
    "Minted": Anonymize<I8d3b6ni041b6h>;
    "Supply": Anonymize<I9l001vgvntb06>;
    "LockCreated": Anonymize<Ie17kej7hsdmmu>;
    "UnlockTimeIncreased": Anonymize<Ie9o1s2mbkduq7>;
    "AmountIncreased": Anonymize<I583v57rub6gg>;
    "Withdrawn": Anonymize<I9f6jrn22qs7ek>;
    "IncentiveSet": Anonymize<I1ufpmtovuj4nl>;
    "RewardAdded": Anonymize<Ifift2upjktcjs>;
    "Rewarded": Anonymize<I4e0mai1r79fau>;
    "AllRefreshed": Anonymize<If0uionjq98ocd>;
    "PartiallyRefreshed": Anonymize<If0uionjq98ocd>;
    "NotifyRewardFailed": Anonymize<Ifift2upjktcjs>;
}>;
export type Ia1c7uq2ou2f8e = {
    "config": Anonymize<Iaa6gfhcgert4g>;
};
export type Iaa6gfhcgert4g = {
    "amount": bigint;
    "min_mint": bigint;
    "min_block": number;
};
export type I8d3b6ni041b6h = {
    "addr": bigint;
    "value": bigint;
    "end": number;
    "now": number;
};
export type I9l001vgvntb06 = {
    "supply_before": bigint;
    "supply": bigint;
};
export type Ie17kej7hsdmmu = {
    "addr": SS58String;
    "value": bigint;
    "unlock_time": number;
};
export type Ie9o1s2mbkduq7 = {
    "addr": bigint;
    "unlock_time": number;
};
export type I583v57rub6gg = {
    "who": SS58String;
    "position": bigint;
    "value": bigint;
};
export type I9f6jrn22qs7ek = {
    "addr": bigint;
    "value": bigint;
};
export type I1ufpmtovuj4nl = {
    "incentive_config": Anonymize<Iei9bnssh84mli>;
};
export type Iei9bnssh84mli = {
    "reward_rate": Anonymize<I2dbamvpq4935>;
    "reward_per_token_stored": Anonymize<I2dbamvpq4935>;
    "rewards_duration": number;
    "period_finish": number;
    "last_update_time": number;
    "incentive_controller"?: Anonymize<Ihfphjolmsqq1>;
    "last_reward": Anonymize<I2dbamvpq4935>;
};
export type Ifift2upjktcjs = {
    "rewards": Anonymize<I2dbamvpq4935>;
};
export type I4e0mai1r79fau = {
    "addr": SS58String;
    "rewards": Anonymize<I2dbamvpq4935>;
};
export type If0uionjq98ocd = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
};
export type I2226d83nk0n8o = AnonymousEnum<{
    "AddWhitelistAccountId": Anonymize<I21asuar23h6m2>;
    "RemoveWhitelistAccountId": Anonymize<I21asuar23h6m2>;
    "XcmMint": Anonymize<I6nbgq3m8fo4u0>;
    "XcmMintFailed": Anonymize<I6nbgq3m8fo4u0>;
    "XcmZenlinkSwap": Anonymize<Iaitah9dps9he1>;
    "XcmZenlinkSwapFailed": Anonymize<Ifq82osotbtg30>;
    "XcmStablePoolSwap": Anonymize<Ifoig06hjqh9bp>;
    "XcmStablePoolSwapFailed": Anonymize<Idqdin6cl9bl0g>;
    "XcmRedeem": Anonymize<I240tht746522h>;
    "XcmRedeemFailed": Anonymize<I240tht746522h>;
    "SetTransferToFee": Anonymize<I6s65kicknm51n>;
    "SetExecutionFee": Anonymize<I7u9oegj4csj51>;
    "SetCurrencyEthereumCallSwitch": Anonymize<Ifuaakr3i6qaje>;
    "SetEthereumCallConfiguration": Anonymize<I792urf76hgnm9>;
    "XcmSetTokenAmount": Anonymize<I9rh8nddi47gn0>;
    "SetCurrencyToSupportXcmFee": Anonymize<Ifuaakr3i6qaje>;
    "SetDelayBlock": Anonymize<I7j4i782lpafvm>;
    "CreateOrder": Anonymize<Ih1mephl4egav>;
    "OrderHandled": Anonymize<Ih1mephl4egav>;
    "OrderFailed": Anonymize<Ih1mephl4egav>;
    "InsufficientAssets": undefined;
}>;
export type I21asuar23h6m2 = {
    "support_chain": Anonymize<I3em9l2q88o7if>;
    "evm_contract_account_id": SS58String;
};
export type I3em9l2q88o7if = AnonymousEnum<{
    "Astar": undefined;
    "Moonbeam": undefined;
    "Hydradx": undefined;
    "Interlay": undefined;
    "Manta": undefined;
}>;
export type I6nbgq3m8fo4u0 = {
    "evm_caller": FixedSizeBinary<20>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type I4ntr4rk45le9 = AnonymousEnum<{
    "Astar": FixedSizeBinary<20>;
    "Moonbeam": FixedSizeBinary<20>;
    "Hydradx": SS58String;
    "Interlay": SS58String;
    "Manta": SS58String;
}>;
export type Iaitah9dps9he1 = {
    "evm_caller": FixedSizeBinary<20>;
    "currency_id_in": Anonymize<Iebirugq1dbhv6>;
    "currency_id_out": Anonymize<Iebirugq1dbhv6>;
    "currency_id_out_amount": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type Ifq82osotbtg30 = {
    "evm_caller": FixedSizeBinary<20>;
    "currency_id_in": Anonymize<Iebirugq1dbhv6>;
    "currency_id_out": Anonymize<Iebirugq1dbhv6>;
    "currency_id_in_amount": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type Ifoig06hjqh9bp = {
    "evm_caller": FixedSizeBinary<20>;
    "pool_token_index_in": number;
    "pool_token_index_out": number;
    "currency_id_out_amount": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type Idqdin6cl9bl0g = {
    "evm_caller": FixedSizeBinary<20>;
    "pool_token_index_in": number;
    "pool_token_index_out": number;
    "currency_id_in_amount": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type I240tht746522h = {
    "evm_caller": FixedSizeBinary<20>;
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
    "vtoken_amount": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type I6s65kicknm51n = {
    "support_chain": Anonymize<I3em9l2q88o7if>;
    "transfer_to_fee": bigint;
};
export type I7u9oegj4csj51 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "execution_fee": bigint;
};
export type Ifuaakr3i6qaje = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "is_support": boolean;
};
export type I792urf76hgnm9 = {
    "xcm_fee": bigint;
    "xcm_weight": Anonymize<I4q39t5hn830vp>;
    "period": number;
    "contract": FixedSizeBinary<20>;
};
export type I9rh8nddi47gn0 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
    "vcurrency_id": Anonymize<Iebirugq1dbhv6>;
    "vtoken_amount": bigint;
};
export type I7j4i782lpafvm = {
    "delay_block": number;
};
export type Ih1mephl4egav = {
    "order": Anonymize<I6ebh42uq55sps>;
};
export type I6ebh42uq55sps = {
    "source_chain_caller": Anonymize<Ibbodv9tjmq4ua>;
    "bifrost_chain_caller": SS58String;
    "derivative_account": SS58String;
    "create_block_number": number;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "currency_amount": bigint;
    "order_type": Anonymize<Ieqskt3dg06otc>;
    "remark": Binary;
    "target_chain": Anonymize<I4ntr4rk45le9>;
    "channel_id": number;
};
export type Ibbodv9tjmq4ua = AnonymousEnum<{
    "Substrate": SS58String;
    "Evm": FixedSizeBinary<20>;
}>;
export type Ieqskt3dg06otc = AnonymousEnum<{
    "Mint": undefined;
    "Redeem": undefined;
}>;
export type Ibg67a9p342rqq = AnonymousEnum<{
    "CreatePool": Anonymize<I54dj4621btbog>;
    "LiquidityAdded": Anonymize<I8eeivtdimg5sg>;
    "TokenSwapped": Anonymize<I2i1mj9dta3f5r>;
    "RedeemedProportion": Anonymize<Ie26sa5pkqc7lh>;
    "RedeemedSingle": Anonymize<I5a9b1h9uneb16>;
    "RedeemedMulti": Anonymize<It3rcku7atiln>;
    "BalanceUpdated": Anonymize<I2e6ar36i5p9qo>;
    "YieldCollected": Anonymize<Ifssptimng3fig>;
    "FeeCollected": Anonymize<I2d4kqt7h8dvva>;
    "AModified": Anonymize<I6ou90sd9g7cje>;
    "FeeModified": Anonymize<I3dqh1v95db76q>;
    "RecipientModified": Anonymize<Iec84e3i3f9e7f>;
    "TokenRateSet": Anonymize<Id99ueqaguc9dv>;
    "TokenRateHardcapConfigured": Anonymize<Icu74rtf3kd9gd>;
    "TokenRateHardcapRemoved": Anonymize<I8v7akpi7cdcp5>;
    "TokenRateRefreshFailed": Anonymize<I931cottvong90>;
}>;
export type I54dj4621btbog = {
    "pool_id": number;
    "a": bigint;
    "swap_id": SS58String;
    "pallet_id": SS58String;
};
export type I8eeivtdimg5sg = {
    "minter": SS58String;
    "pool_id": number;
    "a": bigint;
    "input_amounts": Anonymize<Iafqnechp3omqg>;
    "min_output_amount": bigint;
    "balances": Anonymize<Iafqnechp3omqg>;
    "total_supply": bigint;
    "fee_amount": bigint;
    "output_amount": bigint;
};
export type I2i1mj9dta3f5r = {
    "swapper": SS58String;
    "pool_id": number;
    "a": bigint;
    "input_asset": Anonymize<Iebirugq1dbhv6>;
    "output_asset": Anonymize<Iebirugq1dbhv6>;
    "input_amount": bigint;
    "min_output_amount": bigint;
    "balances": Anonymize<Iafqnechp3omqg>;
    "total_supply": bigint;
    "output_amount": bigint;
};
export type Ie26sa5pkqc7lh = {
    "redeemer": SS58String;
    "pool_id": number;
    "a": bigint;
    "input_amount": bigint;
    "min_output_amounts": Anonymize<Iafqnechp3omqg>;
    "balances": Anonymize<Iafqnechp3omqg>;
    "total_supply": bigint;
    "fee_amount": bigint;
    "output_amounts": Anonymize<Iafqnechp3omqg>;
};
export type I5a9b1h9uneb16 = {
    "redeemer": SS58String;
    "pool_id": number;
    "a": bigint;
    "input_amount": bigint;
    "output_asset": Anonymize<Iebirugq1dbhv6>;
    "min_output_amount": bigint;
    "balances": Anonymize<Iafqnechp3omqg>;
    "total_supply": bigint;
    "fee_amount": bigint;
    "output_amount": bigint;
};
export type It3rcku7atiln = {
    "redeemer": SS58String;
    "pool_id": number;
    "a": bigint;
    "output_amounts": Anonymize<Iafqnechp3omqg>;
    "max_input_amount": bigint;
    "balances": Anonymize<Iafqnechp3omqg>;
    "total_supply": bigint;
    "fee_amount": bigint;
    "input_amount": bigint;
};
export type I2e6ar36i5p9qo = {
    "pool_id": number;
    "old_balances": Anonymize<Iafqnechp3omqg>;
    "new_balances": Anonymize<Iafqnechp3omqg>;
};
export type Ifssptimng3fig = {
    "pool_id": number;
    "a": bigint;
    "old_total_supply": bigint;
    "new_total_supply": bigint;
    "who": SS58String;
    "amount": bigint;
};
export type I2d4kqt7h8dvva = {
    "pool_id": number;
    "a": bigint;
    "old_balances": Anonymize<Iafqnechp3omqg>;
    "new_balances": Anonymize<Iafqnechp3omqg>;
    "old_total_supply": bigint;
    "new_total_supply": bigint;
    "who": SS58String;
    "amount": bigint;
};
export type I6ou90sd9g7cje = {
    "pool_id": number;
    "value": bigint;
    "time": number;
};
export type I3dqh1v95db76q = {
    "pool_id": number;
    "mint_fee": bigint;
    "swap_fee": bigint;
    "redeem_fee": bigint;
};
export type Iec84e3i3f9e7f = {
    "pool_id": number;
    "fee_recipient": SS58String;
    "yield_recipient": SS58String;
};
export type Id99ueqaguc9dv = {
    "pool_id": number;
    "token_rate": Anonymize<Idtci0ovsdvku6>;
};
export type Idtci0ovsdvku6 = Array<Anonymize<Ib5g33484nodh0>>;
export type Ib5g33484nodh0 = [Anonymize<Iebirugq1dbhv6>, Anonymize<I200n1ov5tbcvr>];
export type Icu74rtf3kd9gd = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "hardcap": number;
};
export type I8v7akpi7cdcp5 = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
};
export type I9odc3mk2kl3gi = AnonymousEnum<{
    "Voted": Anonymize<I1u6hbnc76ae0b>;
    "Unlocked": Anonymize<Ie8i2nun6vrn79>;
    "DelegatorVoteRemoved": Anonymize<Ib3hb8lrtttf9v>;
    "DelegatorAdded": Anonymize<Iefli0cgm44m3b>;
    "ReferendumInfoCreated": Anonymize<Iaij9kantm3v0b>;
    "ReferendumInfoSet": Anonymize<Iaij9kantm3v0b>;
    "VoteLockingPeriodSet": Anonymize<I8l8g9smisvqei>;
    "UndecidingTimeoutSet": Anonymize<I2ce5d3bnbbfhi>;
    "ReferendumKilled": Anonymize<Iaj42ghmtrj594>;
    "VoteNotified": Anonymize<Iet09kgtjdhfi9>;
    "DelegatorVoteRemovedNotified": Anonymize<Iet09kgtjdhfi9>;
    "ResponseReceived": Anonymize<Icfr2n5s5aokru>;
    "VoteCapRatioSet": Anonymize<Ifuh1k8nfv6s7l>;
}>;
export type I1u6hbnc76ae0b = {
    "who": SS58String;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "poll_index": number;
    "token_vote": ConvictionVotingVoteAccountVote;
    "delegator_vote": ConvictionVotingVoteAccountVote;
};
export type Ie8i2nun6vrn79 = {
    "who": SS58String;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "poll_index": number;
};
export type Ib3hb8lrtttf9v = {
    "who": SS58String;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "derivative_index": number;
};
export type Iefli0cgm44m3b = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "derivative_index": number;
};
export type Iaij9kantm3v0b = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "poll_index": number;
    "info": Anonymize<I5m768sb1iam8f>;
};
export type I5m768sb1iam8f = AnonymousEnum<{
    "Ongoing": Anonymize<I7sq3ooc549im2>;
    "Completed": number;
    "Killed": number;
}>;
export type I7sq3ooc549im2 = {
    "submitted"?: Anonymize<I4arjljr6dpflb>;
    "tally": Anonymize<Ifsk7cbmtit1jd>;
};
export type I8l8g9smisvqei = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "locking_period": number;
};
export type I2ce5d3bnbbfhi = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "undeciding_timeout": number;
};
export type Iaj42ghmtrj594 = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "poll_index": number;
};
export type Iet09kgtjdhfi9 = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "poll_index": number;
    "success": boolean;
};
export type Icfr2n5s5aokru = {
    "responder": Anonymize<I4c0s5cioidn76>;
    "query_id": bigint;
    "response": XcmV4Response;
};
export type Ifuh1k8nfv6s7l = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "vote_cap_ratio": number;
};
export type Iff94km1u4n3pd = AnonymousEnum<{
    /**
     *Enable collateral for certain asset
     *[sender, asset_id]
     */
    "CollateralAssetAdded": Anonymize<Icoe72r8pkf564>;
    /**
     *Disable collateral for certain asset
     *[sender, asset_id]
     */
    "CollateralAssetRemoved": Anonymize<Icoe72r8pkf564>;
    /**
     *Event emitted when assets are deposited
     *[sender, asset_id, amount]
     */
    "Deposited": Anonymize<I82kd33a80644k>;
    /**
     *Event emitted when assets are redeemed
     *[sender, asset_id, amount]
     */
    "Redeemed": Anonymize<I82kd33a80644k>;
    /**
     *Event emitted when cash is borrowed
     *[sender, asset_id, amount]
     */
    "Borrowed": Anonymize<I82kd33a80644k>;
    /**
     *Event emitted when a borrow is repaid
     *[sender, asset_id, amount]
     */
    "RepaidBorrow": Anonymize<I82kd33a80644k>;
    /**
     *Event emitted when a borrow is liquidated
     *[liquidator, borrower, liquidation_asset_id, collateral_asset_id, repay_amount,
     *collateral_amount]
     */
    "LiquidatedBorrow": Anonymize<Ibnls8eh7606j5>;
    /**
     *Event emitted when the reserves are reduced
     *[admin, asset_id, reduced_amount, total_reserves]
     */
    "ReservesReduced": Anonymize<I2jen5a002vjo5>;
    /**
     *Event emitted when the reserves are added
     *[admin, asset_id, added_amount, total_reserves]
     */
    "ReservesAdded": Anonymize<I2jen5a002vjo5>;
    /**
     *New market is set
     *[new_interest_rate_model]
     */
    "NewMarket": Anonymize<I7gtc6jb6l82np>;
    /**
     *Event emitted when a market is activated
     *[admin, asset_id]
     */
    "ActivatedMarket": Anonymize<Iebirugq1dbhv6>;
    /**
     *New market parameters is updated
     *[admin, asset_id]
     */
    "UpdatedMarket": Anonymize<I7gtc6jb6l82np>;
    /**
     *Reward added
     */
    "RewardAdded": Anonymize<I95l2k9b1re95f>;
    /**
     *Reward withdrawed
     */
    "RewardWithdrawn": Anonymize<I95l2k9b1re95f>;
    /**
     *Event emitted when market reward speed updated.
     */
    "MarketRewardSpeedUpdated": Anonymize<Icj4504vnoorlb>;
    /**
     *Deposited when Reward is distributed to a supplier
     */
    "DistributedSupplierReward": Anonymize<Iedc2b32l00pnc>;
    /**
     *Deposited when Reward is distributed to a borrower
     */
    "DistributedBorrowerReward": Anonymize<Iedc2b32l00pnc>;
    /**
     *Reward Paid for user
     */
    "RewardPaid": Anonymize<I95l2k9b1re95f>;
    /**
     *Event emitted when the incentive reserves are redeemed and transfer to receiver's
     *account [receive_account_id, asset_id, reduced_amount]
     */
    "IncentiveReservesReduced": Anonymize<I82kd33a80644k>;
    /**
     *Liquidation free collaterals has been updated
     */
    "LiquidationFreeCollateralsUpdated": Anonymize<I6ae21pstqk9et>;
    "MarketBonded": Anonymize<Ie5efe5gkg0kqs>;
}>;
export type Icoe72r8pkf564 = [SS58String, Anonymize<Iebirugq1dbhv6>];
export type I82kd33a80644k = [SS58String, Anonymize<Iebirugq1dbhv6>, bigint];
export type Ibnls8eh7606j5 = [SS58String, SS58String, Anonymize<Iebirugq1dbhv6>, Anonymize<Iebirugq1dbhv6>, bigint, bigint];
export type I2jen5a002vjo5 = [SS58String, Anonymize<Iebirugq1dbhv6>, bigint, bigint];
export type I7gtc6jb6l82np = [Anonymize<Iebirugq1dbhv6>, Anonymize<I1i2kfunpgo63g>];
export type I1i2kfunpgo63g = {
    "collateral_factor": number;
    "liquidation_threshold": number;
    "reserve_factor": number;
    "close_factor": number;
    "liquidate_incentive": bigint;
    "liquidate_incentive_reserved_factor": number;
    "rate_model": Anonymize<Ibfnd42bovd7un>;
    "state": Anonymize<If8s8vkjlhpecj>;
    "supply_cap": bigint;
    "borrow_cap": bigint;
    "lend_token_id": Anonymize<Iebirugq1dbhv6>;
};
export type Ibfnd42bovd7un = AnonymousEnum<{
    "Jump": Anonymize<I9fdm4o2voavtp>;
    "Curve": bigint;
}>;
export type I9fdm4o2voavtp = {
    "base_rate": bigint;
    "jump_rate": bigint;
    "full_rate": bigint;
    "jump_utilization": number;
};
export type If8s8vkjlhpecj = AnonymousEnum<{
    "Active": undefined;
    "Pending": undefined;
    "Supervision": undefined;
}>;
export type Icj4504vnoorlb = [Anonymize<Iebirugq1dbhv6>, bigint, bigint];
export type Iedc2b32l00pnc = [Anonymize<Iebirugq1dbhv6>, SS58String, bigint, bigint];
export type Ie5efe5gkg0kqs = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "market_bond": Anonymize<I6ae21pstqk9et>;
};
export type Iaja1q8oji7pdd = AnonymousEnum<{
    /**
     *Set emergency price. \[asset_id, price_detail\]
     */
    "SetPrice": Anonymize<Ifrnnpj83g127a>;
    /**
     *Reset emergency price. \[asset_id\]
     */
    "ResetPrice": Anonymize<Iebirugq1dbhv6>;
}>;
export type Id1jj7irh4fvu1 = AnonymousEnum<{
    /**
     *New feed data is submitted.
     */
    "NewFeedData": Anonymize<I1eml7ojrir0mf>;
    "FeedTimestampReachingLimit": Anonymize<I89qbh680n32tc>;
    "FeedValueReachingLimit": Anonymize<I9ah39ggsni5h8>;
}>;
export type I1eml7ojrir0mf = {
    "sender": SS58String;
    "values": Anonymize<I2dbamvpq4935>;
};
export type I89qbh680n32tc = {
    "values": Anonymize<I51e9grusnqrb1>;
    "prev": Anonymize<I9055m3udr8982>;
};
export type I51e9grusnqrb1 = Array<Anonymize<I9055m3udr8982>>;
export type I9055m3udr8982 = {
    "value": bigint;
    "timestamp": bigint;
};
export type I9ah39ggsni5h8 = {
    "value": Anonymize<I9055m3udr8982>;
    "prev": Anonymize<I9055m3udr8982>;
};
export type I7t9fm1af55at9 = AnonymousEnum<{
    "FlashLoanDeposited": Anonymize<I64s470272rog7>;
}>;
export type I64s470272rog7 = {
    "who": SS58String;
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "old_rate": bigint;
    "new_rate": bigint;
};
export type Ib4n9pq4bi5nv6 = AnonymousEnum<{
    "ChannelRegistered": Anonymize<Ifq40td50oojcr>;
    "ChannelRemoved": Anonymize<Ib73p6n69t2jsn>;
    "ChannelReceiveAccountUpdated": Anonymize<I4pgd6mkjk426o>;
    "CommissionTokenSet": Anonymize<I98hpr879arfv5>;
    "ChannelCommissionSet": Anonymize<Ievk931u2c7sqn>;
    "CommissionClaimed": Anonymize<I7rjrrm2njpd6g>;
    "ChannelVtokenSharesUpdated": Anonymize<Ielfbmscl7ukmv>;
    "VtokenIssuanceSnapshotUpdated": Anonymize<I673slhfrj1s4r>;
    "PeriodVtokenTotalMintUpdated": Anonymize<Iedejl9np3oh6e>;
    "PeriodVtokenTotalRedeemUpdated": Anonymize<I59j15t8ardoqh>;
    "PeriodChannelVtokenMintUpdated": Anonymize<Id5kb2ocrab7gs>;
    "PeriodTotalCommissionsUpdated": Anonymize<Ie0kb5p5oqesib>;
    "ChannelClaimableCommissionUpdated": Anonymize<I7rjrrm2njpd6g>;
    /**
     *Emitted when a Permill calculation fails.
     *This event carries the numerator and denominator that caused the failure.
     */
    "CalculationFailed": Anonymize<Ic8tdmoaknl87u>;
    /**
     *Bifrost commission transfer failed.
     *Parameters are the commission token and the amount that failed to transfer.
     */
    "BifrostCommissionTransferFailed": Anonymize<I1iscme8538ekh>;
    /**
     *Error event indicating that the removal process of clearing was not completed.
     */
    "RemovalNotCompleteError": Anonymize<Ia9at2kloifkm>;
}>;
export type Ifq40td50oojcr = {
    "channel_id": number;
    "receive_account": SS58String;
    "name": Binary;
};
export type Ib73p6n69t2jsn = {
    "channel_id": number;
};
export type I4pgd6mkjk426o = {
    "channel_id": number;
    "receiver": SS58String;
};
export type I98hpr879arfv5 = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "commission_token"?: Anonymize<I1c99t35ku3g7a>;
};
export type I1c99t35ku3g7a = (Anonymize<Iebirugq1dbhv6>) | undefined;
export type Ievk931u2c7sqn = {
    "channel_id": number;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "rate": number;
};
export type I7rjrrm2njpd6g = {
    "channel_id": number;
    "commission_token": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type Ielfbmscl7ukmv = {
    "channel_id": number;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "share": number;
};
export type I673slhfrj1s4r = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "old_issuance": bigint;
    "new_issuance": bigint;
};
export type Iedejl9np3oh6e = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "old_total_mint": bigint;
    "new_total_mint": bigint;
};
export type I59j15t8ardoqh = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "old_total_redeem": bigint;
    "new_total_redeem": bigint;
};
export type Id5kb2ocrab7gs = {
    "channel_id": number;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "old_mint_amount": bigint;
    "new_mint_amount": bigint;
};
export type Ie0kb5p5oqesib = {
    "commission_token": Anonymize<Iebirugq1dbhv6>;
    "old_amount": bigint;
    "new_amount": bigint;
};
export type Ic8tdmoaknl87u = {
    "numerator": bigint;
    "denominator": bigint;
};
export type I1iscme8538ekh = {
    "from": SS58String;
    "to": SS58String;
    "commission_token": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type Ia9at2kloifkm = {
    "target_num": number;
    "limit": number;
    "executed_num": number;
};
export type I3tig0oab4mvlr = AnonymousEnum<{
    "CloudsConverted": Anonymize<Ic5ic29aibpkll>;
    "VbncCharged": Anonymize<I6v3aulqfb3eps>;
}>;
export type Ic5ic29aibpkll = {
    "clouds": bigint;
    "vebnc": bigint;
};
export type I6v3aulqfb3eps = {
    "vbnc": bigint;
};
export type I2kcq0r7qlj1i7 = AnonymousEnum<{
    /**
     *A successful call of the `Charge` extrinsic will create this event.
     */
    "Charged": Anonymize<Icglvublte8208>;
    /**
     *A successful call of the `SetVtoken` extrinsic will create this event.
     */
    "ConfigSet": Anonymize<I3o2122ij3mdp9>;
    /**
     *A successful call of the `RemoveVtoken` extrinsic will create this event.
     */
    "Removed": Anonymize<I6dlum3cbrie3d>;
    /**
     *A failed call of the `BuyBack` extrinsic will create this event.
     */
    "BuyBackFailed": Anonymize<Idu9ifj08mb2m9>;
    /**
     *A successful call of the `BuyBack` extrinsic will create this event.
     */
    "BuyBackSuccess": Anonymize<Idu9ifj08mb2m9>;
    /**
     *A failed call of the `AddLiquidity` extrinsic will create this event.
     */
    "AddLiquidityFailed": Anonymize<Idu9ifj08mb2m9>;
    /**
     *A successful call of the `AddLiquidity` extrinsic will create this event.
     */
    "AddLiquiditySuccess": Anonymize<Idu9ifj08mb2m9>;
    /**
     *A failed call of the `SetSwapOutMin` extrinsic will create this event.
     */
    "SetSwapOutMinFailed": Anonymize<Idu9ifj08mb2m9>;
    /**
     *A successful call of the `SetSwapOutMin` extrinsic will create this event.
     */
    "SetSwapOutMinSuccess": Anonymize<Idu9ifj08mb2m9>;
}>;
export type I3o2122ij3mdp9 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "info": Anonymize<Ilqs3opgrh80o>;
};
export type Ilqs3opgrh80o = {
    "min_swap_value": bigint;
    "if_auto": boolean;
    "proportion": number;
    "buyback_duration": number;
    "last_buyback": number;
    "last_buyback_cycle": number;
    "add_liquidity_duration": number;
    "last_add_liquidity": number;
    "destruction_ratio"?: Anonymize<I4arjljr6dpflb>;
    "bias": number;
};
export type Idu9ifj08mb2m9 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "block_number": number;
};
export type I1gd6ndmiptbsv = AnonymousEnum<{
    /**
     *Add a delegator to the staking protocol.
     */
    "AddDelegator": Anonymize<I8li5p36kd4j17>;
    /**
     *Remove a delegator from the staking protocol.
     */
    "RemoveDelegator": Anonymize<I8li5p36kd4j17>;
    /**
     *Add a validator to the staking protocol.
     */
    "AddValidator": Anonymize<Idngfiicpu7gh9>;
    /**
     *Remove a validator from the staking protocol.
     */
    "RemoveValidator": Anonymize<Idngfiicpu7gh9>;
    /**
     *Set configuration for a specific staking protocol.
     */
    "SetConfiguration": Anonymize<If3e7sroj6atgl>;
    /**
     *Set ledger for a specific delegator.
     */
    "SetLedger": Anonymize<I3qd17rh5f6jv7>;
    /**
     *Send xcm task.
     */
    "SendXcmTask": Anonymize<I5cje8jfnlum3t>;
    /**
     *Xcm task response received.
     */
    "NotifyResponseReceived": Anonymize<I4a5vjmsc51gru>;
    /**
     *Time unit updated.
     */
    "TimeUnitUpdated": Anonymize<If29otd3i8i2c4>;
    /**
     *Token exchange rate updated.
     */
    "TokenExchangeRateUpdated": Anonymize<Idev1fo623d8sp>;
    /**
     *Transfer the staking token to remote chain.
     */
    "TransferTo": Anonymize<If5g8vooff6dhr>;
    /**
     *Transfer the staking token back from remote chain.
     */
    "TransferBack": Anonymize<Idedks09iikehk>;
}>;
export type I8li5p36kd4j17 = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *Delegator index.
     */
    "delegator_index": number;
    /**
     *Delegator account.
     */
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
};
export type I60rdchrdlh152 = AnonymousEnum<{
    "AstarDappStaking": undefined;
    "MoonbeamParachainStaking": undefined;
    "PolkadotStaking": undefined;
}>;
export type Ickhdoqhl8bqbi = AnonymousEnum<{
    "Substrate": SS58String;
    "Ethereum": FixedSizeBinary<20>;
}>;
export type Idngfiicpu7gh9 = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *Delegator account.
     */
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
    /**
     *Validator account.
     */
    "validator": Anonymize<I2t45n0peappvr>;
};
export type I2t45n0peappvr = AnonymousEnum<{
    "AstarDappStaking": Anonymize<Iav11gpk2hk471>;
    "MoonbeamParachainStaking": FixedSizeBinary<20>;
    "PolkadotStaking": SS58String;
}>;
export type Iav11gpk2hk471 = AnonymousEnum<{
    "Evm": FixedSizeBinary<20>;
    "Wasm": SS58String;
}>;
export type If3e7sroj6atgl = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *The staking protocol configuration.
     */
    "configuration": Anonymize<Iamub7qfj1haap>;
};
export type Iamub7qfj1haap = {
    "xcm_task_fee": Anonymize<Ifkek5e7bo4v8q>;
    "protocol_fee_rate": number;
    "unlock_period": Anonymize<Id6ihttoi261us>;
    "operator": SS58String;
    "max_update_token_exchange_rate": number;
    "update_time_unit_interval": number;
    "update_exchange_rate_interval": number;
};
export type Ifkek5e7bo4v8q = {
    "weight": Anonymize<I4q39t5hn830vp>;
    "fee": bigint;
};
export type I3qd17rh5f6jv7 = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *Delegator account.
     */
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
    /**
     *Ledger.
     */
    "ledger": Anonymize<I3ifohh97v7oqs>;
};
export type I3ifohh97v7oqs = AnonymousEnum<{
    "AstarDappStaking": Anonymize<I6sqdr0gjbj82c>;
}>;
export type I6sqdr0gjbj82c = {
    "locked": bigint;
    "unlocking": Anonymize<Ifrd5b80v15u1>;
};
export type Ifrd5b80v15u1 = Array<Anonymize<Iihls4r7s6laa>>;
export type Iihls4r7s6laa = {
    "amount": bigint;
    "unlock_time": Anonymize<Id6ihttoi261us>;
};
export type I5cje8jfnlum3t = {
    /**
     *Xcm Message Query id.
     */
    "query_id"?: Anonymize<I35p85j063s0il>;
    /**
     *Delegator account.
     */
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
    /**
     *Xcm task.
     */
    "task": Anonymize<Iecptfphlmsue9>;
    /**
     *Pending confirmation status.
     */
    "pending_status"?: Anonymize<I5fm4ehusqcjgo>;
    /**
     *Destination.
     */
    "dest_location": Anonymize<I4c0s5cioidn76>;
};
export type Iecptfphlmsue9 = AnonymousEnum<{
    "AstarDappStaking": Anonymize<I5iigfm374t7es>;
}>;
export type I5iigfm374t7es = AnonymousEnum<{
    "Lock": bigint;
    "Unlock": bigint;
    "ClaimUnlocked": undefined;
    "RelockUnlocking": undefined;
    "Stake": Anonymize<Ie8puvjk9lngdp>;
    "Unstake": Anonymize<Ie8puvjk9lngdp>;
    "ClaimStakerRewards": undefined;
    "ClaimBonusReward": Anonymize<Iav11gpk2hk471>;
}>;
export type Ie8puvjk9lngdp = [Anonymize<Iav11gpk2hk471>, bigint];
export type I5fm4ehusqcjgo = (Anonymize<I9p3c3ohdngoau>) | undefined;
export type I9p3c3ohdngoau = AnonymousEnum<{
    "AstarDappStaking": Anonymize<I3v5ht3g73a96i>;
}>;
export type I3v5ht3g73a96i = AnonymousEnum<{
    "Lock": Anonymize<I50nca236alvhh>;
    "UnLock": Anonymize<I50nca236alvhh>;
    "ClaimUnlocked": Anonymize<Ickhdoqhl8bqbi>;
}>;
export type I50nca236alvhh = [Anonymize<Ickhdoqhl8bqbi>, bigint];
export type I4a5vjmsc51gru = {
    /**
     *Xcm responder.
     */
    "responder": Anonymize<I4c0s5cioidn76>;
    /**
     *Pending confirmation status.
     */
    "pending_status": Anonymize<I9p3c3ohdngoau>;
};
export type If29otd3i8i2c4 = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *Time unit.
     */
    "time_unit": Anonymize<Id6ihttoi261us>;
};
export type Idev1fo623d8sp = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *Delegator account.
     */
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
    /**
     *The type of token that the fee is charged to
     */
    "protocol_fee_currency_id": Anonymize<Iebirugq1dbhv6>;
    /**
     *The amount of the fee charged to the protocol
     */
    "protocol_fee": bigint;
    /**
     *Amount of exchange rates updated
     */
    "amount": bigint;
};
export type If5g8vooff6dhr = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *Bifrost Account
     */
    "from": SS58String;
    /**
     *Delegator account.
     */
    "to": Anonymize<Ickhdoqhl8bqbi>;
    /**
     *Amount
     */
    "amount": bigint;
};
export type Idedks09iikehk = {
    /**
     *Slp supports staking protocols.
     */
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    /**
     *Delegator account.
     */
    "from": Anonymize<Ickhdoqhl8bqbi>;
    /**
     *Bifrost Account.
     */
    "to": SS58String;
    /**
     *Amount
     */
    "amount": bigint;
};
export type Icg2f7lij7mhun = Array<Anonymize<Id2crs6hgi2prc>>;
export type Id2crs6hgi2prc = {
    "id": WestendRuntimeRuntimeHoldReason;
    "amount": bigint;
};
export type WestendRuntimeRuntimeHoldReason = Enum<{
    "Preimage": PreimagePalletHoldReason;
}>;
export declare const WestendRuntimeRuntimeHoldReason: GetEnum<WestendRuntimeRuntimeHoldReason>;
export type I6mhebgj62g585 = Array<Anonymize<Iev2vf4qidj2bb>>;
export type Iev2vf4qidj2bb = [number, PreimagesBounded, SS58String];
export type I3vhcedhm4hpvm = [Anonymize<Ia2lhg7l2hilo3>, bigint];
export type I526daka7j7b17 = AnonymousEnum<{
    "Ongoing": Anonymize<Ib7kb5hesu2n89>;
    "Finished": Anonymize<If3rj324plfvri>;
}>;
export type Ib7kb5hesu2n89 = {
    "end": number;
    "proposal": PreimagesBounded;
    "threshold": Anonymize<Ivbp9821csvot>;
    "delay": number;
    "tally": Anonymize<I2t2oo1s4d4ktl>;
};
export type I2t2oo1s4d4ktl = {
    "ayes": bigint;
    "nays": bigint;
    "turnout": bigint;
};
export type If3rj324plfvri = {
    "approved": boolean;
    "end": number;
};
export type Ifanv2kvm586s4 = AnonymousEnum<{
    "Direct": Anonymize<I4am87oq5cml79>;
    "Delegating": Anonymize<I251o9sbu5566f>;
}>;
export type I4am87oq5cml79 = {
    "votes": Anonymize<Id6vlpeidk3q34>;
    "delegations": Anonymize<I538qha8r4j3ii>;
    "prior": Anonymize<I4ojmnsk1dchql>;
};
export type Id6vlpeidk3q34 = Array<Anonymize<I9fcbs3jkoqnc>>;
export type I9fcbs3jkoqnc = [number, Anonymize<Ia9hdots6g53fs>];
export type I5rsgtofmn5lli = [PreimagesBounded, Anonymize<Ivbp9821csvot>];
export type Idned7t7knml6b = [number, Anonymize<Ia2lhg7l2hilo3>];
export type I1iu0bu1rp17tr = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Indices": Anonymize<Iehgup0qh1t3vb>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "ParachainInfo": undefined;
    "TxPause": Anonymize<Ieci88jft3cpv9>;
    "Balances": Anonymize<I9fktnrlinnre4>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "Democracy": Anonymize<I4hnic0gfvfj0p>;
    "Council": Anonymize<I833p50nvi61mn>;
    "TechnicalCommittee": Anonymize<I833p50nvi61mn>;
    "PhragmenElection": Anonymize<I6ab0pou3i8npt>;
    "CouncilMembership": Anonymize<I3ndh4r2ep15q9>;
    "TechnicalMembership": Anonymize<I3ndh4r2ep15q9>;
    "ConvictionVoting": Anonymize<I99hrhstt9euff>;
    "Referenda": Anonymize<I4atlqo81cojqj>;
    "Whitelist": Anonymize<Idjg8ps4v3472n>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I9nbjvlrb9bp1g>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Utility": Anonymize<Id5ush556ogqpg>;
    "Scheduler": Anonymize<I3imb0sv9ni5i0>;
    "Proxy": Anonymize<Icfujdut8l3tc2>;
    "Multisig": Anonymize<Ifp0dlmjmsbm72>;
    "Identity": Anonymize<Id4c1d4j757ojr>;
    "Vesting": Anonymize<I24a2kubctpuac>;
    "Treasury": Anonymize<Iasjt9hjajd80h>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "Ethereum": Anonymize<Icu3fce0sripq4>;
    "EVM": Anonymize<I8s4v176jtv80g>;
    "DynamicFee": Anonymize<Ie18f12l062q2m>;
    "EVMAccounts": Anonymize<I1l1phpc090qm9>;
    "XTokens": Anonymize<I7djumi7b5pj5>;
    "Tokens": Anonymize<Ifg1rpnuo1vsne>;
    "OrmlXcm": Anonymize<I9r7qbm7jckmoe>;
    "ZenlinkProtocol": Anonymize<I55fhdusvjpt5l>;
    "MerkleDistributor": Anonymize<I1sacojkebcuc1>;
    "FlexibleFee": Anonymize<I3udipqunlkl69>;
    "Salp": Anonymize<I4e3qgml62803v>;
    "AssetRegistry": Anonymize<I4eelqpsv4tti9>;
    "VtokenMinting": Anonymize<Iag3ep8d8l5ji>;
    "Slp": Anonymize<Id1ffr1gofffsf>;
    "XcmInterface": Anonymize<Iantm03nf2g2t5>;
    "TokenConversion": Anonymize<If0v6q8a012l7o>;
    "Farming": Anonymize<Iglv5i0iv5bgo>;
    "SystemStaking": Anonymize<I2g59ue9mdomio>;
    "SystemMaker": Anonymize<I33o6ghsfmdi9o>;
    "FeeShare": Anonymize<I1pd23tvu4hvk8>;
    "CrossInOut": Anonymize<I7crana3imupg1>;
    "BbBNC": Anonymize<Iacklbjq00iaj3>;
    "Slpx": Anonymize<Iqvhl1ao63k38>;
    "FellowshipCollective": Anonymize<Ieblk40f65bn0b>;
    "FellowshipReferenda": Anonymize<I4atlqo81cojqj>;
    "StablePool": Anonymize<Ifopmrlcm8l7p8>;
    "VtokenVoting": Anonymize<I36v5q3i5087e3>;
    "LendMarket": Anonymize<I8rc525hb3eu89>;
    "Prices": Anonymize<Idj9puo2so8q7j>;
    "Oracle": Anonymize<Ieb0p9i79epj3p>;
    "OracleMembership": Anonymize<I3ndh4r2ep15q9>;
    "LeverageStaking": Anonymize<If5i9fp7qj3ecj>;
    "ChannelCommission": Anonymize<Iapd5ovj0gnprh>;
    "CloudsConvert": Anonymize<I52i4uvra2sokt>;
    "BuyBack": Anonymize<Ibrclbjbls6qoo>;
    "SlpV2": Anonymize<Iainr8c5kaid51>;
}>;
export type Iehgup0qh1t3vb = AnonymousEnum<{
    /**
     *Assign an previously unassigned index.
     *
     *Payment: `Deposit` is reserved from the sender account.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `index`: the index to be claimed. This must not be in use.
     *
     *Emits `IndexAssigned` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "claim": Anonymize<I666bl2fqjkejo>;
    /**
     *Assign an index already owned by the sender to another account. The balance reservation
     *is effectively transferred to the new account.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `index`: the index to be re-assigned. This must be owned by the sender.
     *- `new`: the new owner of the index. This function is a no-op if it is equal to sender.
     *
     *Emits `IndexAssigned` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "transfer": Anonymize<I1u3ac7lafvv5b>;
    /**
     *Free up an index owned by the sender.
     *
     *Payment: Any previous deposit placed for the index is unreserved in the sender account.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must own the index.
     *
     *- `index`: the index to be freed. This must be owned by the sender.
     *
     *Emits `IndexFreed` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "free": Anonymize<I666bl2fqjkejo>;
    /**
     *Force an index to an account. This doesn't require a deposit. If the index is already
     *held, then any deposit is reimbursed to its current owner.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *- `index`: the index to be (re-)assigned.
     *- `new`: the new owner of the index. This function is a no-op if it is equal to sender.
     *- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.
     *
     *Emits `IndexAssigned` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "force_transfer": Anonymize<I5teebeg0opib2>;
    /**
     *Freeze an index so it will always point to the sender account. This consumes the
     *deposit.
     *
     *The dispatch origin for this call must be _Signed_ and the signing account must have a
     *non-frozen account `index`.
     *
     *- `index`: the index to be frozen in place.
     *
     *Emits `IndexFrozen` if successful.
     *
     *## Complexity
     *- `O(1)`.
     */
    "freeze": Anonymize<I666bl2fqjkejo>;
}>;
export type I1u3ac7lafvv5b = {
    "new": Anonymize<I4su1fqci7afjt>;
    "index": number;
};
export type I4su1fqci7afjt = AnonymousEnum<{
    "Id": SS58String;
    "Index": number;
    "Raw": Binary;
    "Address32": FixedSizeBinary<32>;
    "Address20": FixedSizeBinary<20>;
}>;
export type I5teebeg0opib2 = {
    "new": Anonymize<I4su1fqci7afjt>;
    "index": number;
    "freeze": boolean;
};
export type Ieci88jft3cpv9 = AnonymousEnum<{
    /**
     *Pause a call.
     *
     *Can only be called by [`Config::PauseOrigin`].
     *Emits an [`Event::CallPaused`] event on success.
     */
    "pause": Anonymize<Iba7pefg0d11kh>;
    /**
     *Un-pause a call.
     *
     *Can only be called by [`Config::UnpauseOrigin`].
     *Emits an [`Event::CallUnpaused`] event on success.
     */
    "unpause": Anonymize<I2pjehun5ehh5i>;
}>;
export type I2pjehun5ehh5i = {
    "ident": Anonymize<Idkbvh6dahk1v7>;
};
export type I9fktnrlinnre4 = AnonymousEnum<{
    /**
     *Transfer some liquid free balance to another account.
     *
     *`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.
     *If the sender's account is below the existential deposit as a result
     *of the transfer, the account will be reaped.
     *
     *The dispatch origin for this call must be `Signed` by the transactor.
     */
    "transfer_allow_death": Anonymize<I65i612een2ak>;
    /**
     *Exactly as `transfer_allow_death`, except the origin must be root and the source account
     *may be specified.
     */
    "force_transfer": Anonymize<I5vvf47ira6s09>;
    /**
     *Same as the [`transfer_allow_death`] call, but with a check that the transfer will not
     *kill the origin account.
     *
     *99% of the time you want [`transfer_allow_death`] instead.
     *
     *[`transfer_allow_death`]: struct.Pallet.html#method.transfer
     */
    "transfer_keep_alive": Anonymize<I65i612een2ak>;
    /**
     *Transfer the entire transferable balance from the caller account.
     *
     *NOTE: This function only attempts to transfer _transferable_ balances. This means that
     *any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
     *transferred by this function. To ensure that this function results in a killed account,
     *you might need to prepare the account by removing any reference counters, storage
     *deposits, etc...
     *
     *The dispatch origin of this call must be Signed.
     *
     *- `dest`: The recipient of the transfer.
     *- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
     *  of the funds the account has, causing the sender account to be killed (false), or
     *  transfer everything except at least the existential deposit, which will guarantee to
     *  keep the sender account alive (true).
     */
    "transfer_all": Anonymize<I5ns79ftlq8cnl>;
    /**
     *Unreserve some balance from a user by force.
     *
     *Can only be called by ROOT.
     */
    "force_unreserve": Anonymize<I59ofijoau4bjh>;
    /**
     *Upgrade a specified account.
     *
     *- `origin`: Must be `Signed`.
     *- `who`: The account to be upgraded.
     *
     *This will waive the transaction fee if at least all but 10% of the accounts needed to
     *be upgraded. (We let some not have to be upgraded just in order to allow for the
     *possibility of churn).
     */
    "upgrade_accounts": Anonymize<Ibmr18suc9ikh9>;
    /**
     *Set the regular balance of a given account.
     *
     *The dispatch origin for this call is `root`.
     */
    "force_set_balance": Anonymize<Ieka2e164ntfss>;
    /**
     *Adjust the total issuance in a saturating way.
     *
     *Can only be called by root and always needs a positive `delta`.
     *
     *# Example
     */
    "force_adjust_total_issuance": Anonymize<I5u8olqbbvfnvf>;
    /**
     *Burn the specified liquid free balance from the origin account.
     *
     *If the origin's account ends up below the existential deposit as a result
     *of the burn and `keep_alive` is false, the account will be reaped.
     *
     *Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,
     *this `burn` operation will reduce total issuance by the amount _burned_.
     */
    "burn": Anonymize<I5utcetro501ir>;
}>;
export type I65i612een2ak = {
    "dest": Anonymize<I4su1fqci7afjt>;
    "value": bigint;
};
export type I5vvf47ira6s09 = {
    "source": Anonymize<I4su1fqci7afjt>;
    "dest": Anonymize<I4su1fqci7afjt>;
    "value": bigint;
};
export type I5ns79ftlq8cnl = {
    "dest": Anonymize<I4su1fqci7afjt>;
    "keep_alive": boolean;
};
export type I59ofijoau4bjh = {
    "who": Anonymize<I4su1fqci7afjt>;
    "amount": bigint;
};
export type Ieka2e164ntfss = {
    "who": Anonymize<I4su1fqci7afjt>;
    "new_free": bigint;
};
export type I4hnic0gfvfj0p = AnonymousEnum<{
    /**
     *Propose a sensitive action to be taken.
     *
     *The dispatch origin of this call must be _Signed_ and the sender must
     *have funds to cover the deposit.
     *
     *- `proposal_hash`: The hash of the proposal preimage.
     *- `value`: The amount of deposit (must be at least `MinimumDeposit`).
     *
     *Emits `Proposed`.
     */
    "propose": Anonymize<I1moso5oagpiea>;
    /**
     *Signals agreement with a particular proposal.
     *
     *The dispatch origin of this call must be _Signed_ and the sender
     *must have funds to cover the deposit, equal to the original deposit.
     *
     *- `proposal`: The index of the proposal to second.
     */
    "second": Anonymize<Ibeb4n9vpjefp3>;
    /**
     *Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;
     *otherwise it is a vote to keep the status quo.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `ref_index`: The index of the referendum to vote for.
     *- `vote`: The vote configuration.
     */
    "vote": Anonymize<Id7murq9s9fg6h>;
    /**
     *Schedule an emergency cancellation of a referendum. Cannot happen twice to the same
     *referendum.
     *
     *The dispatch origin of this call must be `CancellationOrigin`.
     *
     *-`ref_index`: The index of the referendum to cancel.
     *
     *Weight: `O(1)`.
     */
    "emergency_cancel": Anonymize<Ied9mja4bq7va8>;
    /**
     *Schedule a referendum to be tabled once it is legal to schedule an external
     *referendum.
     *
     *The dispatch origin of this call must be `ExternalOrigin`.
     *
     *- `proposal_hash`: The preimage hash of the proposal.
     */
    "external_propose": Anonymize<I4f7jul8ljs54r>;
    /**
     *Schedule a majority-carries referendum to be tabled next once it is legal to schedule
     *an external referendum.
     *
     *The dispatch of this call must be `ExternalMajorityOrigin`.
     *
     *- `proposal_hash`: The preimage hash of the proposal.
     *
     *Unlike `external_propose`, blacklisting has no effect on this and it may replace a
     *pre-scheduled `external_propose` call.
     *
     *Weight: `O(1)`
     */
    "external_propose_majority": Anonymize<I4f7jul8ljs54r>;
    /**
     *Schedule a negative-turnout-bias referendum to be tabled next once it is legal to
     *schedule an external referendum.
     *
     *The dispatch of this call must be `ExternalDefaultOrigin`.
     *
     *- `proposal_hash`: The preimage hash of the proposal.
     *
     *Unlike `external_propose`, blacklisting has no effect on this and it may replace a
     *pre-scheduled `external_propose` call.
     *
     *Weight: `O(1)`
     */
    "external_propose_default": Anonymize<I4f7jul8ljs54r>;
    /**
     *Schedule the currently externally-proposed majority-carries referendum to be tabled
     *immediately. If there is no externally-proposed referendum currently, or if there is one
     *but it is not a majority-carries referendum then it fails.
     *
     *The dispatch of this call must be `FastTrackOrigin`.
     *
     *- `proposal_hash`: The hash of the current external proposal.
     *- `voting_period`: The period that is allowed for voting on this proposal. Increased to
     *	Must be always greater than zero.
     *	For `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.
     *- `delay`: The number of block after voting has ended in approval and this should be
     *  enacted. This doesn't have a minimum amount.
     *
     *Emits `Started`.
     *
     *Weight: `O(1)`
     */
    "fast_track": Anonymize<I5agg650597e49>;
    /**
     *Veto and blacklist the external proposal hash.
     *
     *The dispatch origin of this call must be `VetoOrigin`.
     *
     *- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.
     *
     *Emits `Vetoed`.
     *
     *Weight: `O(V + log(V))` where V is number of `existing vetoers`
     */
    "veto_external": Anonymize<I2ev73t79f46tb>;
    /**
     *Remove a referendum.
     *
     *The dispatch origin of this call must be _Root_.
     *
     *- `ref_index`: The index of the referendum to cancel.
     *
     *# Weight: `O(1)`.
     */
    "cancel_referendum": Anonymize<Ied9mja4bq7va8>;
    /**
     *Delegate the voting power (with some given conviction) of the sending account.
     *
     *The balance delegated is locked for as long as it's delegated, and thereafter for the
     *time appropriate for the conviction's lock period.
     *
     *The dispatch origin of this call must be _Signed_, and the signing account must either:
     *  - be delegating already; or
     *  - have no voting activity (if there is, then it will need to be removed/consolidated
     *    through `reap_vote` or `unvote`).
     *
     *- `to`: The account whose voting the `target` account's voting power will follow.
     *- `conviction`: The conviction that will be attached to the delegated votes. When the
     *  account is undelegated, the funds will be locked for the corresponding period.
     *- `balance`: The amount of the account's balance to be used in delegating. This must not
     *  be more than the account's current balance.
     *
     *Emits `Delegated`.
     *
     *Weight: `O(R)` where R is the number of referendums the voter delegating to has
     *  voted on. Weight is charged as if maximum votes.
     */
    "delegate": Anonymize<I1736r1jp6plpc>;
    /**
     *Undelegate the voting power of the sending account.
     *
     *Tokens may be unlocked following once an amount of time consistent with the lock period
     *of the conviction with which the delegation was issued.
     *
     *The dispatch origin of this call must be _Signed_ and the signing account must be
     *currently delegating.
     *
     *Emits `Undelegated`.
     *
     *Weight: `O(R)` where R is the number of referendums the voter delegating to has
     *  voted on. Weight is charged as if maximum votes.
     */
    "undelegate": undefined;
    /**
     *Clears all public proposals.
     *
     *The dispatch origin of this call must be _Root_.
     *
     *Weight: `O(1)`.
     */
    "clear_public_proposals": undefined;
    /**
     *Unlock tokens that have an expired lock.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `target`: The account to remove the lock on.
     *
     *Weight: `O(R)` with R number of vote of target.
     */
    "unlock": Anonymize<If31vrl50nund3>;
    /**
     *Remove a vote for a referendum.
     *
     *If:
     *- the referendum was cancelled, or
     *- the referendum is ongoing, or
     *- the referendum has ended such that
     *  - the vote of the account was in opposition to the result; or
     *  - there was no conviction to the account's vote; or
     *  - the account made a split vote
     *...then the vote is removed cleanly and a following call to `unlock` may result in more
     *funds being available.
     *
     *If, however, the referendum has ended and:
     *- it finished corresponding to the vote of the account, and
     *- the account made a standard vote with conviction, and
     *- the lock period of the conviction is not over
     *...then the lock will be aggregated into the overall account's lock, which may involve
     **overlocking* (where the two locks are combined into a single lock that is the maximum
     *of both the amount locked and the time is it locked for).
     *
     *The dispatch origin of this call must be _Signed_, and the signer must have a vote
     *registered for referendum `index`.
     *
     *- `index`: The index of referendum of the vote to be removed.
     *
     *Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.
     *  Weight is calculated for the maximum number of vote.
     */
    "remove_vote": Anonymize<I666bl2fqjkejo>;
    /**
     *Remove a vote for a referendum.
     *
     *If the `target` is equal to the signer, then this function is exactly equivalent to
     *`remove_vote`. If not equal to the signer, then the vote must have expired,
     *either because the referendum was cancelled, because the voter lost the referendum or
     *because the conviction period is over.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `target`: The account of the vote to be removed; this account must have voted for
     *  referendum `index`.
     *- `index`: The index of referendum of the vote to be removed.
     *
     *Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.
     *  Weight is calculated for the maximum number of vote.
     */
    "remove_other_vote": Anonymize<I6s1n1athh0bbq>;
    /**
     *Permanently place a proposal into the blacklist. This prevents it from ever being
     *proposed again.
     *
     *If called on a queued public or external proposal, then this will result in it being
     *removed. If the `ref_index` supplied is an active referendum with the proposal hash,
     *then it will be cancelled.
     *
     *The dispatch origin of this call must be `BlacklistOrigin`.
     *
     *- `proposal_hash`: The proposal hash to blacklist permanently.
     *- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be
     *cancelled.
     *
     *Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a
     *  reasonable value).
     */
    "blacklist": Anonymize<I3v9h9f3mpm1l8>;
    /**
     *Remove a proposal.
     *
     *The dispatch origin of this call must be `CancelProposalOrigin`.
     *
     *- `prop_index`: The index of the proposal to cancel.
     *
     *Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`
     */
    "cancel_proposal": Anonymize<I9mnj4k4u8ls2c>;
    /**
     *Set or clear a metadata of a proposal or a referendum.
     *
     *Parameters:
     *- `origin`: Must correspond to the `MetadataOwner`.
     *    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`
     *      threshold.
     *    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`
     *      threshold.
     *    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`
     *      threshold.
     *    - `Signed` by a creator for a public proposal.
     *    - `Signed` to clear a metadata for a finished referendum.
     *    - `Root` to set a metadata for an ongoing referendum.
     *- `owner`: an identifier of a metadata owner.
     *- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
     */
    "set_metadata": Anonymize<I2kt2u1flctk2q>;
}>;
export type I1moso5oagpiea = {
    "proposal": PreimagesBounded;
    "value": bigint;
};
export type Ibeb4n9vpjefp3 = {
    "proposal": number;
};
export type Id7murq9s9fg6h = {
    "ref_index": number;
    "vote": Anonymize<Ia9hdots6g53fs>;
};
export type I4f7jul8ljs54r = {
    "proposal": PreimagesBounded;
};
export type I5agg650597e49 = {
    "proposal_hash": FixedSizeBinary<32>;
    "voting_period": number;
    "delay": number;
};
export type I1736r1jp6plpc = {
    "to": Anonymize<I4su1fqci7afjt>;
    "conviction": VotingConviction;
    "balance": bigint;
};
export type If31vrl50nund3 = {
    "target": Anonymize<I4su1fqci7afjt>;
};
export type I6s1n1athh0bbq = {
    "target": Anonymize<I4su1fqci7afjt>;
    "index": number;
};
export type I3v9h9f3mpm1l8 = {
    "proposal_hash": FixedSizeBinary<32>;
    "maybe_ref_index"?: Anonymize<I4arjljr6dpflb>;
};
export type I2kt2u1flctk2q = {
    "owner": Anonymize<I2itl2k1j2q8nf>;
    "maybe_hash"?: Anonymize<I4s6vifaf8k998>;
};
export type I833p50nvi61mn = AnonymousEnum<{
    /**
     *Set the collective's membership.
     *
     *- `new_members`: The new member list. Be nice to the chain and provide it sorted.
     *- `prime`: The prime member whose vote sets the default.
     *- `old_count`: The upper bound for the previous number of members in storage. Used for
     *  weight estimation.
     *
     *The dispatch of this call must be `SetMembersOrigin`.
     *
     *NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but
     *      the weight estimations rely on it to estimate dispatchable weight.
     *
     *# WARNING:
     *
     *The `pallet-collective` can also be managed by logic outside of the pallet through the
     *implementation of the trait [`ChangeMembers`].
     *Any call to `set_members` must be careful that the member set doesn't get out of sync
     *with other logic managing the member set.
     *
     *## Complexity:
     *- `O(MP + N)` where:
     *  - `M` old-members-count (code- and governance-bounded)
     *  - `N` new-members-count (code- and governance-bounded)
     *  - `P` proposals-count (code-bounded)
     */
    "set_members": Anonymize<I38jfk5li8iang>;
    /**
     *Dispatch a proposal from a member using the `Member` origin.
     *
     *Origin must be a member of the collective.
     *
     *## Complexity:
     *- `O(B + M + P)` where:
     *- `B` is `proposal` size in bytes (length-fee-bounded)
     *- `M` members-count (code-bounded)
     *- `P` complexity of dispatching `proposal`
     */
    "execute": Anonymize<I7j6tqsqukhnri>;
    /**
     *Add a new proposal to either be voted on or executed directly.
     *
     *Requires the sender to be member.
     *
     *`threshold` determines whether `proposal` is executed directly (`threshold < 2`)
     *or put up for voting.
     *
     *## Complexity
     *- `O(B + M + P1)` or `O(B + M + P2)` where:
     *  - `B` is `proposal` size in bytes (length-fee-bounded)
     *  - `M` is members-count (code- and governance-bounded)
     *  - branching is influenced by `threshold` where:
     *    - `P1` is proposal execution complexity (`threshold < 2`)
     *    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
     */
    "propose": Anonymize<I59de8grgi0rgo>;
    /**
     *Add an aye or nay vote for the sender to the given proposal.
     *
     *Requires the sender to be a member.
     *
     *Transaction fees will be waived if the member is voting on any particular proposal
     *for the first time and the call is successful. Subsequent vote changes will charge a
     *fee.
     *## Complexity
     *- `O(M)` where `M` is members-count (code- and governance-bounded)
     */
    "vote": Anonymize<I2dtrijkm5601t>;
    /**
     *Disapprove a proposal, close, and remove it from the system, regardless of its current
     *state.
     *
     *Must be called by the Root origin.
     *
     *Parameters:
     ** `proposal_hash`: The hash of the proposal that should be disapproved.
     *
     *## Complexity
     *O(P) where P is the number of max proposals
     */
    "disapprove_proposal": Anonymize<I2ev73t79f46tb>;
    /**
     *Close a vote that is either approved, disapproved or whose voting period has ended.
     *
     *May be called by any signed account in order to finish voting and close the proposal.
     *
     *If called before the end of the voting period it will only close the vote if it is
     *has enough votes to be approved or disapproved.
     *
     *If called after the end of the voting period abstentions are counted as rejections
     *unless there is a prime member set and the prime member cast an approval.
     *
     *If the close operation completes successfully with disapproval, the transaction fee will
     *be waived. Otherwise execution of the approved operation will be charged to the caller.
     *
     *+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed
     *proposal.
     *+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via
     *`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.
     *
     *## Complexity
     *- `O(B + M + P1 + P2)` where:
     *  - `B` is `proposal` size in bytes (length-fee-bounded)
     *  - `M` is members-count (code- and governance-bounded)
     *  - `P1` is the complexity of `proposal` preimage.
     *  - `P2` is proposal-count (code-bounded)
     */
    "close": Anonymize<Ib2obgji960euh>;
}>;
export type I38jfk5li8iang = {
    "new_members": Anonymize<Ia2lhg7l2hilo3>;
    "prime"?: Anonymize<Ihfphjolmsqq1>;
    "old_count": number;
};
export type I7j6tqsqukhnri = {
    "proposal": TxCallData;
    "length_bound": number;
};
export type I59de8grgi0rgo = {
    "threshold": number;
    "proposal": TxCallData;
    "length_bound": number;
};
export type I2dtrijkm5601t = {
    "proposal": FixedSizeBinary<32>;
    "index": number;
    "approve": boolean;
};
export type Ib2obgji960euh = {
    "proposal_hash": FixedSizeBinary<32>;
    "index": number;
    "proposal_weight_bound": Anonymize<I4q39t5hn830vp>;
    "length_bound": number;
};
export type I6ab0pou3i8npt = AnonymousEnum<{
    /**
     *Vote for a set of candidates for the upcoming round of election. This can be called to
     *set the initial votes, or update already existing votes.
     *
     *Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is
     *reserved. The deposit is based on the number of votes and can be updated over time.
     *
     *The `votes` should:
     *  - not be empty.
     *  - be less than the number of possible candidates. Note that all current members and
     *    runners-up are also automatically candidates for the next round.
     *
     *If `value` is more than `who`'s free balance, then the maximum of the two is used.
     *
     *The dispatch origin of this call must be signed.
     *
     *### Warning
     *
     *It is the responsibility of the caller to **NOT** place all of their balance into the
     *lock and keep some for further operations.
     */
    "vote": Anonymize<Iaa13icjlsj13d>;
    /**
     *Remove `origin` as a voter.
     *
     *This removes the lock and returns the deposit.
     *
     *The dispatch origin of this call must be signed and be a voter.
     */
    "remove_voter": undefined;
    /**
     *Submit oneself for candidacy. A fixed amount of deposit is recorded.
     *
     *All candidates are wiped at the end of the term. They either become a member/runner-up,
     *or leave the system while their deposit is slashed.
     *
     *The dispatch origin of this call must be signed.
     *
     *### Warning
     *
     *Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]
     *to get their deposit back. Losing the spot in an election will always lead to a slash.
     *
     *The number of current candidates must be provided as witness data.
     *## Complexity
     *O(C + log(C)) where C is candidate_count.
     */
    "submit_candidacy": Anonymize<I98vh5ccjtf1ev>;
    /**
     *Renounce one's intention to be a candidate for the next election round. 3 potential
     *outcomes exist:
     *
     *- `origin` is a candidate and not elected in any set. In this case, the deposit is
     *  unreserved, returned and origin is removed as a candidate.
     *- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and
     *  origin is removed as a runner-up.
     *- `origin` is a current member. In this case, the deposit is unreserved and origin is
     *  removed as a member, consequently not being a candidate for the next round anymore.
     *  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they
     *  are immediately used. If the prime is renouncing, then no prime will exist until the
     *  next round.
     *
     *The dispatch origin of this call must be signed, and have one of the above roles.
     *The type of renouncing must be provided as witness data.
     *
     *## Complexity
     *  - Renouncing::Candidate(count): O(count + log(count))
     *  - Renouncing::Member: O(1)
     *  - Renouncing::RunnerUp: O(1)
     */
    "renounce_candidacy": Anonymize<I3al0eab2u0gt2>;
    /**
     *Remove a particular member from the set. This is effective immediately and the bond of
     *the outgoing member is slashed.
     *
     *If a runner-up is available, then the best runner-up will be removed and replaces the
     *outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is
     *started, else, nothing happens.
     *
     *If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,
     *it is returned.
     *
     *The dispatch origin of this call must be root.
     *
     *Note that this does not affect the designated block number of the next election.
     *
     *## Complexity
     *- Check details of remove_and_replace_member() and do_phragmen().
     */
    "remove_member": Anonymize<Ib3prtfc334m1t>;
    /**
     *Clean all voters who are defunct (i.e. they do not serve any purpose at all). The
     *deposit of the removed voters are returned.
     *
     *This is an root function to be used only for cleaning the state.
     *
     *The dispatch origin of this call must be root.
     *
     *## Complexity
     *- Check is_defunct_voter() details.
     */
    "clean_defunct_voters": Anonymize<I6fuug4i4r04hi>;
}>;
export type Iaa13icjlsj13d = {
    "votes": Anonymize<Ia2lhg7l2hilo3>;
    "value": bigint;
};
export type I98vh5ccjtf1ev = {
    "candidate_count": number;
};
export type I3al0eab2u0gt2 = {
    "renouncing": Anonymize<I7jm8hdmluu21u>;
};
export type I7jm8hdmluu21u = AnonymousEnum<{
    "Member": undefined;
    "RunnerUp": undefined;
    "Candidate": number;
}>;
export type Ib3prtfc334m1t = {
    "who": Anonymize<I4su1fqci7afjt>;
    "slash_bond": boolean;
    "rerun_election": boolean;
};
export type I6fuug4i4r04hi = {
    "num_voters": number;
    "num_defunct": number;
};
export type I3ndh4r2ep15q9 = AnonymousEnum<{
    /**
     *Add a member `who` to the set.
     *
     *May only be called from `T::AddOrigin`.
     */
    "add_member": Anonymize<Icu8seopr711dn>;
    /**
     *Remove a member `who` from the set.
     *
     *May only be called from `T::RemoveOrigin`.
     */
    "remove_member": Anonymize<Icu8seopr711dn>;
    /**
     *Swap out one member `remove` for another `add`.
     *
     *May only be called from `T::SwapOrigin`.
     *
     *Prime membership is *not* passed from `remove` to `add`, if extant.
     */
    "swap_member": Anonymize<Id09aqt1ca773l>;
    /**
     *Change the membership to a new set, disregarding the existing membership. Be nice and
     *pass `members` pre-sorted.
     *
     *May only be called from `T::ResetOrigin`.
     */
    "reset_members": Anonymize<I3c63j6sh3evqn>;
    /**
     *Swap out the sending member for some other key `new`.
     *
     *May only be called from `Signed` origin of a current member.
     *
     *Prime membership is passed from the origin account to `new`, if extant.
     */
    "change_key": Anonymize<I79cmnv5q6b3p>;
    /**
     *Set the prime member. Must be a current member.
     *
     *May only be called from `T::PrimeOrigin`.
     */
    "set_prime": Anonymize<Icu8seopr711dn>;
    /**
     *Remove the prime member if it exists.
     *
     *May only be called from `T::PrimeOrigin`.
     */
    "clear_prime": undefined;
}>;
export type Icu8seopr711dn = {
    "who": Anonymize<I4su1fqci7afjt>;
};
export type Id09aqt1ca773l = {
    "remove": Anonymize<I4su1fqci7afjt>;
    "add": Anonymize<I4su1fqci7afjt>;
};
export type I3c63j6sh3evqn = {
    "members": Anonymize<Ia2lhg7l2hilo3>;
};
export type I79cmnv5q6b3p = {
    "new": Anonymize<I4su1fqci7afjt>;
};
export type I99hrhstt9euff = AnonymousEnum<{
    /**
     *Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;
     *otherwise it is a vote to keep the status quo.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `poll_index`: The index of the poll to vote for.
     *- `vote`: The vote configuration.
     *
     *Weight: `O(R)` where R is the number of polls the voter has voted on.
     */
    "vote": Anonymize<Idnsr2pndm36h0>;
    /**
     *Delegate the voting power (with some given conviction) of the sending account for a
     *particular class of polls.
     *
     *The balance delegated is locked for as long as it's delegated, and thereafter for the
     *time appropriate for the conviction's lock period.
     *
     *The dispatch origin of this call must be _Signed_, and the signing account must either:
     *  - be delegating already; or
     *  - have no voting activity (if there is, then it will need to be removed through
     *    `remove_vote`).
     *
     *- `to`: The account whose voting the `target` account's voting power will follow.
     *- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls
     *  to this function are required.
     *- `conviction`: The conviction that will be attached to the delegated votes. When the
     *  account is undelegated, the funds will be locked for the corresponding period.
     *- `balance`: The amount of the account's balance to be used in delegating. This must not
     *  be more than the account's current balance.
     *
     *Emits `Delegated`.
     *
     *Weight: `O(R)` where R is the number of polls the voter delegating to has
     *  voted on. Weight is initially charged as if maximum votes, but is refunded later.
     */
    "delegate": Anonymize<Iam6m7eerh6h6v>;
    /**
     *Undelegate the voting power of the sending account for a particular class of polls.
     *
     *Tokens may be unlocked following once an amount of time consistent with the lock period
     *of the conviction with which the delegation was issued has passed.
     *
     *The dispatch origin of this call must be _Signed_ and the signing account must be
     *currently delegating.
     *
     *- `class`: The class of polls to remove the delegation from.
     *
     *Emits `Undelegated`.
     *
     *Weight: `O(R)` where R is the number of polls the voter delegating to has
     *  voted on. Weight is initially charged as if maximum votes, but is refunded later.
     */
    "undelegate": Anonymize<I8steo882k7qns>;
    /**
     *Remove the lock caused by prior voting/delegating which has expired within a particular
     *class.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `class`: The class of polls to unlock.
     *- `target`: The account to remove the lock on.
     *
     *Weight: `O(R)` with R number of vote of target.
     */
    "unlock": Anonymize<Ic8m623qbgr5mp>;
    /**
     *Remove a vote for a poll.
     *
     *If:
     *- the poll was cancelled, or
     *- the poll is ongoing, or
     *- the poll has ended such that
     *  - the vote of the account was in opposition to the result; or
     *  - there was no conviction to the account's vote; or
     *  - the account made a split vote
     *...then the vote is removed cleanly and a following call to `unlock` may result in more
     *funds being available.
     *
     *If, however, the poll has ended and:
     *- it finished corresponding to the vote of the account, and
     *- the account made a standard vote with conviction, and
     *- the lock period of the conviction is not over
     *...then the lock will be aggregated into the overall account's lock, which may involve
     **overlocking* (where the two locks are combined into a single lock that is the maximum
     *of both the amount locked and the time is it locked for).
     *
     *The dispatch origin of this call must be _Signed_, and the signer must have a vote
     *registered for poll `index`.
     *
     *- `index`: The index of poll of the vote to be removed.
     *- `class`: Optional parameter, if given it indicates the class of the poll. For polls
     *  which have finished or are cancelled, this must be `Some`.
     *
     *Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
     *  Weight is calculated for the maximum number of vote.
     */
    "remove_vote": Anonymize<I5f178ab6b89t3>;
    /**
     *Remove a vote for a poll.
     *
     *If the `target` is equal to the signer, then this function is exactly equivalent to
     *`remove_vote`. If not equal to the signer, then the vote must have expired,
     *either because the poll was cancelled, because the voter lost the poll or
     *because the conviction period is over.
     *
     *The dispatch origin of this call must be _Signed_.
     *
     *- `target`: The account of the vote to be removed; this account must have voted for poll
     *  `index`.
     *- `index`: The index of poll of the vote to be removed.
     *- `class`: The class of the poll.
     *
     *Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.
     *  Weight is calculated for the maximum number of vote.
     */
    "remove_other_vote": Anonymize<Ieg7p9mojce0qk>;
}>;
export type Iam6m7eerh6h6v = {
    "class": number;
    "to": Anonymize<I4su1fqci7afjt>;
    "conviction": VotingConviction;
    "balance": bigint;
};
export type Ic8m623qbgr5mp = {
    "class": number;
    "target": Anonymize<I4su1fqci7afjt>;
};
export type Ieg7p9mojce0qk = {
    "target": Anonymize<I4su1fqci7afjt>;
    "class": number;
    "index": number;
};
export type I4atlqo81cojqj = AnonymousEnum<{
    /**
     *Propose a referendum on a privileged action.
     *
     *- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds
     *  available.
     *- `proposal_origin`: The origin from which the proposal should be executed.
     *- `proposal`: The proposal.
     *- `enactment_moment`: The moment that the proposal should be enacted.
     *
     *Emits `Submitted`.
     */
    "submit": Anonymize<Iaur73da4vrh3b>;
    /**
     *Post the Decision Deposit for a referendum.
     *
     *- `origin`: must be `Signed` and the account must have funds available for the
     *  referendum's track's Decision Deposit.
     *- `index`: The index of the submitted referendum whose Decision Deposit is yet to be
     *  posted.
     *
     *Emits `DecisionDepositPlaced`.
     */
    "place_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Refund the Decision Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Decision Deposit has not yet been
     *  refunded.
     *
     *Emits `DecisionDepositRefunded`.
     */
    "refund_decision_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum.
     *
     *- `origin`: must be the `CancelOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Cancelled`.
     */
    "cancel": Anonymize<I666bl2fqjkejo>;
    /**
     *Cancel an ongoing referendum and slash the deposits.
     *
     *- `origin`: must be the `KillOrigin`.
     *- `index`: The index of the referendum to be cancelled.
     *
     *Emits `Killed` and `DepositSlashed`.
     */
    "kill": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a referendum onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `index`: the referendum to be advanced.
     */
    "nudge_referendum": Anonymize<I666bl2fqjkejo>;
    /**
     *Advance a track onto its next logical state. Only used internally.
     *
     *- `origin`: must be `Root`.
     *- `track`: the track to be advanced.
     *
     *Action item for when there is now one fewer referendum in the deciding phase and the
     *`DecidingCount` is not yet updated. This means that we should either:
     *- begin deciding another referendum (and leave `DecidingCount` alone); or
     *- decrement `DecidingCount`.
     */
    "one_fewer_deciding": Anonymize<Icbio0e1f0034b>;
    /**
     *Refund the Submission Deposit for a closed referendum back to the depositor.
     *
     *- `origin`: must be `Signed` or `Root`.
     *- `index`: The index of a closed referendum whose Submission Deposit has not yet been
     *  refunded.
     *
     *Emits `SubmissionDepositRefunded`.
     */
    "refund_submission_deposit": Anonymize<I666bl2fqjkejo>;
    /**
     *Set or clear metadata of a referendum.
     *
     *Parameters:
     *- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a
     *  metadata of a finished referendum.
     *- `index`:  The index of a referendum to set or clear metadata for.
     *- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata.
     */
    "set_metadata": Anonymize<I8c0vkqjjipnuj>;
}>;
export type Iaur73da4vrh3b = {
    "proposal_origin": Anonymize<Idph17ql7omoek>;
    "proposal": PreimagesBounded;
    "enactment_moment": TraitsScheduleDispatchTime;
};
export type Idph17ql7omoek = AnonymousEnum<{
    "system": DispatchRawOrigin;
    "Council": Anonymize<I637q9f60cmh3e>;
    "TechnicalCommittee": Anonymize<I637q9f60cmh3e>;
    "Origins": Anonymize<I70r59p620qiec>;
    "PolkadotXcm": XcmPalletOrigin;
    "CumulusXcm": Anonymize<I3in0d0lb61qi8>;
    "Ethereum": Anonymize<I9hp9au9bfqil7>;
    "Void": undefined;
}>;
export type I637q9f60cmh3e = AnonymousEnum<{
    "Members": Anonymize<I9jd27rnpm8ttv>;
    "Member": SS58String;
    "_Phantom": undefined;
}>;
export type I70r59p620qiec = AnonymousEnum<{
    "WhitelistedCaller": undefined;
    "FellowshipAdmin": undefined;
    "ReferendumCanceller": undefined;
    "ReferendumKiller": undefined;
    "LiquidStaking": undefined;
    "SALPAdmin": undefined;
    "FellowshipInitiates": undefined;
    "Fellows": undefined;
    "FellowshipExperts": undefined;
    "FellowshipMasters": undefined;
    "Fellowship1Dan": undefined;
    "Fellowship2Dan": undefined;
    "Fellowship3Dan": undefined;
    "Fellowship4Dan": undefined;
    "Fellowship5Dan": undefined;
    "Fellowship6Dan": undefined;
    "Fellowship7Dan": undefined;
    "Fellowship8Dan": undefined;
    "Fellowship9Dan": undefined;
    "TechAdmin": undefined;
    "CoreAdmin": undefined;
    "TreasurySpend": undefined;
}>;
export type I9hp9au9bfqil7 = AnonymousEnum<{
    "EthereumTransaction": FixedSizeBinary<20>;
}>;
export type Idjg8ps4v3472n = AnonymousEnum<{
    "whitelist_call": Anonymize<I1adbcfi5uc62r>;
    "remove_whitelisted_call": Anonymize<I1adbcfi5uc62r>;
    "dispatch_whitelisted_call": Anonymize<Ibf6ucefn8fh49>;
    "dispatch_whitelisted_call_with_preimage": Anonymize<I6ktbtrls224jl>;
}>;
export type I6ktbtrls224jl = {
    "call": TxCallData;
};
export type Id5ush556ogqpg = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<Ifgf2lv1kbqov7>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<I1ucinofptavlh>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<Ifgf2lv1kbqov7>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<Ifcksl2knoosec>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<Ifgf2lv1kbqov7>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<I946f5igftuiau>;
}>;
export type Ifgf2lv1kbqov7 = {
    "calls": Anonymize<Iatevq8md08u31>;
};
export type Iatevq8md08u31 = Array<TxCallData>;
export type I1ucinofptavlh = {
    "index": number;
    "call": TxCallData;
};
export type Ifcksl2knoosec = {
    "as_origin": Anonymize<Idph17ql7omoek>;
    "call": TxCallData;
};
export type I946f5igftuiau = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I3imb0sv9ni5i0 = AnonymousEnum<{
    /**
     *Anonymously schedule a task.
     */
    "schedule": Anonymize<I2mguj9c7439e8>;
    /**
     *Cancel an anonymously scheduled task.
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *Schedule a named task.
     */
    "schedule_named": Anonymize<Ish5gp6f54bck>;
    /**
     *Cancel a named scheduled task.
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *Anonymously schedule a task after a delay.
     */
    "schedule_after": Anonymize<I7l3dpep93imqm>;
    /**
     *Schedule a named task after a delay.
     */
    "schedule_named_after": Anonymize<Iea1arudhpnpah>;
    /**
     *Set a retry configuration for a task so that, in case its scheduled run fails, it will
     *be retried after `period` blocks, for a total amount of `retries` retries or until it
     *succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry": Anonymize<Ieg3fd8p4pkt10>;
    /**
     *Set a retry configuration for a named task so that, in case its scheduled run fails, it
     *will be retried after `period` blocks, for a total amount of `retries` retries or until
     *it succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry_named": Anonymize<I8kg5ll427kfqq>;
    /**
     *Removes the retry configuration of a task.
     */
    "cancel_retry": Anonymize<I467333262q1l9>;
    /**
     *Cancel the retry configuration of a named task.
     */
    "cancel_retry_named": Anonymize<Ifs1i5fk9cqvr6>;
}>;
export type I2mguj9c7439e8 = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ish5gp6f54bck = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I7l3dpep93imqm = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Iea1arudhpnpah = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Icfujdut8l3tc2 = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<I4h9fg0e30t24s>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Ic8921q56j7e76>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Ic8921q56j7e76>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<I2egj4q248jk1a>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<Ic0caeuh81btl>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<Idj9faf6hgsdur>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<Idj9faf6hgsdur>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<I8mj1nm903hpts>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<Ifun0ood196g9n>;
}>;
export type I4h9fg0e30t24s = {
    "real": Anonymize<I4su1fqci7afjt>;
    "force_proxy_type"?: Anonymize<If8t85b0aniqa2>;
    "call": TxCallData;
};
export type If8t85b0aniqa2 = (Anonymize<I376r4jplmhe8p>) | undefined;
export type Ic8921q56j7e76 = {
    "delegate": Anonymize<I4su1fqci7afjt>;
    "proxy_type": Anonymize<I376r4jplmhe8p>;
    "delay": number;
};
export type I2egj4q248jk1a = {
    "proxy_type": Anonymize<I376r4jplmhe8p>;
    "delay": number;
    "index": number;
};
export type Ic0caeuh81btl = {
    "spawner": Anonymize<I4su1fqci7afjt>;
    "proxy_type": Anonymize<I376r4jplmhe8p>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type Idj9faf6hgsdur = {
    "real": Anonymize<I4su1fqci7afjt>;
    "call_hash": FixedSizeBinary<32>;
};
export type I8mj1nm903hpts = {
    "delegate": Anonymize<I4su1fqci7afjt>;
    "call_hash": FixedSizeBinary<32>;
};
export type Ifun0ood196g9n = {
    "delegate": Anonymize<I4su1fqci7afjt>;
    "real": Anonymize<I4su1fqci7afjt>;
    "force_proxy_type"?: Anonymize<If8t85b0aniqa2>;
    "call": TxCallData;
};
export type Ifp0dlmjmsbm72 = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<Isqlsstl7j1o4>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<I3u4d2ab3msvn8>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Isqlsstl7j1o4 = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type I3u4d2ab3msvn8 = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Id4c1d4j757ojr = AnonymousEnum<{
    /**
     *Add a registrar to the system.
     *
     *The dispatch origin for this call must be `T::RegistrarOrigin`.
     *
     *- `account`: the account of the registrar.
     *
     *Emits `RegistrarAdded` if successful.
     */
    "add_registrar": Anonymize<I73kffnn32g4c7>;
    /**
     *Set an account's identity information and reserve the appropriate deposit.
     *
     *If the account already has identity information, the deposit is taken as part payment
     *for the new deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `info`: The identity information.
     *
     *Emits `IdentitySet` if successful.
     */
    "set_identity": Anonymize<I2kds5jji7slh8>;
    /**
     *Set the sub-accounts of the sender.
     *
     *Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned
     *and an amount `SubAccountDeposit` will be reserved for each item in `subs`.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *identity.
     *
     *- `subs`: The identity's (new) sub-accounts.
     */
    "set_subs": Anonymize<Ia9mkdf6l44shb>;
    /**
     *Clear an account's identity info and all sub-accounts and return all deposits.
     *
     *Payment: All reserved balances on the account are returned.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *identity.
     *
     *Emits `IdentityCleared` if successful.
     */
    "clear_identity": undefined;
    /**
     *Request a judgement from a registrar.
     *
     *Payment: At most `max_fee` will be reserved for payment to the registrar if judgement
     *given.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a
     *registered identity.
     *
     *- `reg_index`: The index of the registrar whose judgement is requested.
     *- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:
     *
     *```nocompile
     *Self::registrars().get(reg_index).unwrap().fee
     *```
     *
     *Emits `JudgementRequested` if successful.
     */
    "request_judgement": Anonymize<I9l2s4klu0831o>;
    /**
     *Cancel a previous request.
     *
     *Payment: A previously reserved deposit is returned on success.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a
     *registered identity.
     *
     *- `reg_index`: The index of the registrar whose judgement is no longer requested.
     *
     *Emits `JudgementUnrequested` if successful.
     */
    "cancel_request": Anonymize<I2ctrt5nqb8o7c>;
    /**
     *Set the fee required for a judgement to be requested from a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `fee`: the new fee.
     */
    "set_fee": Anonymize<I711qahikocb1c>;
    /**
     *Change the account associated with a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `new`: the new account ID.
     */
    "set_account_id": Anonymize<I1u3ac7lafvv5b>;
    /**
     *Set the field information for a registrar.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `index`.
     *
     *- `index`: the index of the registrar whose fee is to be set.
     *- `fields`: the fields that the registrar concerns themselves with.
     */
    "set_fields": Anonymize<Id6gojh30v9ib2>;
    /**
     *Provide a judgement for an account's identity.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must be the account
     *of the registrar whose index is `reg_index`.
     *
     *- `reg_index`: the index of the registrar whose judgement is being made.
     *- `target`: the account whose identity the judgement is upon. This must be an account
     *  with a registered identity.
     *- `judgement`: the judgement of the registrar of index `reg_index` about `target`.
     *- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is
     *  provided.
     *
     *Note: Judgements do not apply to a username.
     *
     *Emits `JudgementGiven` if successful.
     */
    "provide_judgement": Anonymize<I9h4cqmadpj7l0>;
    /**
     *Remove an account's identity and sub-account information and slash the deposits.
     *
     *Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by
     *`Slash`. Verification request deposits are not returned; they should be cancelled
     *manually using `cancel_request`.
     *
     *The dispatch origin for this call must match `T::ForceOrigin`.
     *
     *- `target`: the account whose identity the judgement is upon. This must be an account
     *  with a registered identity.
     *
     *Emits `IdentityKilled` if successful.
     */
    "kill_identity": Anonymize<If31vrl50nund3>;
    /**
     *Add the given account to the sender's subs.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "add_sub": Anonymize<I29bkdd7n16li1>;
    /**
     *Alter the associated name of the given sub-account.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "rename_sub": Anonymize<I29bkdd7n16li1>;
    /**
     *Remove the given account from the sender's subs.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *sub identity of `sub`.
     */
    "remove_sub": Anonymize<I9jb9hqm18runn>;
    /**
     *Remove the sender as a sub-account.
     *
     *Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated
     *to the sender (*not* the original depositor).
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have a registered
     *super-identity.
     *
     *NOTE: This should not normally be used, but is provided in the case that the non-
     *controller of an account is maliciously registered as a sub-account.
     */
    "quit_sub": undefined;
    /**
     *Add an `AccountId` with permission to grant usernames with a given `suffix` appended.
     *
     *The authority can grant up to `allocation` usernames. To top up their allocation, they
     *should just issue (or request via governance) a new `add_username_authority` call.
     */
    "add_username_authority": Anonymize<I85htvo8b885h>;
    /**
     *Remove `authority` from the username authorities.
     */
    "remove_username_authority": Anonymize<I95j99om5qfj06>;
    /**
     *Set the username for `who`. Must be called by a username authority.
     *
     *The authority must have an `allocation`. Users can either pre-sign their usernames or
     *accept them later.
     *
     *Usernames must:
     *  - Only contain lowercase ASCII characters or digits.
     *  - When combined with the suffix of the issuing authority be _less than_ the
     *    `MaxUsernameLength`.
     */
    "set_username_for": Anonymize<Ifh75tbmlqktju>;
    /**
     *Accept a given username that an `authority` granted. The call must include the full
     *username, as in `username.suffix`.
     */
    "accept_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *Remove an expired username approval. The username was approved by an authority but never
     *accepted by the user and must now be beyond its expiration. The call must include the
     *full username, as in `username.suffix`.
     */
    "remove_expired_approval": Anonymize<Ie5l999tf7t2te>;
    /**
     *Set a given username as the primary. The username should include the suffix.
     */
    "set_primary_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *Remove a username that corresponds to an account with no identity. Exists when a user
     *gets a username but then calls `clear_identity`.
     */
    "remove_dangling_username": Anonymize<Ie5l999tf7t2te>;
}>;
export type I73kffnn32g4c7 = {
    "account": Anonymize<I4su1fqci7afjt>;
};
export type I9h4cqmadpj7l0 = {
    "reg_index": number;
    "target": Anonymize<I4su1fqci7afjt>;
    "judgement": Anonymize<IdentityJudgement>;
    "identity": FixedSizeBinary<32>;
};
export type I29bkdd7n16li1 = {
    "sub": Anonymize<I4su1fqci7afjt>;
    "data": Anonymize<IdentityData>;
};
export type I9jb9hqm18runn = {
    "sub": Anonymize<I4su1fqci7afjt>;
};
export type I85htvo8b885h = {
    "authority": Anonymize<I4su1fqci7afjt>;
    "suffix": Binary;
    "allocation": number;
};
export type I95j99om5qfj06 = {
    "authority": Anonymize<I4su1fqci7afjt>;
};
export type Ifh75tbmlqktju = {
    "who": Anonymize<I4su1fqci7afjt>;
    "username": Binary;
    "signature"?: Anonymize<I86cdjmsf3a81s>;
};
export type I24a2kubctpuac = AnonymousEnum<{
    /**
     *Unlock any vested funds of the sender account.
     *
     *The dispatch origin for this call must be _Signed_ and the sender must have funds still
     *locked under this pallet.
     *
     *Emits either `VestingCompleted` or `VestingUpdated`.
     *
     *## Complexity
     *- `O(1)`.
     */
    "vest": undefined;
    /**
     *Unlock any vested funds of a `target` account.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `target`: The account whose vested funds should be unlocked. Must have funds still
     *locked under this pallet.
     *
     *Emits either `VestingCompleted` or `VestingUpdated`.
     *
     *## Complexity
     *- `O(1)`.
     */
    "vest_other": Anonymize<If31vrl50nund3>;
    /**
     *Create a vested transfer.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `target`: The account receiving the vested funds.
     *- `schedule`: The vesting schedule attached to the transfer.
     *
     *Emits `VestingCreated`.
     *
     *NOTE: This will unlock all schedules through the current block.
     *
     *## Complexity
     *- `O(1)`.
     */
    "vested_transfer": Anonymize<I3usr0jpt8ovnk>;
    /**
     *Force a vested transfer.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *- `source`: The account whose funds should be transferred.
     *- `target`: The account that should be transferred the vested funds.
     *- `schedule`: The vesting schedule attached to the transfer.
     *
     *Emits `VestingCreated`.
     *
     *NOTE: This will unlock all schedules through the current block.
     *
     *## Complexity
     *- `O(1)`.
     */
    "force_vested_transfer": Anonymize<I5a5fh6anhjgu7>;
    "init_vesting_start_at": Anonymize<I3atr9j3ums3m2>;
    "set_vesting_per_block": Anonymize<I2bvdo47pdo59f>;
    "force_set_cliff": Anonymize<I2okmh2c5ub01c>;
    /**
     *Merge two vesting schedules together, creating a new vesting schedule that unlocks over
     *the highest possible start and end blocks. If both schedules have already started the
     *current block will be used as the schedule start; with the caveat that if one schedule
     *is finished by the current block, the other will be treated as the new merged schedule,
     *unmodified.
     *
     *NOTE: If `schedule1_index == schedule2_index` this is a no-op.
     *NOTE: This will unlock all schedules through the current block prior to merging.
     *NOTE: If both schedules have ended by the current block, no new schedule will be created
     *and both will be removed.
     *
     *Merged schedule attributes:
     *- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
     *  current_block)`.
     *- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
     *- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `schedule1_index`: index of the first schedule to merge.
     *- `schedule2_index`: index of the second schedule to merge.
     */
    "merge_schedules": Anonymize<Ict9ivhr2c5hv0>;
}>;
export type I3usr0jpt8ovnk = {
    "target": Anonymize<I4su1fqci7afjt>;
    "schedule": Anonymize<I4aro1m78pdrtt>;
};
export type I5a5fh6anhjgu7 = {
    "source": Anonymize<I4su1fqci7afjt>;
    "target": Anonymize<I4su1fqci7afjt>;
    "schedule": Anonymize<I4aro1m78pdrtt>;
};
export type I3atr9j3ums3m2 = {
    "vesting_start_at": number;
};
export type I2bvdo47pdo59f = {
    "target": Anonymize<I4su1fqci7afjt>;
    "index": number;
    "per_block": bigint;
};
export type I2okmh2c5ub01c = {
    "target": Anonymize<I4su1fqci7afjt>;
    "cliff_block": number;
};
export type Iasjt9hjajd80h = AnonymousEnum<{
    /**
     *Put forward a suggestion for spending.
     *
     *## Dispatch Origin
     *
     *Must be signed.
     *
     *## Details
     *A deposit proportional to the value is reserved and slashed if the proposal is rejected.
     *It is returned once the proposal is awarded.
     *
     *### Complexity
     *- O(1)
     *
     *## Events
     *
     *Emits [`Event::Proposed`] if successful.
     */
    "propose_spend": Anonymize<I12ng1otu7kekg>;
    /**
     *Reject a proposed spend.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::RejectOrigin`].
     *
     *## Details
     *The original deposit will be slashed.
     *
     *### Complexity
     *- O(1)
     *
     *## Events
     *
     *Emits [`Event::Rejected`] if successful.
     */
    "reject_proposal": Anonymize<Icm9m0qeemu66d>;
    /**
     *Approve a proposal.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::ApproveOrigin`].
     *
     *## Details
     *
     *At a later time, the proposal will be allocated to the beneficiary and the original
     *deposit will be returned.
     *
     *### Complexity
     * - O(1).
     *
     *## Events
     *
     *No events are emitted from this dispatch.
     */
    "approve_proposal": Anonymize<Icm9m0qeemu66d>;
    /**
     *Propose and approve a spend of treasury funds.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.
     *
     *### Details
     *NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the
     *beneficiary.
     *
     *### Parameters
     *- `amount`: The amount to be transferred from the treasury to the `beneficiary`.
     *- `beneficiary`: The destination account for the transfer.
     *
     *## Events
     *
     *Emits [`Event::SpendApproved`] if successful.
     */
    "spend_local": Anonymize<I7fcl4aua07ato>;
    /**
     *Force a previously approved proposal to be removed from the approval queue.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::RejectOrigin`].
     *
     *## Details
     *
     *The original deposit will no longer be returned.
     *
     *### Parameters
     *- `proposal_id`: The index of a proposal
     *
     *### Complexity
     *- O(A) where `A` is the number of approvals
     *
     *### Errors
     *- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the
     *  approval queue, i.e., the proposal has not been approved. This could also mean the
     *  proposal does not exist altogether, thus there is no way it would have been approved
     *  in the first place.
     */
    "remove_approval": Anonymize<Icm9m0qeemu66d>;
    /**
     *Propose and approve a spend of treasury funds.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::SpendOrigin`] with the `Success` value being at least
     *`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted
     *for assertion using the [`Config::BalanceConverter`].
     *
     *## Details
     *
     *Create an approved spend for transferring a specific `amount` of `asset_kind` to a
     *designated beneficiary. The spend must be claimed using the `payout` dispatchable within
     *the [`Config::PayoutPeriod`].
     *
     *### Parameters
     *- `asset_kind`: An indicator of the specific asset class to be spent.
     *- `amount`: The amount to be transferred from the treasury to the `beneficiary`.
     *- `beneficiary`: The beneficiary of the spend.
     *- `valid_from`: The block number from which the spend can be claimed. It can refer to
     *  the past if the resulting spend has not yet expired according to the
     *  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after
     *  approval.
     *
     *## Events
     *
     *Emits [`Event::AssetSpendApproved`] if successful.
     */
    "spend": Anonymize<I6qq5nnbjegi8u>;
    /**
     *Claim a spend.
     *
     *## Dispatch Origin
     *
     *Must be signed.
     *
     *## Details
     *
     *Spends must be claimed within some temporal bounds. A spend may be claimed within one
     *[`Config::PayoutPeriod`] from the `valid_from` block.
     *In case of a payout failure, the spend status must be updated with the `check_status`
     *dispatchable before retrying with the current function.
     *
     *### Parameters
     *- `index`: The spend index.
     *
     *## Events
     *
     *Emits [`Event::Paid`] if successful.
     */
    "payout": Anonymize<I666bl2fqjkejo>;
    /**
     *Check the status of the spend and remove it from the storage if processed.
     *
     *## Dispatch Origin
     *
     *Must be signed.
     *
     *## Details
     *
     *The status check is a prerequisite for retrying a failed payout.
     *If a spend has either succeeded or expired, it is removed from the storage by this
     *function. In such instances, transaction fees are refunded.
     *
     *### Parameters
     *- `index`: The spend index.
     *
     *## Events
     *
     *Emits [`Event::PaymentFailed`] if the spend payout has failed.
     *Emits [`Event::SpendProcessed`] if the spend payout has succeed.
     */
    "check_status": Anonymize<I666bl2fqjkejo>;
    /**
     *Void previously approved spend.
     *
     *## Dispatch Origin
     *
     *Must be [`Config::RejectOrigin`].
     *
     *## Details
     *
     *A spend void is only possible if the payout has not been attempted yet.
     *
     *### Parameters
     *- `index`: The spend index.
     *
     *## Events
     *
     *Emits [`Event::AssetSpendVoided`] if successful.
     */
    "void_spend": Anonymize<I666bl2fqjkejo>;
}>;
export type I12ng1otu7kekg = {
    "value": bigint;
    "beneficiary": Anonymize<I4su1fqci7afjt>;
};
export type I7fcl4aua07ato = {
    "amount": bigint;
    "beneficiary": Anonymize<I4su1fqci7afjt>;
};
export type I6qq5nnbjegi8u = {
    "amount": bigint;
    "beneficiary": SS58String;
    "valid_from"?: Anonymize<I4arjljr6dpflb>;
};
export type Icu3fce0sripq4 = AnonymousEnum<{
    /**
     *Transact an Ethereum transaction.
     */
    "transact": Anonymize<Ia8ogbeici6lip>;
}>;
export type Ia8ogbeici6lip = {
    "transaction": Anonymize<I6fr2mqud652ga>;
};
export type I6fr2mqud652ga = AnonymousEnum<{
    "Legacy": Anonymize<I22u79j4u5as1p>;
    "EIP2930": Anonymize<I6kt2nnlnd08hf>;
    "EIP1559": Anonymize<I2ns43em37mqdo>;
}>;
export type I22u79j4u5as1p = {
    "nonce": Anonymize<I4totqt881mlti>;
    "gas_price": Anonymize<I4totqt881mlti>;
    "gas_limit": Anonymize<I4totqt881mlti>;
    "action": Anonymize<I2do93a3gr3ege>;
    "value": Anonymize<I4totqt881mlti>;
    "input": Binary;
    "signature": Anonymize<Ifka9ntqlmrnof>;
};
export type I4totqt881mlti = FixedSizeArray<4, bigint>;
export type I2do93a3gr3ege = AnonymousEnum<{
    "Call": FixedSizeBinary<20>;
    "Create": undefined;
}>;
export type Ifka9ntqlmrnof = {
    "v": bigint;
    "r": FixedSizeBinary<32>;
    "s": FixedSizeBinary<32>;
};
export type I6kt2nnlnd08hf = {
    "chain_id": bigint;
    "nonce": Anonymize<I4totqt881mlti>;
    "gas_price": Anonymize<I4totqt881mlti>;
    "gas_limit": Anonymize<I4totqt881mlti>;
    "action": Anonymize<I2do93a3gr3ege>;
    "value": Anonymize<I4totqt881mlti>;
    "input": Binary;
    "access_list": Anonymize<Ieap15h2pjii9u>;
    "odd_y_parity": boolean;
    "r": FixedSizeBinary<32>;
    "s": FixedSizeBinary<32>;
};
export type Ieap15h2pjii9u = Array<Anonymize<Ia1jste73q15go>>;
export type Ia1jste73q15go = {
    "address": FixedSizeBinary<20>;
    "storage_keys": Anonymize<Ic5m5lp1oioo8r>;
};
export type I2ns43em37mqdo = {
    "chain_id": bigint;
    "nonce": Anonymize<I4totqt881mlti>;
    "max_priority_fee_per_gas": Anonymize<I4totqt881mlti>;
    "max_fee_per_gas": Anonymize<I4totqt881mlti>;
    "gas_limit": Anonymize<I4totqt881mlti>;
    "action": Anonymize<I2do93a3gr3ege>;
    "value": Anonymize<I4totqt881mlti>;
    "input": Binary;
    "access_list": Anonymize<Ieap15h2pjii9u>;
    "odd_y_parity": boolean;
    "r": FixedSizeBinary<32>;
    "s": FixedSizeBinary<32>;
};
export type I8s4v176jtv80g = AnonymousEnum<{
    /**
     *Withdraw balance from EVM into currency/balances pallet.
     */
    "withdraw": Anonymize<Idcabvplu05lea>;
    /**
     *Issue an EVM call operation. This is similar to a message call transaction in Ethereum.
     */
    "call": Anonymize<I2ncccle6pmhd9>;
    /**
     *Issue an EVM create operation. This is similar to a contract creation transaction in
     *Ethereum.
     */
    "create": Anonymize<I92bnd3pe0civj>;
    /**
     *Issue an EVM create2 operation.
     */
    "create2": Anonymize<Ic84i538n8bl8j>;
}>;
export type Idcabvplu05lea = {
    "address": FixedSizeBinary<20>;
    "value": bigint;
};
export type I2ncccle6pmhd9 = {
    "source": FixedSizeBinary<20>;
    "target": FixedSizeBinary<20>;
    "input": Binary;
    "value": Anonymize<I4totqt881mlti>;
    "gas_limit": bigint;
    "max_fee_per_gas": Anonymize<I4totqt881mlti>;
    "max_priority_fee_per_gas"?: Anonymize<Ic4rgfgksgmm3e>;
    "nonce"?: Anonymize<Ic4rgfgksgmm3e>;
    "access_list": Anonymize<I1bsfec060j604>;
};
export type Ic4rgfgksgmm3e = (Anonymize<I4totqt881mlti>) | undefined;
export type I1bsfec060j604 = Array<Anonymize<I1698r597ks8k6>>;
export type I1698r597ks8k6 = [FixedSizeBinary<20>, Anonymize<Ic5m5lp1oioo8r>];
export type I92bnd3pe0civj = {
    "source": FixedSizeBinary<20>;
    "init": Binary;
    "value": Anonymize<I4totqt881mlti>;
    "gas_limit": bigint;
    "max_fee_per_gas": Anonymize<I4totqt881mlti>;
    "max_priority_fee_per_gas"?: Anonymize<Ic4rgfgksgmm3e>;
    "nonce"?: Anonymize<Ic4rgfgksgmm3e>;
    "access_list": Anonymize<I1bsfec060j604>;
};
export type Ic84i538n8bl8j = {
    "source": FixedSizeBinary<20>;
    "init": Binary;
    "salt": FixedSizeBinary<32>;
    "value": Anonymize<I4totqt881mlti>;
    "gas_limit": bigint;
    "max_fee_per_gas": Anonymize<I4totqt881mlti>;
    "max_priority_fee_per_gas"?: Anonymize<Ic4rgfgksgmm3e>;
    "nonce"?: Anonymize<Ic4rgfgksgmm3e>;
    "access_list": Anonymize<I1bsfec060j604>;
};
export type Ie18f12l062q2m = AnonymousEnum<{
    "note_min_gas_price_target": Anonymize<I6v8kghkt0dksl>;
}>;
export type I6v8kghkt0dksl = {
    "target": Anonymize<I4totqt881mlti>;
};
export type I1l1phpc090qm9 = AnonymousEnum<{
    /**
     *Binds a Substrate address to EVM address.
     *After binding, the EVM is able to convert an EVM address to the original Substrate
     *address. Without binding, the EVM converts an EVM address to a truncated Substrate
     *address, which doesn't correspond to the origin address.
     *
     *Binding an address is not necessary for interacting with the EVM.
     *
     *Parameters:
     *- `origin`: Substrate account binding an address
     *
     *Emits `EvmAccountBound` event when successful.
     */
    "bind_evm_address": undefined;
    /**
     *Adds an EVM address to the list of addresses that are allowed to deploy smart contracts.
     *
     *Parameters:
     *- `origin`: Substrate account whitelisting an address. Must be `ControllerOrigin`.
     *- `address`: EVM address that is whitelisted
     *
     *Emits `DeployerAdded` event when successful.
     */
    "add_contract_deployer": Anonymize<Itmchvgqfl28g>;
    /**
     *Removes an EVM address from the list of addresses that are allowed to deploy smart
     *contracts.
     *
     *Parameters:
     *- `origin`: Substrate account removing the EVM address from the whitelist. Must be
     *  `ControllerOrigin`.
     *- `address`: EVM address that is removed from the whitelist
     *
     *Emits `DeployerRemoved` event when successful.
     */
    "remove_contract_deployer": Anonymize<Itmchvgqfl28g>;
    /**
     *Removes the account's EVM address from the list of addresses that are allowed to deploy
     *smart contracts. Based on the best practices, this extrinsic can be called by any
     *whitelisted account to renounce their own permission.
     *
     *Parameters:
     *- `origin`: Substrate account removing their EVM address from the whitelist.
     *
     *Emits `DeployerRemoved` event when successful.
     */
    "renounce_contract_deployer": undefined;
}>;
export type I7djumi7b5pj5 = AnonymousEnum<{
    /**
     *Transfer native currencies.
     *
     *`dest_weight_limit` is the weight for XCM execution on the dest
     *chain, and it would be charged from the transferred assets. If set
     *below requirements, the execution may fail and assets wouldn't be
     *received.
     *
     *It's a no-op if any error on local XCM execution or message sending.
     *Note sending assets out per se doesn't guarantee they would be
     *received. Receiving depends on if the XCM message could be delivered
     *by the network, and if the receiving chain would handle
     *messages correctly.
     */
    "transfer": Anonymize<I5culoml3m3hc5>;
    /**
     *Transfer `Asset`.
     *
     *`dest_weight_limit` is the weight for XCM execution on the dest
     *chain, and it would be charged from the transferred assets. If set
     *below requirements, the execution may fail and assets wouldn't be
     *received.
     *
     *It's a no-op if any error on local XCM execution or message sending.
     *Note sending assets out per se doesn't guarantee they would be
     *received. Receiving depends on if the XCM message could be delivered
     *by the network, and if the receiving chain would handle
     *messages correctly.
     */
    "transfer_multiasset": Anonymize<Idu1ujel33jksu>;
    /**
     *Transfer native currencies specifying the fee and amount as
     *separate.
     *
     *`dest_weight_limit` is the weight for XCM execution on the dest
     *chain, and it would be charged from the transferred assets. If set
     *below requirements, the execution may fail and assets wouldn't be
     *received.
     *
     *`fee` is the amount to be spent to pay for execution in destination
     *chain. Both fee and amount will be subtracted form the callers
     *balance.
     *
     *If `fee` is not high enough to cover for the execution costs in the
     *destination chain, then the assets will be trapped in the
     *destination chain
     *
     *It's a no-op if any error on local XCM execution or message sending.
     *Note sending assets out per se doesn't guarantee they would be
     *received. Receiving depends on if the XCM message could be delivered
     *by the network, and if the receiving chain would handle
     *messages correctly.
     */
    "transfer_with_fee": Anonymize<Icmdiibb69taq4>;
    /**
     *Transfer `Asset` specifying the fee and amount as separate.
     *
     *`dest_weight_limit` is the weight for XCM execution on the dest
     *chain, and it would be charged from the transferred assets. If set
     *below requirements, the execution may fail and assets wouldn't be
     *received.
     *
     *`fee` is the Asset to be spent to pay for execution in
     *destination chain. Both fee and amount will be subtracted form the
     *callers balance For now we only accept fee and asset having the same
     *`Location` id.
     *
     *If `fee` is not high enough to cover for the execution costs in the
     *destination chain, then the assets will be trapped in the
     *destination chain
     *
     *It's a no-op if any error on local XCM execution or message sending.
     *Note sending assets out per se doesn't guarantee they would be
     *received. Receiving depends on if the XCM message could be delivered
     *by the network, and if the receiving chain would handle
     *messages correctly.
     */
    "transfer_multiasset_with_fee": Anonymize<I40fog3d0qlub1>;
    /**
     *Transfer several currencies specifying the item to be used as fee
     *
     *`dest_weight_limit` is the weight for XCM execution on the dest
     *chain, and it would be charged from the transferred assets. If set
     *below requirements, the execution may fail and assets wouldn't be
     *received.
     *
     *`fee_item` is index of the currencies tuple that we want to use for
     *payment
     *
     *It's a no-op if any error on local XCM execution or message sending.
     *Note sending assets out per se doesn't guarantee they would be
     *received. Receiving depends on if the XCM message could be delivered
     *by the network, and if the receiving chain would handle
     *messages correctly.
     */
    "transfer_multicurrencies": Anonymize<I2vqbh54f2cif2>;
    /**
     *Transfer several `Asset` specifying the item to be used as fee
     *
     *`dest_weight_limit` is the weight for XCM execution on the dest
     *chain, and it would be charged from the transferred assets. If set
     *below requirements, the execution may fail and assets wouldn't be
     *received.
     *
     *`fee_item` is index of the Assets that we want to use for
     *payment
     *
     *It's a no-op if any error on local XCM execution or message sending.
     *Note sending assets out per se doesn't guarantee they would be
     *received. Receiving depends on if the XCM message could be delivered
     *by the network, and if the receiving chain would handle
     *messages correctly.
     */
    "transfer_multiassets": Anonymize<Iaif2nhfhk9qc0>;
}>;
export type I5culoml3m3hc5 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type Idu1ujel33jksu = {
    "asset": Anonymize<Ikdf7s28ij7ts>;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type Ikdf7s28ij7ts = AnonymousEnum<{
    "V2": Anonymize<Id8h647t880l31>;
    "V3": Anonymize<Idcm24504c8bkk>;
    "V4": Anonymize<Ia5l7mu5a6v49o>;
}>;
export type Icmdiibb69taq4 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
    "fee": bigint;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type I40fog3d0qlub1 = {
    "asset": Anonymize<Ikdf7s28ij7ts>;
    "fee": Anonymize<Ikdf7s28ij7ts>;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type I2vqbh54f2cif2 = {
    "currencies": Anonymize<I2dbamvpq4935>;
    "fee_item": number;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type Iaif2nhfhk9qc0 = {
    "assets": XcmVersionedAssets;
    "fee_item": number;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type Ifg1rpnuo1vsne = AnonymousEnum<{
    /**
     *Transfer some liquid free balance to another account.
     *
     *`transfer` will set the `FreeBalance` of the sender and receiver.
     *It will decrease the total issuance of the system by the
     *`TransferFee`. If the sender's account is below the existential
     *deposit as a result of the transfer, the account will be reaped.
     *
     *The dispatch origin for this call must be `Signed` by the
     *transactor.
     *
     *- `dest`: The recipient of the transfer.
     *- `currency_id`: currency type.
     *- `amount`: free balance amount to tranfer.
     */
    "transfer": Anonymize<I302t0ook7k95n>;
    /**
     *Transfer all remaining balance to the given account.
     *
     *NOTE: This function only attempts to transfer _transferable_
     *balances. This means that any locked, reserved, or existential
     *deposits (when `keep_alive` is `true`), will not be transferred by
     *this function. To ensure that this function results in a killed
     *account, you might need to prepare the account by removing any
     *reference counters, storage deposits, etc...
     *
     *The dispatch origin for this call must be `Signed` by the
     *transactor.
     *
     *- `dest`: The recipient of the transfer.
     *- `currency_id`: currency type.
     *- `keep_alive`: A boolean to determine if the `transfer_all`
     *  operation should send all of the funds the account has, causing
     *  the sender account to be killed (false), or transfer everything
     *  except at least the existential deposit, which will guarantee to
     *  keep the sender account alive (true).
     */
    "transfer_all": Anonymize<If84l0hb2pbh5j>;
    /**
     *Same as the [`transfer`] call, but with a check that the transfer
     *will not kill the origin account.
     *
     *99% of the time you want [`transfer`] instead.
     *
     *The dispatch origin for this call must be `Signed` by the
     *transactor.
     *
     *- `dest`: The recipient of the transfer.
     *- `currency_id`: currency type.
     *- `amount`: free balance amount to tranfer.
     */
    "transfer_keep_alive": Anonymize<I302t0ook7k95n>;
    /**
     *Exactly as `transfer`, except the origin must be root and the source
     *account may be specified.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *- `source`: The sender of the transfer.
     *- `dest`: The recipient of the transfer.
     *- `currency_id`: currency type.
     *- `amount`: free balance amount to tranfer.
     */
    "force_transfer": Anonymize<I7td476oj5kt2h>;
    /**
     *Set the balances of a given account.
     *
     *This will alter `FreeBalance` and `ReservedBalance` in storage. it
     *will also decrease the total issuance of the system
     *(`TotalIssuance`). If the new free or reserved balance is below the
     *existential deposit, it will reap the `AccountInfo`.
     *
     *The dispatch origin for this call is `root`.
     */
    "set_balance": Anonymize<I1o4mqqd02b5sj>;
}>;
export type I302t0ook7k95n = {
    "dest": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type If84l0hb2pbh5j = {
    "dest": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "keep_alive": boolean;
};
export type I7td476oj5kt2h = {
    "source": Anonymize<I4su1fqci7afjt>;
    "dest": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type I1o4mqqd02b5sj = {
    "who": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "new_free": bigint;
    "new_reserved": bigint;
};
export type I9r7qbm7jckmoe = AnonymousEnum<{
    /**
     *Send an XCM message as parachain sovereign.
     */
    "send_as_sovereign": Anonymize<I9paqujeb1fpv6>;
}>;
export type I55fhdusvjpt5l = AnonymousEnum<{
    /**
     *Set the new receiver of the protocol fee.
     *
     *# Arguments
     *
     *- `send_to`:
     *(1) Some(receiver): it turn on the protocol fee and the new receiver account.
     *(2) None: it turn off the protocol fee.
     */
    "set_fee_receiver": Anonymize<Id3v70nvrro0hv>;
    /**
     *Set the protocol fee point.
     *
     *# Arguments
     *
     *- `fee_point`:
     *0 means that all exchange fees belong to the liquidity provider.
     *30 means that all exchange fees belong to the fee receiver.
     */
    "set_fee_point": Anonymize<I6msvbss3ktmnu>;
    /**
     *Move some assets from one holder to another.
     *
     *# Arguments
     *
     *- `asset_id`: The foreign id.
     *- `target`: The receiver of the foreign.
     *- `amount`: The amount of the foreign to transfer.
     */
    "transfer": Anonymize<Ifbs87e8855hrh>;
    /**
     *Create pair by two assets.
     *
     *The order of foreign dot effect result.
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up Pair
     *- `asset_1`: Asset which make up Pair
     */
    "create_pair": Anonymize<Ibugemvm1fr87g>;
    /**
     *Provide liquidity to a pair.
     *
     *The order of foreign dot effect result.
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up pair
     *- `asset_1`: Asset which make up pair
     *- `amount_0_desired`: Maximum amount of asset_0 added to the pair
     *- `amount_1_desired`: Maximum amount of asset_1 added to the pair
     *- `amount_0_min`: Minimum amount of asset_0 added to the pair
     *- `amount_1_min`: Minimum amount of asset_1 added to the pair
     *- `deadline`: Height of the cutoff block of this transaction
     */
    "add_liquidity": Anonymize<I11kqb3hb93c3c>;
    /**
     *Extract liquidity.
     *
     *The order of foreign dot effect result.
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up pair
     *- `asset_1`: Asset which make up pair
     *- `amount_asset_0_min`: Minimum amount of asset_0 to exact
     *- `amount_asset_1_min`: Minimum amount of asset_1 to exact
     *- `recipient`: Account that accepts withdrawal of assets
     *- `deadline`: Height of the cutoff block of this transaction
     */
    "remove_liquidity": Anonymize<Ici6p55173o3kg>;
    /**
     *Sell amount of foreign by path.
     *
     *# Arguments
     *
     *- `amount_in`: Amount of the foreign will be sold
     *- `amount_out_min`: Minimum amount of target foreign
     *- `path`: path can convert to pairs.
     *- `recipient`: Account that receive the target foreign
     *- `deadline`: Height of the cutoff block of this transaction
     */
    "swap_exact_assets_for_assets": Anonymize<Ib7tkro61h34d2>;
    /**
     *Buy amount of foreign by path.
     *
     *# Arguments
     *
     *- `amount_out`: Amount of the foreign will be bought
     *- `amount_in_max`: Maximum amount of sold foreign
     *- `path`: path can convert to pairs.
     *- `recipient`: Account that receive the target foreign
     *- `deadline`: Height of the cutoff block of this transaction
     */
    "swap_assets_for_exact_assets": Anonymize<Ig5896f16psh3>;
    /**
     *Create bootstrap pair
     *
     *The order of asset don't affect result.
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up bootstrap pair
     *- `asset_1`: Asset which make up bootstrap pair
     *- `target_supply_0`: Target amount of asset_0 total contribute
     *- `target_supply_0`: Target amount of asset_1 total contribute
     *- `capacity_supply_0`: The max amount of asset_0 total contribute
     *- `capacity_supply_1`: The max amount of asset_1 total contribute
     *- `end`: The earliest ending block.
     */
    "bootstrap_create": Anonymize<Ibsib3ed5u1164>;
    /**
     *Contribute some asset to a bootstrap pair
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up bootstrap pair
     *- `asset_1`: Asset which make up bootstrap pair
     *- `amount_0_contribute`: The amount of asset_0 contribute to this bootstrap pair
     *- `amount_1_contribute`: The amount of asset_1 contribute to this bootstrap pair
     *- `deadline`: Height of the cutoff block of this transaction
     */
    "bootstrap_contribute": Anonymize<I6g1lhais855g9>;
    /**
     *Claim lp asset from a bootstrap pair
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up bootstrap pair
     *- `asset_1`: Asset which make up bootstrap pair
     *- `deadline`: Height of the cutoff block of this transaction
     */
    "bootstrap_claim": Anonymize<I52cpe8da8o62l>;
    /**
     *End a bootstrap pair
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up bootstrap pair
     *- `asset_1`: Asset which make up bootstrap pair
     */
    "bootstrap_end": Anonymize<I7h9e3cbrb3kaa>;
    /**
     *update a bootstrap pair
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up bootstrap pair
     *- `asset_1`: Asset which make up bootstrap pair
     *- `min_contribution_0`: The new min amount of asset_0 contribute
     *- `min_contribution_0`: The new min amount of asset_1 contribute
     *- `target_supply_0`: The new target amount of asset_0 total contribute
     *- `target_supply_0`: The new target amount of asset_1 total contribute
     *- `capacity_supply_0`: The new max amount of asset_0 total contribute
     *- `capacity_supply_1`: The new max amount of asset_1 total contribute
     *- `end`: The earliest ending block.
     */
    "bootstrap_update": Anonymize<Ibsib3ed5u1164>;
    /**
     *Contributor refund from disable bootstrap pair
     *
     *# Arguments
     *
     *- `asset_0`: Asset which make up bootstrap pair
     *- `asset_1`: Asset which make up bootstrap pair
     */
    "bootstrap_refund": Anonymize<I7h9e3cbrb3kaa>;
    "bootstrap_charge_reward": Anonymize<Ieaqa57prka9ld>;
    "bootstrap_withdraw_reward": Anonymize<Iedoc1ioirjto2>;
    "set_new_fee_receiver": Anonymize<Idqd6j83jfa92q>;
}>;
export type Id3v70nvrro0hv = {
    "send_to"?: Anonymize<I7p12hnekjgg2o>;
};
export type I7p12hnekjgg2o = (Anonymize<I4su1fqci7afjt>) | undefined;
export type I6msvbss3ktmnu = {
    "fee_point": number;
};
export type Ifbs87e8855hrh = {
    "asset_id": Anonymize<Icu3qllmbdnj89>;
    "recipient": Anonymize<I4su1fqci7afjt>;
    "amount": bigint;
};
export type Ibugemvm1fr87g = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "fee_recipient": Anonymize<I4su1fqci7afjt>;
};
export type I11kqb3hb93c3c = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "amount_0_desired": bigint;
    "amount_1_desired": bigint;
    "amount_0_min": bigint;
    "amount_1_min": bigint;
    "deadline": number;
};
export type Ici6p55173o3kg = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "liquidity": bigint;
    "amount_0_min": bigint;
    "amount_1_min": bigint;
    "recipient": Anonymize<I4su1fqci7afjt>;
    "deadline": number;
};
export type Ib7tkro61h34d2 = {
    "amount_in": bigint;
    "amount_out_min": bigint;
    "path": Anonymize<Idhafor8sovqeu>;
    "recipient": Anonymize<I4su1fqci7afjt>;
    "deadline": number;
};
export type Ig5896f16psh3 = {
    "amount_out": bigint;
    "amount_in_max": bigint;
    "path": Anonymize<Idhafor8sovqeu>;
    "recipient": Anonymize<I4su1fqci7afjt>;
    "deadline": number;
};
export type Ibsib3ed5u1164 = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "target_supply_0": bigint;
    "target_supply_1": bigint;
    "capacity_supply_0": bigint;
    "capacity_supply_1": bigint;
    "end": number;
    "rewards": Anonymize<Idhafor8sovqeu>;
    "limits": Anonymize<I6sn46nd9sjbst>;
};
export type I6g1lhais855g9 = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "amount_0_contribute": bigint;
    "amount_1_contribute": bigint;
    "deadline": number;
};
export type I52cpe8da8o62l = {
    "recipient": Anonymize<I4su1fqci7afjt>;
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "deadline": number;
};
export type I7h9e3cbrb3kaa = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
};
export type Ieaqa57prka9ld = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "charge_rewards": Anonymize<I6sn46nd9sjbst>;
};
export type Iedoc1ioirjto2 = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "recipient": Anonymize<I4su1fqci7afjt>;
};
export type Idqd6j83jfa92q = {
    "asset": Anonymize<Icu3qllmbdnj89>;
    "send_to": Anonymize<I4su1fqci7afjt>;
};
export type I1sacojkebcuc1 = AnonymousEnum<{
    "add_to_create_whitelist": Anonymize<Icbccs0ug47ilf>;
    "remove_from_create_whitelist": Anonymize<Icbccs0ug47ilf>;
    /**
     *`create_merkle_distributor` will create a merkle distributor,
     * which allow specified users claim asset.
     *
     *The dispatch origin for this call must be `Signed` by root.
     *
     *- `merkle_root`: The root of a merkle tree.
     *- `description`: About the purpose of this distribution.
     *- `distribute_currency`: The id of currency about this distribution.
     *- `distribute_amount`: The total currency amount of this distribution.
     */
    "create_merkle_distributor": Anonymize<I1kid1a77qaur7>;
    /**
     *`claim` Claim rewards through user information and merkle proof.
     *
     *- `merkle_distributor_id`: ID of a merkle distributor.
     *- `index`: The index of the merkle tree leaf.
     *- `account`: The owner's account of merkle proof.
     *- `merkle_proof`: The hashes with merkle tree leaf can get merkle tree root.
     */
    "claim": Anonymize<Ics6651m6a7vef>;
    /**
     *Charge currency to the account of merkle distributor
     *
     *`merkle_distributor_id`: ID of a merkle distributor.
     */
    "charge": Anonymize<Ie4g7upp74eu13>;
    "emergency_withdraw": Anonymize<I5gmbd5ouh8to0>;
}>;
export type I1kid1a77qaur7 = {
    "merkle_root": FixedSizeBinary<32>;
    "description": Binary;
    "distribute_currency": Anonymize<Iebirugq1dbhv6>;
    "distribute_amount": bigint;
};
export type Ics6651m6a7vef = {
    "merkle_distributor_id": number;
    "index": number;
    "account": Anonymize<I4su1fqci7afjt>;
    "amount": bigint;
    "merkle_proof": Anonymize<Ic5m5lp1oioo8r>;
};
export type Ie4g7upp74eu13 = {
    "merkle_distributor_id": number;
};
export type I5gmbd5ouh8to0 = {
    "merkle_distributor_id": number;
    "recipient": Anonymize<I4su1fqci7afjt>;
    "amount": bigint;
};
export type I3udipqunlkl69 = AnonymousEnum<{
    /**
     *Set user default fee currency
     */
    "set_user_default_fee_currency": Anonymize<Idosag2hho5h9d>;
    /**
     *Set universal fee currency order list
     */
    "set_universal_fee_currency_order_list": Anonymize<I59jcdm11snp4p>;
}>;
export type Idosag2hho5h9d = {
    "maybe_fee_currency"?: Anonymize<I1c99t35ku3g7a>;
};
export type I59jcdm11snp4p = {
    "default_list": Anonymize<I6ae21pstqk9et>;
};
export type I4e3qgml62803v = AnonymousEnum<{
    "set_multisig_confirm_account": Anonymize<Icbccs0ug47ilf>;
    "fund_success": Anonymize<I666bl2fqjkejo>;
    "fund_fail": Anonymize<I666bl2fqjkejo>;
    "continue_fund": Anonymize<I1d28k4v5qap3a>;
    "fund_retire": Anonymize<I666bl2fqjkejo>;
    "fund_end": Anonymize<I666bl2fqjkejo>;
    /**
     *Create a new crowdloaning campaign for a parachain slot deposit for the current auction.
     */
    "create": Anonymize<Ick23c1oi70vti>;
    /**
     *Edit the configuration for an in-progress crowdloan.
     *
     *Can only be called by Root origin.
     */
    "edit": Anonymize<I50dt84l38nc68>;
    /**
     *Contribute to a crowd sale. This will transfer some balance over to fund a parachain
     *slot. It will be withdrawable in two instances: the parachain becomes retired; or the
     *slot is unable to be purchased and the timeout expires.
     */
    "contribute": Anonymize<I1j6hllalj2epr>;
    /**
     *Confirm contribute
     */
    "confirm_contribute": Anonymize<Ieha9i74pbfov3>;
    /**
     *Unlock the reserved vsToken/vsBond after fund success
     */
    "unlock": Anonymize<Ia1u3jll6a06ae>;
    "unlock_by_vsbond": Anonymize<Idqhqtsjlrcjh1>;
    "unlock_vstoken": Anonymize<I4cbvqmqadhrea>;
    /**
     *Unlock the reserved vsToken/vsBond after fund success
     */
    "batch_unlock": Anonymize<I666bl2fqjkejo>;
    /**
     *Withdraw full balance of the parachain.
     *- `index`: The parachain to whose crowdloan the contribution was made.
     */
    "withdraw": Anonymize<I666bl2fqjkejo>;
    "refund": Anonymize<I87diq5b0qic4c>;
    "redeem": Anonymize<I1j6hllalj2epr>;
    /**
     *Remove a fund after the retirement period has ended and all funds have been returned.
     */
    "dissolve_refunded": Anonymize<I1d28k4v5qap3a>;
    /**
     *Remove a fund after the retirement period has ended and all funds have been returned.
     */
    "dissolve": Anonymize<I666bl2fqjkejo>;
    "buyback": Anonymize<Ie5v6njpckr05b>;
    "confirm_contribution": Anonymize<I3iun9sig164po>;
    "buyback_vstoken_by_stable_pool": Anonymize<Iv901693moogd>;
    "reserve": Anonymize<Ic9o893ack6tuk>;
    "batch_handle_reserve": Anonymize<I666bl2fqjkejo>;
    "cancel_reservation": Anonymize<I666bl2fqjkejo>;
}>;
export type I1d28k4v5qap3a = {
    "index": number;
    "first_slot": number;
    "last_slot": number;
};
export type Ick23c1oi70vti = {
    "index": number;
    "cap": bigint;
    "first_slot": number;
    "last_slot": number;
};
export type I50dt84l38nc68 = {
    "index": number;
    "cap": bigint;
    "raised": bigint;
    "first_slot": number;
    "last_slot": number;
    "fund_status"?: Anonymize<I64l1i6vjla607>;
};
export type I64l1i6vjla607 = (Anonymize<I3dj8kkj3l70n5>) | undefined;
export type I3dj8kkj3l70n5 = AnonymousEnum<{
    "Ongoing": undefined;
    "Retired": undefined;
    "Success": undefined;
    "Failed": undefined;
    "RefundWithdrew": undefined;
    "RedeemWithdrew": undefined;
    "FailedToContinue": undefined;
    "End": undefined;
}>;
export type I1j6hllalj2epr = {
    "index": number;
    "value": bigint;
};
export type Ieha9i74pbfov3 = {
    "query_id": bigint;
    "is_success": boolean;
};
export type Idqhqtsjlrcjh1 = {
    "who": SS58String;
    "vsbond": Anonymize<Iebirugq1dbhv6>;
};
export type I87diq5b0qic4c = {
    "index": number;
    "first_slot": number;
    "last_slot": number;
    "value": bigint;
};
export type Ic9o893ack6tuk = {
    "index": number;
    "value": bigint;
    "if_mint": boolean;
};
export type I4eelqpsv4tti9 = AnonymousEnum<{
    "register_native_asset": Anonymize<I48uhm2mc8gk2s>;
    "update_native_asset": Anonymize<I48uhm2mc8gk2s>;
    "register_token_metadata": Anonymize<I1n28f4ceil09b>;
    "register_vtoken_metadata": Anonymize<Ieq8j5nmk3i7o0>;
    "register_vstoken_metadata": Anonymize<Ieq8j5nmk3i7o0>;
    "register_vsbond_metadata": Anonymize<Icpcfc9lhh4mbr>;
    "register_location": Anonymize<I9jict5bcuu8ag>;
    "force_set_location": Anonymize<I9jict5bcuu8ag>;
    "update_currency_metadata": Anonymize<I110m02ast38uc>;
}>;
export type I48uhm2mc8gk2s = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "location": XcmVersionedLocation;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type I1n28f4ceil09b = {
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type Ieq8j5nmk3i7o0 = {
    "token_id": number;
};
export type Icpcfc9lhh4mbr = {
    "token_id": number;
    "para_id": number;
    "first_slot": number;
    "last_slot": number;
};
export type I9jict5bcuu8ag = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "location": XcmVersionedLocation;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I110m02ast38uc = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "asset_name"?: Anonymize<Iabpgqcjikia83>;
    "asset_symbol"?: Anonymize<Iabpgqcjikia83>;
    "asset_decimals"?: Anonymize<I4arjljr6dpflb>;
    "asset_minimal_balance"?: Anonymize<I35p85j063s0il>;
};
export type Iag3ep8d8l5ji = AnonymousEnum<{
    "mint": Anonymize<I8apnhdjfa68oh>;
    "redeem": Anonymize<Ia0bl64soc0sol>;
    "rebond": Anonymize<I78qlfm7cgvt33>;
    "rebond_by_unlock_id": Anonymize<Ikoto1ge923bq>;
    "set_unlock_duration": Anonymize<I53vlfub8vbal3>;
    "set_minimum_mint": Anonymize<Iaqh0vk9puj2m1>;
    "set_minimum_redeem": Anonymize<Iaqh0vk9puj2m1>;
    "add_support_rebond_token": Anonymize<Iaub8vq6tggv2c>;
    "remove_support_rebond_token": Anonymize<Iaub8vq6tggv2c>;
    "set_fees": Anonymize<Idkdd97l7v4t7o>;
    "set_hook_iteration_limit": Anonymize<Iamlqp3gs21baf>;
    "set_unlocking_total": Anonymize<Iaqh0vk9puj2m1>;
    "set_min_time_unit": Anonymize<Ib8jf5ko4vdfjl>;
    "recreate_currency_ongoing_time_unit": Anonymize<Ib8jf5ko4vdfjl>;
    "mint_with_lock": Anonymize<I8apnhdjfa68oh>;
    "unlock_incentive_minted_vtoken": Anonymize<I16tfgdl00n6tj>;
    "set_incentive_coef": Anonymize<Iff5tmm38ba750>;
    "set_vtoken_incentive_lock_blocks": Anonymize<I61ut5ekco112k>;
}>;
export type I8apnhdjfa68oh = {
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
    "remark": Binary;
    "channel_id"?: Anonymize<I4arjljr6dpflb>;
};
export type Ia0bl64soc0sol = {
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
    "vtoken_amount": bigint;
};
export type I78qlfm7cgvt33 = {
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "token_amount": bigint;
};
export type Ikoto1ge923bq = {
    "token_id": Anonymize<Iebirugq1dbhv6>;
    "unlock_id": number;
};
export type I16tfgdl00n6tj = {
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
};
export type Iff5tmm38ba750 = {
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
    "new_coef_op"?: Anonymize<I35p85j063s0il>;
};
export type I61ut5ekco112k = {
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
    "new_blockes_op"?: Anonymize<I4arjljr6dpflb>;
};
export type Id1ffr1gofffsf = AnonymousEnum<{
    /**
     ******************************
     ******* Outer Calls ******
     ******************************
     *
     *Delegator initialization work. Generate a new delegator and return its ID.
     */
    "initialize_delegator": Anonymize<I8sqvh22141fr8>;
    /**
     *First time bonding some amount to a delegator.
     */
    "bond": Anonymize<I8vcp3s3t1r7ti>;
    /**
     *Bond extra amount to a delegator.
     */
    "bond_extra": Anonymize<I8vcp3s3t1r7ti>;
    /**
     *Decrease some amount to a delegator. Leave no less than the minimum delegator
     *requirement.
     */
    "unbond": Anonymize<I8vcp3s3t1r7ti>;
    /**
     *Unbond all the active amount of a delegator.
     */
    "unbond_all": Anonymize<I94c4ugqtmf885>;
    /**
     *Rebond some unlocking amount to a delegator.
     */
    "rebond": Anonymize<I5g2ic5lk6jvap>;
    /**
     *Delegate to some validator set.
     */
    "delegate": Anonymize<I6aqijved7jgk9>;
    /**
     *Re-delegate existing delegation to a new validator set.
     */
    "undelegate": Anonymize<I6aqijved7jgk9>;
    /**
     *Re-delegate existing delegation to a new validator set.
     */
    "redelegate": Anonymize<I962vs596sggoi>;
    /**
     *Initiate payout for a certain delegator.
     */
    "payout": Anonymize<I8ln2e9k7mblim>;
    /**
     *Withdraw the due payout into free balance.
     */
    "liquidize": Anonymize<I1pqjsjhm82q1i>;
    /**
     *Initiate payout for a certain delegator.
     */
    "chill": Anonymize<I94c4ugqtmf885>;
    "transfer_back": Anonymize<I8rn283dnm6h0f>;
    "transfer_to": Anonymize<Ibu6i8jb58o30n>;
    "convert_asset": Anonymize<I8jm0ov76tih8s>;
    "increase_token_pool": Anonymize<Ic7aob2k1l1jfu>;
    "decrease_token_pool": Anonymize<Ic7aob2k1l1jfu>;
    "update_ongoing_time_unit": Anonymize<I4qh6vjmbpl1a6>;
    "refund_currency_due_unbond": Anonymize<I6dlum3cbrie3d>;
    "supplement_fee_reserve": Anonymize<Iecuv9eudhio5i>;
    /**
     *Charge staking host fee, tune vtoken/token exchange rate, and update delegator ledger
     *for single delegator.
     */
    "charge_host_fee_and_tune_vtoken_exchange_rate": Anonymize<I2s4o8aq49k18a>;
    /**
     ******************************
     ******* Storage Setters ******
     ******************************
     *Update storage OperateOrigins<T>.
     */
    "set_operate_origin": Anonymize<I2i20t4file901>;
    /**
     *Update storage FeeSources<T>.
     */
    "set_fee_source": Anonymize<Inp8hn3mu8c5j>;
    /**
     *Update storage DelegatorsIndex2Multilocation<T> 和 DelegatorsMultilocation2Index<T>.
     */
    "add_delegator": Anonymize<I68o6mdp1r65np>;
    /**
     *Update storage DelegatorsIndex2Multilocation<T> 和 DelegatorsMultilocation2Index<T>.
     */
    "remove_delegator": Anonymize<Iaba972j3va7k>;
    /**
     *Update storage Validators<T>.
     */
    "add_validator": Anonymize<Iaba972j3va7k>;
    /**
     *Update storage Validators<T>.
     */
    "remove_validator": Anonymize<Iaba972j3va7k>;
    /**
     *Update storage ValidatorsByDelegator<T>.
     */
    "set_validators_by_delegator": Anonymize<Iffj0b5herq802>;
    /**
     *Update storage DelegatorLedgers<T>.
     */
    "set_delegator_ledger": Anonymize<I8ja7ceebpen3k>;
    /**
     *Update storage MinimumsAndMaximums<T>.
     */
    "set_minimums_and_maximums": Anonymize<Icikcphjk1igug>;
    /**
     *Update storage Delays<T>.
     */
    "set_currency_delays": Anonymize<Ibnl8raecejsmo>;
    /**
     *Set HostingFees storage.
     */
    "set_hosting_fees": Anonymize<I1ufkvgdurghbk>;
    /**
     *Set  CurrencyTuneExchangeRateLimit<T> storage.
     */
    "set_currency_tune_exchange_rate_limit": Anonymize<I1q1g69il2fc15>;
    /**
     *Set  OngoingTimeUnitUpdateInterval<T> storage.
     */
    "set_ongoing_time_unit_update_interval": Anonymize<I9ltv8jlv2map8>;
    "add_supplement_fee_account_to_whitelist": Anonymize<Iaba972j3va7k>;
    "remove_supplement_fee_account_from_whitelist": Anonymize<Iaba972j3va7k>;
    /**
     *********************************************************************
     **************Outer Confirming Xcm queries functions ****************
     *********************************************************************
     */
    "confirm_delegator_ledger_query_response": Anonymize<Idlhavidu7pq4f>;
    "fail_delegator_ledger_query_response": Anonymize<Idlhavidu7pq4f>;
    "confirm_validators_by_delegator_query_response": Anonymize<Idlhavidu7pq4f>;
    "fail_validators_by_delegator_query_response": Anonymize<Idlhavidu7pq4f>;
    "confirm_delegator_ledger": Anonymize<I203ivdv9ll218>;
    "confirm_validators_by_delegator": Anonymize<I203ivdv9ll218>;
    /**
     *Reset the whole storage Validators<T>.
     */
    "reset_validators": Anonymize<Id37b9l6bk2ii9>;
    /**
     *Reset the whole storage Validator_boost_list<T>.
     */
    "set_validator_boost_list": Anonymize<Id37b9l6bk2ii9>;
    "add_to_validator_boost_list": Anonymize<Iaba972j3va7k>;
    /**
     *Update storage Validator_boost_list<T>.
     */
    "remove_from_validator_boot_list": Anonymize<Iaba972j3va7k>;
    "convert_treasury_vtoken": Anonymize<I58caqa2hcp37r>;
    "clean_outdated_validator_boost_list": Anonymize<I9thv3jvjv8nr9>;
}>;
export type I8sqvh22141fr8 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "delegator_location"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I8vcp3s3t1r7ti = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "amount": bigint;
    "validator"?: Anonymize<Ia9cgf4r40b26h>;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I84n0ktbscl3e5 = (Anonymize<I1js2aelrc7fbg>) | undefined;
export type I1js2aelrc7fbg = [Anonymize<I4q39t5hn830vp>, bigint];
export type I94c4ugqtmf885 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I5g2ic5lk6jvap = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "validator"?: Anonymize<Ia9cgf4r40b26h>;
    "amount"?: Anonymize<I35p85j063s0il>;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I6aqijved7jgk9 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "targets": Anonymize<Ia88a8r9e89e2p>;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I962vs596sggoi = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "targets"?: Anonymize<Ia866hqrh833qa>;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I8ln2e9k7mblim = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "validator": Anonymize<I4c0s5cioidn76>;
    "when"?: Anonymize<I6o0vlee7cr3h2>;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I1pqjsjhm82q1i = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "when"?: Anonymize<I6o0vlee7cr3h2>;
    "validator"?: Anonymize<Ia9cgf4r40b26h>;
    "amount"?: Anonymize<I35p85j063s0il>;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I8rn283dnm6h0f = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "from": Anonymize<I4c0s5cioidn76>;
    "to": Anonymize<I4c0s5cioidn76>;
    "amount": bigint;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I8jm0ov76tih8s = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "amount": bigint;
    "if_from_currency": boolean;
    "weight_and_fee"?: Anonymize<I84n0ktbscl3e5>;
};
export type I4qh6vjmbpl1a6 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "time_unit": Anonymize<Id6ihttoi261us>;
};
export type Iecuv9eudhio5i = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "dest": Anonymize<I4c0s5cioidn76>;
};
export type I2s4o8aq49k18a = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "value": bigint;
    "who"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I2i20t4file901 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who"?: Anonymize<Ihfphjolmsqq1>;
};
export type I68o6mdp1r65np = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "index": number;
    "who": Anonymize<I4c0s5cioidn76>;
};
export type Iffj0b5herq802 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "validators": Anonymize<Ia88a8r9e89e2p>;
};
export type I8ja7ceebpen3k = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "who": Anonymize<I4c0s5cioidn76>;
    "ledger"?: Anonymize<I9plp53g8mj92d>;
};
export type Icikcphjk1igug = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "constraints"?: Anonymize<Iavcon0kdmah9g>;
};
export type Ibnl8raecejsmo = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "maybe_delays"?: Anonymize<I2fl7rg40jnqc3>;
};
export type I1ufkvgdurghbk = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "maybe_fee_set"?: Anonymize<Ibpetveugk1l63>;
};
export type I1q1g69il2fc15 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "maybe_tune_exchange_rate_limit"?: Anonymize<Iep7au1720bm0e>;
};
export type I9ltv8jlv2map8 = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "maybe_interval"?: Anonymize<I4arjljr6dpflb>;
};
export type Idlhavidu7pq4f = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "query_id": bigint;
};
export type I203ivdv9ll218 = {
    "query_id": bigint;
    "response": XcmV3Response;
};
export type I58caqa2hcp37r = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
};
export type I9thv3jvjv8nr9 = {
    "token": Anonymize<Iebirugq1dbhv6>;
    "page": number;
};
export type Iantm03nf2g2t5 = AnonymousEnum<{
    /**
     *Sets the xcm_dest_weight and fee for XCM operation of XcmInterface.
     *
     *Parameters:
     *- `updates`: vec of tuple: (XcmOperationType, WeightChange, FeeChange).
     */
    "update_xcm_dest_weight_and_fee": Anonymize<I5lkkn2erim0mo>;
    "transfer_statemine_assets": Anonymize<Idlqnrhkqn6quh>;
    "transfer_ethereum_assets": Anonymize<Id57q643bc33er>;
}>;
export type I5lkkn2erim0mo = {
    "updates": Anonymize<Ieb8da2d1f3v1r>;
};
export type Ieb8da2d1f3v1r = Array<Anonymize<Ifj950ft0t222p>>;
export type Ifj950ft0t222p = [Anonymize<Iebirugq1dbhv6>, Anonymize<I8vi5hrpkv8lci>, Anonymize<I4q39t5hn830vp>, bigint];
export type Idlqnrhkqn6quh = {
    "amount": bigint;
    "asset_id": number;
    "dest"?: Anonymize<Ihfphjolmsqq1>;
};
export type Id57q643bc33er = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
    "to": FixedSizeBinary<20>;
};
export type If0v6q8a012l7o = AnonymousEnum<{
    "vsbond_convert_to_vstoken": Anonymize<I3tgr4mij0dq9t>;
    "vstoken_convert_to_vsbond": Anonymize<Ic6tc8uub7lssk>;
    "set_exchange_fee": Anonymize<I7dim4s22d4cc>;
    "set_exchange_rate": Anonymize<I9adoavqh7j1qm>;
    "set_relaychain_lease": Anonymize<I2cnb8psb4ovvm>;
}>;
export type I3tgr4mij0dq9t = {
    "vs_bond_currency_id": Anonymize<Iebirugq1dbhv6>;
    "vsbond_amount": bigint;
    "minimum_vstoken": bigint;
};
export type Ic6tc8uub7lssk = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "vstoken_amount": bigint;
    "minimum_vsbond": bigint;
};
export type Iglv5i0iv5bgo = AnonymousEnum<{
    "create_farming_pool": Anonymize<Ibks2bt6flju9r>;
    "charge": Anonymize<Icr6e14pl04enu>;
    "deposit": Anonymize<I4dnvv5a59mp30>;
    "withdraw": Anonymize<Ii1jr958aef3t>;
    "claim": Anonymize<Ier970hnn9pgrj>;
    "withdraw_claim": Anonymize<Ier970hnn9pgrj>;
    "force_retire_pool": Anonymize<Ier970hnn9pgrj>;
    "set_retire_limit": Anonymize<Iamlqp3gs21baf>;
    "close_pool": Anonymize<Ier970hnn9pgrj>;
    "reset_pool": Anonymize<I8gmi4rbjvdjpn>;
    "kill_pool": Anonymize<Ier970hnn9pgrj>;
    "edit_pool": Anonymize<Ido82tngjj5jid>;
    "gauge_withdraw": Anonymize<Ial5va0b0vs25o>;
    "force_gauge_claim": Anonymize<Ial5va0b0vs25o>;
    "add_boost_pool_whitelist": Anonymize<Icm2mv7tlmp1c3>;
    "set_next_round_whitelist": Anonymize<Icm2mv7tlmp1c3>;
    "vote": Anonymize<I821qafgn89idd>;
    "start_boost_round": Anonymize<Icn7fuqv1aq0de>;
    "end_boost_round": undefined;
    "charge_boost": Anonymize<Ifift2upjktcjs>;
}>;
export type Ibks2bt6flju9r = {
    "tokens_proportion": Anonymize<I7p4is2lmk8vmo>;
    "basic_rewards": Anonymize<I2dbamvpq4935>;
    "gauge_init"?: Anonymize<I9at8g5qf9klr>;
    "min_deposit_to_start": bigint;
    "after_block_to_start": number;
    "withdraw_limit_time": number;
    "claim_limit_time": number;
    "withdraw_limit_count": number;
};
export type I7p4is2lmk8vmo = Array<Anonymize<I3thiua0nporjs>>;
export type I3thiua0nporjs = [Anonymize<Iebirugq1dbhv6>, number];
export type I9at8g5qf9klr = (Anonymize<I1104orn5bii1l>) | undefined;
export type I1104orn5bii1l = [number, Anonymize<I2dbamvpq4935>];
export type Icr6e14pl04enu = {
    "pid": number;
    "rewards": Anonymize<I2dbamvpq4935>;
    "if_gauge": boolean;
};
export type I4dnvv5a59mp30 = {
    "pid": number;
    "add_value": bigint;
    "gauge_info"?: Anonymize<I76de2jfh8ds4a>;
};
export type Ii1jr958aef3t = {
    "pid": number;
    "remove_value"?: Anonymize<I35p85j063s0il>;
};
export type I8gmi4rbjvdjpn = {
    "pid": number;
    "basic_rewards"?: Anonymize<Icbc2a9dedbcmj>;
    "min_deposit_to_start"?: Anonymize<I35p85j063s0il>;
    "after_block_to_start"?: Anonymize<I4arjljr6dpflb>;
    "withdraw_limit_time"?: Anonymize<I4arjljr6dpflb>;
    "claim_limit_time"?: Anonymize<I4arjljr6dpflb>;
    "withdraw_limit_count"?: Anonymize<I4arjljr6dpflb>;
    "gauge_init"?: Anonymize<I9at8g5qf9klr>;
};
export type Icbc2a9dedbcmj = (Anonymize<I2dbamvpq4935>) | undefined;
export type Ido82tngjj5jid = {
    "pid": number;
    "basic_rewards"?: Anonymize<Icbc2a9dedbcmj>;
    "withdraw_limit_time"?: Anonymize<I4arjljr6dpflb>;
    "claim_limit_time"?: Anonymize<I4arjljr6dpflb>;
    "gauge_basic_rewards"?: Anonymize<Icbc2a9dedbcmj>;
    "withdraw_limit_count"?: Anonymize<I4arjljr6dpflb>;
};
export type Icm2mv7tlmp1c3 = {
    "whitelist": Anonymize<Icgljjb6j82uhn>;
};
export type I821qafgn89idd = {
    "vote_list": Anonymize<Iep4uo61810hfs>;
};
export type I2g59ue9mdomio = AnonymousEnum<{
    /**
     *Update token config，take effect when next round begins
     */
    "token_config": Anonymize<I8mu9fcao6hkeb>;
    /**
     *Update token config，take effect when next round begins
     */
    "delete_token": Anonymize<Ibmoqhjadutned>;
    /**
     *refresh token info，query farming pallet, and update TokenInfo, change to new
     *config，ignore exec_delay, execute immediately
     */
    "refresh_token_info": Anonymize<Ibmoqhjadutned>;
    /**
     *payout to treasury
     */
    "payout": Anonymize<Ibmoqhjadutned>;
}>;
export type I8mu9fcao6hkeb = {
    "token": Anonymize<Iebirugq1dbhv6>;
    "exec_delay"?: Anonymize<I4arjljr6dpflb>;
    "system_stakable_farming_rate"?: Anonymize<I4arjljr6dpflb>;
    "add_or_sub"?: Anonymize<I8ie0dco0kcuq5>;
    "system_stakable_base"?: Anonymize<I35p85j063s0il>;
    "farming_poolids"?: Anonymize<I35lk2003i8c8g>;
    "lptoken_rates"?: Anonymize<I35lk2003i8c8g>;
};
export type I35lk2003i8c8g = (Anonymize<Icgljjb6j82uhn>) | undefined;
export type I33o6ghsfmdi9o = AnonymousEnum<{
    "set_config": Anonymize<Idtq61tuc2ualk>;
    "charge": Anonymize<I6e7p4l5e6t7n6>;
    "close": Anonymize<I6dlum3cbrie3d>;
    "payout": Anonymize<I6e7p4l5e6t7n6>;
}>;
export type I1pd23tvu4hvk8 = AnonymousEnum<{
    /**
     *Create a distribution
     *
     *- `token_type`: The token types involved in this distribution
     *- `tokens_proportion`: The proportion of the token distribution
     *- `if_auto`: Whether the distribution is automatic
     */
    "create_distribution": Anonymize<Ieob0gouehce57>;
    /**
     *Edit the distribution
     *
     *- `distribution_id`: Distribution ID
     *- `token_type`: The token types involved in this distribution
     *- `tokens_proportion`: The proportion of the token distribution
     *- `if_auto`: Whether the distribution is automatic
     */
    "edit_distribution": Anonymize<I8eo9r9va149i7>;
    /**
     *Set the era length
     *
     *- `era_length`: The interval between distribution executions
     */
    "set_era_length": Anonymize<Iaeor8vejoqk4d>;
    /**
     *Execute the distribution
     *
     *- `distribution_id`: Distribution ID
     */
    "execute_distribute": Anonymize<I6d2fsv919ackd>;
    /**
     *Delete the distribution
     *
     *- `distribution_id`: Distribution ID
     */
    "delete_distribution": Anonymize<I6d2fsv919ackd>;
    /**
     *USD Standard Accumulation Logic Configuration, can be overridden by the governance
     *
     *- `distribution_id`: Distribution ID
     *- `target_value`: Target's USD based value
     *- `interval`: The interval of the cumulative clearing operation
     *- `target_account_id`: When the cumulative dollar value falls below the target_value,
     *  the funds will be transferred to the target_account_id
     */
    "set_usd_config": Anonymize<I65sao41nc2u5n>;
}>;
export type Ieob0gouehce57 = {
    "token_type": Anonymize<I6ae21pstqk9et>;
    "tokens_proportion": Anonymize<I205qrookusi3d>;
    "if_auto": boolean;
};
export type I8eo9r9va149i7 = {
    "distribution_id": number;
    "token_type"?: Anonymize<Iaq5temakht7k1>;
    "tokens_proportion"?: Anonymize<Iekmcq8pnqqh95>;
    "if_auto"?: Anonymize<I8ie0dco0kcuq5>;
};
export type Iaq5temakht7k1 = (Anonymize<I6ae21pstqk9et>) | undefined;
export type Iekmcq8pnqqh95 = (Anonymize<I205qrookusi3d>) | undefined;
export type Iaeor8vejoqk4d = {
    "era_length": number;
};
export type I65sao41nc2u5n = {
    "distribution_id": number;
    "target_value": bigint;
    "interval": number;
    "target_account_id": SS58String;
};
export type I7crana3imupg1 = AnonymousEnum<{
    "cross_in": Anonymize<I3glt55ja41fqv>;
    /**
     *Destroy some balance from an account and issue cross-out event.
     */
    "cross_out": Anonymize<Ic7aob2k1l1jfu>;
    "register_linked_account": Anonymize<I6jagi4fq1m7jf>;
    "change_outer_linked_account": Anonymize<Ibktnbt7atrk9i>;
    "register_currency_for_cross_in_out": Anonymize<I6dlum3cbrie3d>;
    "deregister_currency_for_cross_in_out": Anonymize<I6dlum3cbrie3d>;
    "add_to_issue_whitelist": Anonymize<Iapol5cojcq8jr>;
    "remove_from_issue_whitelist": Anonymize<Iapol5cojcq8jr>;
    "add_to_register_whitelist": Anonymize<Iapol5cojcq8jr>;
    "remove_from_register_whitelist": Anonymize<Iapol5cojcq8jr>;
    "set_crossing_minimum_amount": Anonymize<Iarqih3rei93nj>;
}>;
export type I3glt55ja41fqv = {
    "location": Anonymize<I4frqunb5hj2km>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "amount": bigint;
    "remark"?: Anonymize<Iabpgqcjikia83>;
};
export type Ibktnbt7atrk9i = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "foreign_location": Anonymize<I4frqunb5hj2km>;
    "account": SS58String;
};
export type Iacklbjq00iaj3 = AnonymousEnum<{
    "set_config": Anonymize<I9tgq173mqotfi>;
    "create_lock": Anonymize<I4q8h00pii12o3>;
    "increase_amount": Anonymize<I5odhhedphq5gh>;
    "increase_unlock_time": Anonymize<Iej62b4o01n76s>;
    "withdraw": Anonymize<Icni4v52b04265>;
    "notify_rewards": Anonymize<Icj3kkh24tpu43>;
    "get_rewards": undefined;
    "redeem_unlock": Anonymize<Icni4v52b04265>;
    "set_markup_coefficient": Anonymize<I3e52d3k39di8p>;
    "deposit_markup": Anonymize<I5c3b80onqg2es>;
    "withdraw_markup": Anonymize<If0uionjq98ocd>;
    "refresh": Anonymize<If0uionjq98ocd>;
}>;
export type I9tgq173mqotfi = {
    "min_mint"?: Anonymize<I35p85j063s0il>;
    "min_block"?: Anonymize<I4arjljr6dpflb>;
};
export type I4q8h00pii12o3 = {
    "value": bigint;
    "unlock_time": number;
};
export type I5odhhedphq5gh = {
    "position": bigint;
    "value": bigint;
};
export type Iej62b4o01n76s = {
    "position": bigint;
    "time": number;
};
export type Icni4v52b04265 = {
    "position": bigint;
};
export type Icj3kkh24tpu43 = {
    "incentive_from": SS58String;
    "rewards_duration"?: Anonymize<I4arjljr6dpflb>;
    "rewards": Anonymize<I2dbamvpq4935>;
};
export type I3e52d3k39di8p = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "markup": bigint;
    "hardcap": bigint;
};
export type I5c3b80onqg2es = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "value": bigint;
};
export type Iqvhl1ao63k38 = AnonymousEnum<{
    /**
     *vtoken mint and transfer to target chain
     */
    "mint": Anonymize<I4o0j96irr71sk>;
    /**
     *Swap and transfer to target chain
     */
    "zenlink_swap": Anonymize<I3ame4u9k81am7>;
    /**
     *Redeem
     */
    "redeem": Anonymize<Iepipqemga7ede>;
    /**
     *Stable pool swap
     */
    "stable_pool_swap": Anonymize<I3u441vu8an9al>;
    "add_whitelist": Anonymize<I21asuar23h6m2>;
    "remove_whitelist": Anonymize<I21asuar23h6m2>;
    "set_execution_fee": Anonymize<I7u9oegj4csj51>;
    "set_transfer_to_fee": Anonymize<I6s65kicknm51n>;
    "set_currency_ethereum_call_switch": Anonymize<Ifuaakr3i6qaje>;
    "set_ethereum_call_configration": Anonymize<I792urf76hgnm9>;
    "set_currency_support_xcm_fee": Anonymize<Ifuaakr3i6qaje>;
    "set_delay_block": Anonymize<I7j4i782lpafvm>;
    "force_add_order": Anonymize<I22tnv4gs7kfkn>;
    "mint_with_channel_id": Anonymize<I8hrio8nd5ielu>;
}>;
export type I4o0j96irr71sk = {
    "evm_caller": FixedSizeBinary<20>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "target_chain": Anonymize<I4ntr4rk45le9>;
    "remark": Binary;
};
export type I3ame4u9k81am7 = {
    "evm_caller": FixedSizeBinary<20>;
    "currency_id_in": Anonymize<Iebirugq1dbhv6>;
    "currency_id_out": Anonymize<Iebirugq1dbhv6>;
    "currency_id_out_min": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type Iepipqemga7ede = {
    "evm_caller": FixedSizeBinary<20>;
    "vtoken_id": Anonymize<Iebirugq1dbhv6>;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type I3u441vu8an9al = {
    "evm_caller": FixedSizeBinary<20>;
    "pool_id": number;
    "currency_id_in": Anonymize<Iebirugq1dbhv6>;
    "currency_id_out": Anonymize<Iebirugq1dbhv6>;
    "min_dy": bigint;
    "target_chain": Anonymize<I4ntr4rk45le9>;
};
export type I22tnv4gs7kfkn = {
    "slpx_contract_derivative_account": SS58String;
    "evm_caller": FixedSizeBinary<20>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "target_chain": Anonymize<I4ntr4rk45le9>;
    "remark": Binary;
    "order_type": Anonymize<Ieqskt3dg06otc>;
};
export type I8hrio8nd5ielu = {
    "evm_caller": FixedSizeBinary<20>;
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "target_chain": Anonymize<I4ntr4rk45le9>;
    "remark": Binary;
    "channel_id": number;
};
export type Ieblk40f65bn0b = AnonymousEnum<{
    /**
     *Introduce a new member.
     *
     *- `origin`: Must be the `AddOrigin`.
     *- `who`: Account of non-member which will become a member.
     *
     *Weight: `O(1)`
     */
    "add_member": Anonymize<Icu8seopr711dn>;
    /**
     *Increment the rank of an existing member by one.
     *
     *- `origin`: Must be the `PromoteOrigin`.
     *- `who`: Account of existing member.
     *
     *Weight: `O(1)`
     */
    "promote_member": Anonymize<Icu8seopr711dn>;
    /**
     *Decrement the rank of an existing member by one. If the member is already at rank zero,
     *then they are removed entirely.
     *
     *- `origin`: Must be the `DemoteOrigin`.
     *- `who`: Account of existing member of rank greater than zero.
     *
     *Weight: `O(1)`, less if the member's index is highest in its rank.
     */
    "demote_member": Anonymize<Icu8seopr711dn>;
    /**
     *Remove the member entirely.
     *
     *- `origin`: Must be the `RemoveOrigin`.
     *- `who`: Account of existing member of rank greater than zero.
     *- `min_rank`: The rank of the member or greater.
     *
     *Weight: `O(min_rank)`.
     */
    "remove_member": Anonymize<Iddd2a11b8876r>;
    /**
     *Add an aye or nay vote for the sender to the given proposal.
     *
     *- `origin`: Must be `Signed` by a member account.
     *- `poll`: Index of a poll which is ongoing.
     *- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.
     *
     *Transaction fees are be waived if the member is voting on any particular proposal
     *for the first time and the call is successful. Subsequent vote changes will charge a
     *fee.
     *
     *Weight: `O(1)`, less if there was no previous vote on the poll by the member.
     */
    "vote": Anonymize<I8bvk21lpmah75>;
    /**
     *Remove votes from the given poll. It must have ended.
     *
     *- `origin`: Must be `Signed` by any account.
     *- `poll_index`: Index of a poll which is completed and for which votes continue to
     *  exist.
     *- `max`: Maximum number of vote items from remove in this call.
     *
     *Transaction fees are waived if the operation is successful.
     *
     *Weight `O(max)` (less if there are fewer items to remove than `max`).
     */
    "cleanup_poll": Anonymize<I449n3riv6jbum>;
    /**
     *Exchanges a member with a new account and the same existing rank.
     *
     *- `origin`: Must be the `ExchangeOrigin`.
     *- `who`: Account of existing member of rank greater than zero to be exchanged.
     *- `new_who`: New Account of existing member of rank greater than zero to exchanged to.
     */
    "exchange_member": Anonymize<I72edo3nnc5ukn>;
}>;
export type Iddd2a11b8876r = {
    "who": Anonymize<I4su1fqci7afjt>;
    "min_rank": number;
};
export type I72edo3nnc5ukn = {
    "who": Anonymize<I4su1fqci7afjt>;
    "new_who": Anonymize<I4su1fqci7afjt>;
};
export type Ifopmrlcm8l7p8 = AnonymousEnum<{
    "create_pool": Anonymize<I7m1ou0telopf8>;
    "add_liquidity": Anonymize<I4r3lr1hp3q5vu>;
    "swap": Anonymize<Ibqd4ibtu385pg>;
    "redeem_proportion": Anonymize<Id846uvbhv0ups>;
    "redeem_single": Anonymize<Iel8d6vl7kun8s>;
    "redeem_multi": Anonymize<Ia5vm4875s01on>;
    "modify_a": Anonymize<I1io386vc3pmlf>;
    "modify_fees": Anonymize<Idnoja8d5k0dtr>;
    "modify_recipients": Anonymize<I95j99jsac0h95>;
    "edit_token_rate": Anonymize<Idti8pnde3jga2>;
    "config_vtoken_auto_refresh": Anonymize<Icu74rtf3kd9gd>;
    "remove_vtoken_auto_refresh": Anonymize<I8v7akpi7cdcp5>;
}>;
export type I7m1ou0telopf8 = {
    "assets": Anonymize<I6ae21pstqk9et>;
    "precisions": Anonymize<Iafqnechp3omqg>;
    "mint_fee": bigint;
    "swap_fee": bigint;
    "redeem_fee": bigint;
    "initial_a": bigint;
    "fee_recipient": SS58String;
    "yield_recipient": SS58String;
    "precision": bigint;
};
export type I4r3lr1hp3q5vu = {
    "pool_id": number;
    "amounts": Anonymize<Iafqnechp3omqg>;
    "min_mint_amount": bigint;
};
export type Ibqd4ibtu385pg = {
    "pool_id": number;
    "i": number;
    "j": number;
    "dx": bigint;
    "min_dy": bigint;
};
export type Id846uvbhv0ups = {
    "pool_id": number;
    "amount": bigint;
    "min_redeem_amounts": Anonymize<Iafqnechp3omqg>;
};
export type Iel8d6vl7kun8s = {
    "pool_id": number;
    "amount": bigint;
    "i": number;
    "min_redeem_amount": bigint;
    "asset_length": number;
};
export type Ia5vm4875s01on = {
    "pool_id": number;
    "amounts": Anonymize<Iafqnechp3omqg>;
    "max_redeem_amount": bigint;
};
export type I1io386vc3pmlf = {
    "pool_id": number;
    "a": bigint;
    "future_a_block": number;
};
export type Idnoja8d5k0dtr = {
    "pool_id": number;
    "mint_fee"?: Anonymize<I35p85j063s0il>;
    "swap_fee"?: Anonymize<I35p85j063s0il>;
    "redeem_fee"?: Anonymize<I35p85j063s0il>;
};
export type I95j99jsac0h95 = {
    "pool_id": number;
    "fee_recipient"?: Anonymize<Ihfphjolmsqq1>;
    "yield_recipient"?: Anonymize<Ihfphjolmsqq1>;
};
export type Idti8pnde3jga2 = {
    "pool_id": number;
    "token_rate_info": Anonymize<Idtci0ovsdvku6>;
};
export type I36v5q3i5087e3 = AnonymousEnum<{
    "vote": Anonymize<I7826235520epg>;
    "unlock": Anonymize<Iaj42ghmtrj594>;
    "remove_delegator_vote": Anonymize<Ibtoub2npklubb>;
    "kill_referendum": Anonymize<Iaj42ghmtrj594>;
    "add_delegator": Anonymize<Iefli0cgm44m3b>;
    "set_referendum_status": Anonymize<Iaij9kantm3v0b>;
    "set_vote_locking_period": Anonymize<I8l8g9smisvqei>;
    "set_undeciding_timeout": Anonymize<I2ce5d3bnbbfhi>;
    "notify_vote": Anonymize<I3iun9sig164po>;
    "notify_remove_delegator_vote": Anonymize<I3iun9sig164po>;
    "set_vote_cap_ratio": Anonymize<Ifuh1k8nfv6s7l>;
}>;
export type I7826235520epg = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "poll_index": number;
    "vtoken_vote": ConvictionVotingVoteAccountVote;
};
export type Ibtoub2npklubb = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "class": number;
    "poll_index": number;
    "derivative_index": number;
};
export type I8rc525hb3eu89 = AnonymousEnum<{
    /**
     *Stores a new market and its related currency. Returns `Err` if a currency
     *is not attached to an existent market.
     *
     *All provided market states must be `Pending`, otherwise an error will be returned.
     *
     *If a currency is already attached to a market, then the market will be replaced
     *by the new provided value.
     *
     *The lend token id and asset id are bound, the lend token id of new provided market
     *cannot be duplicated with the existing one, otherwise it will return
     *`InvalidLendTokenId`.
     *
     *- `asset_id`: Market related currency
     *- `market`: The market that is going to be stored
     */
    "add_market": Anonymize<I5uf09856s8hsn>;
    /**
     *Activates a market. Returns `Err` if the market currency does not exist.
     *
     *If the market is already activated, does nothing.
     *
     *- `asset_id`: Market related currency
     */
    "activate_market": Anonymize<If0uionjq98ocd>;
    /**
     *Updates the rate model of a stored market. Returns `Err` if the market
     *currency does not exist or the rate model is invalid.
     *
     *- `asset_id`: Market related currency
     *- `rate_model`: The new rate model to be updated
     */
    "update_rate_model": Anonymize<I2lb07lr6m4m1b>;
    /**
     *Updates a stored market. Returns `Err` if the market currency does not exist.
     *
     *- `asset_id`: market related currency
     *- `collateral_factor`: the collateral utilization ratio
     *- `reserve_factor`: fraction of interest currently set aside for reserves
     *- `close_factor`: maximum liquidation ratio at one time
     *- `liquidate_incentive`: liquidation incentive ratio
     *- `cap`: market capacity
     */
    "update_market": Anonymize<Ienmtmhvu9c5gc>;
    /**
     *Force updates a stored market. Returns `Err` if the market currency
     *does not exist.
     *
     *- `asset_id`: market related currency
     *- `market`: the new market parameters
     */
    "force_update_market": Anonymize<I5uf09856s8hsn>;
    /**
     *Add reward for the pallet account.
     *
     *- `amount`: Reward amount added
     */
    "add_reward": Anonymize<I3qt1hgg4djhgb>;
    /**
     *Withdraw reward token from pallet account.
     *
     *The origin must conform to `UpdateOrigin`.
     *
     *- `target_account`: account receive reward token.
     *- `amount`: Withdraw amount
     */
    "withdraw_missing_reward": Anonymize<I153e8dbo2i3pv>;
    /**
     *Updates reward speed for the specified market
     *
     *The origin must conform to `UpdateOrigin`.
     *
     *- `asset_id`: Market related currency
     *- `reward_per_block`: reward amount per block.
     */
    "update_market_reward_speed": Anonymize<Ilat0prj8bnun>;
    /**
     *Claim reward from all market.
     */
    "claim_reward": undefined;
    /**
     *Claim reward from the specified market.
     *
     *- `asset_id`: Market related currency
     */
    "claim_reward_for_market": Anonymize<If0uionjq98ocd>;
    /**
     *Sender supplies assets into the market and receives internal supplies in exchange.
     *
     *- `asset_id`: the asset to be deposited.
     *- `mint_amount`: the amount to be deposited.
     */
    "mint": Anonymize<Ic9p67gsdqt1ro>;
    /**
     *Sender redeems some of internal supplies in exchange for the underlying asset.
     *
     *- `asset_id`: the asset to be redeemed.
     *- `redeem_amount`: the amount to be redeemed.
     */
    "redeem": Anonymize<I158shpkf1icfg>;
    /**
     *Sender redeems all of internal supplies in exchange for the underlying asset.
     *
     *- `asset_id`: the asset to be redeemed.
     */
    "redeem_all": Anonymize<If0uionjq98ocd>;
    /**
     *Sender borrows assets from the protocol to their own address.
     *
     *- `asset_id`: the asset to be borrowed.
     *- `borrow_amount`: the amount to be borrowed.
     */
    "borrow": Anonymize<I2kudr318ju7fu>;
    /**
     *Sender repays some of their debts.
     *
     *- `asset_id`: the asset to be repaid.
     *- `repay_amount`: the amount to be repaid.
     */
    "repay_borrow": Anonymize<I3chmoe7ts2vks>;
    /**
     *Sender repays all of their debts.
     *
     *- `asset_id`: the asset to be repaid.
     */
    "repay_borrow_all": Anonymize<If0uionjq98ocd>;
    /**
     *Set the collateral asset.
     *
     *- `asset_id`: the asset to be set.
     *- `enable`: turn on/off the collateral option.
     */
    "collateral_asset": Anonymize<I533e8jlem55p4>;
    /**
     *The sender liquidates the borrower's collateral.
     *
     *- `borrower`: the borrower to be liquidated.
     *- `liquidation_asset_id`: the assert to be liquidated.
     *- `repay_amount`: the amount to be repaid borrow.
     *- `collateral_asset_id`: The collateral to seize from the borrower.
     */
    "liquidate_borrow": Anonymize<Iene1sabvs33in>;
    /**
     *Add reserves by transferring from payer.
     *
     *May only be called from `T::ReserveOrigin`.
     *
     *- `payer`: the payer account.
     *- `asset_id`: the assets to be added.
     *- `add_amount`: the amount to be added.
     */
    "add_reserves": Anonymize<I1j0vp2lik6fqa>;
    /**
     *Reduces reserves by transferring to receiver.
     *
     *May only be called from `T::ReserveOrigin`.
     *
     *- `receiver`: the receiver account.
     *- `asset_id`: the assets to be reduced.
     *- `reduce_amount`: the amount to be reduced.
     */
    "reduce_reserves": Anonymize<Ifgt33ij9dem7c>;
    /**
     *Sender redeems some of internal supplies in exchange for the underlying asset.
     *
     *- `asset_id`: the asset to be redeemed.
     *- `redeem_amount`: the amount to be redeemed.
     */
    "reduce_incentive_reserves": Anonymize<Ibt8nqfprp1t99>;
    /**
     *Update liquidation free collateral.
     *
     *The `assets` won't be counted when do general
     */
    "update_liquidation_free_collateral": Anonymize<Iap9nfjdhnmblj>;
    "add_market_bond": Anonymize<Ie5efe5gkg0kqs>;
}>;
export type I5uf09856s8hsn = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "market": Anonymize<I1i2kfunpgo63g>;
};
export type I2lb07lr6m4m1b = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "rate_model": Anonymize<Ibfnd42bovd7un>;
};
export type Ienmtmhvu9c5gc = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "collateral_factor"?: Anonymize<I4arjljr6dpflb>;
    "liquidation_threshold"?: Anonymize<I4arjljr6dpflb>;
    "reserve_factor"?: Anonymize<I4arjljr6dpflb>;
    "close_factor"?: Anonymize<I4arjljr6dpflb>;
    "liquidate_incentive_reserved_factor"?: Anonymize<I4arjljr6dpflb>;
    "liquidate_incentive"?: Anonymize<I35p85j063s0il>;
    "supply_cap"?: Anonymize<I35p85j063s0il>;
    "borrow_cap"?: Anonymize<I35p85j063s0il>;
};
export type I153e8dbo2i3pv = {
    "target_account": Anonymize<I4su1fqci7afjt>;
    "amount": bigint;
};
export type Ilat0prj8bnun = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "supply_reward_per_block"?: Anonymize<I35p85j063s0il>;
    "borrow_reward_per_block"?: Anonymize<I35p85j063s0il>;
};
export type Ic9p67gsdqt1ro = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "mint_amount": bigint;
};
export type I158shpkf1icfg = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "redeem_amount": bigint;
};
export type I2kudr318ju7fu = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "borrow_amount": bigint;
};
export type I3chmoe7ts2vks = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "repay_amount": bigint;
};
export type I533e8jlem55p4 = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "enable": boolean;
};
export type Iene1sabvs33in = {
    "borrower": SS58String;
    "liquidation_asset_id": Anonymize<Iebirugq1dbhv6>;
    "repay_amount": bigint;
    "collateral_asset_id": Anonymize<Iebirugq1dbhv6>;
};
export type I1j0vp2lik6fqa = {
    "payer": Anonymize<I4su1fqci7afjt>;
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "add_amount": bigint;
};
export type Ifgt33ij9dem7c = {
    "receiver": Anonymize<I4su1fqci7afjt>;
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "reduce_amount": bigint;
};
export type Ibt8nqfprp1t99 = {
    "receiver": Anonymize<I4su1fqci7afjt>;
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "redeem_amount": bigint;
};
export type Iap9nfjdhnmblj = {
    "collaterals": Anonymize<I6ae21pstqk9et>;
};
export type Idj9puo2so8q7j = AnonymousEnum<{
    /**
     *Set emergency price
     */
    "set_price": Anonymize<I5hb3jd6s8k4qo>;
    /**
     *Reset emergency price
     */
    "reset_price": Anonymize<If0uionjq98ocd>;
    /**
     *Set foreign vault token mapping
     */
    "set_foreign_asset": Anonymize<I3jqe98jp6jqj5>;
}>;
export type I5hb3jd6s8k4qo = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "price": bigint;
};
export type I3jqe98jp6jqj5 = {
    "foreign_asset_id": Anonymize<Iebirugq1dbhv6>;
    "asset_id": Anonymize<Iebirugq1dbhv6>;
};
export type Ieb0p9i79epj3p = AnonymousEnum<{
    /**
     *Feed the external value.
     *
     *Require authorized operator.
     */
    "feed_values": Anonymize<Idea758kkrtvus>;
}>;
export type Idea758kkrtvus = {
    "values": Anonymize<I2dbamvpq4935>;
};
export type If5i9fp7qj3ecj = AnonymousEnum<{
    "flash_loan_deposit": Anonymize<I7am60vl6fh2ak>;
}>;
export type I7am60vl6fh2ak = {
    "asset_id": Anonymize<Iebirugq1dbhv6>;
    "rate": bigint;
};
export type Iapd5ovj0gnprh = AnonymousEnum<{
    "register_channel": Anonymize<Id4du8qeonl5uo>;
    "remove_channel": Anonymize<Ib73p6n69t2jsn>;
    "update_channel_receive_account": Anonymize<I69nisu7k9olcl>;
    "set_channel_commission_token": Anonymize<Ievk931u2c7sqn>;
    "set_commission_tokens": Anonymize<Ie2jvm478jd2jv>;
    "claim_commissions": Anonymize<Ib73p6n69t2jsn>;
    "set_channel_vtoken_shares": Anonymize<Ibfeiifn3uif9a>;
}>;
export type Id4du8qeonl5uo = {
    "channel_name": Binary;
    "receive_account": SS58String;
};
export type I69nisu7k9olcl = {
    "channel_id": number;
    "receive_account": SS58String;
};
export type Ie2jvm478jd2jv = {
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "commission_token_op"?: Anonymize<I1c99t35ku3g7a>;
};
export type Ibfeiifn3uif9a = {
    "channel_id": number;
    "vtoken": Anonymize<Iebirugq1dbhv6>;
    "shares": number;
};
export type I52i4uvra2sokt = AnonymousEnum<{
    "clouds_to_vebnc": Anonymize<I59ijflfqmnqm2>;
    "charge_vbnc": Anonymize<I3qt1hgg4djhgb>;
}>;
export type I59ijflfqmnqm2 = {
    "value": bigint;
    "expected_min_vebnc": bigint;
};
export type Ibrclbjbls6qoo = AnonymousEnum<{
    /**
     *Configuration for setting up buybacks and adding liquidity.
     */
    "set_vtoken": Anonymize<Ifor98fsce0gmh>;
    /**
     *Charge the buyback account.
     */
    "charge": Anonymize<I6e7p4l5e6t7n6>;
    /**
     *Remove the configuration of the buyback.
     */
    "remove_vtoken": Anonymize<I6dlum3cbrie3d>;
}>;
export type Ifor98fsce0gmh = {
    "currency_id": Anonymize<Iebirugq1dbhv6>;
    "min_swap_value": bigint;
    "proportion": number;
    "buyback_duration": number;
    "add_liquidity_duration": number;
    "if_auto": boolean;
    "destruction_ratio"?: Anonymize<I4arjljr6dpflb>;
    "bias": number;
};
export type Iainr8c5kaid51 = AnonymousEnum<{
    /**
     *Set the XCM fee for a specific XCM task.
     *
     *Can only be called by governance
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `configuration`: The staking protocol configuration.
     */
    "set_protocol_configuration": Anonymize<If3e7sroj6atgl>;
    /**
     *Add a delegator to the staking protocol.
     *
     *Can only be called by governance
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: If delegator is None, the delegator will be derived from sovereign
     *  account.
     */
    "add_delegator": Anonymize<Iem9ho9292gh8o>;
    /**
     *Remove a delegator from the staking protocol.
     *
     *Can only be called by governance
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Delegator that need to be removed.
     */
    "remove_delegator": Anonymize<Iacnhot5uh80ka>;
    /**
     *Add a validator to the staking protocol.
     *
     *Can only be called by governance
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Select the delegator which is existed.
     *- `validator`: Validator that need to be added.
     */
    "add_validator": Anonymize<Idngfiicpu7gh9>;
    /**
     *Remove a validator from the staking protocol.
     *
     *Can only be called by governance
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Select the delegator which is existed.
     *- `validator`: Validator that need to be removed.
     */
    "remove_validator": Anonymize<Idngfiicpu7gh9>;
    /**
     *Set the update token exchange rate limit for a specific staking protocol.
     *
     *Can only be called by governance.
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Select the delegator which is existed.
     *- `ledger`: Ledger that need to be set.
     */
    "set_ledger": Anonymize<I3qd17rh5f6jv7>;
    /**
     *Transfer the staking token to remote chain.
     *Transfer the free balance of the Entrance Account to the selected delegator.
     *
     *Can be called by governance or staking protocol operator.
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Select the delegator which is existed.
     */
    "transfer_to": Anonymize<Iacnhot5uh80ka>;
    /**
     *Transfer the staking token back from remote chain.
     *Transfer the amount of tokens from the selected delegator back to the entrance account.
     *
     *Can be called by governance or staking protocol operator.
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Select the delegator which is existed.
     *- `amount`: The amount of tokens to transfer back.
     */
    "transfer_back": Anonymize<Ia0dlb4pduq2i4>;
    /**
     *Update the ongoing time unit for a specific staking protocol.
     *Update frequency controlled by update_time_unit_interval.
     *Less than update_time_unit_interval will report an error.
     *
     *Can be called by governance or staking protocol operator.
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `time_uint_option`: If time_uint is None, the ongoing time unit will be increased by
     *  one. Otherwise, the ongoing time unit will be updated to the specified time unit.
     */
    "update_ongoing_time_unit": Anonymize<Ie74pabtv0ktd0>;
    /**
     *Update the token exchange rate for a specific staking protocol.
     *Update frequency controlled by update_exchange_rate_interval.
     *Amount max update for token pool * max_update_token_exchange_rate.
     *
     *Can be called by governance or staking protocol operator.
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Select the delegator which is existed.
     *- `amount`: The amount of tokens to update the token exchange rate.
     */
    "update_token_exchange_rate": Anonymize<Ia0dlb4pduq2i4>;
    /**
     *Manipulate a delegator to perform Dapp staking related operations.
     *
     *Can be called by governance or staking protocol operator.
     *
     *Parameters
     *- `staking_protocol`: Slp supports staking protocols.
     *- `delegator`: Select the delegator which is existed.
     *- `task`: The Dapp staking task.
     */
    "astar_dapp_staking": Anonymize<I8kr5s6u6ue9e7>;
    /**
     *Processing Xcm message execution results.
     *
     *Can be called by governance or xcm origin.
     */
    "notify_astar_dapp_staking": Anonymize<I3iun9sig164po>;
}>;
export type Iem9ho9292gh8o = {
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    "delegator"?: Anonymize<I3d2ngsiehv5tp>;
};
export type I3d2ngsiehv5tp = (Anonymize<Ickhdoqhl8bqbi>) | undefined;
export type Iacnhot5uh80ka = {
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
};
export type Ia0dlb4pduq2i4 = {
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
    "amount": bigint;
};
export type Ie74pabtv0ktd0 = {
    "staking_protocol": Anonymize<I60rdchrdlh152>;
    "time_uint_option"?: Anonymize<I6o0vlee7cr3h2>;
};
export type I8kr5s6u6ue9e7 = {
    "delegator": Anonymize<Ickhdoqhl8bqbi>;
    "task": Anonymize<I5iigfm374t7es>;
};
export type I99bb69usss9gs = {
    "index": number;
    "threshold": number;
    "ayes": Anonymize<Ia2lhg7l2hilo3>;
    "nays": Anonymize<Ia2lhg7l2hilo3>;
    "end": number;
};
export type I8nj9dlo7lnbb3 = Array<Anonymize<I7jaj0isqeg12v>>;
export type I7jaj0isqeg12v = {
    "who": SS58String;
    "stake": bigint;
    "deposit": bigint;
};
export type Ib23vkkc52tqbu = {
    "votes": Anonymize<Ia2lhg7l2hilo3>;
    "stake": bigint;
    "deposit": bigint;
};
export type Ibs6u72covsi5f = AnonymousEnum<{
    "Ongoing": Anonymize<I8p2ls61n2igf3>;
    "Approved": Anonymize<Ini94eljn5lj8>;
    "Rejected": Anonymize<Ini94eljn5lj8>;
    "Cancelled": Anonymize<Ini94eljn5lj8>;
    "TimedOut": Anonymize<Ini94eljn5lj8>;
    "Killed": number;
}>;
export type I8p2ls61n2igf3 = {
    "track": number;
    "origin": Anonymize<Idph17ql7omoek>;
    "proposal": PreimagesBounded;
    "enactment": TraitsScheduleDispatchTime;
    "submitted": number;
    "submission_deposit": Anonymize<Id5fm4p8lj5qgi>;
    "decision_deposit"?: Anonymize<Ibd24caul84kv2>;
    "deciding"?: Anonymize<Ibcbcndfmk0jd9>;
    "tally": Anonymize<Ifsk7cbmtit1jd>;
    "in_queue": boolean;
    "alarm"?: Anonymize<I3aj03qk2o5mdm>;
};
export type I9o4npulmafg3s = Array<Anonymize<I1g47jka6hh7tm>>;
export type I1g47jka6hh7tm = (Anonymize<Idhbl7s1lc190c>) | undefined;
export type Idhbl7s1lc190c = {
    "maybe_id"?: Anonymize<I4s6vifaf8k998>;
    "priority": number;
    "call": PreimagesBounded;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "origin": Anonymize<Idph17ql7omoek>;
};
export type Ieg7k9e6jbge4a = [Anonymize<I6vp8an2he7ic1>, bigint];
export type I6vp8an2he7ic1 = Array<Anonymize<Ificq2h8easpca>>;
export type Ificq2h8easpca = {
    "delegate": SS58String;
    "proxy_type": Anonymize<I376r4jplmhe8p>;
    "delay": number;
};
export type Ie9j1itogtv7p5 = {
    "amount": bigint;
    "beneficiary": SS58String;
    "valid_from": number;
    "expire_at": number;
    "status": Anonymize<Ier5jvvb5iqu1g>;
};
export type Ier5jvvb5iqu1g = AnonymousEnum<{
    "Pending": undefined;
    "Attempted": Anonymize<I3m5sq54sjdlso>;
    "Failed": undefined;
}>;
export type I3m5sq54sjdlso = {};
export type Ic17drnrq0rtgi = Array<Anonymize<Ifitc0q6ckjb3j>>;
export type Ifitc0q6ckjb3j = [Anonymize<I6fr2mqud652ga>, Anonymize<Ifoernv5r40rfc>, Anonymize<I87cgves5f5lsa>];
export type Ifoernv5r40rfc = {
    "transaction_hash": FixedSizeBinary<32>;
    "transaction_index": number;
    "from": FixedSizeBinary<20>;
    "to"?: Anonymize<If7b8240vgt2q5>;
    "contract_address"?: Anonymize<If7b8240vgt2q5>;
    "logs": Anonymize<Ids7ng2qsv7snu>;
    "logs_bloom": FixedSizeBinary<256>;
};
export type Ids7ng2qsv7snu = Array<Anonymize<I10qb03fpuk6em>>;
export type I87cgves5f5lsa = AnonymousEnum<{
    "Legacy": Anonymize<I16nm875k0bak5>;
    "EIP2930": Anonymize<I16nm875k0bak5>;
    "EIP1559": Anonymize<I16nm875k0bak5>;
}>;
export type I16nm875k0bak5 = {
    "status_code": number;
    "used_gas": Anonymize<I4totqt881mlti>;
    "logs_bloom": FixedSizeBinary<256>;
    "logs": Anonymize<Ids7ng2qsv7snu>;
};
export type Idi27giun0mb9q = {
    "header": Anonymize<I4v962mnhj6j6r>;
    "transactions": Anonymize<I1fl9qh2r1hf29>;
    "ommers": Anonymize<I78ffku0ve5fgm>;
};
export type I4v962mnhj6j6r = {
    "parent_hash": FixedSizeBinary<32>;
    "ommers_hash": FixedSizeBinary<32>;
    "beneficiary": FixedSizeBinary<20>;
    "state_root": FixedSizeBinary<32>;
    "transactions_root": FixedSizeBinary<32>;
    "receipts_root": FixedSizeBinary<32>;
    "logs_bloom": FixedSizeBinary<256>;
    "difficulty": Anonymize<I4totqt881mlti>;
    "number": Anonymize<I4totqt881mlti>;
    "gas_limit": Anonymize<I4totqt881mlti>;
    "gas_used": Anonymize<I4totqt881mlti>;
    "timestamp": bigint;
    "extra_data": Binary;
    "mix_hash": FixedSizeBinary<32>;
    "nonce": FixedSizeBinary<8>;
};
export type I1fl9qh2r1hf29 = Array<Anonymize<I6fr2mqud652ga>>;
export type I78ffku0ve5fgm = Array<Anonymize<I4v962mnhj6j6r>>;
export type Idud3fdh64aqp9 = Array<Anonymize<I87cgves5f5lsa>>;
export type Ie7atdsih6q14b = Array<Anonymize<Ifoernv5r40rfc>>;
export type I7jidl7qnnq87c = {
    "size": bigint;
    "hash": FixedSizeBinary<32>;
};
export type I82cps8ng2jtug = [FixedSizeBinary<20>, FixedSizeBinary<32>];
export type Ic02kut0350gb0 = {
    "free": bigint;
    "reserved": bigint;
    "frozen": bigint;
};
export type Ifmurjhsco5svb = [Anonymize<I4c0s5cioidn76>, Binary];
export type Iettgnma0t3a0g = [Anonymize<Icu3qllmbdnj89>, SS58String];
export type I3t5icadd1rvs1 = [Anonymize<Ihfphjolmsqq1>, number];
export type I76qpl5pst2d4o = (Anonymize<Icu3qllmbdnj89>) | undefined;
export type Ik66om7cc050c = AnonymousEnum<{
    "Trading": Anonymize<I4iuvrv33j8lbc>;
    "Bootstrap": Anonymize<I1obh59c8hr5c>;
    "Disable": undefined;
}>;
export type I4iuvrv33j8lbc = {
    "pair_account": SS58String;
    "total_supply": bigint;
};
export type I1obh59c8hr5c = {
    "target_supply": Anonymize<I200n1ov5tbcvr>;
    "capacity_supply": Anonymize<I200n1ov5tbcvr>;
    "accumulated_supply": Anonymize<I200n1ov5tbcvr>;
    "end_block_number": number;
    "pair_account": SS58String;
};
export type Iaa4kemhg4eh7v = [Anonymize<I84fmreorpmm3e>, SS58String];
export type I9d86her21jvp8 = {
    "merkle_root": FixedSizeBinary<32>;
    "description": Binary;
    "distribute_currency": Anonymize<Iebirugq1dbhv6>;
    "distribute_amount": bigint;
    "distribute_holder": SS58String;
    "charged": boolean;
};
export type I2j3o5sgk562ak = (Anonymize<I73v15qbrve5pr>) | undefined;
export type I73v15qbrve5pr = {
    "raised": bigint;
    "cap": bigint;
    "first_slot": number;
    "last_slot": number;
    "trie_index": number;
    "status": Anonymize<I3dj8kkj3l70n5>;
};
export type I2q82ekqn8jp9r = {
    "value": bigint;
    "if_mint": boolean;
};
export type Ia9o9frjhn49u0 = [SS58String, bigint, Anonymize<Id6ihttoi261us>, Anonymize<I911us0gh85es7>];
export type I911us0gh85es7 = AnonymousEnum<{
    "Native": undefined;
    "Astar": SS58String;
    "Moonbeam": FixedSizeBinary<20>;
    "Hydradx": SS58String;
    "Interlay": SS58String;
    "Manta": SS58String;
}>;
export type I9v3gj6frc0u13 = [bigint, Anonymize<Icgljjb6j82uhn>];
export type Iapmb49b0eddb4 = [bigint, Anonymize<Icgljjb6j82uhn>, Anonymize<Iebirugq1dbhv6>];
export type I8d057oj36rajf = [Anonymize<Id6ihttoi261us>, Anonymize<Iebirugq1dbhv6>];
export type I2eq26k0hguoqq = [bigint, Anonymize<Ifip05kcrl65am>];
export type I6ge61lbhbulha = [Anonymize<Iebirugq1dbhv6>, Anonymize<I4c0s5cioidn76>];
export type I34jhssnacefoe = [Anonymize<I14u04kl21424d>, number];
export type I9egg64gafs7r7 = [Anonymize<Ib9sn2bmfqddi7>, number];
export type I69hlrlj6ggqgm = [Anonymize<Id6ihttoi261us>, number];
export type I7t012gg35hgm4 = Array<Anonymize<Ike262an6dflu>>;
export type Ike262an6dflu = [Anonymize<I4c0s5cioidn76>, FixedSizeBinary<32>];
export type Ib8nbo9p8dn6s1 = [Anonymize<Iebirugq1dbhv6>, Anonymize<I8vi5hrpkv8lci>];
export type I4kcv5272ambf0 = {
    "tokens_proportion": Anonymize<I7p4is2lmk8vmo>;
    "basic_token": Anonymize<I3thiua0nporjs>;
    "total_shares": bigint;
    "basic_rewards": Anonymize<I2dbamvpq4935>;
    "rewards": Anonymize<Idtci0ovsdvku6>;
    "state": Anonymize<I7a0jp4mtgh48i>;
    "keeper": SS58String;
    "reward_issuer": SS58String;
    "gauge"?: Anonymize<I4arjljr6dpflb>;
    "block_startup"?: Anonymize<I4arjljr6dpflb>;
    "min_deposit_to_start": bigint;
    "after_block_to_start": number;
    "withdraw_limit_time": number;
    "claim_limit_time": number;
    "withdraw_limit_count": number;
};
export type I7a0jp4mtgh48i = AnonymousEnum<{
    "UnCharged": undefined;
    "Charged": undefined;
    "Ongoing": undefined;
    "Dead": undefined;
    "Retired": undefined;
}>;
export type I970q50juj0l2 = {
    "pid": number;
    "token": Anonymize<Iebirugq1dbhv6>;
    "keeper": SS58String;
    "reward_issuer": SS58String;
    "rewards": Anonymize<I8g76mek6amua7>;
    "gauge_basic_rewards": Anonymize<I2dbamvpq4935>;
    "max_block": number;
    "gauge_amount": bigint;
    "total_time_factor": bigint;
    "gauge_state": Anonymize<Ia0ql154e3jpja>;
    "gauge_last_block": number;
};
export type I8g76mek6amua7 = Array<Anonymize<Ic4ivtp13cn3t3>>;
export type Ic4ivtp13cn3t3 = [Anonymize<Iebirugq1dbhv6>, Anonymize<I103d4nqausrop>];
export type I103d4nqausrop = FixedSizeArray<3, bigint>;
export type Ia0ql154e3jpja = AnonymousEnum<{
    "Unbond": undefined;
    "Bonded": undefined;
}>;
export type Ifpaals567gacp = {
    "who": SS58String;
    "gauge_amount": bigint;
    "total_time_factor": bigint;
    "latest_time_factor": bigint;
    "claimed_time_factor": bigint;
    "gauge_start_block": number;
    "gauge_stop_block": number;
    "gauge_last_block": number;
    "last_claim_block": number;
};
export type Ilivuv1vkc02s = {
    "who": SS58String;
    "share": bigint;
    "withdrawn_rewards": Anonymize<I2dbamvpq4935>;
    "claim_last_block": number;
    "withdraw_list": Anonymize<If9jidduiuq7vv>;
};
export type Ianombrc3en111 = {
    "total_votes": bigint;
    "start_round": number;
    "end_round": number;
    "round_length": number;
};
export type I1755v7kcv6nfl = {
    "vote_amount": bigint;
    "vote_list": Anonymize<Iep4uo61810hfs>;
    "last_vote": number;
};
export type I26t6htp1ghfm3 = [number, Anonymize<Iebirugq1dbhv6>];
export type I84h6f3k470m6q = {
    "farming_staking_amount": bigint;
    "system_stakable_amount": bigint;
    "system_shadow_amount": bigint;
    "pending_redeem_amount": bigint;
    "current_config": Anonymize<I8g3pgpehlsmfi>;
    "new_config": Anonymize<I8g3pgpehlsmfi>;
};
export type I8g3pgpehlsmfi = {
    "exec_delay": number;
    "system_stakable_farming_rate": number;
    "lptoken_rates": Anonymize<Icgljjb6j82uhn>;
    "add_or_sub": boolean;
    "system_stakable_base": bigint;
    "farming_poolids": Anonymize<Icgljjb6j82uhn>;
};
export type Ifptjqqj04qat7 = [Anonymize<Iebirugq1dbhv6>, SS58String];
export type I9t45q0sd1h16t = [Anonymize<Iebirugq1dbhv6>, Anonymize<I4frqunb5hj2km>];
export type I93ot7g316idsl = {
    "amount": bigint;
    "end": number;
};
export type I393gnb7kgq98v = {
    "bias": bigint;
    "slope": bigint;
    "block": number;
    "amount": bigint;
};
export type Ifvilitm1tdmqi = [bigint, Anonymize<I4totqt881mlti>];
export type Iarr20ag9rpg5c = {
    "old_markup_coefficient": bigint;
    "markup_coefficient": bigint;
};
export type I5o39ti65l0u4e = {
    "amount": bigint;
    "markup_coefficient": bigint;
    "refresh_block": number;
};
export type Ic7uu02ss1ah16 = {
    "markup_coefficient": bigint;
    "hardcap": bigint;
    "update_block": number;
};
export type Imng78fk88871 = {
    "xcm_fee": bigint;
    "xcm_weight": Anonymize<I4q39t5hn830vp>;
    "period": number;
    "last_block": number;
    "contract": FixedSizeBinary<20>;
};
export type Ifaba2nbbb02cs = Array<Anonymize<I6ebh42uq55sps>>;
export type Ic080st7mqo0d7 = AnonymousEnum<{
    "Ongoing": Anonymize<I5h5u568l3agks>;
    "Approved": Anonymize<Ini94eljn5lj8>;
    "Rejected": Anonymize<Ini94eljn5lj8>;
    "Cancelled": Anonymize<Ini94eljn5lj8>;
    "TimedOut": Anonymize<Ini94eljn5lj8>;
    "Killed": number;
}>;
export type I5h5u568l3agks = {
    "track": number;
    "origin": Anonymize<Idph17ql7omoek>;
    "proposal": PreimagesBounded;
    "enactment": TraitsScheduleDispatchTime;
    "submitted": number;
    "submission_deposit": Anonymize<Id5fm4p8lj5qgi>;
    "decision_deposit"?: Anonymize<Ibd24caul84kv2>;
    "deciding"?: Anonymize<Ibcbcndfmk0jd9>;
    "tally": Anonymize<I6d634btv7misu>;
    "in_queue": boolean;
    "alarm"?: Anonymize<I3aj03qk2o5mdm>;
};
export type Ibe2akds4krf80 = {
    "pool_id": number;
    "pool_asset": Anonymize<Iebirugq1dbhv6>;
    "assets": Anonymize<I6ae21pstqk9et>;
    "precisions": Anonymize<Iafqnechp3omqg>;
    "mint_fee": bigint;
    "swap_fee": bigint;
    "redeem_fee": bigint;
    "total_supply": bigint;
    "a": bigint;
    "a_block": number;
    "future_a": bigint;
    "future_a_block": number;
    "balances": Anonymize<Iafqnechp3omqg>;
    "fee_recipient": SS58String;
    "account_id": SS58String;
    "yield_recipient": SS58String;
    "precision": bigint;
};
export type I2uhe6v3aqlo79 = AnonymousEnum<{
    "Casting": Anonymize<Ia67kac4t2hm36>;
    "Delegating": Anonymize<I251o9sbu5566f>;
}>;
export type Ia67kac4t2hm36 = {
    "votes": Anonymize<Id41h5j1i3mvsm>;
    "delegations": Anonymize<I538qha8r4j3ii>;
    "prior": Anonymize<I4ojmnsk1dchql>;
};
export type Id41h5j1i3mvsm = Array<Anonymize<I2gbq186hnat1e>>;
export type I2gbq186hnat1e = [number, ConvictionVotingVoteAccountVote, number, bigint];
export type If5lnhvjis90k = [Anonymize<Iebirugq1dbhv6>, number, number, SS58String, Anonymize<I1rqote8tv7tr>];
export type I1rqote8tv7tr = (Anonymize<I5ca2qvq4sud2l>) | undefined;
export type I5ca2qvq4sud2l = [ConvictionVotingVoteAccountVote, bigint];
export type I22oifipsnuvk4 = [Anonymize<Iebirugq1dbhv6>, number, number];
export type I3udg9qslb775f = [SS58String, Anonymize<Iebirugq1dbhv6>, number];
export type Iavngg6vh7nl2j = {
    "principal": bigint;
    "borrow_index": bigint;
};
export type Iao359lc45ru9s = {
    "voucher_balance": bigint;
    "is_collateral": boolean;
};
export type I1ifiaqhtj7c9 = {
    "total_earned_prior": bigint;
    "exchange_rate_prior": bigint;
};
export type I6km05m2f6usv7 = {
    "index": bigint;
    "block": number;
};
export type I39fnrtffbq76n = AnonymousEnum<{
    "V0": undefined;
}>;
export type I92tce08cbhnmn = [SS58String, Binary];
export type Ihtnsu0oqpkmt = [Anonymize<I60rdchrdlh152>, number];
export type I1ia1mr5j8i0fe = [Anonymize<I60rdchrdlh152>, Anonymize<Ickhdoqhl8bqbi>];
export type I7p8qimonpk9dr = Array<Anonymize<I2t45n0peappvr>>;
export type Iekmidcnfe7b26 = ResultPayload<Anonymize<Ifeo1jafbstdai>, TransactionValidityError>;
export type If08sfhqn8ujfr = {
    "balance": Anonymize<I4totqt881mlti>;
    "nonce": Anonymize<I4totqt881mlti>;
};
export type I3dj14b7k3rkm5 = (Anonymize<I1bsfec060j604>) | undefined;
export type I23mlhpams6hq8 = ResultPayload<Anonymize<I7ag5k7bmmgq3j>, Anonymize<I8vqm6ghktndjq>>;
export type I7ag5k7bmmgq3j = {
    "exit_reason": Anonymize<Iag9iovb9j5ijo>;
    "value": Binary;
    "used_gas": Anonymize<I8mgv59to1hjie>;
    "weight_info"?: Anonymize<Ib72ii9bshc8f5>;
    "logs": Anonymize<Ids7ng2qsv7snu>;
};
export type I8mgv59to1hjie = {
    "standard": Anonymize<I4totqt881mlti>;
    "effective": Anonymize<I4totqt881mlti>;
};
export type Ib72ii9bshc8f5 = (Anonymize<Ibvme2l29puvr1>) | undefined;
export type Ibvme2l29puvr1 = {
    "ref_time_limit"?: Anonymize<I35p85j063s0il>;
    "proof_size_limit"?: Anonymize<I35p85j063s0il>;
    "ref_time_usage"?: Anonymize<I35p85j063s0il>;
    "proof_size_usage"?: Anonymize<I35p85j063s0il>;
};
export type I20378a9b4hdds = ResultPayload<Anonymize<Ie3rl25flint9v>, Anonymize<I8vqm6ghktndjq>>;
export type Ie3rl25flint9v = {
    "exit_reason": Anonymize<Iag9iovb9j5ijo>;
    "value": FixedSizeBinary<20>;
    "used_gas": Anonymize<I8mgv59to1hjie>;
    "weight_info"?: Anonymize<Ib72ii9bshc8f5>;
    "logs": Anonymize<Ids7ng2qsv7snu>;
};
export type Ifogockjiq4b3 = (Anonymize<Idi27giun0mb9q>) | undefined;
export type I2r0n4gcrs974b = (Anonymize<Idud3fdh64aqp9>) | undefined;
export type Ie6kgk6f04rsvk = (Anonymize<Ie7atdsih6q14b>) | undefined;
export type Ibkook56hopvp8 = [Anonymize<Ifogockjiq4b3>, Anonymize<I2r0n4gcrs974b>, Anonymize<Ie6kgk6f04rsvk>];
export type I45rl58hfs7m0h = [Anonymize<Ifogockjiq4b3>, Anonymize<Ie6kgk6f04rsvk>];
export type I42esqb0jrl6ka = (Anonymize<Ilml7kl87g23o>) | undefined;
export type Ilml7kl87g23o = {
    "asset_0": Anonymize<Icu3qllmbdnj89>;
    "asset_1": Anonymize<Icu3qllmbdnj89>;
    "account": SS58String;
    "total_liquidity": bigint;
    "holding_liquidity": bigint;
    "reserve_0": bigint;
    "reserve_1": bigint;
    "lp_asset_id": Anonymize<Icu3qllmbdnj89>;
    "status": number;
};
export type I1lb0fd61s4rqa = [bigint, Anonymize<I80cmmci23o30e>];
export type I80cmmci23o30e = AnonymousEnum<{
    "Idle": undefined;
    "Contributing": undefined;
    "Refunded": undefined;
    "Unlocked": undefined;
    "Redeemed": undefined;
    "MigratedIdle": undefined;
}>;
export type I1eg5d6kb1j7n = ResultPayload<Anonymize<I4totqt881mlti>, Anonymize<I8vqm6ghktndjq>>;
export type I6nubnsvttl6ea = ResultPayload<Anonymize<I103aqvrlfe547>, Anonymize<I8vqm6ghktndjq>>;
export type I103aqvrlfe547 = [bigint, bigint, bigint, number, bigint, bigint, bigint];
export type I49rvbh60t0d1 = Array<Anonymize<Ie78sm9v7tf80b>>;
export type Ie78sm9v7tf80b = [Anonymize<Iebirugq1dbhv6>, Anonymize<I4totqt881mlti>];
export type Idabjiaorrflgu = Array<Anonymize<I32flsd2dsgsqo>>;
export type I32flsd2dsgsqo = {
    "phase": Phase;
    "event": Anonymize<I77j9fl3f9d9gn>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I77j9fl3f9d9gn = AnonymousEnum<{
    "System": Anonymize<I8kjvmo80o2760>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "MultiTransactionPayment": Anonymize<I8rr9o6g84pu5j>;
    "Treasury": Anonymize<I3f75km8j5v1nd>;
    "Utility": Anonymize<I6k4cq7oggqoae>;
    "Preimage": PreimageEvent;
    "Identity": Anonymize<Ibju6hjiipokne>;
    "Democracy": Anonymize<Icfq8ap3e5p73t>;
    "Elections": Anonymize<I4iamd5rd51ec2>;
    "Council": Anonymize<I515vptbtr4bgp>;
    "TechnicalCommittee": Anonymize<I515vptbtr4bgp>;
    "Tips": Anonymize<Imaosic05it19>;
    "Proxy": Anonymize<I3sc8m95314i96>;
    "Multisig": Anonymize<Inv26pvh9l97m>;
    "Uniques": Anonymize<I27c883vr18l6d>;
    "StateTrieMigration": Anonymize<I61dksvl51aujo>;
    "AssetRegistry": Anonymize<I9dp7uaqj3tff4>;
    "Claims": Anonymize<I8cen1qssvc0qs>;
    "CollatorRewards": Anonymize<I3ktde60bb7807>;
    "Omnipool": Anonymize<I7lkql4318bauj>;
    "TransactionPause": Anonymize<I1e1tlbqeorb14>;
    "Duster": Anonymize<Ick156bqlvrfqh>;
    "OmnipoolWarehouseLM": Anonymize<Ibc0cs73olrilv>;
    "OmnipoolLiquidityMining": Anonymize<Ibd5re511t83ta>;
    "OTC": Anonymize<I4e560fvgcsh15>;
    "CircuitBreaker": Anonymize<Ichskhtdtbf0vo>;
    "Router": Anonymize<I2f70f2g8ddbl5>;
    "DynamicFees": undefined;
    "Staking": Anonymize<I578f2b006bplq>;
    "Stableswap": Anonymize<Ibsv65cl1ut4b>;
    "Bonds": Anonymize<I3ans31bk1md2j>;
    "OtcSettlements": Anonymize<I7t4kltkut18qv>;
    "LBP": Anonymize<Iafgde8gm8mhvt>;
    "XYK": Anonymize<Ii9d7rb1uqb69>;
    "Referrals": Anonymize<Idpbcufjvb4ib7>;
    "Tokens": Anonymize<I6h8581jnodhqc>;
    "Currencies": Anonymize<I6qgq0m7o225jg>;
    "Vesting": Anonymize<I3jgv45gfqgi7c>;
    "EVM": Anonymize<I9k071kk4cn1u8>;
    "Ethereum": Anonymize<I510u4q1qqh897>;
    "EVMAccounts": Anonymize<I71u7do1ao6vjp>;
    "XYKLiquidityMining": Anonymize<I479nm08b6ujjd>;
    "XYKWarehouseLM": Anonymize<Ibc0cs73olrilv>;
    "RelayChainInfo": Anonymize<I3cdbmcrrt95qk>;
    "DCA": Anonymize<I2el5s24ilguka>;
    "Scheduler": Anonymize<Ice43qi58ihao4>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "MessageQueue": Anonymize<Idrvf3ouahq8la>;
    "OrmlXcm": Anonymize<I1615emstntqta>;
    "XTokens": Anonymize<Ie93bvvt769opj>;
    "UnknownTokens": Anonymize<Ia2698nr6jkt>;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "EmaOracle": Anonymize<Iehrcm8i7udvpg>;
}>;
export type I8kjvmo80o2760 = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I37198fc8nlna5>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I37198fc8nlna5 = {
    "dispatch_error": Anonymize<I34p6lklavdpe2>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I34p6lklavdpe2 = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I4smnlj009j004>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I4smnlj009j004 = AnonymousEnum<{
    "System": Anonymize<I1s2t6elcah93o>;
    "Timestamp": undefined;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "MultiTransactionPayment": Anonymize<Iedfhur3vm7bgd>;
    "Treasury": Anonymize<I7dodf8ccnun1b>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Preimage": Anonymize<I4cfhml1prt4lu>;
    "Identity": Anonymize<I9mq328955mgb8>;
    "Democracy": Anonymize<I67neb7i10udig>;
    "Elections": Anonymize<I96u72l8br1ego>;
    "Council": Anonymize<Icapevgbpfn5p9>;
    "TechnicalCommittee": Anonymize<Icapevgbpfn5p9>;
    "Tips": Anonymize<I8c24qlovva8mi>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Uniques": Anonymize<Ienq2ge2rhv4jm>;
    "StateTrieMigration": Anonymize<I96objte63brjr>;
    "AssetRegistry": Anonymize<Iimgfr2idjdm4>;
    "Claims": Anonymize<Ieesotejglstun>;
    "GenesisHistory": undefined;
    "CollatorRewards": undefined;
    "Omnipool": Anonymize<I9n81uie6vm9j8>;
    "TransactionPause": Anonymize<Ia4jj5ajguk6ba>;
    "Duster": Anonymize<Igjgeha0sds9v>;
    "OmnipoolWarehouseLM": Anonymize<Ib26q43rgjm5dv>;
    "OmnipoolLiquidityMining": Anonymize<Ic8f00ki33etn8>;
    "OTC": Anonymize<I1kp1c5al384as>;
    "CircuitBreaker": Anonymize<I4vmqfcgsdr1l9>;
    "Router": Anonymize<Ifntb1290uuatm>;
    "DynamicFees": undefined;
    "Staking": Anonymize<Idhbjtd7at0b1k>;
    "Stableswap": Anonymize<I8eh9m8533v1sf>;
    "Bonds": Anonymize<Ibj08k850p0j34>;
    "OtcSettlements": Anonymize<I1jtj4pc4jltpf>;
    "LBP": Anonymize<Ic99uoklag6hh0>;
    "XYK": Anonymize<I96k0kb8u9s0go>;
    "Referrals": Anonymize<Iaqb0qr3l7g0ub>;
    "Tokens": Anonymize<Icc7o7ep6n36h2>;
    "Currencies": Anonymize<Icgcafv5q5cios>;
    "Vesting": Anonymize<Ifkcmnj410r9fh>;
    "EVM": Anonymize<I1c1lpht9ph1f2>;
    "EVMChainId": undefined;
    "Ethereum": Anonymize<I1mp6vnoh32l4q>;
    "EVMAccounts": Anonymize<Ie65vecqacffpm>;
    "DynamicEvmFee": undefined;
    "XYKLiquidityMining": Anonymize<Ibqqubhsrk6p64>;
    "XYKWarehouseLM": Anonymize<Ib26q43rgjm5dv>;
    "RelayChainInfo": undefined;
    "DCA": Anonymize<Ic4d0pk1ndfilm>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "ParachainInfo": undefined;
    "PolkadotXcm": Anonymize<I4s86iefmp2rcu>;
    "CumulusXcm": undefined;
    "XcmpQueue": Anonymize<I9aoshicggice1>;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "OrmlXcm": Anonymize<Ifv4efjta13rhe>;
    "XTokens": Anonymize<I8g8tbk0anjali>;
    "UnknownTokens": Anonymize<I5llpdov40t5vu>;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "EmaOracle": Anonymize<Iek7hro9nhqg2o>;
}>;
export type I1s2t6elcah93o = AnonymousEnum<{
    /**
     *The name of specification does not match between the current runtime
     *and the new runtime.
     */
    "InvalidSpecName": undefined;
    /**
     *The specification version is not allowed to decrease between the current runtime
     *and the new runtime.
     */
    "SpecVersionNeedsToIncrease": undefined;
    /**
     *Failed to extract the runtime version from the new runtime.
     *
     *Either calling `Core_version` or decoding `RuntimeVersion` failed.
     */
    "FailedToExtractRuntimeVersion": undefined;
    /**
     *Suicide called when the account has non-default composite data.
     */
    "NonDefaultComposite": undefined;
    /**
     *There is a non-zero reference count preventing the account from being purged.
     */
    "NonZeroRefCount": undefined;
    /**
     *The origin filter prevent the call to be dispatched.
     */
    "CallFiltered": undefined;
    /**
     *No upgrade authorized.
     */
    "NothingAuthorized": undefined;
    /**
     *The submitted code is not authorized.
     */
    "Unauthorized": undefined;
}>;
export type Iedfhur3vm7bgd = AnonymousEnum<{
    /**
     *Selected currency is not supported.
     */
    "UnsupportedCurrency": undefined;
    /**
     *Account balance should be non-zero.
     */
    "ZeroBalance": undefined;
    /**
     *Currency is already in the list of accepted currencies.
     */
    "AlreadyAccepted": undefined;
    /**
     *It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design.
     */
    "CoreAssetNotAllowed": undefined;
    /**
     *Fallback price cannot be zero.
     */
    "ZeroPrice": undefined;
    /**
     *Fallback price was not found.
     */
    "FallbackPriceNotFound": undefined;
    /**
     *Math overflow
     */
    "Overflow": undefined;
    /**
     *It is not allowed to change payment currency of an EVM account.
     */
    "EvmAccountNotAllowed": undefined;
    /**
     *EVM permit expired.
     */
    "EvmPermitExpired": undefined;
    /**
     *EVM permit is invalid.
     */
    "EvmPermitInvalid": undefined;
    /**
     *EVM permit call failed.
     */
    "EvmPermitCallExecutionError": undefined;
    /**
     *EVM permit call failed.
     */
    "EvmPermitRunnerError": undefined;
}>;
export type I8c24qlovva8mi = AnonymousEnum<{
    /**
     *The reason given is just too big.
     */
    "ReasonTooBig": undefined;
    /**
     *The tip was already found/started.
     */
    "AlreadyKnown": undefined;
    /**
     *The tip hash is unknown.
     */
    "UnknownTip": undefined;
    /**
     *The tip given was too generous.
     */
    "MaxTipAmountExceeded": undefined;
    /**
     *The account attempting to retract the tip is not the finder of the tip.
     */
    "NotFinder": undefined;
    /**
     *The tip cannot be claimed/closed because there are not enough tippers yet.
     */
    "StillOpen": undefined;
    /**
     *The tip cannot be claimed/closed because it's still in the countdown period.
     */
    "Premature": undefined;
}>;
export type Iimgfr2idjdm4 = AnonymousEnum<{
    /**
     *Asset ID is not available. This only happens when it reaches the MAX value of given id type.
     */
    "NoIdAvailable": undefined;
    /**
     *Invalid asset name or symbol.
     */
    "AssetNotFound": undefined;
    /**
     *Length of name or symbol is less than min. length.
     */
    "TooShort": undefined;
    /**
     *Asset's symbol can't contain whitespace characters .
     */
    "InvalidSymbol": undefined;
    /**
     *Asset ID is not registered in the asset-registry.
     */
    "AssetNotRegistered": undefined;
    /**
     *Asset is already registered.
     */
    "AssetAlreadyRegistered": undefined;
    /**
     *Incorrect number of assets provided to create shared asset.
     */
    "InvalidSharedAssetLen": undefined;
    /**
     *Cannot update asset location.
     */
    "CannotUpdateLocation": undefined;
    /**
     *Selected asset id is out of reserved range.
     */
    "NotInReservedRange": undefined;
    /**
     *Location already registered with different asset.
     */
    "LocationAlreadyRegistered": undefined;
    /**
     *Origin is forbidden to set/update value.
     */
    "Forbidden": undefined;
    /**
     *Balance too low.
     */
    "InsufficientBalance": undefined;
    /**
     *Sufficient assets can't be changed to insufficient.
     */
    "ForbiddenSufficiencyChange": undefined;
    /**
     *Asset is already banned.
     */
    "AssetAlreadyBanned": undefined;
    /**
     *Asset is not banned.
     */
    "AssetNotBanned": undefined;
}>;
export type Ieesotejglstun = AnonymousEnum<{
    /**
     *Ethereum signature is not valid
     */
    "InvalidEthereumSignature": undefined;
    /**
     *Claim is not valid
     */
    "NoClaimOrAlreadyClaimed": undefined;
    /**
     *Value reached maximum and cannot be incremented further
     */
    "BalanceOverflow": undefined;
}>;
export type I9n81uie6vm9j8 = AnonymousEnum<{
    /**
     *Balance too low
     */
    "InsufficientBalance": undefined;
    /**
     *Asset is already in omnipool
     */
    "AssetAlreadyAdded": undefined;
    /**
     *Asset is not in omnipool
     */
    "AssetNotFound": undefined;
    /**
     *Failed to add token to Omnipool due to insufficient initial liquidity.
     */
    "MissingBalance": undefined;
    /**
     *Invalid initial asset price.
     */
    "InvalidInitialAssetPrice": undefined;
    /**
     *Slippage protection - minimum limit has not been reached.
     */
    "BuyLimitNotReached": undefined;
    /**
     *Slippage protection - maximum limit has been exceeded.
     */
    "SellLimitExceeded": undefined;
    /**
     *Position has not been found.
     */
    "PositionNotFound": undefined;
    /**
     *Insufficient shares in position
     */
    "InsufficientShares": undefined;
    /**
     *Asset is not allowed to be traded.
     */
    "NotAllowed": undefined;
    /**
     *Signed account is not owner of position instance.
     */
    "Forbidden": undefined;
    /**
     *Asset weight cap has been exceeded.
     */
    "AssetWeightCapExceeded": undefined;
    /**
     *Asset is not registered in asset registry
     */
    "AssetNotRegistered": undefined;
    /**
     *Provided liquidity is below minimum allowed limit
     */
    "InsufficientLiquidity": undefined;
    /**
     *Traded amount is below minimum allowed limit
     */
    "InsufficientTradingAmount": undefined;
    /**
     *Sell or buy with same asset ids is not allowed.
     */
    "SameAssetTradeNotAllowed": undefined;
    /**
     *LRNA update after trade results in positive value.
     */
    "HubAssetUpdateError": undefined;
    /**
     *Imbalance results in positive value.
     */
    "PositiveImbalance": undefined;
    /**
     *Amount of shares provided cannot be 0.
     */
    "InvalidSharesAmount": undefined;
    /**
     *Hub asset is only allowed to be sold.
     */
    "InvalidHubAssetTradableState": undefined;
    /**
     *Asset is not allowed to be refunded.
     */
    "AssetRefundNotAllowed": undefined;
    /**
     *Max fraction of asset to buy has been exceeded.
     */
    "MaxOutRatioExceeded": undefined;
    /**
     *Max fraction of asset to sell has been exceeded.
     */
    "MaxInRatioExceeded": undefined;
    /**
     *Max allowed price difference has been exceeded.
     */
    "PriceDifferenceTooHigh": undefined;
    /**
     *Invalid oracle price - division by zero.
     */
    "InvalidOraclePrice": undefined;
    /**
     *Failed to calculate withdrawal fee.
     */
    "InvalidWithdrawalFee": undefined;
    /**
     *More than allowed amount of fee has been transferred.
     */
    "FeeOverdraft": undefined;
    /**
     *Token cannot be removed from Omnipool due to shares still owned by other users.
     */
    "SharesRemaining": undefined;
    /**
     *Token cannot be removed from Omnipool because asset is not frozen.
     */
    "AssetNotFrozen": undefined;
    /**
     *Calculated amount out from sell trade is zero.
     */
    "ZeroAmountOut": undefined;
    /**
     *Existential deposit of asset is not available.
     */
    "ExistentialDepositNotAvailable": undefined;
    /**
     *Slippage protection
     */
    "SlippageLimit": undefined;
}>;
export type Ia4jj5ajguk6ba = AnonymousEnum<{
    /**
     *can not pause
     */
    "CannotPause": undefined;
    /**
     *invalid character encoding
     */
    "InvalidCharacter": undefined;
    /**
     *pallet name or function name is too long
     */
    "NameTooLong": undefined;
}>;
export type Igjgeha0sds9v = AnonymousEnum<{
    /**
     *Account is excluded from dusting.
     */
    "AccountBlacklisted": undefined;
    /**
     *Account is not present in the non-dustable list.
     */
    "AccountNotBlacklisted": undefined;
    /**
     *The balance is zero.
     */
    "ZeroBalance": undefined;
    /**
     *The balance is sufficient to keep account open.
     */
    "BalanceSufficient": undefined;
    /**
     *Dust account is not set.
     */
    "DustAccountNotSet": undefined;
    /**
     *Reserve account is not set.
     */
    "ReserveAccountNotSet": undefined;
}>;
export type Ib26q43rgjm5dv = AnonymousEnum<{
    /**
     *Global farm does not exist.
     */
    "GlobalFarmNotFound": undefined;
    /**
     *Yield farm does not exist.
     */
    "YieldFarmNotFound": undefined;
    /**
     *Multiple claims in the same period is not allowed.
     */
    "DoubleClaimInPeriod": undefined;
    /**
     *Liquidity mining is canceled.
     */
    "LiquidityMiningCanceled": undefined;
    /**
     *Liquidity mining is not canceled.
     */
    "LiquidityMiningIsActive": undefined;
    /**
     *Liquidity mining is in `active` or `terminated` state and action cannot be completed.
     */
    "LiquidityMiningIsNotStopped": undefined;
    /**
     *LP shares amount is not valid.
     */
    "InvalidDepositAmount": undefined;
    /**
     *Account is not allowed to perform action.
     */
    "Forbidden": undefined;
    /**
     *Yield farm multiplier can't be 0.
     */
    "InvalidMultiplier": undefined;
    /**
     *Yield farm with given `amm_pool_id` already exists in global farm.
     */
    "YieldFarmAlreadyExists": undefined;
    /**
     *Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1).
     */
    "InvalidInitialRewardPercentage": undefined;
    /**
     *One or more yield farms exist in global farm.
     */
    "GlobalFarmIsNotEmpty": undefined;
    /**
     *Farm's `incentivized_asset` is missing in provided asset pair.
     */
    "MissingIncentivizedAsset": undefined;
    /**
     *Reward currency balance is not sufficient.
     */
    "InsufficientRewardCurrencyBalance": undefined;
    /**
     *Blocks per period can't be 0.
     */
    "InvalidBlocksPerPeriod": undefined;
    /**
     *Yield per period can't be 0.
     */
    "InvalidYieldPerPeriod": undefined;
    /**
     *Total rewards is less than `MinTotalFarmRewards`.
     */
    "InvalidTotalRewards": undefined;
    /**
     *Planned yielding periods is less than `MinPlannedYieldingPeriods`.
     */
    "InvalidPlannedYieldingPeriods": undefined;
    /**
     *Maximum number of locks reached for deposit.
     */
    "MaxEntriesPerDeposit": undefined;
    /**
     *Trying to lock LP shares into already locked yield farm.
     */
    "DoubleLock": undefined;
    /**
     *Yield farm entry doesn't exist for given deposit.
     */
    "YieldFarmEntryNotFound": undefined;
    /**
     *Max number of yield farms in global farm was reached. Global farm can't accept new
     *yield farms until some yield farm is not removed from storage.
     */
    "GlobalFarmIsFull": undefined;
    /**
     *Invalid min. deposit was set for global farm.
     */
    "InvalidMinDeposit": undefined;
    /**
     *Price adjustment multiplier can't be 0.
     */
    "InvalidPriceAdjustment": undefined;
    /**
     *Account creation from id failed.
     */
    "ErrorGetAccountId": undefined;
    /**
     *Value of deposited shares amount in reward currency is bellow min. limit.
     */
    "IncorrectValuedShares": undefined;
    /**
     *`reward_currency` is not registered in asset registry.
     */
    "RewardCurrencyNotRegistered": undefined;
    /**
     *`incentivized_asset` is not registered in asset registry.
     */
    "IncentivizedAssetNotRegistered": undefined;
    /**
     *Action cannot be completed because unexpected error has occurred. This should be reported
     *to protocol maintainers.
     */
    "InconsistentState": Anonymize<Ibplkiqg5rvr3e>;
}>;
export type Ibplkiqg5rvr3e = AnonymousEnum<{
    "YieldFarmNotFound": undefined;
    "GlobalFarmNotFound": undefined;
    "LiquidityIsNotActive": undefined;
    "GlobalFarmIsNotActive": undefined;
    "DepositNotFound": undefined;
    "InvalidPeriod": undefined;
    "NotEnoughRewardsInYieldFarm": undefined;
    "InvalidLiveYielFarmsCount": undefined;
    "InvalidTotalYieldFarmsCount": undefined;
    "InvalidYieldFarmEntriesCount": undefined;
    "InvalidTotalShares": undefined;
    "InvalidValuedShares": undefined;
    "InvalidTotalSharesZ": undefined;
    "InvalidPaidAccumulatedRewards": undefined;
    "InvalidFarmId": undefined;
    "InvalidLoyaltyMultiplier": undefined;
    "NoExistentialDepositForAsset": undefined;
}>;
export type Ic8f00ki33etn8 = AnonymousEnum<{
    /**
     *Asset is not in the omnipool.
     */
    "AssetNotFound": undefined;
    /**
     *Signed account is not owner of the deposit.
     */
    "Forbidden": undefined;
    /**
     *Rewards to claim are 0.
     */
    "ZeroClaimedRewards": undefined;
    /**
     *Action cannot be completed because unexpected error has occurred. This should be reported
     *to protocol maintainers.
     */
    "InconsistentState": Anonymize<Icnmrtlo128skq>;
    /**
     *Oracle could not be found for requested assets.
     */
    "OracleNotAvailable": undefined;
    /**
     *Oracle providing `price_adjustment` could not be found for requested assets.
     */
    "PriceAdjustmentNotAvailable": undefined;
}>;
export type Icnmrtlo128skq = AnonymousEnum<{
    "MissingLpPosition": undefined;
    "DepositDataNotFound": undefined;
}>;
export type I1kp1c5al384as = AnonymousEnum<{
    /**
     *Asset does not exist in registry
     */
    "AssetNotRegistered": undefined;
    /**
     *Order cannot be found
     */
    "OrderNotFound": undefined;
    /**
     *Size of order ID exceeds the bound
     */
    "OrderIdOutOfBound": undefined;
    /**
     *Cannot partially fill an order which is not partially fillable
     */
    "OrderNotPartiallyFillable": undefined;
    /**
     *Order amount_in and amount_out must at all times be greater than the existential deposit
     *for the asset multiplied by the ExistentialDepositMultiplier.
     *A fill order may not leave behind amounts smaller than this.
     */
    "OrderAmountTooSmall": undefined;
    /**
     *Error with math calculations
     */
    "MathError": undefined;
    /**
     *The caller does not have permission to complete the action
     */
    "Forbidden": undefined;
    /**
     *Reserved amount not sufficient.
     */
    "InsufficientReservedAmount": undefined;
}>;
export type I4vmqfcgsdr1l9 = AnonymousEnum<{
    /**
     *Invalid value for a limit. Limit must be non-zero.
     */
    "InvalidLimitValue": undefined;
    /**
     *Allowed liquidity limit is not stored for asset
     */
    "LiquidityLimitNotStoredForAsset": undefined;
    /**
     *Token trade outflow per block has been reached
     */
    "TokenOutflowLimitReached": undefined;
    /**
     *Token trade influx per block has been reached
     */
    "TokenInfluxLimitReached": undefined;
    /**
     *Maximum pool's liquidity limit per block has been reached
     */
    "MaxLiquidityLimitPerBlockReached": undefined;
    /**
     *Asset is not allowed to have a limit
     */
    "NotAllowed": undefined;
}>;
export type Ifntb1290uuatm = AnonymousEnum<{
    /**
     *The trading limit has been reached
     */
    "TradingLimitReached": undefined;
    /**
     *The the max number of trades limit is reached
     */
    "MaxTradesExceeded": undefined;
    /**
     *The AMM pool is not supported for executing trades
     */
    "PoolNotSupported": undefined;
    /**
     *The user has not enough balance to execute the trade
     */
    "InsufficientBalance": undefined;
    /**
     *The calculation of route trade amounts failed in the underlying AMM
     */
    "RouteCalculationFailed": undefined;
    /**
     *The route is invalid
     */
    "InvalidRoute": undefined;
    /**
     *The route update was not successful
     */
    "RouteUpdateIsNotSuccessful": undefined;
    /**
     *Route contains assets that has no oracle data
     */
    "RouteHasNoOracle": undefined;
    /**
     *The route execution failed in the underlying AMM
     */
    "InvalidRouteExecution": undefined;
    /**
     *Trading same assets is not allowed.
     */
    "NotAllowed": undefined;
}>;
export type Idhbjtd7at0b1k = AnonymousEnum<{
    /**
     *Balance is too low.
     */
    "InsufficientBalance": undefined;
    /**
     *Staked amount is too low.
     */
    "InsufficientStake": undefined;
    /**
     *Staking position has not been found.
     */
    "PositionNotFound": undefined;
    /**
     *Maximum amount of votes were reached for staking position.
     */
    "MaxVotesReached": undefined;
    /**
     *Staking is not initialized.
     */
    "NotInitialized": undefined;
    /**
     *Staking is already initialized.
     */
    "AlreadyInitialized": undefined;
    /**
     *Arithmetic error.
     */
    "Arithmetic": undefined;
    /**
     *Pot's balance is zero.
     */
    "MissingPotBalance": undefined;
    /**
     *Account's position already exists.
     */
    "PositionAlreadyExists": undefined;
    /**
     *Signer is not an owner of the staking position.
     */
    "Forbidden": undefined;
    /**
     *Position contains registered votes.
     */
    "ExistingVotes": undefined;
    /**
     *Position contains processed votes. Removed these votes first before increasing stake or claiming.
     */
    "ExistingProcessedVotes": undefined;
    /**
     *Action cannot be completed because unexpected error has occurred. This should be reported
     *to protocol maintainers.
     */
    "InconsistentState": Anonymize<Icojqvn3afk41n>;
}>;
export type Icojqvn3afk41n = AnonymousEnum<{
    "PositionNotFound": undefined;
    "NegativePendingRewards": undefined;
    "NegativeUnpaidRewards": undefined;
    "TooManyPositions": undefined;
    "Arithmetic": undefined;
}>;
export type I8eh9m8533v1sf = AnonymousEnum<{
    /**
     *Creating a pool with same assets or less than 2 assets is not allowed.
     */
    "IncorrectAssets": undefined;
    /**
     *Maximum number of assets has been exceeded.
     */
    "MaxAssetsExceeded": undefined;
    /**
     *A pool with given assets does not exist.
     */
    "PoolNotFound": undefined;
    /**
     *A pool with given assets already exists.
     */
    "PoolExists": undefined;
    /**
     *Asset is not in the pool.
     */
    "AssetNotInPool": undefined;
    /**
     *Share asset is not registered in Registry.
     */
    "ShareAssetNotRegistered": undefined;
    /**
     *Share asset is amount assets when creating a pool.
     */
    "ShareAssetInPoolAssets": undefined;
    /**
     *One or more assets are not registered in AssetRegistry
     */
    "AssetNotRegistered": undefined;
    /**
     *Invalid asset amount provided. Amount must be greater than zero.
     */
    "InvalidAssetAmount": undefined;
    /**
     *Balance of an asset is not sufficient to perform a trade.
     */
    "InsufficientBalance": undefined;
    /**
     *Balance of a share asset is not sufficient to withdraw liquidity.
     */
    "InsufficientShares": undefined;
    /**
     *Liquidity has not reached the required minimum.
     */
    "InsufficientLiquidity": undefined;
    /**
     *Insufficient liquidity left in the pool after withdrawal.
     */
    "InsufficientLiquidityRemaining": undefined;
    /**
     *Amount is less than the minimum trading amount configured.
     */
    "InsufficientTradingAmount": undefined;
    /**
     *Minimum limit has not been reached during trade.
     */
    "BuyLimitNotReached": undefined;
    /**
     *Maximum limit has been exceeded during trade.
     */
    "SellLimitExceeded": undefined;
    /**
     *Initial liquidity of asset must be > 0.
     */
    "InvalidInitialLiquidity": undefined;
    /**
     *Amplification is outside configured range.
     */
    "InvalidAmplification": undefined;
    /**
     *Remaining balance of share asset is below asset's existential deposit.
     */
    "InsufficientShareBalance": undefined;
    /**
     *Not allowed to perform an operation on given asset.
     */
    "NotAllowed": undefined;
    /**
     *Future block number is in the past.
     */
    "PastBlock": undefined;
    /**
     *New amplification is equal to the previous value.
     */
    "SameAmplification": undefined;
    /**
     *Slippage protection.
     */
    "SlippageLimit": undefined;
    /**
     *Failed to retrieve asset decimals.
     */
    "UnknownDecimals": undefined;
}>;
export type Ibj08k850p0j34 = AnonymousEnum<{
    /**
     *Bond not registered
     */
    "NotRegistered": undefined;
    /**
     *Bond is not mature
     */
    "NotMature": undefined;
    /**
     *Maturity not long enough
     */
    "InvalidMaturity": undefined;
    /**
     *Asset type not allowed for underlying asset
     */
    "DisallowedAsset": undefined;
    /**
     *Asset is not registered in `AssetRegistry`
     */
    "AssetNotFound": undefined;
    /**
     *Generated name is not valid.
     */
    "InvalidBondName": undefined;
    /**
     *Bond's name parsing was now successful
     */
    "FailToParseName": undefined;
}>;
export type I1jtj4pc4jltpf = AnonymousEnum<{
    /**
     *Otc order not found
     */
    "OrderNotFound": undefined;
    /**
     *OTC order is not partially fillable
     */
    "NotPartiallyFillable": undefined;
    /**
     *Provided route doesn't match the existing route
     */
    "InvalidRoute": undefined;
    /**
     *Initial and final balance are different
     */
    "BalanceInconsistency": undefined;
    /**
     *Trade amount higher than necessary
     */
    "TradeAmountTooHigh": undefined;
    /**
     *Trade amount lower than necessary
     */
    "TradeAmountTooLow": undefined;
    /**
     *Price for a route is not available
     */
    "PriceNotAvailable": undefined;
}>;
export type Ic99uoklag6hh0 = AnonymousEnum<{
    /**
     *Pool assets can not be the same
     */
    "CannotCreatePoolWithSameAssets": undefined;
    /**
     *Account is not a pool owner
     */
    "NotOwner": undefined;
    /**
     *Sale already started
     */
    "SaleStarted": undefined;
    /**
     *Sale is still in progress
     */
    "SaleNotEnded": undefined;
    /**
     *Sale is not running
     */
    "SaleIsNotRunning": undefined;
    /**
     *Sale duration is too long
     */
    "MaxSaleDurationExceeded": undefined;
    /**
     *Liquidity being added should not be zero
     */
    "CannotAddZeroLiquidity": undefined;
    /**
     *Asset balance too low
     */
    "InsufficientAssetBalance": undefined;
    /**
     *Pool does not exist
     */
    "PoolNotFound": undefined;
    /**
     *Pool has been already created
     */
    "PoolAlreadyExists": undefined;
    /**
     *Invalid block range
     */
    "InvalidBlockRange": undefined;
    /**
     *Calculation error
     */
    "WeightCalculationError": undefined;
    /**
     *Weight set is out of range
     */
    "InvalidWeight": undefined;
    /**
     *Can not perform a trade with zero amount
     */
    "ZeroAmount": undefined;
    /**
     *Trade amount is too high
     */
    "MaxInRatioExceeded": undefined;
    /**
     *Trade amount is too high
     */
    "MaxOutRatioExceeded": undefined;
    /**
     *Invalid fee amount
     */
    "FeeAmountInvalid": undefined;
    /**
     *Trading limit reached
     */
    "TradingLimitReached": undefined;
    /**
     *An unexpected integer overflow occurred
     */
    "Overflow": undefined;
    /**
     *Nothing to update
     */
    "NothingToUpdate": undefined;
    /**
     *Liquidity has not reached the required minimum.
     */
    "InsufficientLiquidity": undefined;
    /**
     *Amount is less than minimum trading limit.
     */
    "InsufficientTradingAmount": undefined;
    /**
     *Not more than one fee collector per asset id
     */
    "FeeCollectorWithAssetAlreadyUsed": undefined;
}>;
export type I96k0kb8u9s0go = AnonymousEnum<{
    /**
     *It is not allowed to create a pool between same assets.
     */
    "CannotCreatePoolWithSameAssets": undefined;
    /**
     *Liquidity has not reached the required minimum.
     */
    "InsufficientLiquidity": undefined;
    /**
     *Amount is less than min trading limit.
     */
    "InsufficientTradingAmount": undefined;
    /**
     *Liquidity is zero.
     */
    "ZeroLiquidity": undefined;
    /**
     *It is not allowed to create a pool with zero initial price.
     *Not used, kept for backward compatibility
     */
    "ZeroInitialPrice": undefined;
    /**
     *Overflow
     *Not used, kept for backward compatibility
     */
    "CreatePoolAssetAmountInvalid": undefined;
    /**
     *Overflow
     */
    "InvalidMintedLiquidity": undefined;
    /**
     *Overflow
     */
    "InvalidLiquidityAmount": undefined;
    /**
     *Asset amount has exceeded given limit.
     */
    "AssetAmountExceededLimit": undefined;
    /**
     *Asset amount has not reached given limit.
     */
    "AssetAmountNotReachedLimit": undefined;
    /**
     *Asset balance is not sufficient.
     */
    "InsufficientAssetBalance": undefined;
    /**
     *Not enough asset liquidity in the pool.
     */
    "InsufficientPoolAssetBalance": undefined;
    /**
     *Not enough core asset liquidity in the pool.
     */
    "InsufficientNativeCurrencyBalance": undefined;
    /**
     *Liquidity pool for given assets does not exist.
     */
    "TokenPoolNotFound": undefined;
    /**
     *Liquidity pool for given assets already exists.
     */
    "TokenPoolAlreadyExists": undefined;
    /**
     *Overflow
     */
    "AddAssetAmountInvalid": undefined;
    /**
     *Overflow
     */
    "RemoveAssetAmountInvalid": undefined;
    /**
     *Overflow
     */
    "SellAssetAmountInvalid": undefined;
    /**
     *Overflow
     */
    "BuyAssetAmountInvalid": undefined;
    /**
     *Overflow
     */
    "FeeAmountInvalid": undefined;
    /**
     *Overflow
     */
    "CannotApplyDiscount": undefined;
    /**
     *Max fraction of pool to buy in single transaction has been exceeded.
     */
    "MaxOutRatioExceeded": undefined;
    /**
     *Max fraction of pool to sell in single transaction has been exceeded.
     */
    "MaxInRatioExceeded": undefined;
    /**
     *Overflow
     */
    "Overflow": undefined;
    /**
     *Pool cannot be created due to outside factors.
     */
    "CannotCreatePool": undefined;
}>;
export type Iaqb0qr3l7g0ub = AnonymousEnum<{
    /**
     *Referral code is too long.
     */
    "TooLong": undefined;
    /**
     *Referral code is too short.
     */
    "TooShort": undefined;
    /**
     *Referral code contains invalid character. Only alphanumeric characters are allowed.
     */
    "InvalidCharacter": undefined;
    /**
     *Referral code already exists.
     */
    "AlreadyExists": undefined;
    /**
     *Provided referral code is invalid. Either does not exist or is too long.
     */
    "InvalidCode": undefined;
    /**
     *Account is already linked to another referral account.
     */
    "AlreadyLinked": undefined;
    /**
     *Nothing in the referral pot account for the asset.
     */
    "ZeroAmount": undefined;
    /**
     *Linking an account to the same referral account is not allowed.
     */
    "LinkNotAllowed": undefined;
    /**
     *Calculated rewards are more than the fee amount. This can happen if percentages are incorrectly set.
     */
    "IncorrectRewardCalculation": undefined;
    /**
     *Given referrer and trader percentages exceeds 100% percent.
     */
    "IncorrectRewardPercentage": undefined;
    /**
     *The account has already a code registered.
     */
    "AlreadyRegistered": undefined;
    /**
     *Price for given asset pair not found.
     */
    "PriceNotFound": undefined;
    /**
     *Minimum trading amount for conversion has not been reached.
     */
    "ConversionMinTradingAmountNotReached": undefined;
    /**
     *Zero amount received from conversion.
     */
    "ConversionZeroAmountReceived": undefined;
}>;
export type Ifkcmnj410r9fh = AnonymousEnum<{
    /**
     *Vesting period is zero
     */
    "ZeroVestingPeriod": undefined;
    /**
     *Number of vests is zero
     */
    "ZeroVestingPeriodCount": undefined;
    /**
     *Insufficient amount of balance to lock
     */
    "InsufficientBalanceToLock": undefined;
    /**
     *This account have too many vesting schedules
     */
    "TooManyVestingSchedules": undefined;
    /**
     *The vested transfer amount is too low
     */
    "AmountLow": undefined;
    /**
     *Failed because the maximum vesting schedules was exceeded
     */
    "MaxVestingSchedulesExceeded": undefined;
}>;
export type I1c1lpht9ph1f2 = AnonymousEnum<{
    /**
     *Not enough balance to perform action
     */
    "BalanceLow": undefined;
    /**
     *Calculating total fee overflowed
     */
    "FeeOverflow": undefined;
    /**
     *Calculating total payment overflowed
     */
    "PaymentOverflow": undefined;
    /**
     *Withdraw fee failed
     */
    "WithdrawFailed": undefined;
    /**
     *Gas price is too low.
     */
    "GasPriceTooLow": undefined;
    /**
     *Nonce is invalid
     */
    "InvalidNonce": undefined;
    /**
     *Gas limit is too low.
     */
    "GasLimitTooLow": undefined;
    /**
     *Gas limit is too high.
     */
    "GasLimitTooHigh": undefined;
    /**
     *The chain id is invalid.
     */
    "InvalidChainId": undefined;
    /**
     *the signature is invalid.
     */
    "InvalidSignature": undefined;
    /**
     *EVM reentrancy
     */
    "Reentrancy": undefined;
    /**
     *EIP-3607,
     */
    "TransactionMustComeFromEOA": undefined;
    /**
     *Invalid Transaction
     */
    "InvalidTransaction": undefined;
    /**
     *Undefined error.
     */
    "Undefined": undefined;
}>;
export type Ibqqubhsrk6p64 = AnonymousEnum<{
    /**
     *Nft pallet didn't return an owner.
     */
    "CantFindDepositOwner": undefined;
    /**
     *Account balance of XYK pool shares is not sufficient.
     */
    "InsufficientXykSharesBalance": undefined;
    /**
     *XYK pool does not exist
     */
    "XykPoolDoesntExist": undefined;
    /**
     *Account is not deposit owner.
     */
    "NotDepositOwner": undefined;
    /**
     *XYK did not return assets for given pool id
     */
    "CantGetXykAssets": undefined;
    /**
     *Deposit data not found
     */
    "DepositDataNotFound": undefined;
    /**
     *Calculated reward to claim is 0.
     */
    "ZeroClaimedRewards": undefined;
    /**
     *Asset is not in the `AssetPair`.
     */
    "AssetNotInAssetPair": undefined;
    /**
     *Provided `AssetPair` is not used by the deposit.
     */
    "InvalidAssetPair": undefined;
    /**
     *Asset is not registered in asset registry.
     */
    "AssetNotRegistered": undefined;
    /**
     *Failed to calculate `pot`'s account.
     */
    "FailToGetPotId": undefined;
}>;
export type Ic4d0pk1ndfilm = AnonymousEnum<{
    /**
     *Schedule not exist
     */
    "ScheduleNotFound": undefined;
    /**
     *The min trade amount is not reached
     */
    "MinTradeAmountNotReached": undefined;
    /**
     *Forbidden as the user is not the owner of the schedule
     */
    "Forbidden": undefined;
    /**
     *The next execution block number is not in the future
     */
    "BlockNumberIsNotInFuture": undefined;
    /**
     *Price is unstable as price change from oracle data is bigger than max allowed
     */
    "PriceUnstable": undefined;
    /**
     *Order was randomly rescheduled to next block
     */
    "Bumped": undefined;
    /**
     *Error occurred when calculating price
     */
    "CalculatingPriceError": undefined;
    /**
     *The total amount to be reserved is smaller than min budget
     */
    "TotalAmountIsSmallerThanMinBudget": undefined;
    /**
     *The budget is too low for executing at least two orders
     */
    "BudgetTooLow": undefined;
    /**
     *There is no free block found to plan DCA execution
     */
    "NoFreeBlockFound": undefined;
    /**
     *The DCA schedule has been manually terminated
     */
    "ManuallyTerminated": undefined;
    /**
     *Max number of retries reached for schedule
     */
    "MaxRetryReached": undefined;
    /**
     *Absolutely trade limit reached, leading to retry
     */
    "TradeLimitReached": undefined;
    /**
     *Slippage limit calculated from oracle is reached, leading to retry
     */
    "SlippageLimitReached": undefined;
    /**
     *No parent hash has been found from relay chain
     */
    "NoParentHashFound": undefined;
    /**
     *Error that should not really happen only in case of invalid state of the schedule storage entries
     */
    "InvalidState": undefined;
    /**
     *Period should be longer than 5 blocks
     */
    "PeriodTooShort": undefined;
    /**
     *Stability threshold cannot be higher than `MaxConfigurablePriceDifferenceBetweenBlock`
     */
    "StabilityThresholdTooHigh": undefined;
}>;
export type I4s86iefmp2rcu = AnonymousEnum<{
    /**
     *The desired destination was unreachable, generally because there is a no way of routing
     *to it.
     */
    "Unreachable": undefined;
    /**
     *There was some other issue (i.e. not to do with routing) in sending the message.
     *Perhaps a lack of space for buffering the message.
     */
    "SendFailure": undefined;
    /**
     *The message execution fails the filter.
     */
    "Filtered": undefined;
    /**
     *The message's weight could not be determined.
     */
    "UnweighableMessage": undefined;
    /**
     *The destination `Location` provided cannot be inverted.
     */
    "DestinationNotInvertible": undefined;
    /**
     *The assets to be sent are empty.
     */
    "Empty": undefined;
    /**
     *Could not re-anchor the assets to declare the fees for the destination chain.
     */
    "CannotReanchor": undefined;
    /**
     *Too many assets have been attempted for transfer.
     */
    "TooManyAssets": undefined;
    /**
     *Origin is invalid for sending.
     */
    "InvalidOrigin": undefined;
    /**
     *The version of the `Versioned` value used is not able to be interpreted.
     */
    "BadVersion": undefined;
    /**
     *The given location could not be used (e.g. because it cannot be expressed in the
     *desired version of XCM).
     */
    "BadLocation": undefined;
    /**
     *The referenced subscription could not be found.
     */
    "NoSubscription": undefined;
    /**
     *The location is invalid since it already has a subscription from us.
     */
    "AlreadySubscribed": undefined;
    /**
     *Could not check-out the assets for teleportation to the destination chain.
     */
    "CannotCheckOutTeleport": undefined;
    /**
     *The owner does not own (all) of the asset that they wish to do the operation on.
     */
    "LowBalance": undefined;
    /**
     *The asset owner has too many locks on the asset.
     */
    "TooManyLocks": undefined;
    /**
     *The given account is not an identifiable sovereign account for any location.
     */
    "AccountNotSovereign": undefined;
    /**
     *The operation required fees to be paid which the initiator could not meet.
     */
    "FeesNotMet": undefined;
    /**
     *A remote lock with the corresponding data could not be found.
     */
    "LockNotFound": undefined;
    /**
     *The unlock operation cannot succeed because there are still consumers of the lock.
     */
    "InUse": undefined;
    /**
     *Invalid non-concrete asset.
     */
    "InvalidAssetNotConcrete": undefined;
    /**
     *Invalid asset, reserve chain could not be determined for it.
     */
    "InvalidAssetUnknownReserve": undefined;
    /**
     *Invalid asset, do not support remote asset reserves with different fees reserves.
     */
    "InvalidAssetUnsupportedReserve": undefined;
    /**
     *Too many assets with different reserve locations have been attempted for transfer.
     */
    "TooManyReserves": undefined;
    /**
     *Local XCM execution incomplete.
     */
    "LocalExecutionIncomplete": undefined;
}>;
export type I9aoshicggice1 = AnonymousEnum<{
    /**
     *Setting the queue config failed since one of its values was invalid.
     */
    "BadQueueConfig": undefined;
    /**
     *The execution is already suspended.
     */
    "AlreadySuspended": undefined;
    /**
     *The execution is already resumed.
     */
    "AlreadyResumed": undefined;
}>;
export type Iek7hro9nhqg2o = AnonymousEnum<{
    "TooManyUniqueEntries": undefined;
    "OnTradeValueZero": undefined;
    "OracleNotFound": undefined;
}>;
export type I8rr9o6g84pu5j = AnonymousEnum<{
    /**
     *CurrencySet
     *[who, currency]
     */
    "CurrencySet": Anonymize<I1o37fpk9vgbri>;
    /**
     *New accepted currency added
     *[currency]
     */
    "CurrencyAdded": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Accepted currency removed
     *[currency]
     */
    "CurrencyRemoved": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Transaction fee paid in non-native currency
     *[Account, Currency, Native fee amount, Non-native fee amount, Destination account]
     */
    "FeeWithdrawn": Anonymize<I859063tfqget1>;
}>;
export type I1o37fpk9vgbri = {
    "account_id": SS58String;
    "asset_id": number;
};
export type I859063tfqget1 = {
    "account_id": SS58String;
    "asset_id": number;
    "native_fee_amount": bigint;
    "non_native_fee_amount": bigint;
    "destination_account_id": SS58String;
};
export type I6k4cq7oggqoae = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<If5f66j638r2u7>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<Ibs3esn1s24jlu>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Ibqj96eumlo3jb>;
}>;
export type If5f66j638r2u7 = {
    "index": number;
    "error": Anonymize<I34p6lklavdpe2>;
};
export type Ibs3esn1s24jlu = {
    "error": Anonymize<I34p6lklavdpe2>;
};
export type Ibqj96eumlo3jb = {
    "result": Anonymize<Id8pc7rjs8oa3c>;
};
export type Id8pc7rjs8oa3c = ResultPayload<undefined, Anonymize<I34p6lklavdpe2>>;
export type I515vptbtr4bgp = AnonymousEnum<{
    /**
     *A motion (given hash) has been proposed (by given account) with a threshold (given
     *`MemberCount`).
     */
    "Proposed": Anonymize<Ift6f10887nk72>;
    /**
     *A motion (given hash) has been voted on by given account, leaving
     *a tally (yes votes and no votes given respectively as `MemberCount`).
     */
    "Voted": Anonymize<I7qc53b1tvqjg2>;
    /**
     *A motion was approved by the required threshold.
     */
    "Approved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was not approved by the required threshold.
     */
    "Disapproved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was executed; result will be `Ok` if it returned without error.
     */
    "Executed": Anonymize<Idb0larbt92hmf>;
    /**
     *A single member did some action; result will be `Ok` if it returned without error.
     */
    "MemberExecuted": Anonymize<Idb0larbt92hmf>;
    /**
     *A proposal was closed because its threshold was reached or after its duration was up.
     */
    "Closed": Anonymize<Iak7fhrgb9jnnq>;
}>;
export type Idb0larbt92hmf = {
    "proposal_hash": FixedSizeBinary<32>;
    "result": Anonymize<Id8pc7rjs8oa3c>;
};
export type Imaosic05it19 = AnonymousEnum<{
    /**
     *A new tip suggestion has been opened.
     */
    "NewTip": Anonymize<Iep7an7g10jgpc>;
    /**
     *A tip suggestion has reached threshold and is closing.
     */
    "TipClosing": Anonymize<Iep7an7g10jgpc>;
    /**
     *A tip suggestion has been closed.
     */
    "TipClosed": Anonymize<Ierev02d74bpoa>;
    /**
     *A tip suggestion has been retracted.
     */
    "TipRetracted": Anonymize<Iep7an7g10jgpc>;
    /**
     *A tip suggestion has been slashed.
     */
    "TipSlashed": Anonymize<Ic836gl3ins837>;
}>;
export type Iep7an7g10jgpc = {
    "tip_hash": FixedSizeBinary<32>;
};
export type Ierev02d74bpoa = {
    "tip_hash": FixedSizeBinary<32>;
    "who": SS58String;
    "payout": bigint;
};
export type Ic836gl3ins837 = {
    "tip_hash": FixedSizeBinary<32>;
    "finder": SS58String;
    "deposit": bigint;
};
export type I3sc8m95314i96 = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Ibqj96eumlo3jb>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ic3vmcebni2jj7>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I3opji3hcv2fmd>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I3opji3hcv2fmd>;
}>;
export type Ic3vmcebni2jj7 = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<Ie9g2psuhuu510>;
    "disambiguation_index": number;
};
export type Ie9g2psuhuu510 = AnonymousEnum<{
    "Any": undefined;
    "CancelProxy": undefined;
    "Governance": undefined;
    "Transfer": undefined;
    "Liquidity": undefined;
    "LiquidityMining": undefined;
}>;
export type I3opji3hcv2fmd = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<Ie9g2psuhuu510>;
    "delay": number;
};
export type Inv26pvh9l97m = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I7goua51ub7klk>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I7goua51ub7klk = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Id8pc7rjs8oa3c>;
};
export type I27c883vr18l6d = AnonymousEnum<{
    /**
     *A `collection` was created.
     */
    "Created": Anonymize<I86naabrotue2j>;
    /**
     *A `collection` was force-created.
     */
    "ForceCreated": Anonymize<I2r637rurl4t61>;
    /**
     *A `collection` was destroyed.
     */
    "Destroyed": Anonymize<I88sl1jplq27bh>;
    /**
     *An `item` was issued.
     */
    "Issued": Anonymize<I846j8gk91gp4q>;
    /**
     *An `item` was transferred.
     */
    "Transferred": Anonymize<Iar6hlsh10hqst>;
    /**
     *An `item` was destroyed.
     */
    "Burned": Anonymize<I846j8gk91gp4q>;
    /**
     *Some `item` was frozen.
     */
    "Frozen": Anonymize<I92ucef7ff2o7l>;
    /**
     *Some `item` was thawed.
     */
    "Thawed": Anonymize<I92ucef7ff2o7l>;
    /**
     *Some `collection` was frozen.
     */
    "CollectionFrozen": Anonymize<I88sl1jplq27bh>;
    /**
     *Some `collection` was thawed.
     */
    "CollectionThawed": Anonymize<I88sl1jplq27bh>;
    /**
     *The owner changed.
     */
    "OwnerChanged": Anonymize<I2970lus2v0qct>;
    /**
     *The management team changed.
     */
    "TeamChanged": Anonymize<I1vsbo63n9pu69>;
    /**
     *An `item` of a `collection` has been approved by the `owner` for transfer by
     *a `delegate`.
     */
    "ApprovedTransfer": Anonymize<I89nkv9adctj3n>;
    /**
     *An approval for a `delegate` account to transfer the `item` of an item
     *`collection` was cancelled by its `owner`.
     */
    "ApprovalCancelled": Anonymize<I89nkv9adctj3n>;
    /**
     *A `collection` has had its attributes changed by the `Force` origin.
     */
    "ItemStatusChanged": Anonymize<I88sl1jplq27bh>;
    /**
     *New metadata has been set for a `collection`.
     */
    "CollectionMetadataSet": Anonymize<I9oai3q0an1tbo>;
    /**
     *Metadata has been cleared for a `collection`.
     */
    "CollectionMetadataCleared": Anonymize<I88sl1jplq27bh>;
    /**
     *New metadata has been set for an item.
     */
    "MetadataSet": Anonymize<I9e4bfe80t2int>;
    /**
     *Metadata has been cleared for an item.
     */
    "MetadataCleared": Anonymize<I92ucef7ff2o7l>;
    /**
     *Metadata has been cleared for an item.
     */
    "Redeposited": Anonymize<I5seehdocrcoau>;
    /**
     *New attribute metadata has been set for a `collection` or `item`.
     */
    "AttributeSet": Anonymize<I62ht2i39rtkaa>;
    /**
     *Attribute metadata has been cleared for a `collection` or `item`.
     */
    "AttributeCleared": Anonymize<Ichf8eu9t3dtc2>;
    /**
     *Ownership acceptance has changed for an account.
     */
    "OwnershipAcceptanceChanged": Anonymize<Ic2kg6kak0gd23>;
    /**
     *Max supply has been set for a collection.
     */
    "CollectionMaxSupplySet": Anonymize<Idj9k8sn80h3m6>;
    /**
     *The price was set for the instance.
     */
    "ItemPriceSet": Anonymize<I2odpdgf7k5003>;
    /**
     *The price for the instance was removed.
     */
    "ItemPriceRemoved": Anonymize<I92ucef7ff2o7l>;
    /**
     *An item was bought.
     */
    "ItemBought": Anonymize<Ifmob7l1au7mdj>;
}>;
export type I86naabrotue2j = {
    "collection": bigint;
    "creator": SS58String;
    "owner": SS58String;
};
export type I2r637rurl4t61 = {
    "collection": bigint;
    "owner": SS58String;
};
export type I88sl1jplq27bh = {
    "collection": bigint;
};
export type I846j8gk91gp4q = {
    "collection": bigint;
    "item": bigint;
    "owner": SS58String;
};
export type Iar6hlsh10hqst = {
    "collection": bigint;
    "item": bigint;
    "from": SS58String;
    "to": SS58String;
};
export type I92ucef7ff2o7l = {
    "collection": bigint;
    "item": bigint;
};
export type I2970lus2v0qct = {
    "collection": bigint;
    "new_owner": SS58String;
};
export type I1vsbo63n9pu69 = {
    "collection": bigint;
    "issuer": SS58String;
    "admin": SS58String;
    "freezer": SS58String;
};
export type I89nkv9adctj3n = {
    "collection": bigint;
    "item": bigint;
    "owner": SS58String;
    "delegate": SS58String;
};
export type I9oai3q0an1tbo = {
    "collection": bigint;
    "data": Binary;
    "is_frozen": boolean;
};
export type I9e4bfe80t2int = {
    "collection": bigint;
    "item": bigint;
    "data": Binary;
    "is_frozen": boolean;
};
export type I5seehdocrcoau = {
    "collection": bigint;
    "successful_items": Anonymize<Iafqnechp3omqg>;
};
export type I62ht2i39rtkaa = {
    "collection": bigint;
    "maybe_item"?: Anonymize<I35p85j063s0il>;
    "key": Binary;
    "value": Binary;
};
export type Ichf8eu9t3dtc2 = {
    "collection": bigint;
    "maybe_item"?: Anonymize<I35p85j063s0il>;
    "key": Binary;
};
export type Ic2kg6kak0gd23 = {
    "who": SS58String;
    "maybe_collection"?: Anonymize<I35p85j063s0il>;
};
export type Idj9k8sn80h3m6 = {
    "collection": bigint;
    "max_supply": number;
};
export type I2odpdgf7k5003 = {
    "collection": bigint;
    "item": bigint;
    "price": bigint;
    "whitelisted_buyer"?: Anonymize<Ihfphjolmsqq1>;
};
export type Ifmob7l1au7mdj = {
    "collection": bigint;
    "item": bigint;
    "price": bigint;
    "seller": SS58String;
    "buyer": SS58String;
};
export type I9dp7uaqj3tff4 = AnonymousEnum<{
    /**
     *Existential deposit for insufficinet asset was paid.
     *`SufficiencyCheck` triggers this event.
     */
    "ExistentialDepositPaid": Anonymize<I6cn8fgvhihc8u>;
    /**
     *Asset was registered.
     */
    "Registered": Anonymize<I5spr699klbpc7>;
    /**
     *Asset was updated.
     */
    "Updated": Anonymize<I5spr699klbpc7>;
    /**
     *Native location set for an asset.
     */
    "LocationSet": Anonymize<Ir72g75rutn0i>;
    /**
     *Asset was banned.
     */
    "AssetBanned": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Asset's ban was removed.
     */
    "AssetUnbanned": Anonymize<Ia5le7udkgbaq9>;
}>;
export type I6cn8fgvhihc8u = {
    "who": SS58String;
    "fee_asset": number;
    "amount": bigint;
};
export type I5spr699klbpc7 = {
    "asset_id": number;
    "asset_name"?: Anonymize<Iabpgqcjikia83>;
    "asset_type": Anonymize<I45f5qb3gfdtr3>;
    "existential_deposit": bigint;
    "xcm_rate_limit"?: Anonymize<I35p85j063s0il>;
    "symbol"?: Anonymize<Iabpgqcjikia83>;
    "decimals"?: Anonymize<I4arjljr6dpflb>;
    "is_sufficient": boolean;
};
export type I45f5qb3gfdtr3 = AnonymousEnum<{
    "Token": undefined;
    "XYK": undefined;
    "StableSwap": undefined;
    "Bond": undefined;
    "External": undefined;
}>;
export type Ir72g75rutn0i = {
    "asset_id": number;
    "location": Anonymize<I4c0s5cioidn76>;
};
export type I8cen1qssvc0qs = AnonymousEnum<{
    "Claim": Anonymize<I7i2rquf9o1sc4>;
}>;
export type I3ktde60bb7807 = AnonymousEnum<{
    /**
     *Collator was rewarded.
     */
    "CollatorRewarded": Anonymize<I32ndibr4v59gl>;
}>;
export type I32ndibr4v59gl = {
    "who": SS58String;
    "amount": bigint;
    "currency": number;
};
export type I7lkql4318bauj = AnonymousEnum<{
    /**
     *An asset was added to Omnipool
     */
    "TokenAdded": Anonymize<Ichvhj93no2r9s>;
    /**
     *An asset was removed from Omnipool
     */
    "TokenRemoved": Anonymize<Ibo4guh1r2d417>;
    /**
     *Liquidity of an asset was added to Omnipool.
     */
    "LiquidityAdded": Anonymize<I5bdik3e9dtr9m>;
    /**
     *Liquidity of an asset was removed from Omnipool.
     */
    "LiquidityRemoved": Anonymize<Idml4kfacbec4q>;
    /**
     *PRotocol Liquidity was removed from Omnipool.
     */
    "ProtocolLiquidityRemoved": Anonymize<I5po34152rrdd1>;
    /**
     *Sell trade executed.
     */
    "SellExecuted": Anonymize<I8gu0uupiacpfc>;
    /**
     *Buy trade executed.
     */
    "BuyExecuted": Anonymize<I8gu0uupiacpfc>;
    /**
     *LP Position was created and NFT instance minted.
     */
    "PositionCreated": Anonymize<I3qaapujidulnv>;
    /**
     *LP Position was destroyed and NFT instance burned.
     */
    "PositionDestroyed": Anonymize<I5u2c8nrbcec0n>;
    /**
     *LP Position was updated.
     */
    "PositionUpdated": Anonymize<I3qaapujidulnv>;
    /**
     *Asset's tradable state has been updated.
     */
    "TradableStateUpdated": Anonymize<Iefviakco48cs2>;
    /**
     *Amount has been refunded for asset which has not been accepted to add to omnipool.
     */
    "AssetRefunded": Anonymize<Iakb7idgif10m8>;
    /**
     *Asset's weight cap has been updated.
     */
    "AssetWeightCapUpdated": Anonymize<Id7aqsj1u6b2r2>;
}>;
export type Ichvhj93no2r9s = {
    "asset_id": number;
    "initial_amount": bigint;
    "initial_price": bigint;
};
export type Ibo4guh1r2d417 = {
    "asset_id": number;
    "amount": bigint;
    "hub_withdrawn": bigint;
};
export type I5bdik3e9dtr9m = {
    "who": SS58String;
    "asset_id": number;
    "amount": bigint;
    "position_id": bigint;
};
export type Idml4kfacbec4q = {
    "who": SS58String;
    "position_id": bigint;
    "asset_id": number;
    "shares_removed": bigint;
    "fee": bigint;
};
export type I5po34152rrdd1 = {
    "who": SS58String;
    "asset_id": number;
    "amount": bigint;
    "hub_amount": bigint;
    "shares_removed": bigint;
};
export type I8gu0uupiacpfc = {
    "who": SS58String;
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "amount_out": bigint;
    "hub_amount_in": bigint;
    "hub_amount_out": bigint;
    "asset_fee_amount": bigint;
    "protocol_fee_amount": bigint;
};
export type I3qaapujidulnv = {
    "position_id": bigint;
    "owner": SS58String;
    "asset": number;
    "amount": bigint;
    "shares": bigint;
    "price": bigint;
};
export type I5u2c8nrbcec0n = {
    "position_id": bigint;
    "owner": SS58String;
};
export type Iefviakco48cs2 = {
    "asset_id": number;
    "state": number;
};
export type Iakb7idgif10m8 = {
    "asset_id": number;
    "amount": bigint;
    "recipient": SS58String;
};
export type Id7aqsj1u6b2r2 = {
    "asset_id": number;
    "cap": number;
};
export type I1e1tlbqeorb14 = AnonymousEnum<{
    /**
     *Paused transaction
     */
    "TransactionPaused": Anonymize<I193fovq1blcqu>;
    /**
     *Unpaused transaction
     */
    "TransactionUnpaused": Anonymize<I193fovq1blcqu>;
}>;
export type I193fovq1blcqu = {
    "pallet_name_bytes": Binary;
    "function_name_bytes": Binary;
};
export type Ick156bqlvrfqh = AnonymousEnum<{
    /**
     *Account dusted.
     */
    "Dusted": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Account added to non-dustable list.
     */
    "Added": Anonymize<I4cbvqmqadhrea>;
    /**
     *Account removed from non-dustable list.
     */
    "Removed": Anonymize<I4cbvqmqadhrea>;
}>;
export type Ibc0cs73olrilv = AnonymousEnum<{
    /**
     *Global farm accumulated reward per share was updated.
     */
    "GlobalFarmAccRPZUpdated": Anonymize<I4qeb32vu4p1o2>;
    /**
     *Yield farm accumulated reward per valued share was updated.
     */
    "YieldFarmAccRPVSUpdated": Anonymize<Icatb69nkfsv2d>;
    /**
     *Global farm has no more rewards to distribute in the moment.
     */
    "AllRewardsDistributed": Anonymize<I9q8qmop6bko5m>;
}>;
export type I4qeb32vu4p1o2 = {
    "global_farm_id": number;
    "accumulated_rpz": bigint;
    "total_shares_z": bigint;
};
export type Icatb69nkfsv2d = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "accumulated_rpvs": bigint;
    "total_valued_shares": bigint;
};
export type I9q8qmop6bko5m = {
    "global_farm_id": number;
};
export type Ibd5re511t83ta = AnonymousEnum<{
    /**
     *New global farm was created.
     */
    "GlobalFarmCreated": Anonymize<Iao3tfuiovep78>;
    /**
     *Global farm was updated
     */
    "GlobalFarmUpdated": Anonymize<I1cq0joe6ba7us>;
    /**
     *Global farm was terminated.
     */
    "GlobalFarmTerminated": Anonymize<I8p8774nu1gec7>;
    /**
     *New yield farm was added to the farm.
     */
    "YieldFarmCreated": Anonymize<I58kb78e8933i0>;
    /**
     *Yield farm multiplier was updated.
     */
    "YieldFarmUpdated": Anonymize<Idhf8n2m782jc6>;
    /**
     *Yield farm for `asset_id` was stopped.
     */
    "YieldFarmStopped": Anonymize<I8qbcd8kjt9b35>;
    /**
     *Yield farm for `asset_id` was resumed.
     */
    "YieldFarmResumed": Anonymize<Idhf8n2m782jc6>;
    /**
     *Yield farm was terminated from the global farm.
     */
    "YieldFarmTerminated": Anonymize<I8qbcd8kjt9b35>;
    /**
     *New LP shares(LP position) were deposited.
     */
    "SharesDeposited": Anonymize<I9fddbmtajbhgk>;
    /**
     *Already locked LP shares were redeposited to another yield farm.
     */
    "SharesRedeposited": Anonymize<I9fddbmtajbhgk>;
    /**
     *Rewards were claimed.
     */
    "RewardClaimed": Anonymize<I16oglmrf6q8h2>;
    /**
     *LP shares were withdrawn.
     */
    "SharesWithdrawn": Anonymize<I56vurdc4pd324>;
    /**
     *All LP shares were unlocked and NFT representing deposit was destroyed.
     */
    "DepositDestroyed": Anonymize<Iv3iro9hpdvcu>;
}>;
export type Iao3tfuiovep78 = {
    "id": number;
    "owner": SS58String;
    "total_rewards": bigint;
    "reward_currency": number;
    "yield_per_period": bigint;
    "planned_yielding_periods": number;
    "blocks_per_period": number;
    "max_reward_per_period": bigint;
    "min_deposit": bigint;
    "lrna_price_adjustment": bigint;
};
export type I1cq0joe6ba7us = {
    "id": number;
    "planned_yielding_periods": number;
    "yield_per_period": bigint;
    "min_deposit": bigint;
};
export type I8p8774nu1gec7 = {
    "global_farm_id": number;
    "who": SS58String;
    "reward_currency": number;
    "undistributed_rewards": bigint;
};
export type I58kb78e8933i0 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_id": number;
    "multiplier": bigint;
    "loyalty_curve"?: Anonymize<Ieot4d4ofvtguv>;
};
export type Ieot4d4ofvtguv = (Anonymize<I8mn8vdj1tn1ml>) | undefined;
export type I8mn8vdj1tn1ml = {
    "initial_reward_percentage": bigint;
    "scale_coef": number;
};
export type Idhf8n2m782jc6 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_id": number;
    "who": SS58String;
    "multiplier": bigint;
};
export type I8qbcd8kjt9b35 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_id": number;
    "who": SS58String;
};
export type I9fddbmtajbhgk = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "deposit_id": bigint;
    "asset_id": number;
    "who": SS58String;
    "shares_amount": bigint;
    "position_id": bigint;
};
export type I16oglmrf6q8h2 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "who": SS58String;
    "claimed": bigint;
    "reward_currency": number;
    "deposit_id": bigint;
};
export type I56vurdc4pd324 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "who": SS58String;
    "amount": bigint;
    "deposit_id": bigint;
};
export type Iv3iro9hpdvcu = {
    "who": SS58String;
    "deposit_id": bigint;
};
export type I4e560fvgcsh15 = AnonymousEnum<{
    /**
     *An Order has been cancelled
     */
    "Cancelled": Anonymize<Ibq6b0nsk23kj8>;
    /**
     *An Order has been completely filled
     */
    "Filled": Anonymize<I725512ll00rul>;
    /**
     *An Order has been partially filled
     */
    "PartiallyFilled": Anonymize<I725512ll00rul>;
    /**
     *An Order has been placed
     */
    "Placed": Anonymize<Ibnohbnq46n24i>;
}>;
export type Ibq6b0nsk23kj8 = {
    "order_id": number;
};
export type I725512ll00rul = {
    "order_id": number;
    "who": SS58String;
    "amount_in": bigint;
    "amount_out": bigint;
    "fee": bigint;
};
export type Ibnohbnq46n24i = {
    "order_id": number;
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "amount_out": bigint;
    "partially_fillable": boolean;
};
export type Ichskhtdtbf0vo = AnonymousEnum<{
    /**
     *Trade volume limit of an asset was changed.
     */
    "TradeVolumeLimitChanged": Anonymize<I2i1tilmsb1rl1>;
    /**
     *Add liquidity limit of an asset was changed.
     */
    "AddLiquidityLimitChanged": Anonymize<I4l0u1h71fhj81>;
    /**
     *Remove liquidity limit of an asset was changed.
     */
    "RemoveLiquidityLimitChanged": Anonymize<I4l0u1h71fhj81>;
}>;
export type I2i1tilmsb1rl1 = {
    "asset_id": number;
    "trade_volume_limit": Anonymize<I9jd27rnpm8ttv>;
};
export type I4l0u1h71fhj81 = {
    "asset_id": number;
    "liquidity_limit"?: Anonymize<Iep7au1720bm0e>;
};
export type I2f70f2g8ddbl5 = AnonymousEnum<{
    /**
     *The route with trades has been successfully executed
     */
    "Executed": Anonymize<Iao268t9rbrp83>;
    /**
     *The route with trades has been successfully executed
     */
    "RouteUpdated": Anonymize<I11glevchscfbg>;
}>;
export type Iao268t9rbrp83 = {
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "amount_out": bigint;
};
export type I11glevchscfbg = {
    "asset_ids": Anonymize<Icgljjb6j82uhn>;
};
export type I578f2b006bplq = AnonymousEnum<{
    /**
     *New staking position was created and NFT was minted.
     */
    "PositionCreated": Anonymize<Ifrsdu7763lo3e>;
    /**
     *Staked amount for existing position was increased.
     */
    "StakeAdded": Anonymize<I1rcm9o2k31p0u>;
    /**
     *Rewards were claimed.
     */
    "RewardsClaimed": Anonymize<I90op6i3kabg2t>;
    /**
     *Staked amount was withdrawn and NFT was burned.
     */
    "Unstaked": Anonymize<If7ps0a75qku2k>;
    /**
     *Staking was initialized.
     */
    "StakingInitialized": Anonymize<I4qcsbrcg45e5p>;
    /**
     *Staking's `accumulated_reward_per_stake` was updated.
     */
    "AccumulatedRpsUpdated": Anonymize<I2gupahud9i8tv>;
}>;
export type Ifrsdu7763lo3e = {
    "who": SS58String;
    "position_id": bigint;
    "stake": bigint;
};
export type I1rcm9o2k31p0u = {
    "who": SS58String;
    "position_id": bigint;
    "stake": bigint;
    "total_stake": bigint;
    "locked_rewards": bigint;
    "slashed_points": bigint;
    "payable_percentage": bigint;
};
export type I90op6i3kabg2t = {
    "who": SS58String;
    "position_id": bigint;
    "paid_rewards": bigint;
    "unlocked_rewards": bigint;
    "slashed_points": bigint;
    "slashed_unpaid_rewards": bigint;
    "payable_percentage": bigint;
};
export type If7ps0a75qku2k = {
    "who": SS58String;
    "position_id": bigint;
    "unlocked_stake": bigint;
};
export type I4qcsbrcg45e5p = {
    "non_dustable_balance": bigint;
};
export type I2gupahud9i8tv = {
    "accumulated_rps": bigint;
    "total_stake": bigint;
};
export type Ibsv65cl1ut4b = AnonymousEnum<{
    /**
     *A pool was created.
     */
    "PoolCreated": Anonymize<Idmv46n4bkamls>;
    /**
     *Pool fee has been updated.
     */
    "FeeUpdated": Anonymize<Ics8sn0t3vlpat>;
    /**
     *Liquidity of an asset was added to a pool.
     */
    "LiquidityAdded": Anonymize<I88qo502j1hm6r>;
    /**
     *Liquidity removed.
     */
    "LiquidityRemoved": Anonymize<I44sqbdseede38>;
    /**
     *Sell trade executed. Trade fee paid in asset leaving the pool (already subtracted from amount_out).
     */
    "SellExecuted": Anonymize<I203slt75ll6b5>;
    /**
     *Buy trade executed. Trade fee paid in asset entering the pool (already included in amount_in).
     */
    "BuyExecuted": Anonymize<I203slt75ll6b5>;
    /**
     *Asset's tradable state has been updated.
     */
    "TradableStateUpdated": Anonymize<Iest0fomljvrb6>;
    /**
     *AAmplification of a pool has been scheduled to change.
     */
    "AmplificationChanging": Anonymize<I9buamva6m987d>;
}>;
export type Idmv46n4bkamls = {
    "pool_id": number;
    "assets": Anonymize<Icgljjb6j82uhn>;
    "amplification": number;
    "fee": number;
};
export type Ics8sn0t3vlpat = {
    "pool_id": number;
    "fee": number;
};
export type I88qo502j1hm6r = {
    "pool_id": number;
    "who": SS58String;
    "shares": bigint;
    "assets": Anonymize<Id7i7r9a29m8o2>;
};
export type Id7i7r9a29m8o2 = Array<Anonymize<Id2vo4qi5agnp0>>;
export type Id2vo4qi5agnp0 = {
    "asset_id": number;
    "amount": bigint;
};
export type I44sqbdseede38 = {
    "pool_id": number;
    "who": SS58String;
    "shares": bigint;
    "amounts": Anonymize<Id7i7r9a29m8o2>;
    "fee": bigint;
};
export type I203slt75ll6b5 = {
    "who": SS58String;
    "pool_id": number;
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "amount_out": bigint;
    "fee": bigint;
};
export type Iest0fomljvrb6 = {
    "pool_id": number;
    "asset_id": number;
    "state": number;
};
export type I9buamva6m987d = {
    "pool_id": number;
    "current_amplification": number;
    "final_amplification": number;
    "start_block": number;
    "end_block": number;
};
export type I3ans31bk1md2j = AnonymousEnum<{
    /**
     *A bond asset was registered
     */
    "TokenCreated": Anonymize<I15i908ukdv01j>;
    /**
     *New bond were issued
     */
    "Issued": Anonymize<I3md9r9ud9jcmi>;
    /**
     *Bonds were redeemed
     */
    "Redeemed": Anonymize<I4rlrhubptb25s>;
}>;
export type I15i908ukdv01j = {
    "issuer": SS58String;
    "asset_id": number;
    "bond_id": number;
    "maturity": bigint;
};
export type I3md9r9ud9jcmi = {
    "issuer": SS58String;
    "bond_id": number;
    "amount": bigint;
    "fee": bigint;
};
export type I4rlrhubptb25s = {
    "who": SS58String;
    "bond_id": number;
    "amount": bigint;
};
export type I7t4kltkut18qv = AnonymousEnum<{
    /**
     *A trade has been executed
     */
    "Executed": Anonymize<Ibb0j2hs2i32f5>;
}>;
export type Ibb0j2hs2i32f5 = {
    "asset_id": number;
    "profit": bigint;
};
export type Iafgde8gm8mhvt = AnonymousEnum<{
    /**
     *Pool was created by the `CreatePool` origin.
     */
    "PoolCreated": Anonymize<Iae6luacdfosbm>;
    /**
     *Pool data were updated.
     */
    "PoolUpdated": Anonymize<Iae6luacdfosbm>;
    /**
     *New liquidity was provided to the pool.
     */
    "LiquidityAdded": Anonymize<Idvrgp2jjkjaee>;
    /**
     *Liquidity was removed from the pool and the pool was destroyed.
     */
    "LiquidityRemoved": Anonymize<Idvrgp2jjkjaee>;
    /**
     *Sale executed.
     */
    "SellExecuted": Anonymize<I6q2a2o24kbh1n>;
    /**
     *Purchase executed.
     */
    "BuyExecuted": Anonymize<Iflfus32kckdgg>;
}>;
export type Iae6luacdfosbm = {
    "pool": SS58String;
    "data": Anonymize<Iesq88051ch8ht>;
};
export type Iesq88051ch8ht = {
    "owner": SS58String;
    "start"?: Anonymize<I4arjljr6dpflb>;
    "end"?: Anonymize<I4arjljr6dpflb>;
    "assets": Anonymize<I9jd27rnpm8ttv>;
    "initial_weight": number;
    "final_weight": number;
    "weight_curve": Anonymize<I9ismjef26dgjt>;
    "fee": Anonymize<I9jd27rnpm8ttv>;
    "fee_collector": SS58String;
    "repay_target": bigint;
};
export type I9ismjef26dgjt = AnonymousEnum<{
    "Linear": undefined;
}>;
export type Idvrgp2jjkjaee = {
    "who": SS58String;
    "asset_a": number;
    "asset_b": number;
    "amount_a": bigint;
    "amount_b": bigint;
};
export type I6q2a2o24kbh1n = {
    "who": SS58String;
    "asset_in": number;
    "asset_out": number;
    "amount": bigint;
    "sale_price": bigint;
    "fee_asset": number;
    "fee_amount": bigint;
};
export type Iflfus32kckdgg = {
    "who": SS58String;
    "asset_out": number;
    "asset_in": number;
    "amount": bigint;
    "buy_price": bigint;
    "fee_asset": number;
    "fee_amount": bigint;
};
export type Ii9d7rb1uqb69 = AnonymousEnum<{
    /**
     *New liquidity was provided to the pool.
     */
    "LiquidityAdded": Anonymize<Idvrgp2jjkjaee>;
    /**
     *Liquidity was removed from the pool.
     */
    "LiquidityRemoved": Anonymize<I7e9lbuqrul79d>;
    /**
     *Pool was created.
     */
    "PoolCreated": Anonymize<Idpc6o3gv6oduv>;
    /**
     *Pool was destroyed.
     */
    "PoolDestroyed": Anonymize<I789ltv1nd8rlg>;
    /**
     *Asset sale executed.
     */
    "SellExecuted": Anonymize<I5nm6uebbrcvd2>;
    /**
     *Asset purchase executed.
     */
    "BuyExecuted": Anonymize<I1966f4idd9els>;
}>;
export type I7e9lbuqrul79d = {
    "who": SS58String;
    "asset_a": number;
    "asset_b": number;
    "shares": bigint;
};
export type Idpc6o3gv6oduv = {
    "who": SS58String;
    "asset_a": number;
    "asset_b": number;
    "initial_shares_amount": bigint;
    "share_token": number;
    "pool": SS58String;
};
export type I789ltv1nd8rlg = {
    "who": SS58String;
    "asset_a": number;
    "asset_b": number;
    "share_token": number;
    "pool": SS58String;
};
export type I5nm6uebbrcvd2 = {
    "who": SS58String;
    "asset_in": number;
    "asset_out": number;
    "amount": bigint;
    "sale_price": bigint;
    "fee_asset": number;
    "fee_amount": bigint;
    "pool": SS58String;
};
export type I1966f4idd9els = {
    "who": SS58String;
    "asset_out": number;
    "asset_in": number;
    "amount": bigint;
    "buy_price": bigint;
    "fee_asset": number;
    "fee_amount": bigint;
    "pool": SS58String;
};
export type Idpbcufjvb4ib7 = AnonymousEnum<{
    /**
     *Referral code has been registered.
     */
    "CodeRegistered": Anonymize<I8hof8vbjel5j0>;
    /**
     *Referral code has been linked to an account.
     */
    "CodeLinked": Anonymize<Ic20as3skakdjb>;
    /**
     *Asset has been converted to RewardAsset.
     */
    "Converted": Anonymize<Ieg2h8ei7d5hi>;
    /**
     *Rewards claimed.
     */
    "Claimed": Anonymize<I8c5lgkcpg07sj>;
    /**
     *New asset rewards has been set.
     */
    "AssetRewardsUpdated": Anonymize<Ionfhf9va2t31>;
    /**
     *Referrer reached new level.
     */
    "LevelUp": Anonymize<Ieas3thfe5cojl>;
}>;
export type I8hof8vbjel5j0 = {
    "code": Binary;
    "account": SS58String;
};
export type Ic20as3skakdjb = {
    "account": SS58String;
    "code": Binary;
    "referral_account": SS58String;
};
export type Ieg2h8ei7d5hi = {
    "from": Anonymize<Id2vo4qi5agnp0>;
    "to": Anonymize<Id2vo4qi5agnp0>;
};
export type I8c5lgkcpg07sj = {
    "who": SS58String;
    "referrer_rewards": bigint;
    "trade_rewards": bigint;
};
export type Ionfhf9va2t31 = {
    "asset_id": number;
    "level": Anonymize<I4k5pg22d1rdhq>;
    "rewards": Anonymize<I4qc61lpfqml75>;
};
export type I4k5pg22d1rdhq = AnonymousEnum<{
    "None": undefined;
    "Tier0": undefined;
    "Tier1": undefined;
    "Tier2": undefined;
    "Tier3": undefined;
    "Tier4": undefined;
}>;
export type I4qc61lpfqml75 = {
    "referrer": number;
    "trader": number;
    "external": number;
};
export type Ieas3thfe5cojl = {
    "who": SS58String;
    "level": Anonymize<I4k5pg22d1rdhq>;
};
export type I6h8581jnodhqc = AnonymousEnum<{
    /**
     *An account was created with some free balance.
     */
    "Endowed": Anonymize<I24s4g6gkj5oec>;
    /**
     *An account was removed whose balance was non-zero but below
     *ExistentialDeposit, resulting in an outright loss.
     */
    "DustLost": Anonymize<I24s4g6gkj5oec>;
    /**
     *Transfer succeeded.
     */
    "Transfer": Anonymize<I82vqlr4shhaso>;
    /**
     *Some balance was reserved (moved from free to reserved).
     */
    "Reserved": Anonymize<I24s4g6gkj5oec>;
    /**
     *Some balance was unreserved (moved from reserved to free).
     */
    "Unreserved": Anonymize<I24s4g6gkj5oec>;
    /**
     *Some reserved balance was repatriated (moved from reserved to
     *another account).
     */
    "ReserveRepatriated": Anonymize<I2age4ibb0qdmq>;
    /**
     *A balance was set by root.
     */
    "BalanceSet": Anonymize<I4do2q74i35m>;
    /**
     *The total issuance of an currency has been set
     */
    "TotalIssuanceSet": Anonymize<Iehf2srrsvlrt4>;
    /**
     *Some balances were withdrawn (e.g. pay for transaction fee)
     */
    "Withdrawn": Anonymize<I24s4g6gkj5oec>;
    /**
     *Some balances were slashed (e.g. due to mis-behavior)
     */
    "Slashed": Anonymize<I1a3321bv4rsn2>;
    /**
     *Deposited some balance into an account
     */
    "Deposited": Anonymize<I24s4g6gkj5oec>;
    /**
     *Some funds are locked
     */
    "LockSet": Anonymize<Ibmagsilt697o6>;
    /**
     *Some locked funds were unlocked
     */
    "LockRemoved": Anonymize<I73g6utvpcmklb>;
    /**
     *Some free balance was locked.
     */
    "Locked": Anonymize<I24s4g6gkj5oec>;
    /**
     *Some locked balance was freed.
     */
    "Unlocked": Anonymize<I24s4g6gkj5oec>;
    "Issued": Anonymize<Iehf2srrsvlrt4>;
    "Rescinded": Anonymize<Iehf2srrsvlrt4>;
}>;
export type I24s4g6gkj5oec = {
    "currency_id": number;
    "who": SS58String;
    "amount": bigint;
};
export type I82vqlr4shhaso = {
    "currency_id": number;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
};
export type I2age4ibb0qdmq = {
    "currency_id": number;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
    "status": BalanceStatus;
};
export type I4do2q74i35m = {
    "currency_id": number;
    "who": SS58String;
    "free": bigint;
    "reserved": bigint;
};
export type Iehf2srrsvlrt4 = {
    "currency_id": number;
    "amount": bigint;
};
export type I1a3321bv4rsn2 = {
    "currency_id": number;
    "who": SS58String;
    "free_amount": bigint;
    "reserved_amount": bigint;
};
export type Ibmagsilt697o6 = {
    "lock_id": FixedSizeBinary<8>;
    "currency_id": number;
    "who": SS58String;
    "amount": bigint;
};
export type I73g6utvpcmklb = {
    "lock_id": FixedSizeBinary<8>;
    "currency_id": number;
    "who": SS58String;
};
export type I6qgq0m7o225jg = AnonymousEnum<{
    /**
     *Currency transfer success.
     */
    "Transferred": Anonymize<I82vqlr4shhaso>;
    /**
     *Update balance success.
     */
    "BalanceUpdated": Anonymize<I24s4g6gkj5oec>;
    /**
     *Deposit success.
     */
    "Deposited": Anonymize<I24s4g6gkj5oec>;
    /**
     *Withdraw success.
     */
    "Withdrawn": Anonymize<I24s4g6gkj5oec>;
}>;
export type I3jgv45gfqgi7c = AnonymousEnum<{
    /**
     *Added new vesting schedule.
     */
    "VestingScheduleAdded": Anonymize<I4uo49pmivhb33>;
    /**
     *Claimed vesting.
     */
    "Claimed": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Updated vesting schedules.
     */
    "VestingSchedulesUpdated": Anonymize<I4cbvqmqadhrea>;
}>;
export type I4uo49pmivhb33 = {
    "from": SS58String;
    "to": SS58String;
    "vesting_schedule": Anonymize<I6k9mlgqa572np>;
};
export type I6k9mlgqa572np = {
    "start": number;
    "period": number;
    "period_count": number;
    "per_period": bigint;
};
export type I479nm08b6ujjd = AnonymousEnum<{
    /**
     *New global farm was created.
     */
    "GlobalFarmCreated": Anonymize<I4o7otrppfgqfl>;
    /**
     *Global farm's `price_adjustment` was updated.
     */
    "GlobalFarmUpdated": Anonymize<I4h1hamhsvt02v>;
    /**
     *New yield farm was added into the farm.
     */
    "YieldFarmCreated": Anonymize<Ibil4nv30gc4gi>;
    /**
     *Global farm was terminated.
     */
    "GlobalFarmTerminated": Anonymize<I8p8774nu1gec7>;
    /**
     *New LP tokens was deposited.
     */
    "SharesDeposited": Anonymize<I2k8785n6tr14a>;
    /**
     *LP token was redeposited for a new yield farm entry
     */
    "SharesRedeposited": Anonymize<I2k8785n6tr14a>;
    /**
     *Rewards was claimed.
     */
    "RewardClaimed": Anonymize<I16oglmrf6q8h2>;
    /**
     *LP tokens was withdrawn.
     */
    "SharesWithdrawn": Anonymize<I2k8785n6tr14a>;
    /**
     *Yield farm for asset pair was stopped.
     */
    "YieldFarmStopped": Anonymize<I1mm5epgr01rv3>;
    /**
     *Yield farm for asset pair was resumed.
     */
    "YieldFarmResumed": Anonymize<Ia4163nej70ub3>;
    /**
     *Yield farm was terminated from global farm.
     */
    "YieldFarmTerminated": Anonymize<I1mm5epgr01rv3>;
    /**
     *Yield farm multiplier was updated.
     */
    "YieldFarmUpdated": Anonymize<Ia4163nej70ub3>;
    /**
     *NFT representing deposit has been destroyed
     */
    "DepositDestroyed": Anonymize<Iv3iro9hpdvcu>;
}>;
export type I4o7otrppfgqfl = {
    "id": number;
    "owner": SS58String;
    "total_rewards": bigint;
    "reward_currency": number;
    "yield_per_period": bigint;
    "planned_yielding_periods": number;
    "blocks_per_period": number;
    "incentivized_asset": number;
    "max_reward_per_period": bigint;
    "min_deposit": bigint;
    "price_adjustment": bigint;
};
export type I4h1hamhsvt02v = {
    "id": number;
    "price_adjustment": bigint;
};
export type Ibil4nv30gc4gi = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "multiplier": bigint;
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "loyalty_curve"?: Anonymize<Ieot4d4ofvtguv>;
};
export type I4kv0johj9i346 = {
    "asset_in": number;
    "asset_out": number;
};
export type I2k8785n6tr14a = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "who": SS58String;
    "amount": bigint;
    "lp_token": number;
    "deposit_id": bigint;
};
export type I1mm5epgr01rv3 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "who": SS58String;
    "asset_pair": Anonymize<I4kv0johj9i346>;
};
export type Ia4163nej70ub3 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "who": SS58String;
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "multiplier": bigint;
};
export type I3cdbmcrrt95qk = AnonymousEnum<{
    /**
     *Current block numbers
     *[ Parachain block number, Relaychain Block number ]
     */
    "CurrentBlockNumbers": Anonymize<Iec641q1s1ifm2>;
}>;
export type Iec641q1s1ifm2 = {
    "parachain_block_number": number;
    "relaychain_block_number": number;
};
export type I2el5s24ilguka = AnonymousEnum<{
    /**
     *The DCA execution is started
     */
    "ExecutionStarted": Anonymize<I4rrqp6atse8pe>;
    /**
     *The DCA is scheduled for next execution
     */
    "Scheduled": Anonymize<I17mdck5880djt>;
    /**
     *The DCA is planned for blocknumber
     */
    "ExecutionPlanned": Anonymize<I140nraqvlukpk>;
    /**
     *The DCA trade is successfully executed
     */
    "TradeExecuted": Anonymize<Irs8utdvl0ftp>;
    /**
     *The DCA trade execution is failed
     */
    "TradeFailed": Anonymize<Iened6fgpg1iel>;
    /**
     *The DCA is terminated and completely removed from the chain
     */
    "Terminated": Anonymize<Iened6fgpg1iel>;
    /**
     *The DCA is completed and completely removed from the chain
     */
    "Completed": Anonymize<Iumh462jqskl8>;
    /**
     *Randomness generation failed possibly coming from missing data about relay chain
     */
    "RandomnessGenerationFailed": Anonymize<If2udmk8jhl6id>;
}>;
export type I4rrqp6atse8pe = {
    "id": number;
    "block": number;
};
export type I17mdck5880djt = {
    "id": number;
    "who": SS58String;
    "period": number;
    "total_amount": bigint;
    "order": Anonymize<I773hpv1qdisu8>;
};
export type I773hpv1qdisu8 = AnonymousEnum<{
    "Sell": Anonymize<Iet9su1uri0qgo>;
    "Buy": Anonymize<I242odhgbhik24>;
}>;
export type Iet9su1uri0qgo = {
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "min_amount_out": bigint;
    "route": Anonymize<Iesal24fi7slt9>;
};
export type Iesal24fi7slt9 = Array<Anonymize<I3ptra4kqn7hbc>>;
export type I3ptra4kqn7hbc = {
    "pool": Anonymize<I9efrv8p154h0u>;
    "asset_in": number;
    "asset_out": number;
};
export type I9efrv8p154h0u = AnonymousEnum<{
    "XYK": undefined;
    "LBP": undefined;
    "Stableswap": number;
    "Omnipool": undefined;
}>;
export type I242odhgbhik24 = {
    "asset_in": number;
    "asset_out": number;
    "amount_out": bigint;
    "max_amount_in": bigint;
    "route": Anonymize<Iesal24fi7slt9>;
};
export type I140nraqvlukpk = {
    "id": number;
    "who": SS58String;
    "block": number;
};
export type Irs8utdvl0ftp = {
    "id": number;
    "who": SS58String;
    "amount_in": bigint;
    "amount_out": bigint;
};
export type Iened6fgpg1iel = {
    "id": number;
    "who": SS58String;
    "error": Anonymize<I34p6lklavdpe2>;
};
export type Iumh462jqskl8 = {
    "id": number;
    "who": SS58String;
};
export type If2udmk8jhl6id = {
    "block": number;
    "error": Anonymize<I34p6lklavdpe2>;
};
export type Ice43qi58ihao4 = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<Id17a14lhd6e8s>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type Id17a14lhd6e8s = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<Id8pc7rjs8oa3c>;
};
export type Idrvf3ouahq8la = AnonymousEnum<{
    /**
     *Message discarded due to an error in the `MessageProcessor` (usually a format error).
     */
    "ProcessingFailed": Anonymize<I3vs6qhrit34fa>;
    /**
     *Message is processed.
     */
    "Processed": Anonymize<Ia3uu7lqcc1q1i>;
    /**
     *Message placed in overweight queue.
     */
    "OverweightEnqueued": Anonymize<I7crucfnonitkn>;
    /**
     *This page was reaped.
     */
    "PageReaped": Anonymize<I7tmrp94r9sq4n>;
}>;
export type I3vs6qhrit34fa = {
    /**
     *The `blake2_256` hash of the message.
     */
    "id": FixedSizeBinary<32>;
    /**
     *The queue of the message.
     */
    "origin": Anonymize<Iejeo53sea6n4q>;
    /**
     *The error that occurred.
     *
     *This error is pretty opaque. More fine-grained errors need to be emitted as events
     *by the `MessageProcessor`.
     */
    "error": ProcessMessageError;
};
export type ProcessMessageError = Enum<{
    "BadFormat": undefined;
    "Corrupt": undefined;
    "Unsupported": undefined;
    "Overweight": Anonymize<I4q39t5hn830vp>;
    "Yield": undefined;
}>;
export declare const ProcessMessageError: GetEnum<ProcessMessageError>;
export type Iehrcm8i7udvpg = AnonymousEnum<{
    /**
     *Oracle was added to the whitelist.
     */
    "AddedToWhitelist": Anonymize<Iabgdocrka40v9>;
    /**
     *Oracle was removed from the whitelist.
     */
    "RemovedFromWhitelist": Anonymize<Iabgdocrka40v9>;
}>;
export type Iabgdocrka40v9 = {
    "source": FixedSizeBinary<8>;
    "assets": Anonymize<I9jd27rnpm8ttv>;
};
export type I9l5thhgutrdl0 = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Balances": Anonymize<Ibji81a0gss9ru>;
    "MultiTransactionPayment": Anonymize<I76nh75sf57g68>;
    "Treasury": Anonymize<I6f06951njrcra>;
    "Utility": Anonymize<I5e34sajddrp9j>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "Identity": Anonymize<I27rv6v6kueehs>;
    "Democracy": Anonymize<I6u9fdc1fne8nd>;
    "Elections": Anonymize<Ifj3hlfbcdobl3>;
    "Council": Anonymize<Ifso8m0ehe2tqd>;
    "TechnicalCommittee": Anonymize<Ifso8m0ehe2tqd>;
    "Tips": Anonymize<Ibcos58g5647s0>;
    "Proxy": Anonymize<I59kvn6o5eve18>;
    "Multisig": Anonymize<I5s8tf42ekpriv>;
    "Uniques": Anonymize<I1aih3rf2i8nc0>;
    "StateTrieMigration": Anonymize<I39l72gdmkk30t>;
    "AssetRegistry": Anonymize<I16a06jj16ane9>;
    "Claims": Anonymize<I5queflebive1d>;
    "GenesisHistory": undefined;
    "Omnipool": Anonymize<I72obq5poq736n>;
    "TransactionPause": Anonymize<I851i9piqh9qel>;
    "Duster": Anonymize<I6kr4saq8f2pd8>;
    "OmnipoolWarehouseLM": undefined;
    "OmnipoolLiquidityMining": Anonymize<Iumi8j0gas3vj>;
    "OTC": Anonymize<I5ophbk33alrde>;
    "CircuitBreaker": Anonymize<Ihq0rdic3bdqe>;
    "Router": Anonymize<Ifia7upsofqkg9>;
    "DynamicFees": undefined;
    "Staking": Anonymize<Iaikdgvqtjn8sd>;
    "Stableswap": Anonymize<Ib3l6r06d7hrar>;
    "Bonds": Anonymize<It0rq8pffd1r>;
    "OtcSettlements": Anonymize<I75o581gpaivou>;
    "LBP": Anonymize<I4ogitqakc83nm>;
    "XYK": Anonymize<I1bhk4tkod8r9d>;
    "Referrals": Anonymize<Ibe97e14cmm4e9>;
    "Tokens": Anonymize<I6a7o6bu2n2amk>;
    "Currencies": Anonymize<Id0m4jim3jch3f>;
    "Vesting": Anonymize<Ieps3dhtu498hk>;
    "EVM": Anonymize<I8s4v176jtv80g>;
    "Ethereum": Anonymize<Icu3fce0sripq4>;
    "EVMAccounts": Anonymize<I1l1phpc090qm9>;
    "XYKLiquidityMining": Anonymize<I2pfrhr77tkhgi>;
    "XYKWarehouseLM": undefined;
    "RelayChainInfo": undefined;
    "DCA": Anonymize<Io4g1ahr3evjh>;
    "Scheduler": Anonymize<Ic4cifi2bticq2>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "ParachainInfo": undefined;
    "PolkadotXcm": Anonymize<I3o0e837cbdu3q>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "OrmlXcm": Anonymize<I9r7qbm7jckmoe>;
    "XTokens": Anonymize<I5088lfff92ve7>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "EmaOracle": Anonymize<I46ka778gu5a9a>;
}>;
export type Ibji81a0gss9ru = AnonymousEnum<{
    /**
     *See [`Pallet::transfer_allow_death`].
     */
    "transfer_allow_death": Anonymize<I1o12ibtjm10ot>;
    /**
     *See [`Pallet::force_transfer`].
     */
    "force_transfer": Anonymize<I8vn14j8a40qm>;
    /**
     *See [`Pallet::transfer_keep_alive`].
     */
    "transfer_keep_alive": Anonymize<I1o12ibtjm10ot>;
    /**
     *See [`Pallet::transfer_all`].
     */
    "transfer_all": Anonymize<I493o732nahjlr>;
    /**
     *See [`Pallet::force_unreserve`].
     */
    "force_unreserve": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *See [`Pallet::upgrade_accounts`].
     */
    "upgrade_accounts": Anonymize<Ibmr18suc9ikh9>;
    /**
     *See [`Pallet::force_set_balance`].
     */
    "force_set_balance": Anonymize<I4og34pg4ruv5d>;
    /**
     *See [`Pallet::force_adjust_total_issuance`].
     */
    "force_adjust_total_issuance": Anonymize<I5u8olqbbvfnvf>;
}>;
export type I1o12ibtjm10ot = {
    "dest": SS58String;
    "value": bigint;
};
export type I8vn14j8a40qm = {
    "source": SS58String;
    "dest": SS58String;
    "value": bigint;
};
export type I493o732nahjlr = {
    "dest": SS58String;
    "keep_alive": boolean;
};
export type I4og34pg4ruv5d = {
    "who": SS58String;
    "new_free": bigint;
};
export type I76nh75sf57g68 = AnonymousEnum<{
    /**
     *See [`Pallet::set_currency`].
     */
    "set_currency": Anonymize<Ic1e6uvbf8ado3>;
    /**
     *See [`Pallet::add_currency`].
     */
    "add_currency": Anonymize<Ie7oqvfdar8r2>;
    /**
     *See [`Pallet::remove_currency`].
     */
    "remove_currency": Anonymize<Ic1e6uvbf8ado3>;
    /**
     *See [`Pallet::reset_payment_currency`].
     */
    "reset_payment_currency": Anonymize<I6v8sm60vvkmk7>;
    /**
     *See [`Pallet::dispatch_permit`].
     */
    "dispatch_permit": Anonymize<I92pum5p0t4pat>;
}>;
export type Ic1e6uvbf8ado3 = {
    "currency": number;
};
export type Ie7oqvfdar8r2 = {
    "currency": number;
    "price": bigint;
};
export type I92pum5p0t4pat = {
    "from": FixedSizeBinary<20>;
    "to": FixedSizeBinary<20>;
    "value": Anonymize<I4totqt881mlti>;
    "data": Binary;
    "gas_limit": bigint;
    "deadline": Anonymize<I4totqt881mlti>;
    "v": number;
    "r": FixedSizeBinary<32>;
    "s": FixedSizeBinary<32>;
};
export type I6f06951njrcra = AnonymousEnum<{
    /**
     *See [`Pallet::propose_spend`].
     */
    "propose_spend": Anonymize<I1g5tojdtkn6tu>;
    /**
     *See [`Pallet::reject_proposal`].
     */
    "reject_proposal": Anonymize<Icm9m0qeemu66d>;
    /**
     *See [`Pallet::approve_proposal`].
     */
    "approve_proposal": Anonymize<Icm9m0qeemu66d>;
    /**
     *See [`Pallet::spend_local`].
     */
    "spend_local": Anonymize<Idscf6boak49q1>;
    /**
     *See [`Pallet::remove_approval`].
     */
    "remove_approval": Anonymize<Icm9m0qeemu66d>;
    /**
     *See [`Pallet::spend`].
     */
    "spend": Anonymize<I6qq5nnbjegi8u>;
    /**
     *See [`Pallet::payout`].
     */
    "payout": Anonymize<I666bl2fqjkejo>;
    /**
     *See [`Pallet::check_status`].
     */
    "check_status": Anonymize<I666bl2fqjkejo>;
    /**
     *See [`Pallet::void_spend`].
     */
    "void_spend": Anonymize<I666bl2fqjkejo>;
}>;
export type I1g5tojdtkn6tu = {
    "value": bigint;
    "beneficiary": SS58String;
};
export type Idscf6boak49q1 = {
    "amount": bigint;
    "beneficiary": SS58String;
};
export type I5e34sajddrp9j = AnonymousEnum<{
    /**
     *See [`Pallet::batch`].
     */
    "batch": Anonymize<I3fmnv57d2qort>;
    /**
     *See [`Pallet::as_derivative`].
     */
    "as_derivative": Anonymize<I7b7a7ip4fqnq3>;
    /**
     *See [`Pallet::batch_all`].
     */
    "batch_all": Anonymize<I3fmnv57d2qort>;
    /**
     *See [`Pallet::dispatch_as`].
     */
    "dispatch_as": Anonymize<Ib8d8jglhl68gd>;
    /**
     *See [`Pallet::force_batch`].
     */
    "force_batch": Anonymize<I3fmnv57d2qort>;
    /**
     *See [`Pallet::with_weight`].
     */
    "with_weight": Anonymize<I1rcq20gtlfvue>;
}>;
export type I3fmnv57d2qort = {
    "calls": Anonymize<Ic631gfd0fb1rp>;
};
export type Ic631gfd0fb1rp = Array<TxCallData>;
export type I7b7a7ip4fqnq3 = {
    "index": number;
    "call": TxCallData;
};
export type Ib8d8jglhl68gd = {
    "as_origin": Anonymize<Id44ari0hl56lm>;
    "call": TxCallData;
};
export type Id44ari0hl56lm = AnonymousEnum<{
    "system": DispatchRawOrigin;
    "Council": Anonymize<I637q9f60cmh3e>;
    "TechnicalCommittee": Anonymize<I637q9f60cmh3e>;
    "Ethereum": Anonymize<I9hp9au9bfqil7>;
    "PolkadotXcm": XcmPalletOrigin;
    "CumulusXcm": Anonymize<I3in0d0lb61qi8>;
    "Void": undefined;
}>;
export type I1rcq20gtlfvue = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I27rv6v6kueehs = AnonymousEnum<{
    /**
     *See [`Pallet::add_registrar`].
     */
    "add_registrar": Anonymize<Icbccs0ug47ilf>;
    /**
     *See [`Pallet::set_identity`].
     */
    "set_identity": Anonymize<I2kds5jji7slh8>;
    /**
     *See [`Pallet::set_subs`].
     */
    "set_subs": Anonymize<Ia9mkdf6l44shb>;
    /**
     *See [`Pallet::clear_identity`].
     */
    "clear_identity": undefined;
    /**
     *See [`Pallet::request_judgement`].
     */
    "request_judgement": Anonymize<I9l2s4klu0831o>;
    /**
     *See [`Pallet::cancel_request`].
     */
    "cancel_request": Anonymize<I2ctrt5nqb8o7c>;
    /**
     *See [`Pallet::set_fee`].
     */
    "set_fee": Anonymize<I711qahikocb1c>;
    /**
     *See [`Pallet::set_account_id`].
     */
    "set_account_id": Anonymize<I93c18nim2s66c>;
    /**
     *See [`Pallet::set_fields`].
     */
    "set_fields": Anonymize<Id6gojh30v9ib2>;
    /**
     *See [`Pallet::provide_judgement`].
     */
    "provide_judgement": Anonymize<Ica5n28rlj0lk6>;
    /**
     *See [`Pallet::kill_identity`].
     */
    "kill_identity": Anonymize<I14p0q0qs0fqbj>;
    /**
     *See [`Pallet::add_sub`].
     */
    "add_sub": Anonymize<Ie3u4phm019a8l>;
    /**
     *See [`Pallet::rename_sub`].
     */
    "rename_sub": Anonymize<Ie3u4phm019a8l>;
    /**
     *See [`Pallet::remove_sub`].
     */
    "remove_sub": Anonymize<I9jie72r7q6717>;
    /**
     *See [`Pallet::quit_sub`].
     */
    "quit_sub": undefined;
    /**
     *See [`Pallet::add_username_authority`].
     */
    "add_username_authority": Anonymize<I3alo542n0mgp>;
    /**
     *See [`Pallet::remove_username_authority`].
     */
    "remove_username_authority": Anonymize<I2rg5btjrsqec0>;
    /**
     *See [`Pallet::set_username_for`].
     */
    "set_username_for": Anonymize<I21r37il499a97>;
    /**
     *See [`Pallet::accept_username`].
     */
    "accept_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *See [`Pallet::remove_expired_approval`].
     */
    "remove_expired_approval": Anonymize<Ie5l999tf7t2te>;
    /**
     *See [`Pallet::set_primary_username`].
     */
    "set_primary_username": Anonymize<Ie5l999tf7t2te>;
    /**
     *See [`Pallet::remove_dangling_username`].
     */
    "remove_dangling_username": Anonymize<Ie5l999tf7t2te>;
}>;
export type I93c18nim2s66c = {
    "index": number;
    "new": SS58String;
};
export type Ica5n28rlj0lk6 = {
    "reg_index": number;
    "target": SS58String;
    "judgement": Anonymize<IdentityJudgement>;
    "identity": FixedSizeBinary<32>;
};
export type I14p0q0qs0fqbj = {
    "target": SS58String;
};
export type Ie3u4phm019a8l = {
    "sub": SS58String;
    "data": Anonymize<IdentityData>;
};
export type I9jie72r7q6717 = {
    "sub": SS58String;
};
export type I3alo542n0mgp = {
    "authority": SS58String;
    "suffix": Binary;
    "allocation": number;
};
export type I21r37il499a97 = {
    "who": SS58String;
    "username": Binary;
    "signature"?: Anonymize<I86cdjmsf3a81s>;
};
export type I6u9fdc1fne8nd = AnonymousEnum<{
    /**
     *See [`Pallet::propose`].
     */
    "propose": Anonymize<I1moso5oagpiea>;
    /**
     *See [`Pallet::second`].
     */
    "second": Anonymize<Ibeb4n9vpjefp3>;
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<Id7murq9s9fg6h>;
    /**
     *See [`Pallet::emergency_cancel`].
     */
    "emergency_cancel": Anonymize<Ied9mja4bq7va8>;
    /**
     *See [`Pallet::external_propose`].
     */
    "external_propose": Anonymize<I4f7jul8ljs54r>;
    /**
     *See [`Pallet::external_propose_majority`].
     */
    "external_propose_majority": Anonymize<I4f7jul8ljs54r>;
    /**
     *See [`Pallet::external_propose_default`].
     */
    "external_propose_default": Anonymize<I4f7jul8ljs54r>;
    /**
     *See [`Pallet::fast_track`].
     */
    "fast_track": Anonymize<I5agg650597e49>;
    /**
     *See [`Pallet::veto_external`].
     */
    "veto_external": Anonymize<I2ev73t79f46tb>;
    /**
     *See [`Pallet::cancel_referendum`].
     */
    "cancel_referendum": Anonymize<Ied9mja4bq7va8>;
    /**
     *See [`Pallet::delegate`].
     */
    "delegate": Anonymize<Iab64mce6q91i>;
    /**
     *See [`Pallet::undelegate`].
     */
    "undelegate": undefined;
    /**
     *See [`Pallet::clear_public_proposals`].
     */
    "clear_public_proposals": undefined;
    /**
     *See [`Pallet::unlock`].
     */
    "unlock": Anonymize<I14p0q0qs0fqbj>;
    /**
     *See [`Pallet::remove_vote`].
     */
    "remove_vote": Anonymize<I666bl2fqjkejo>;
    /**
     *See [`Pallet::remove_other_vote`].
     */
    "remove_other_vote": Anonymize<I7ji3jng252el9>;
    /**
     *See [`Pallet::blacklist`].
     */
    "blacklist": Anonymize<I3v9h9f3mpm1l8>;
    /**
     *See [`Pallet::cancel_proposal`].
     */
    "cancel_proposal": Anonymize<I9mnj4k4u8ls2c>;
    /**
     *See [`Pallet::set_metadata`].
     */
    "set_metadata": Anonymize<I2kt2u1flctk2q>;
    /**
     *See [`Pallet::force_remove_vote`].
     */
    "force_remove_vote": Anonymize<I7ji3jng252el9>;
}>;
export type Iab64mce6q91i = {
    "to": SS58String;
    "conviction": VotingConviction;
    "balance": bigint;
};
export type I7ji3jng252el9 = {
    "target": SS58String;
    "index": number;
};
export type Ifj3hlfbcdobl3 = AnonymousEnum<{
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<Iaa13icjlsj13d>;
    /**
     *See [`Pallet::remove_voter`].
     */
    "remove_voter": undefined;
    /**
     *See [`Pallet::submit_candidacy`].
     */
    "submit_candidacy": Anonymize<I98vh5ccjtf1ev>;
    /**
     *See [`Pallet::renounce_candidacy`].
     */
    "renounce_candidacy": Anonymize<I3al0eab2u0gt2>;
    /**
     *See [`Pallet::remove_member`].
     */
    "remove_member": Anonymize<I7hhej9ji2h5gt>;
    /**
     *See [`Pallet::clean_defunct_voters`].
     */
    "clean_defunct_voters": Anonymize<I6fuug4i4r04hi>;
}>;
export type I7hhej9ji2h5gt = {
    "who": SS58String;
    "slash_bond": boolean;
    "rerun_election": boolean;
};
export type Ifso8m0ehe2tqd = AnonymousEnum<{
    /**
     *See [`Pallet::set_members`].
     */
    "set_members": Anonymize<I38jfk5li8iang>;
    /**
     *See [`Pallet::execute`].
     */
    "execute": Anonymize<Ibg19he58hud84>;
    /**
     *See [`Pallet::propose`].
     */
    "propose": Anonymize<Iqduq47asarsk>;
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<I2dtrijkm5601t>;
    /**
     *See [`Pallet::disapprove_proposal`].
     */
    "disapprove_proposal": Anonymize<I2ev73t79f46tb>;
    /**
     *See [`Pallet::close`].
     */
    "close": Anonymize<Ib2obgji960euh>;
}>;
export type Ibg19he58hud84 = {
    "proposal": TxCallData;
    "length_bound": number;
};
export type Iqduq47asarsk = {
    "threshold": number;
    "proposal": TxCallData;
    "length_bound": number;
};
export type Ibcos58g5647s0 = AnonymousEnum<{
    /**
     *See [`Pallet::report_awesome`].
     */
    "report_awesome": Anonymize<Ie6dn4p5chsk1u>;
    /**
     *See [`Pallet::retract_tip`].
     */
    "retract_tip": Anonymize<I1jm8m1rh9e20v>;
    /**
     *See [`Pallet::tip_new`].
     */
    "tip_new": Anonymize<I2vi5dr4528rgv>;
    /**
     *See [`Pallet::tip`].
     */
    "tip": Anonymize<I1pm30k3i4438u>;
    /**
     *See [`Pallet::close_tip`].
     */
    "close_tip": Anonymize<I1jm8m1rh9e20v>;
    /**
     *See [`Pallet::slash_tip`].
     */
    "slash_tip": Anonymize<I1jm8m1rh9e20v>;
}>;
export type Ie6dn4p5chsk1u = {
    "reason": Binary;
    "who": SS58String;
};
export type I2vi5dr4528rgv = {
    "reason": Binary;
    "who": SS58String;
    "tip_value": bigint;
};
export type I1pm30k3i4438u = {
    "hash": FixedSizeBinary<32>;
    "tip_value": bigint;
};
export type I59kvn6o5eve18 = AnonymousEnum<{
    /**
     *See [`Pallet::proxy`].
     */
    "proxy": Anonymize<I11c208k5k7c7p>;
    /**
     *See [`Pallet::add_proxy`].
     */
    "add_proxy": Anonymize<I2e1ekg17a2uj2>;
    /**
     *See [`Pallet::remove_proxy`].
     */
    "remove_proxy": Anonymize<I2e1ekg17a2uj2>;
    /**
     *See [`Pallet::remove_proxies`].
     */
    "remove_proxies": undefined;
    /**
     *See [`Pallet::create_pure`].
     */
    "create_pure": Anonymize<I9uff8o8g5b5av>;
    /**
     *See [`Pallet::kill_pure`].
     */
    "kill_pure": Anonymize<I1acluqiqlacck>;
    /**
     *See [`Pallet::announce`].
     */
    "announce": Anonymize<Idkqesere66fs7>;
    /**
     *See [`Pallet::remove_announcement`].
     */
    "remove_announcement": Anonymize<Idkqesere66fs7>;
    /**
     *See [`Pallet::reject_announcement`].
     */
    "reject_announcement": Anonymize<Ifs54vj2idl9k4>;
    /**
     *See [`Pallet::proxy_announced`].
     */
    "proxy_announced": Anonymize<Ia1mrp1uqfh37g>;
}>;
export type I11c208k5k7c7p = {
    "real": SS58String;
    "force_proxy_type"?: Anonymize<Idnl0r1a4nmeek>;
    "call": TxCallData;
};
export type Idnl0r1a4nmeek = (Anonymize<Ie9g2psuhuu510>) | undefined;
export type I2e1ekg17a2uj2 = {
    "delegate": SS58String;
    "proxy_type": Anonymize<Ie9g2psuhuu510>;
    "delay": number;
};
export type I9uff8o8g5b5av = {
    "proxy_type": Anonymize<Ie9g2psuhuu510>;
    "delay": number;
    "index": number;
};
export type I1acluqiqlacck = {
    "spawner": SS58String;
    "proxy_type": Anonymize<Ie9g2psuhuu510>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type Idkqesere66fs7 = {
    "real": SS58String;
    "call_hash": FixedSizeBinary<32>;
};
export type Ifs54vj2idl9k4 = {
    "delegate": SS58String;
    "call_hash": FixedSizeBinary<32>;
};
export type Ia1mrp1uqfh37g = {
    "delegate": SS58String;
    "real": SS58String;
    "force_proxy_type"?: Anonymize<Idnl0r1a4nmeek>;
    "call": TxCallData;
};
export type I5s8tf42ekpriv = AnonymousEnum<{
    /**
     *See [`Pallet::as_multi_threshold_1`].
     */
    "as_multi_threshold_1": Anonymize<Ic2scjb6ud07jn>;
    /**
     *See [`Pallet::as_multi`].
     */
    "as_multi": Anonymize<I516qu19579v6p>;
    /**
     *See [`Pallet::approve_as_multi`].
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *See [`Pallet::cancel_as_multi`].
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Ic2scjb6ud07jn = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type I516qu19579v6p = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I1aih3rf2i8nc0 = AnonymousEnum<{
    /**
     *See [`Pallet::create`].
     */
    "create": Anonymize<I3rrsthr03bsf8>;
    /**
     *See [`Pallet::force_create`].
     */
    "force_create": Anonymize<I1it6nfuocs3uo>;
    /**
     *See [`Pallet::destroy`].
     */
    "destroy": Anonymize<I83qeclck631s2>;
    /**
     *See [`Pallet::mint`].
     */
    "mint": Anonymize<I846j8gk91gp4q>;
    /**
     *See [`Pallet::burn`].
     */
    "burn": Anonymize<I4apbr3d7b110l>;
    /**
     *See [`Pallet::transfer`].
     */
    "transfer": Anonymize<I9svbf1ionsuba>;
    /**
     *See [`Pallet::redeposit`].
     */
    "redeposit": Anonymize<I63enm20toa64c>;
    /**
     *See [`Pallet::freeze`].
     */
    "freeze": Anonymize<I92ucef7ff2o7l>;
    /**
     *See [`Pallet::thaw`].
     */
    "thaw": Anonymize<I92ucef7ff2o7l>;
    /**
     *See [`Pallet::freeze_collection`].
     */
    "freeze_collection": Anonymize<I88sl1jplq27bh>;
    /**
     *See [`Pallet::thaw_collection`].
     */
    "thaw_collection": Anonymize<I88sl1jplq27bh>;
    /**
     *See [`Pallet::transfer_ownership`].
     */
    "transfer_ownership": Anonymize<I2970lus2v0qct>;
    /**
     *See [`Pallet::set_team`].
     */
    "set_team": Anonymize<I1vsbo63n9pu69>;
    /**
     *See [`Pallet::approve_transfer`].
     */
    "approve_transfer": Anonymize<I3fatc2oi4mp63>;
    /**
     *See [`Pallet::cancel_approval`].
     */
    "cancel_approval": Anonymize<I1j3v9uknthnij>;
    /**
     *See [`Pallet::force_item_status`].
     */
    "force_item_status": Anonymize<I6ng2cdk1vvip6>;
    /**
     *See [`Pallet::set_attribute`].
     */
    "set_attribute": Anonymize<I62ht2i39rtkaa>;
    /**
     *See [`Pallet::clear_attribute`].
     */
    "clear_attribute": Anonymize<Ichf8eu9t3dtc2>;
    /**
     *See [`Pallet::set_metadata`].
     */
    "set_metadata": Anonymize<I9e4bfe80t2int>;
    /**
     *See [`Pallet::clear_metadata`].
     */
    "clear_metadata": Anonymize<I92ucef7ff2o7l>;
    /**
     *See [`Pallet::set_collection_metadata`].
     */
    "set_collection_metadata": Anonymize<I9oai3q0an1tbo>;
    /**
     *See [`Pallet::clear_collection_metadata`].
     */
    "clear_collection_metadata": Anonymize<I88sl1jplq27bh>;
    /**
     *See [`Pallet::set_accept_ownership`].
     */
    "set_accept_ownership": Anonymize<I90ivo9n6p6nqo>;
    /**
     *See [`Pallet::set_collection_max_supply`].
     */
    "set_collection_max_supply": Anonymize<Idj9k8sn80h3m6>;
    /**
     *See [`Pallet::set_price`].
     */
    "set_price": Anonymize<I64f3h3tf92u6f>;
    /**
     *See [`Pallet::buy_item`].
     */
    "buy_item": Anonymize<Ifnmu9mlmgtdbf>;
}>;
export type I3rrsthr03bsf8 = {
    "collection": bigint;
    "admin": SS58String;
};
export type I1it6nfuocs3uo = {
    "collection": bigint;
    "owner": SS58String;
    "free_holding": boolean;
};
export type I83qeclck631s2 = {
    "collection": bigint;
    "witness": Anonymize<I59th026dnaruk>;
};
export type I4apbr3d7b110l = {
    "collection": bigint;
    "item": bigint;
    "check_owner"?: Anonymize<Ihfphjolmsqq1>;
};
export type I9svbf1ionsuba = {
    "collection": bigint;
    "item": bigint;
    "dest": SS58String;
};
export type I63enm20toa64c = {
    "collection": bigint;
    "items": Anonymize<Iafqnechp3omqg>;
};
export type I3fatc2oi4mp63 = {
    "collection": bigint;
    "item": bigint;
    "delegate": SS58String;
};
export type I1j3v9uknthnij = {
    "collection": bigint;
    "item": bigint;
    "maybe_check_delegate"?: Anonymize<Ihfphjolmsqq1>;
};
export type I6ng2cdk1vvip6 = {
    "collection": bigint;
    "owner": SS58String;
    "issuer": SS58String;
    "admin": SS58String;
    "freezer": SS58String;
    "free_holding": boolean;
    "is_frozen": boolean;
};
export type I90ivo9n6p6nqo = {
    "maybe_collection"?: Anonymize<I35p85j063s0il>;
};
export type I64f3h3tf92u6f = {
    "collection": bigint;
    "item": bigint;
    "price"?: Anonymize<I35p85j063s0il>;
    "whitelisted_buyer"?: Anonymize<Ihfphjolmsqq1>;
};
export type Ifnmu9mlmgtdbf = {
    "collection": bigint;
    "item": bigint;
    "bid_price": bigint;
};
export type I16a06jj16ane9 = AnonymousEnum<{
    /**
     *See [`Pallet::register`].
     */
    "register": Anonymize<Ifmsv6e4cim6b1>;
    /**
     *See [`Pallet::update`].
     */
    "update": Anonymize<I3nv51ps4mq7qu>;
    /**
     *See [`Pallet::register_external`].
     */
    "register_external": Anonymize<I4a8hon12idk34>;
    /**
     *See [`Pallet::ban_asset`].
     */
    "ban_asset": Anonymize<Ia5le7udkgbaq9>;
    /**
     *See [`Pallet::unban_asset`].
     */
    "unban_asset": Anonymize<Ia5le7udkgbaq9>;
}>;
export type Ifmsv6e4cim6b1 = {
    "asset_id"?: Anonymize<I4arjljr6dpflb>;
    "name"?: Anonymize<Iabpgqcjikia83>;
    "asset_type": Anonymize<I45f5qb3gfdtr3>;
    "existential_deposit"?: Anonymize<I35p85j063s0il>;
    "symbol"?: Anonymize<Iabpgqcjikia83>;
    "decimals"?: Anonymize<I4arjljr6dpflb>;
    "location"?: Anonymize<Ia9cgf4r40b26h>;
    "xcm_rate_limit"?: Anonymize<I35p85j063s0il>;
    "is_sufficient": boolean;
};
export type I3nv51ps4mq7qu = {
    "asset_id": number;
    "name"?: Anonymize<Iabpgqcjikia83>;
    "asset_type"?: Anonymize<I4df3ojtlm5289>;
    "existential_deposit"?: Anonymize<I35p85j063s0il>;
    "xcm_rate_limit"?: Anonymize<I35p85j063s0il>;
    "is_sufficient"?: Anonymize<I8ie0dco0kcuq5>;
    "symbol"?: Anonymize<Iabpgqcjikia83>;
    "decimals"?: Anonymize<I4arjljr6dpflb>;
    "location"?: Anonymize<Ia9cgf4r40b26h>;
};
export type I4df3ojtlm5289 = (Anonymize<I45f5qb3gfdtr3>) | undefined;
export type I4a8hon12idk34 = {
    "location": Anonymize<I4c0s5cioidn76>;
};
export type I5queflebive1d = AnonymousEnum<{
    /**
     *See [`Pallet::claim`].
     */
    "claim": Anonymize<Ib2p3kr78drjc1>;
}>;
export type Ib2p3kr78drjc1 = {
    "ethereum_signature": FixedSizeBinary<65>;
};
export type I72obq5poq736n = AnonymousEnum<{
    /**
     *See [`Pallet::add_token`].
     */
    "add_token": Anonymize<Ida2ijjar0n0j3>;
    /**
     *See [`Pallet::add_liquidity`].
     */
    "add_liquidity": Anonymize<Ing3etrevsfg0>;
    /**
     *See [`Pallet::add_liquidity_with_limit`].
     */
    "add_liquidity_with_limit": Anonymize<Ietsl92b11kilg>;
    /**
     *See [`Pallet::remove_liquidity`].
     */
    "remove_liquidity": Anonymize<Icqdi7b9m95ug3>;
    /**
     *See [`Pallet::remove_liquidity_with_limit`].
     */
    "remove_liquidity_with_limit": Anonymize<Ieuqv44kptstcs>;
    /**
     *See [`Pallet::sacrifice_position`].
     */
    "sacrifice_position": Anonymize<I6vhvcln14dp4d>;
    /**
     *See [`Pallet::sell`].
     */
    "sell": Anonymize<Ievca65alkkho9>;
    /**
     *See [`Pallet::buy`].
     */
    "buy": Anonymize<I2qkf9i0e8mf1f>;
    /**
     *See [`Pallet::set_asset_tradable_state`].
     */
    "set_asset_tradable_state": Anonymize<Iefviakco48cs2>;
    /**
     *See [`Pallet::refund_refused_asset`].
     */
    "refund_refused_asset": Anonymize<Iakb7idgif10m8>;
    /**
     *See [`Pallet::set_asset_weight_cap`].
     */
    "set_asset_weight_cap": Anonymize<Id7aqsj1u6b2r2>;
    /**
     *See [`Pallet::withdraw_protocol_liquidity`].
     */
    "withdraw_protocol_liquidity": Anonymize<Icah19jgge5j3e>;
    /**
     *See [`Pallet::remove_token`].
     */
    "remove_token": Anonymize<I2bi2kbaaunr13>;
}>;
export type Ida2ijjar0n0j3 = {
    "asset": number;
    "initial_price": bigint;
    "weight_cap": number;
    "position_owner": SS58String;
};
export type Ing3etrevsfg0 = {
    "asset": number;
    "amount": bigint;
};
export type Ietsl92b11kilg = {
    "asset": number;
    "amount": bigint;
    "min_shares_limit": bigint;
};
export type Icqdi7b9m95ug3 = {
    "position_id": bigint;
    "amount": bigint;
};
export type Ieuqv44kptstcs = {
    "position_id": bigint;
    "amount": bigint;
    "min_limit": bigint;
};
export type I6vhvcln14dp4d = {
    "position_id": bigint;
};
export type Ievca65alkkho9 = {
    "asset_in": number;
    "asset_out": number;
    "amount": bigint;
    "min_buy_amount": bigint;
};
export type I2qkf9i0e8mf1f = {
    "asset_out": number;
    "asset_in": number;
    "amount": bigint;
    "max_sell_amount": bigint;
};
export type Icah19jgge5j3e = {
    "asset_id": number;
    "amount": bigint;
    "price": Anonymize<I200n1ov5tbcvr>;
    "dest": SS58String;
};
export type I2bi2kbaaunr13 = {
    "asset_id": number;
    "beneficiary": SS58String;
};
export type I851i9piqh9qel = AnonymousEnum<{
    /**
     *See [`Pallet::pause_transaction`].
     */
    "pause_transaction": Anonymize<Ian208gj7nqkdo>;
    /**
     *See [`Pallet::unpause_transaction`].
     */
    "unpause_transaction": Anonymize<Ian208gj7nqkdo>;
}>;
export type Ian208gj7nqkdo = {
    "pallet_name": Binary;
    "function_name": Binary;
};
export type I6kr4saq8f2pd8 = AnonymousEnum<{
    /**
     *See [`Pallet::dust_account`].
     */
    "dust_account": Anonymize<I81d44muu393rf>;
    /**
     *See [`Pallet::add_nondustable_account`].
     */
    "add_nondustable_account": Anonymize<Icbccs0ug47ilf>;
    /**
     *See [`Pallet::remove_nondustable_account`].
     */
    "remove_nondustable_account": Anonymize<Icbccs0ug47ilf>;
}>;
export type I81d44muu393rf = {
    "account": SS58String;
    "currency_id": number;
};
export type Iumi8j0gas3vj = AnonymousEnum<{
    /**
     *See [`Pallet::create_global_farm`].
     */
    "create_global_farm": Anonymize<I3iojc1k1m6nu7>;
    /**
     *See [`Pallet::terminate_global_farm`].
     */
    "terminate_global_farm": Anonymize<I9q8qmop6bko5m>;
    /**
     *See [`Pallet::create_yield_farm`].
     */
    "create_yield_farm": Anonymize<Ial2ta95n8ff3b>;
    /**
     *See [`Pallet::update_yield_farm`].
     */
    "update_yield_farm": Anonymize<Iammrvujtc5lnk>;
    /**
     *See [`Pallet::stop_yield_farm`].
     */
    "stop_yield_farm": Anonymize<I87j02rt3f17j8>;
    /**
     *See [`Pallet::resume_yield_farm`].
     */
    "resume_yield_farm": Anonymize<Iasmn3c065hq91>;
    /**
     *See [`Pallet::terminate_yield_farm`].
     */
    "terminate_yield_farm": Anonymize<Ia5kd7m19ap7ge>;
    /**
     *See [`Pallet::deposit_shares`].
     */
    "deposit_shares": Anonymize<Ieq7brqoubndin>;
    /**
     *See [`Pallet::redeposit_shares`].
     */
    "redeposit_shares": Anonymize<Ie8ft8rd6cil27>;
    /**
     *See [`Pallet::claim_rewards`].
     */
    "claim_rewards": Anonymize<I2k37dcoppgins>;
    /**
     *See [`Pallet::withdraw_shares`].
     */
    "withdraw_shares": Anonymize<I2k37dcoppgins>;
    /**
     *See [`Pallet::update_global_farm`].
     */
    "update_global_farm": Anonymize<Ia05t9pjenemsb>;
}>;
export type I3iojc1k1m6nu7 = {
    "total_rewards": bigint;
    "planned_yielding_periods": number;
    "blocks_per_period": number;
    "reward_currency": number;
    "owner": SS58String;
    "yield_per_period": bigint;
    "min_deposit": bigint;
    "lrna_price_adjustment": bigint;
};
export type Ial2ta95n8ff3b = {
    "global_farm_id": number;
    "asset_id": number;
    "multiplier": bigint;
    "loyalty_curve"?: Anonymize<Ieot4d4ofvtguv>;
};
export type Iammrvujtc5lnk = {
    "global_farm_id": number;
    "asset_id": number;
    "multiplier": bigint;
};
export type I87j02rt3f17j8 = {
    "global_farm_id": number;
    "asset_id": number;
};
export type Iasmn3c065hq91 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_id": number;
    "multiplier": bigint;
};
export type Ia5kd7m19ap7ge = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_id": number;
};
export type Ieq7brqoubndin = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "position_id": bigint;
};
export type Ie8ft8rd6cil27 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "deposit_id": bigint;
};
export type I2k37dcoppgins = {
    "deposit_id": bigint;
    "yield_farm_id": number;
};
export type Ia05t9pjenemsb = {
    "global_farm_id": number;
    "planned_yielding_periods": number;
    "yield_per_period": bigint;
    "min_deposit": bigint;
};
export type I5ophbk33alrde = AnonymousEnum<{
    /**
     *See [`Pallet::place_order`].
     */
    "place_order": Anonymize<I8utns9aeu3t6o>;
    /**
     *See [`Pallet::partial_fill_order`].
     */
    "partial_fill_order": Anonymize<I35cf63e7kg5on>;
    /**
     *See [`Pallet::fill_order`].
     */
    "fill_order": Anonymize<Ibq6b0nsk23kj8>;
    /**
     *See [`Pallet::cancel_order`].
     */
    "cancel_order": Anonymize<Ibq6b0nsk23kj8>;
}>;
export type I8utns9aeu3t6o = {
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "amount_out": bigint;
    "partially_fillable": boolean;
};
export type I35cf63e7kg5on = {
    "order_id": number;
    "amount_in": bigint;
};
export type Ihq0rdic3bdqe = AnonymousEnum<{
    /**
     *See [`Pallet::set_trade_volume_limit`].
     */
    "set_trade_volume_limit": Anonymize<I2i1tilmsb1rl1>;
    /**
     *See [`Pallet::set_add_liquidity_limit`].
     */
    "set_add_liquidity_limit": Anonymize<I4l0u1h71fhj81>;
    /**
     *See [`Pallet::set_remove_liquidity_limit`].
     */
    "set_remove_liquidity_limit": Anonymize<I4l0u1h71fhj81>;
}>;
export type Ifia7upsofqkg9 = AnonymousEnum<{
    /**
     *See [`Pallet::sell`].
     */
    "sell": Anonymize<Iet9su1uri0qgo>;
    /**
     *See [`Pallet::buy`].
     */
    "buy": Anonymize<I242odhgbhik24>;
    /**
     *See [`Pallet::set_route`].
     */
    "set_route": Anonymize<I7o081p6vv5gqs>;
    /**
     *See [`Pallet::force_insert_route`].
     */
    "force_insert_route": Anonymize<I7o081p6vv5gqs>;
    /**
     *See [`Pallet::sell_all`].
     */
    "sell_all": Anonymize<Ic18k1k8u5726n>;
}>;
export type I7o081p6vv5gqs = {
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "new_route": Anonymize<Iesal24fi7slt9>;
};
export type Ic18k1k8u5726n = {
    "asset_in": number;
    "asset_out": number;
    "min_amount_out": bigint;
    "route": Anonymize<Iesal24fi7slt9>;
};
export type Iaikdgvqtjn8sd = AnonymousEnum<{
    /**
     *See [`Pallet::initialize_staking`].
     */
    "initialize_staking": undefined;
    /**
     *See [`Pallet::stake`].
     */
    "stake": Anonymize<I3qt1hgg4djhgb>;
    /**
     *See [`Pallet::increase_stake`].
     */
    "increase_stake": Anonymize<Icqdi7b9m95ug3>;
    /**
     *See [`Pallet::claim`].
     */
    "claim": Anonymize<I6vhvcln14dp4d>;
    /**
     *See [`Pallet::unstake`].
     */
    "unstake": Anonymize<I6vhvcln14dp4d>;
}>;
export type Ib3l6r06d7hrar = AnonymousEnum<{
    /**
     *See [`Pallet::create_pool`].
     */
    "create_pool": Anonymize<I77a9b6eik0rui>;
    /**
     *See [`Pallet::update_pool_fee`].
     */
    "update_pool_fee": Anonymize<Ics8sn0t3vlpat>;
    /**
     *See [`Pallet::update_amplification`].
     */
    "update_amplification": Anonymize<I6p5nbogrodkcc>;
    /**
     *See [`Pallet::add_liquidity`].
     */
    "add_liquidity": Anonymize<I7pgj3rnfo83eg>;
    /**
     *See [`Pallet::add_liquidity_shares`].
     */
    "add_liquidity_shares": Anonymize<Ic11mlh16sngai>;
    /**
     *See [`Pallet::remove_liquidity_one_asset`].
     */
    "remove_liquidity_one_asset": Anonymize<I4vbsn8c7ui70f>;
    /**
     *See [`Pallet::withdraw_asset_amount`].
     */
    "withdraw_asset_amount": Anonymize<I60m5cjc6e18ab>;
    /**
     *See [`Pallet::sell`].
     */
    "sell": Anonymize<Iauknf9up388mv>;
    /**
     *See [`Pallet::buy`].
     */
    "buy": Anonymize<Ieh252ua9757u1>;
    /**
     *See [`Pallet::set_asset_tradable_state`].
     */
    "set_asset_tradable_state": Anonymize<Iest0fomljvrb6>;
}>;
export type I77a9b6eik0rui = {
    "share_asset": number;
    "assets": Anonymize<Icgljjb6j82uhn>;
    "amplification": number;
    "fee": number;
};
export type I6p5nbogrodkcc = {
    "pool_id": number;
    "final_amplification": number;
    "start_block": number;
    "end_block": number;
};
export type I7pgj3rnfo83eg = {
    "pool_id": number;
    "assets": Anonymize<Id7i7r9a29m8o2>;
};
export type Ic11mlh16sngai = {
    "pool_id": number;
    "shares": bigint;
    "asset_id": number;
    "max_asset_amount": bigint;
};
export type I4vbsn8c7ui70f = {
    "pool_id": number;
    "asset_id": number;
    "share_amount": bigint;
    "min_amount_out": bigint;
};
export type I60m5cjc6e18ab = {
    "pool_id": number;
    "asset_id": number;
    "amount": bigint;
    "max_share_amount": bigint;
};
export type Iauknf9up388mv = {
    "pool_id": number;
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "min_buy_amount": bigint;
};
export type Ieh252ua9757u1 = {
    "pool_id": number;
    "asset_out": number;
    "asset_in": number;
    "amount_out": bigint;
    "max_sell_amount": bigint;
};
export type It0rq8pffd1r = AnonymousEnum<{
    /**
     *See [`Pallet::issue`].
     */
    "issue": Anonymize<I3i06ijrvdoq97>;
    /**
     *See [`Pallet::redeem`].
     */
    "redeem": Anonymize<Ibc2f5cr6dqguj>;
}>;
export type I3i06ijrvdoq97 = {
    "asset_id": number;
    "amount": bigint;
    "maturity": bigint;
};
export type Ibc2f5cr6dqguj = {
    "bond_id": number;
    "amount": bigint;
};
export type I75o581gpaivou = AnonymousEnum<{
    /**
     *See [`Pallet::settle_otc_order`].
     */
    "settle_otc_order": Anonymize<Ia6sgngioc9e>;
}>;
export type Ia6sgngioc9e = {
    "otc_id": number;
    "amount": bigint;
    "route": Anonymize<Iesal24fi7slt9>;
};
export type I4ogitqakc83nm = AnonymousEnum<{
    /**
     *See [`Pallet::create_pool`].
     */
    "create_pool": Anonymize<I3qhjmr9i9etho>;
    /**
     *See [`Pallet::update_pool_data`].
     */
    "update_pool_data": Anonymize<I13ss7bvftqcnq>;
    /**
     *See [`Pallet::add_liquidity`].
     */
    "add_liquidity": Anonymize<Ic3gahhrcopfnt>;
    /**
     *See [`Pallet::remove_liquidity`].
     */
    "remove_liquidity": Anonymize<I9n7ns8k72amhv>;
    /**
     *See [`Pallet::sell`].
     */
    "sell": Anonymize<I2co61imvsepb6>;
    /**
     *See [`Pallet::buy`].
     */
    "buy": Anonymize<I2co61imvsepb6>;
}>;
export type I3qhjmr9i9etho = {
    "pool_owner": SS58String;
    "asset_a": number;
    "asset_a_amount": bigint;
    "asset_b": number;
    "asset_b_amount": bigint;
    "initial_weight": number;
    "final_weight": number;
    "weight_curve": Anonymize<I9ismjef26dgjt>;
    "fee": Anonymize<I9jd27rnpm8ttv>;
    "fee_collector": SS58String;
    "repay_target": bigint;
};
export type I13ss7bvftqcnq = {
    "pool_id": SS58String;
    "pool_owner"?: Anonymize<Ihfphjolmsqq1>;
    "start"?: Anonymize<I4arjljr6dpflb>;
    "end"?: Anonymize<I4arjljr6dpflb>;
    "initial_weight"?: Anonymize<I4arjljr6dpflb>;
    "final_weight"?: Anonymize<I4arjljr6dpflb>;
    "fee"?: Anonymize<Iep7au1720bm0e>;
    "fee_collector"?: Anonymize<Ihfphjolmsqq1>;
    "repay_target"?: Anonymize<I35p85j063s0il>;
};
export type Ic3gahhrcopfnt = {
    "amount_a": Anonymize<I4ojmnsk1dchql>;
    "amount_b": Anonymize<I4ojmnsk1dchql>;
};
export type I9n7ns8k72amhv = {
    "pool_id": SS58String;
};
export type I2co61imvsepb6 = {
    "asset_in": number;
    "asset_out": number;
    "amount": bigint;
    "max_limit": bigint;
};
export type I1bhk4tkod8r9d = AnonymousEnum<{
    /**
     *See [`Pallet::create_pool`].
     */
    "create_pool": Anonymize<Icjk91npopm3h9>;
    /**
     *See [`Pallet::add_liquidity`].
     */
    "add_liquidity": Anonymize<Ie03o0h06lol9p>;
    /**
     *See [`Pallet::remove_liquidity`].
     */
    "remove_liquidity": Anonymize<Ie6ot1bq9o2jef>;
    /**
     *See [`Pallet::sell`].
     */
    "sell": Anonymize<I6ap0qjh5n5817>;
    /**
     *See [`Pallet::buy`].
     */
    "buy": Anonymize<I6ap0qjh5n5817>;
}>;
export type Icjk91npopm3h9 = {
    "asset_a": number;
    "amount_a": bigint;
    "asset_b": number;
    "amount_b": bigint;
};
export type Ie03o0h06lol9p = {
    "asset_a": number;
    "asset_b": number;
    "amount_a": bigint;
    "amount_b_max_limit": bigint;
};
export type Ie6ot1bq9o2jef = {
    "asset_a": number;
    "asset_b": number;
    "liquidity_amount": bigint;
};
export type I6ap0qjh5n5817 = {
    "asset_in": number;
    "asset_out": number;
    "amount": bigint;
    "max_limit": bigint;
    "discount": boolean;
};
export type Ibe97e14cmm4e9 = AnonymousEnum<{
    /**
     *See [`Pallet::register_code`].
     */
    "register_code": Anonymize<I6pjjpfvhvcfru>;
    /**
     *See [`Pallet::link_code`].
     */
    "link_code": Anonymize<I6pjjpfvhvcfru>;
    /**
     *See [`Pallet::convert`].
     */
    "convert": Anonymize<Ia5le7udkgbaq9>;
    /**
     *See [`Pallet::claim_rewards`].
     */
    "claim_rewards": undefined;
    /**
     *See [`Pallet::set_reward_percentage`].
     */
    "set_reward_percentage": Anonymize<Ionfhf9va2t31>;
}>;
export type I6a7o6bu2n2amk = AnonymousEnum<{
    /**
     *See [`Pallet::transfer`].
     */
    "transfer": Anonymize<Ibbvcet1pv1l61>;
    /**
     *See [`Pallet::transfer_all`].
     */
    "transfer_all": Anonymize<I67bpqa7o2ocua>;
    /**
     *See [`Pallet::transfer_keep_alive`].
     */
    "transfer_keep_alive": Anonymize<Ibbvcet1pv1l61>;
    /**
     *See [`Pallet::force_transfer`].
     */
    "force_transfer": Anonymize<I2holodggoluon>;
    /**
     *See [`Pallet::set_balance`].
     */
    "set_balance": Anonymize<Ib5umq5uf644jr>;
}>;
export type Ibbvcet1pv1l61 = {
    "dest": SS58String;
    "currency_id": number;
    "amount": bigint;
};
export type I67bpqa7o2ocua = {
    "dest": SS58String;
    "currency_id": number;
    "keep_alive": boolean;
};
export type I2holodggoluon = {
    "source": SS58String;
    "dest": SS58String;
    "currency_id": number;
    "amount": bigint;
};
export type Ib5umq5uf644jr = {
    "who": SS58String;
    "currency_id": number;
    "new_free": bigint;
    "new_reserved": bigint;
};
export type Id0m4jim3jch3f = AnonymousEnum<{
    /**
     *See [`Pallet::transfer`].
     */
    "transfer": Anonymize<Ibbvcet1pv1l61>;
    /**
     *See [`Pallet::transfer_native_currency`].
     */
    "transfer_native_currency": Anonymize<I9r83fr4b3rmmj>;
    /**
     *See [`Pallet::update_balance`].
     */
    "update_balance": Anonymize<I24s4g6gkj5oec>;
}>;
export type I9r83fr4b3rmmj = {
    "dest": SS58String;
    "amount": bigint;
};
export type Ieps3dhtu498hk = AnonymousEnum<{
    /**
     *See [`Pallet::claim`].
     */
    "claim": undefined;
    /**
     *See [`Pallet::vested_transfer`].
     */
    "vested_transfer": Anonymize<Iapqe6jot9df6>;
    /**
     *See [`Pallet::update_vesting_schedules`].
     */
    "update_vesting_schedules": Anonymize<If64i3fucaastf>;
    /**
     *See [`Pallet::claim_for`].
     */
    "claim_for": Anonymize<Ietluscr05n0a8>;
}>;
export type Iapqe6jot9df6 = {
    "dest": SS58String;
    "schedule": Anonymize<I6k9mlgqa572np>;
};
export type If64i3fucaastf = {
    "who": SS58String;
    "vesting_schedules": Anonymize<I199nnq793ql30>;
};
export type I199nnq793ql30 = Array<Anonymize<I6k9mlgqa572np>>;
export type Ietluscr05n0a8 = {
    "dest": SS58String;
};
export type I2pfrhr77tkhgi = AnonymousEnum<{
    /**
     *See [`Pallet::create_global_farm`].
     */
    "create_global_farm": Anonymize<I10hmgseei3j6r>;
    /**
     *See [`Pallet::update_global_farm`].
     */
    "update_global_farm": Anonymize<I8p4numg1r4ojm>;
    /**
     *See [`Pallet::terminate_global_farm`].
     */
    "terminate_global_farm": Anonymize<I9q8qmop6bko5m>;
    /**
     *See [`Pallet::create_yield_farm`].
     */
    "create_yield_farm": Anonymize<Idtucog650c7f8>;
    /**
     *See [`Pallet::update_yield_farm`].
     */
    "update_yield_farm": Anonymize<I4kvfua9fqrpi2>;
    /**
     *See [`Pallet::stop_yield_farm`].
     */
    "stop_yield_farm": Anonymize<I7t5blhj97u8r7>;
    /**
     *See [`Pallet::resume_yield_farm`].
     */
    "resume_yield_farm": Anonymize<I21qpgggberqt3>;
    /**
     *See [`Pallet::terminate_yield_farm`].
     */
    "terminate_yield_farm": Anonymize<Id7r4m9aulb7sn>;
    /**
     *See [`Pallet::deposit_shares`].
     */
    "deposit_shares": Anonymize<Ielqbuofrsq2ri>;
    /**
     *See [`Pallet::redeposit_shares`].
     */
    "redeposit_shares": Anonymize<Iaehj4ajaudum7>;
    /**
     *See [`Pallet::claim_rewards`].
     */
    "claim_rewards": Anonymize<I2k37dcoppgins>;
    /**
     *See [`Pallet::withdraw_shares`].
     */
    "withdraw_shares": Anonymize<Id83ilm95if0sl>;
}>;
export type I10hmgseei3j6r = {
    "total_rewards": bigint;
    "planned_yielding_periods": number;
    "blocks_per_period": number;
    "incentivized_asset": number;
    "reward_currency": number;
    "owner": SS58String;
    "yield_per_period": bigint;
    "min_deposit": bigint;
    "price_adjustment": bigint;
};
export type I8p4numg1r4ojm = {
    "global_farm_id": number;
    "price_adjustment": bigint;
};
export type Idtucog650c7f8 = {
    "global_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "multiplier": bigint;
    "loyalty_curve"?: Anonymize<Ieot4d4ofvtguv>;
};
export type I4kvfua9fqrpi2 = {
    "global_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "multiplier": bigint;
};
export type I7t5blhj97u8r7 = {
    "global_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
};
export type I21qpgggberqt3 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "multiplier": bigint;
};
export type Id7r4m9aulb7sn = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
};
export type Ielqbuofrsq2ri = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "shares_amount": bigint;
};
export type Iaehj4ajaudum7 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
    "deposit_id": bigint;
};
export type Id83ilm95if0sl = {
    "deposit_id": bigint;
    "yield_farm_id": number;
    "asset_pair": Anonymize<I4kv0johj9i346>;
};
export type Io4g1ahr3evjh = AnonymousEnum<{
    /**
     *See [`Pallet::schedule`].
     */
    "schedule": Anonymize<Ico8a80unk7v19>;
    /**
     *See [`Pallet::terminate`].
     */
    "terminate": Anonymize<Ib9aiguc778ujf>;
}>;
export type Ico8a80unk7v19 = {
    "schedule": Anonymize<I2u0nucph7peo9>;
    "start_execution_block"?: Anonymize<I4arjljr6dpflb>;
};
export type I2u0nucph7peo9 = {
    "owner": SS58String;
    "period": number;
    "total_amount": bigint;
    "max_retries"?: Anonymize<I4arjljr6dpflb>;
    "stability_threshold"?: Anonymize<I4arjljr6dpflb>;
    "slippage"?: Anonymize<I4arjljr6dpflb>;
    "order": Anonymize<I773hpv1qdisu8>;
};
export type Ib9aiguc778ujf = {
    "schedule_id": number;
    "next_execution_block"?: Anonymize<I4arjljr6dpflb>;
};
export type Ic4cifi2bticq2 = AnonymousEnum<{
    /**
     *See [`Pallet::schedule`].
     */
    "schedule": Anonymize<Id8iisbt404cdq>;
    /**
     *See [`Pallet::cancel`].
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *See [`Pallet::schedule_named`].
     */
    "schedule_named": Anonymize<Idfjtnp5n5am6q>;
    /**
     *See [`Pallet::cancel_named`].
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *See [`Pallet::schedule_after`].
     */
    "schedule_after": Anonymize<I65cco11c1cc37>;
    /**
     *See [`Pallet::schedule_named_after`].
     */
    "schedule_named_after": Anonymize<Ie0iohak3dljd>;
}>;
export type Id8iisbt404cdq = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Idfjtnp5n5am6q = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I65cco11c1cc37 = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ie0iohak3dljd = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I3o0e837cbdu3q = AnonymousEnum<{
    /**
     *See [`Pallet::send`].
     */
    "send": Anonymize<I9paqujeb1fpv6>;
    /**
     *See [`Pallet::teleport_assets`].
     */
    "teleport_assets": Anonymize<Iakevv83i18n4r>;
    /**
     *See [`Pallet::reserve_transfer_assets`].
     */
    "reserve_transfer_assets": Anonymize<Iakevv83i18n4r>;
    /**
     *See [`Pallet::execute`].
     */
    "execute": Anonymize<If2ssl12kcglhg>;
    /**
     *See [`Pallet::force_xcm_version`].
     */
    "force_xcm_version": Anonymize<Iabk8ljl5g8c86>;
    /**
     *See [`Pallet::force_default_xcm_version`].
     */
    "force_default_xcm_version": Anonymize<Ic76kfh5ebqkpl>;
    /**
     *See [`Pallet::force_subscribe_version_notify`].
     */
    "force_subscribe_version_notify": Anonymize<Icrujen33bbibf>;
    /**
     *See [`Pallet::force_unsubscribe_version_notify`].
     */
    "force_unsubscribe_version_notify": Anonymize<Icrujen33bbibf>;
    /**
     *See [`Pallet::limited_reserve_transfer_assets`].
     */
    "limited_reserve_transfer_assets": Anonymize<I5gi8h3e5lkbeq>;
    /**
     *See [`Pallet::limited_teleport_assets`].
     */
    "limited_teleport_assets": Anonymize<I5gi8h3e5lkbeq>;
    /**
     *See [`Pallet::force_suspension`].
     */
    "force_suspension": Anonymize<Ibgm4rnf22lal1>;
    /**
     *See [`Pallet::transfer_assets`].
     */
    "transfer_assets": Anonymize<I5gi8h3e5lkbeq>;
}>;
export type I5088lfff92ve7 = AnonymousEnum<{
    /**
     *See [`Pallet::transfer`].
     */
    "transfer": Anonymize<I6t8mv3ij8f6jn>;
    /**
     *See [`Pallet::transfer_multiasset`].
     */
    "transfer_multiasset": Anonymize<Idu1ujel33jksu>;
    /**
     *See [`Pallet::transfer_with_fee`].
     */
    "transfer_with_fee": Anonymize<I1ii8c8cvda9o5>;
    /**
     *See [`Pallet::transfer_multiasset_with_fee`].
     */
    "transfer_multiasset_with_fee": Anonymize<I40fog3d0qlub1>;
    /**
     *See [`Pallet::transfer_multicurrencies`].
     */
    "transfer_multicurrencies": Anonymize<Ibahh2k28pd3rl>;
    /**
     *See [`Pallet::transfer_multiassets`].
     */
    "transfer_multiassets": Anonymize<Iaif2nhfhk9qc0>;
}>;
export type I6t8mv3ij8f6jn = {
    "currency_id": number;
    "amount": bigint;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type I1ii8c8cvda9o5 = {
    "currency_id": number;
    "amount": bigint;
    "fee": bigint;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type Ibahh2k28pd3rl = {
    "currencies": Anonymize<If9jidduiuq7vv>;
    "fee_item": number;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type I46ka778gu5a9a = AnonymousEnum<{
    /**
     *See [`Pallet::add_oracle`].
     */
    "add_oracle": Anonymize<Iabgdocrka40v9>;
    /**
     *See [`Pallet::remove_oracle`].
     */
    "remove_oracle": Anonymize<Iabgdocrka40v9>;
}>;
export type I8fkfedbgu1sn3 = {
    "reason": FixedSizeBinary<32>;
    "who": SS58String;
    "finder": SS58String;
    "deposit": bigint;
    "closes"?: Anonymize<I4arjljr6dpflb>;
    "tips": Anonymize<Iba9inugg1atvo>;
    "finders_fee": boolean;
};
export type Iegjdtqhbb6qh9 = [Anonymize<I25j21n2fkc116>, bigint];
export type I25j21n2fkc116 = Array<Anonymize<I2e1ekg17a2uj2>>;
export type Ic3orq32is6lrl = [SS58String, bigint, bigint];
export type I974uplh4fafs4 = [bigint, Anonymize<I35p85j063s0il>, Binary];
export type I52nkon7v46cta = {
    "name"?: Anonymize<Iabpgqcjikia83>;
    "asset_type": Anonymize<I45f5qb3gfdtr3>;
    "existential_deposit": bigint;
    "symbol"?: Anonymize<Iabpgqcjikia83>;
    "decimals"?: Anonymize<I4arjljr6dpflb>;
    "xcm_rate_limit"?: Anonymize<I35p85j063s0il>;
    "is_sufficient": boolean;
};
export type Isibf8mrredhc = {
    "genesis_hash": FixedSizeBinary<32>;
    "last_block_hash": FixedSizeBinary<32>;
};
export type I8ikpj86u2na1q = {
    "hub_reserve": bigint;
    "shares": bigint;
    "protocol_shares": bigint;
    "cap": bigint;
    "tradable": number;
};
export type I23jd67h2erm49 = {
    "value": bigint;
    "negative": boolean;
};
export type Icbsch55a85u5u = {
    "asset_id": number;
    "amount": bigint;
    "shares": bigint;
    "price": Anonymize<I200n1ov5tbcvr>;
};
export type I5ugnv0dol8v8t = {
    "id": number;
    "owner": SS58String;
    "updated_at": number;
    "total_shares_z": bigint;
    "accumulated_rpz": bigint;
    "reward_currency": number;
    "pending_rewards": bigint;
    "accumulated_paid_rewards": bigint;
    "yield_per_period": bigint;
    "planned_yielding_periods": number;
    "blocks_per_period": number;
    "incentivized_asset": number;
    "max_reward_per_period": bigint;
    "min_deposit": bigint;
    "live_yield_farms_count": number;
    "total_yield_farms_count": number;
    "price_adjustment": bigint;
    "state": Anonymize<Ichuq5bidsq9a6>;
};
export type Ichuq5bidsq9a6 = AnonymousEnum<{
    "Active": undefined;
    "Stopped": undefined;
    "Terminated": undefined;
}>;
export type I1ksaufim9dq1c = {
    "id": number;
    "updated_at": number;
    "total_shares": bigint;
    "total_valued_shares": bigint;
    "accumulated_rpvs": bigint;
    "accumulated_rpz": bigint;
    "loyalty_curve"?: Anonymize<Ieot4d4ofvtguv>;
    "multiplier": bigint;
    "state": Anonymize<Ichuq5bidsq9a6>;
    "entries_count": bigint;
    "left_to_distribute": bigint;
    "total_stopped": number;
};
export type I3rvqhkck00laj = {
    "shares": bigint;
    "amm_pool_id": number;
    "yield_farm_entries": Anonymize<Ic7o3lvdma5qc6>;
};
export type Ic7o3lvdma5qc6 = Array<Anonymize<I9ae7v8fknho35>>;
export type I9ae7v8fknho35 = {
    "global_farm_id": number;
    "yield_farm_id": number;
    "valued_shares": bigint;
    "accumulated_rpvs": bigint;
    "accumulated_claimed_rewards": bigint;
    "entered_at": number;
    "updated_at": number;
    "stopped_at_creation": number;
};
export type I7bcpl5g2rcql5 = {
    "owner": SS58String;
    "asset_in": number;
    "asset_out": number;
    "amount_in": bigint;
    "amount_out": bigint;
    "partially_fillable": boolean;
};
export type I4vdvk2616mp4t = {
    "volume_in": bigint;
    "volume_out": bigint;
    "limit": bigint;
};
export type I48olja7kd2ijk = {
    "liquidity": bigint;
    "limit": bigint;
};
export type I4q0p5rehstne = AnonymousEnum<{
    "Lock": undefined;
    "LockAndUnlock": undefined;
    "Unlock": undefined;
}>;
export type Ibn3i0ad6beo5l = {
    "asset_fee": number;
    "protocol_fee": number;
    "timestamp": number;
};
export type I10uqvdcdcld3o = {
    "total_stake": bigint;
    "accumulated_reward_per_stake": bigint;
    "pot_reserved_balance": bigint;
};
export type I3fgr93o42d9hi = {
    "stake": bigint;
    "action_points": bigint;
    "reward_per_stake": bigint;
    "created_at": number;
    "accumulated_slash_points": bigint;
    "accumulated_unpaid_rewards": bigint;
    "accumulated_locked_rewards": bigint;
};
export type Ihjc2vmjfhsmq = Array<Anonymize<Ievs2pa0k25ii7>>;
export type Ievs2pa0k25ii7 = [number, Anonymize<I663kh18bno0fo>];
export type I663kh18bno0fo = {
    "amount": bigint;
    "conviction": VotingConviction;
};
export type I1p5pqg6bllgtl = {
    "assets": Anonymize<Icgljjb6j82uhn>;
    "initial_amplification": number;
    "final_amplification": number;
    "initial_block": number;
    "final_block": number;
    "fee": number;
};
export type I9qpa0evftgoo5 = [Anonymize<I4k5pg22d1rdhq>, bigint];
export type I1stghsu756nk9 = [number, Anonymize<I4k5pg22d1rdhq>];
export type I66gvo4ilpv28i = {
    "shares": bigint;
    "amm_pool_id": SS58String;
    "yield_farm_entries": Anonymize<Ic7o3lvdma5qc6>;
};
export type Ibt9i4631ja7qv = Array<Anonymize<Iape8ueqkc028j>>;
export type Iape8ueqkc028j = (Anonymize<I4ejvohnsneemk>) | undefined;
export type I4ejvohnsneemk = {
    "maybe_id"?: Anonymize<I4s6vifaf8k998>;
    "priority": number;
    "call": PreimagesBounded;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "origin": Anonymize<Id44ari0hl56lm>;
};
export type I7dp637m60bg7s = Array<Anonymize<Ibrjleca7ff0ct>>;
export type Ibrjleca7ff0ct = [Anonymize<Ieiqgknk2nvh21>, Anonymize<Ivkraim88i8dl>];
export type Ieiqgknk2nvh21 = [FixedSizeBinary<8>, Anonymize<I9jd27rnpm8ttv>];
export type Ivkraim88i8dl = {
    "price": Anonymize<Idvjpcmf9rj0vv>;
    "volume": Anonymize<Iffidh7c70r6f6>;
    "liquidity": Anonymize<I4ldd8bihcoq20>;
    "updated_at": number;
};
export type Idvjpcmf9rj0vv = {
    "n": bigint;
    "d": bigint;
};
export type Iffidh7c70r6f6 = {
    "a_in": bigint;
    "b_out": bigint;
    "a_out": bigint;
    "b_in": bigint;
};
export type I4ldd8bihcoq20 = {
    "a": bigint;
    "b": bigint;
};
export type Ifmar1ir5rft6l = [Anonymize<Ivkraim88i8dl>, number];
export type I1os9h4ivict7u = [FixedSizeBinary<8>, Anonymize<I9jd27rnpm8ttv>, Anonymize<I9m0752cdvui5o>];
export type I9m0752cdvui5o = AnonymousEnum<{
    "LastBlock": undefined;
    "Short": undefined;
    "TenMinutes": undefined;
    "Hour": undefined;
    "Day": undefined;
    "Week": undefined;
}>;
export type Isa48262v9oqu = Array<Anonymize<Ieiqgknk2nvh21>>;
export type Ie5fbn0f5capo3 = {
    "min_fee": number;
    "max_fee": number;
    "decay": bigint;
    "amplification": bigint;
};
export type Ia9ai1mp1viqjd = {
    "start": number;
    "end": number;
};
export type Ie4gu6f3b6uctq = [number, bigint, SS58String];
export type Ib415e5slg7dos = ResultPayload<Anonymize<Id8pc7rjs8oa3c>, TransactionValidityError>;
export type I6ef6bgpp6bbav = ResultPayload<Anonymize<I7ag5k7bmmgq3j>, Anonymize<I34p6lklavdpe2>>;
export type I9nuef6i0lkkf8 = ResultPayload<Anonymize<Ie3rl25flint9v>, Anonymize<I34p6lklavdpe2>>;
export type I2475qu0apqf5t = Array<Anonymize<I6kbttpt0ros6i>>;
export type I6kbttpt0ros6i = {
    "phase": Phase;
    "event": Anonymize<Ie4o2kpvlkjc20>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type Ie4o2kpvlkjc20 = AnonymousEnum<{
    "System": Anonymize<I7282kqodsngsp>;
    "Utility": Anonymize<I6tfmspqpfj4pi>;
    "Multisig": Anonymize<Iedkedgjicffbf>;
    "Proxy": Anonymize<I4ge36hj773n2f>;
    "Vesting": VestingEvent;
    "Scheduler": Anonymize<Idepo3b1fn6b3a>;
    "Preimage": PreimageEvent;
    "ParachainSystem": Anonymize<Iattscgt3q8j3r>;
    "XcmpQueue": Anonymize<I8umj05c18ked4>;
    "CumulusXcm": Anonymize<I4f9jlfai43i7r>;
    "DmpQueue": Anonymize<I5s7k7819l2j41>;
    "PolkadotXcm": Anonymize<I4r0b7tct6o9ht>;
    "Balances": Anonymize<Ipa3jfc46ilad>;
    "TransactionPayment": TransactionPaymentEvent;
    "CollatorSelection": Anonymize<I2k46ltub59oi1>;
    "Session": SessionEvent;
    "Identity": Anonymize<Ifugjudpfm708s>;
    "Democracy": Anonymize<Icfq8ap3e5p73t>;
    "Council": Anonymize<I31vpk212o78ss>;
    "Treasury": Anonymize<I3ul3cf3die25m>;
    "Bounties": Anonymize<Ialepu0vuuvje8>;
    "Lottery": Anonymize<I8vg8ohhden12t>;
    "TechnicalCommittee": Anonymize<I31vpk212o78ss>;
    "TechnicalMembership": Anonymize<Ibraem55mlft17>;
    "PhragmenElection": Anonymize<I4iamd5rd51ec2>;
    "Tips": Anonymize<Imaosic05it19>;
    "ChildBounties": ChildBountiesEvent;
    "ChainBridge": Anonymize<I6rkaq3ijqb566>;
    "XcmBridge": Anonymize<Idne7u2n7hrn30>;
    "XTransfer": Anonymize<Ianiea8edkp6ug>;
    "PhalaRegistry": Anonymize<I2b6kch0pgc7sh>;
    "PhalaComputation": Anonymize<I1s2h7uolcs2gt>;
    "PhalaStakePool": undefined;
    "Assets": AssetsEvent;
    "AssetsRegistry": Anonymize<I1s920gna6mfcj>;
    "PhalaStakePoolv2": Anonymize<I9tg40g9qio0cs>;
    "PhalaVault": Anonymize<I9q81qthauhnqf>;
    "PhalaWrappedBalances": Anonymize<Ibnbjoj89lbu9t>;
    "PhalaBasePool": Anonymize<Iaadtb30eflmf3>;
    "Uniques": Anonymize<Ia0j71vjrjqu9p>;
    "RmrkCore": Anonymize<I55o5eqokdpfpg>;
    "RmrkEquip": Anonymize<I9it0aqsa2gi7p>;
    "RmrkMarket": Anonymize<I18cu0963032lj>;
    "PWNftSale": Anonymize<If21pgjrd9nomd>;
    "PWIncubation": Anonymize<I5orvk2ouioseb>;
    "PWMarketplace": Anonymize<Ip5f6el4hpqa1>;
    "SygmaAccessSegregator": Anonymize<I5m28oic15nfhj>;
    "SygmaBasicFeeHandler": Anonymize<I1ak528ok7k6jk>;
    "SygmaBridge": Anonymize<I61mboln29qs8v>;
    "SygmaFeeHandlerRouter": Anonymize<I1qdt16l0lgv0>;
    "SygmaWrapper": Anonymize<Idne7u2n7hrn30>;
    "SygmaPercentageFeeHandler": Anonymize<I8cm7e3mlhvjjh>;
    "PalletIndex": Anonymize<I1e6fpb3424k9c>;
}>;
export type I7282kqodsngsp = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I43gldv85ige6p>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
}>;
export type I43gldv85ige6p = {
    "dispatch_error": Anonymize<I3dsucu19hnc49>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type I3dsucu19hnc49 = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I4jocjuk7q95g4>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I4jocjuk7q95g4 = AnonymousEnum<{
    "System": Anonymize<I2b5jj3f5ebo54>;
    "Timestamp": undefined;
    "RandomnessCollectiveFlip": undefined;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Preimage": Anonymize<I4cfhml1prt4lu>;
    "ParachainInfo": undefined;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "XcmpQueue": Anonymize<Idcmk0ovgq4f24>;
    "CumulusXcm": undefined;
    "DmpQueue": Anonymize<I5634m9tbik43k>;
    "PolkadotXcm": Anonymize<I93avf3rpkhb2d>;
    "Balances": Anonymize<Ife9031aj6on0k>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I1ud9but9pj0h0>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "Identity": Anonymize<I4burhm31qmut2>;
    "Democracy": Anonymize<I67neb7i10udig>;
    "Council": Anonymize<Icapevgbpfn5p9>;
    "Treasury": Anonymize<I4emjcpgu2307d>;
    "Bounties": Anonymize<Ibfvjqqblobf53>;
    "Lottery": Anonymize<I3r9fkqeo720fm>;
    "TechnicalCommittee": Anonymize<Icapevgbpfn5p9>;
    "TechnicalMembership": Anonymize<Ie3flrv31mi7gh>;
    "PhragmenElection": Anonymize<I96u72l8br1ego>;
    "Tips": Anonymize<Ia73kduq8om790>;
    "ChildBounties": Anonymize<I4u5ou5u3tthff>;
    "ChainBridge": Anonymize<I6rumhm0lt7lum>;
    "XcmBridge": Anonymize<I19ql3b6g5vlqo>;
    "XTransfer": Anonymize<If31v6pr89o48n>;
    "PhalaMq": Anonymize<I7csuhl0hj3bi4>;
    "PhalaRegistry": Anonymize<Icsrhcrbb4d80s>;
    "PhalaComputation": Anonymize<Ifut0meo4rqdhn>;
    "PhalaStakePool": undefined;
    "Assets": Anonymize<Ifn5p2ma236tv1>;
    "AssetsRegistry": Anonymize<Ibkijdkm7reooc>;
    "PhalaStakePoolv2": Anonymize<I1kjdkesqojce1>;
    "PhalaVault": Anonymize<I8t4petgo43mkr>;
    "PhalaWrappedBalances": Anonymize<I84uo43qg6m16c>;
    "PhalaBasePool": Anonymize<Iddaquu1algj03>;
    "Uniques": Anonymize<Ienq2ge2rhv4jm>;
    "RmrkCore": Anonymize<I3759m0a96qion>;
    "RmrkEquip": Anonymize<Ilglkdu2iq348>;
    "RmrkMarket": Anonymize<I9oopoegfb4dgg>;
    "PWNftSale": Anonymize<I13v692qjihtdv>;
    "PWIncubation": Anonymize<I5pfh4dm70i4t6>;
    "PWMarketplace": undefined;
    "SygmaAccessSegregator": Anonymize<I1l9ih8mo83ar8>;
    "SygmaBasicFeeHandler": Anonymize<I8j0hqauqvv5ds>;
    "SygmaBridge": Anonymize<I1gfd31lmg2dnr>;
    "SygmaFeeHandlerRouter": Anonymize<I8j0hqauqvv5ds>;
    "SygmaWrapper": Anonymize<I2h6542dinnsrc>;
    "SygmaPercentageFeeHandler": Anonymize<Iefm1ab9pcog4k>;
    "PalletIndex": Anonymize<I2u1uo8mu67sq2>;
}>;
export type I2b5jj3f5ebo54 = AnonymousEnum<{
    /**
     *The name of specification does not match between the current runtime
     *and the new runtime.
     */
    "InvalidSpecName": undefined;
    /**
     *The specification version is not allowed to decrease between the current runtime
     *and the new runtime.
     */
    "SpecVersionNeedsToIncrease": undefined;
    /**
     *Failed to extract the runtime version from the new runtime.
     *
     *Either calling `Core_version` or decoding `RuntimeVersion` failed.
     */
    "FailedToExtractRuntimeVersion": undefined;
    /**
     *Suicide called when the account has non-default composite data.
     */
    "NonDefaultComposite": undefined;
    /**
     *There is a non-zero reference count preventing the account from being purged.
     */
    "NonZeroRefCount": undefined;
    /**
     *The origin filter prevent the call to be dispatched.
     */
    "CallFiltered": undefined;
}>;
export type Idcmk0ovgq4f24 = AnonymousEnum<{
    /**
     *Failed to send XCM message.
     */
    "FailedToSend": undefined;
    /**
     *Bad XCM origin.
     */
    "BadXcmOrigin": undefined;
    /**
     *Bad XCM data.
     */
    "BadXcm": undefined;
    /**
     *Bad overweight index.
     */
    "BadOverweightIndex": undefined;
    /**
     *Provided weight is possibly not enough to execute the message.
     */
    "WeightOverLimit": undefined;
}>;
export type I5634m9tbik43k = AnonymousEnum<{
    /**
     *The message index given is unknown.
     */
    "Unknown": undefined;
    /**
     *The amount of weight given is possibly not enough for executing the message.
     */
    "OverLimit": undefined;
}>;
export type I93avf3rpkhb2d = AnonymousEnum<{
    /**
     *The desired destination was unreachable, generally because there is a no way of routing
     *to it.
     */
    "Unreachable": undefined;
    /**
     *There was some other issue (i.e. not to do with routing) in sending the message.
     *Perhaps a lack of space for buffering the message.
     */
    "SendFailure": undefined;
    /**
     *The message execution fails the filter.
     */
    "Filtered": undefined;
    /**
     *The message's weight could not be determined.
     */
    "UnweighableMessage": undefined;
    /**
     *The destination `MultiLocation` provided cannot be inverted.
     */
    "DestinationNotInvertible": undefined;
    /**
     *The assets to be sent are empty.
     */
    "Empty": undefined;
    /**
     *Could not re-anchor the assets to declare the fees for the destination chain.
     */
    "CannotReanchor": undefined;
    /**
     *Too many assets have been attempted for transfer.
     */
    "TooManyAssets": undefined;
    /**
     *Origin is invalid for sending.
     */
    "InvalidOrigin": undefined;
    /**
     *The version of the `Versioned` value used is not able to be interpreted.
     */
    "BadVersion": undefined;
    /**
     *The given location could not be used (e.g. because it cannot be expressed in the
     *desired version of XCM).
     */
    "BadLocation": undefined;
    /**
     *The referenced subscription could not be found.
     */
    "NoSubscription": undefined;
    /**
     *The location is invalid since it already has a subscription from us.
     */
    "AlreadySubscribed": undefined;
    /**
     *Invalid asset for the operation.
     */
    "InvalidAsset": undefined;
    /**
     *The owner does not own (all) of the asset that they wish to do the operation on.
     */
    "LowBalance": undefined;
    /**
     *The asset owner has too many locks on the asset.
     */
    "TooManyLocks": undefined;
    /**
     *The given account is not an identifiable sovereign account for any location.
     */
    "AccountNotSovereign": undefined;
    /**
     *The operation required fees to be paid which the initiator could not meet.
     */
    "FeesNotMet": undefined;
    /**
     *A remote lock with the corresponding data could not be found.
     */
    "LockNotFound": undefined;
    /**
     *The unlock operation cannot succeed because there are still consumers of the lock.
     */
    "InUse": undefined;
}>;
export type Ife9031aj6on0k = AnonymousEnum<{
    /**
     *Vesting balance too high to send value.
     */
    "VestingBalance": undefined;
    /**
     *Account liquidity restrictions prevent withdrawal.
     */
    "LiquidityRestrictions": undefined;
    /**
     *Balance too low to send value.
     */
    "InsufficientBalance": undefined;
    /**
     *Value too low to create account due to existential deposit.
     */
    "ExistentialDeposit": undefined;
    /**
     *Transfer/payment would kill account.
     */
    "Expendability": undefined;
    /**
     *A vesting schedule already exists for this account.
     */
    "ExistingVestingSchedule": undefined;
    /**
     *Beneficiary account must pre-exist.
     */
    "DeadAccount": undefined;
    /**
     *Number of named reserves exceed `MaxReserves`.
     */
    "TooManyReserves": undefined;
    /**
     *Number of holds exceed `MaxHolds`.
     */
    "TooManyHolds": undefined;
    /**
     *Number of freezes exceed `MaxFreezes`.
     */
    "TooManyFreezes": undefined;
}>;
export type I1ud9but9pj0h0 = AnonymousEnum<{
    /**
     *The pallet has too many candidates.
     */
    "TooManyCandidates": undefined;
    /**
     *Leaving would result in too few candidates.
     */
    "TooFewEligibleCollators": undefined;
    /**
     *Account is already a candidate.
     */
    "AlreadyCandidate": undefined;
    /**
     *Account is not a candidate.
     */
    "NotCandidate": undefined;
    /**
     *There are too many Invulnerables.
     */
    "TooManyInvulnerables": undefined;
    /**
     *Account is already an Invulnerable.
     */
    "AlreadyInvulnerable": undefined;
    /**
     *Account is not an Invulnerable.
     */
    "NotInvulnerable": undefined;
    /**
     *Account has no associated validator ID.
     */
    "NoAssociatedValidatorId": undefined;
    /**
     *Validator ID is not yet registered.
     */
    "ValidatorNotRegistered": undefined;
}>;
export type I4burhm31qmut2 = AnonymousEnum<{
    /**
     *Too many subs-accounts.
     */
    "TooManySubAccounts": undefined;
    /**
     *Account isn't found.
     */
    "NotFound": undefined;
    /**
     *Account isn't named.
     */
    "NotNamed": undefined;
    /**
     *Empty index.
     */
    "EmptyIndex": undefined;
    /**
     *Fee is changed.
     */
    "FeeChanged": undefined;
    /**
     *No identity found.
     */
    "NoIdentity": undefined;
    /**
     *Sticky judgement.
     */
    "StickyJudgement": undefined;
    /**
     *Judgement given.
     */
    "JudgementGiven": undefined;
    /**
     *Invalid judgement.
     */
    "InvalidJudgement": undefined;
    /**
     *The index is invalid.
     */
    "InvalidIndex": undefined;
    /**
     *The target is invalid.
     */
    "InvalidTarget": undefined;
    /**
     *Too many additional fields.
     */
    "TooManyFields": undefined;
    /**
     *Maximum amount of registrars reached. Cannot add any more.
     */
    "TooManyRegistrars": undefined;
    /**
     *Account ID is already named.
     */
    "AlreadyClaimed": undefined;
    /**
     *Sender is not a sub-account.
     */
    "NotSub": undefined;
    /**
     *Sub-account isn't owned by sender.
     */
    "NotOwned": undefined;
    /**
     *The provided judgement was for a different identity.
     */
    "JudgementForDifferentIdentity": undefined;
    /**
     *Error that occurs when there is an issue paying for judgement.
     */
    "JudgementPaymentFailed": undefined;
}>;
export type I4emjcpgu2307d = AnonymousEnum<{
    /**
     *Proposer's balance is too low.
     */
    "InsufficientProposersBalance": undefined;
    /**
     *No proposal or bounty at that index.
     */
    "InvalidIndex": undefined;
    /**
     *Too many approvals in the queue.
     */
    "TooManyApprovals": undefined;
    /**
     *The spend origin is valid but the amount it is allowed to spend is lower than the
     *amount to be spent.
     */
    "InsufficientPermission": undefined;
    /**
     *Proposal has not been approved.
     */
    "ProposalNotApproved": undefined;
}>;
export type I3r9fkqeo720fm = AnonymousEnum<{
    /**
     *A lottery has not been configured.
     */
    "NotConfigured": undefined;
    /**
     *A lottery is already in progress.
     */
    "InProgress": undefined;
    /**
     *A lottery has already ended.
     */
    "AlreadyEnded": undefined;
    /**
     *The call is not valid for an open lottery.
     */
    "InvalidCall": undefined;
    /**
     *You are already participating in the lottery with this call.
     */
    "AlreadyParticipating": undefined;
    /**
     *Too many calls for a single lottery.
     */
    "TooManyCalls": undefined;
    /**
     *Failed to encode calls
     */
    "EncodingFailed": undefined;
}>;
export type Ia73kduq8om790 = AnonymousEnum<{
    /**
     *The reason given is just too big.
     */
    "ReasonTooBig": undefined;
    /**
     *The tip was already found/started.
     */
    "AlreadyKnown": undefined;
    /**
     *The tip hash is unknown.
     */
    "UnknownTip": undefined;
    /**
     *The account attempting to retract the tip is not the finder of the tip.
     */
    "NotFinder": undefined;
    /**
     *The tip cannot be claimed/closed because there are not enough tippers yet.
     */
    "StillOpen": undefined;
    /**
     *The tip cannot be claimed/closed because it's still in the countdown period.
     */
    "Premature": undefined;
}>;
export type I6rumhm0lt7lum = AnonymousEnum<{
    /**
     *Relayer threshold not set
     */
    "_ThresholdNotSet": undefined;
    /**
     *Provided chain Id is not valid
     */
    "InvalidChainId": undefined;
    /**
     *Relayer threshold cannot be 0
     */
    "InvalidThreshold": undefined;
    /**
     *Interactions with this chain is not permitted
     */
    "ChainNotWhitelisted": undefined;
    /**
     *Chain has already been enabled
     */
    "ChainAlreadyWhitelisted": undefined;
    /**
     *Resource ID provided isn't mapped to anything
     */
    "_ResourceDoesNotExist": undefined;
    /**
     *Relayer already in set
     */
    "RelayerAlreadyExists": undefined;
    /**
     *Provided accountId is not a relayer
     */
    "RelayerInvalid": undefined;
    /**
     *Protected operation, must be performed by relayer
     */
    "MustBeRelayer": undefined;
    /**
     *Relayer has already submitted some vote for this proposal
     */
    "RelayerAlreadyVoted": undefined;
    /**
     *A proposal with these parameters has already been submitted
     */
    "ProposalAlreadyExists": undefined;
    /**
     *No proposal with the ID was found
     */
    "ProposalDoesNotExist": undefined;
    /**
     *Cannot complete proposal, needs more votes
     */
    "ProposalNotComplete": undefined;
    /**
     *Proposal has either failed or succeeded
     */
    "ProposalAlreadyComplete": undefined;
    /**
     *Lifetime of proposal has been exceeded
     */
    "ProposalExpired": undefined;
    /**
     *Got wrong paremeter when update fee
     */
    "InvalidFeeOption": undefined;
    /**
     *Unkonwn asset
     */
    "ExtractAssetFailed": undefined;
    /**
     *Unknown destnation
     */
    "ExtractDestFailed": undefined;
    /**
     *Asset can not pay as fee
     */
    "CannotPayAsFee": undefined;
    /**
     *Transfer failed
     */
    "TransactFailed": undefined;
    /**
     *Infusficient balance to withdraw
     */
    "InsufficientBalance": undefined;
    /**
     *Too expensive fee for withdrawn asset
     */
    "FeeTooExpensive": undefined;
    /**
     *Can not extract asset reserve location
     */
    "CannotDetermineReservedLocation": undefined;
    /**
     *Can not extract dest location
     */
    "DestUnrecognized": undefined;
    /**
     *Assets not registered through pallet-assets or pallet-uniques
     */
    "AssetNotRegistered": undefined;
    /**
     *Convertion failed from resource id
     */
    "AssetConversionFailed": undefined;
    /**
     *Function unimplemented
     */
    "Unimplemented": undefined;
    /**
     *Can not transfer assets to dest due to some reasons
     */
    "CannotDepositAsset": undefined;
    /**
     *Trying to push bridge event count more than `BridgeEventLimit`
     */
    "BridgeEventOverflow": undefined;
}>;
export type I19ql3b6g5vlqo = AnonymousEnum<{
    "_UnknownError": undefined;
    /**
     *Can not reanchor asset location according dest
     */
    "CannotReanchor": undefined;
    /**
     *Failed to measure weight of a XCM message
     */
    "UnweighableMessage": undefined;
    "_FeePaymentEmpty": undefined;
    /**
     *XCM message executeion failed due to some reasons
     */
    "ExecutionFailed": undefined;
    "_UnknownTransfer": undefined;
    /**
     *Asset not been registered or not been supported
     */
    "AssetNotFound": undefined;
    "_LocationInvertFailed": undefined;
    /**
     *Extract dest location failed
     */
    "IllegalDestination": undefined;
    /**
     *Can not transfer asset to dest
     */
    "CannotDepositAsset": undefined;
    /**
     *Transfer type not valid
     */
    "UnknownTransferType": undefined;
    /**
     *Unimplemented function
     */
    "Unimplemented": undefined;
}>;
export type If31v6pr89o48n = AnonymousEnum<{
    "_TransactFailed": undefined;
    "UnknownAsset": undefined;
    "UnsupportedDest": undefined;
    "UnhandledTransfer": undefined;
}>;
export type I7csuhl0hj3bi4 = AnonymousEnum<{
    "BadSender": undefined;
    "BadSequence": undefined;
    "BadDestination": undefined;
}>;
export type Icsrhcrbb4d80s = AnonymousEnum<{
    "CannotHandleUnknownMessage": undefined;
    "InvalidSender": undefined;
    "InvalidPubKey": undefined;
    "MalformedSignature": undefined;
    "InvalidSignatureLength": undefined;
    "InvalidSignature": undefined;
    "UnknownContract": undefined;
    "InvalidIASSigningCert": undefined;
    "InvalidReport": undefined;
    "InvalidQuoteStatus": undefined;
    "BadIASReport": undefined;
    "OutdatedIASReport": undefined;
    "UnknownQuoteBodyFormat": undefined;
    "InvalidDCAPQuote": undefined;
    "InvalidRuntimeInfoHash": undefined;
    "InvalidRuntimeInfo": undefined;
    "InvalidInput": undefined;
    "InvalidBenchReport": undefined;
    "WorkerNotFound": undefined;
    "NoneAttestationDisabled": undefined;
    "InvalidGatekeeper": undefined;
    "InvalidMasterPubkey": undefined;
    "MasterKeyMismatch": undefined;
    "MasterKeyUninitialized": undefined;
    "GenesisBlockHashRejected": undefined;
    "GenesisBlockHashAlreadyExists": undefined;
    "GenesisBlockHashNotFound": undefined;
    "PRuntimeRejected": undefined;
    "PRuntimeAlreadyExists": undefined;
    "PRuntimeNotFound": undefined;
    "UnknownCluster": undefined;
    "NotImplemented": undefined;
    "CannotRemoveLastGatekeeper": undefined;
    "MasterKeyInRotation": undefined;
    "InvalidRotatedMasterPubkey": undefined;
    "InvalidEndpointSigningTime": undefined;
    /**
     *Migration root not authorized
     */
    "NotMigrationRoot": undefined;
    "ParachainIdMismatch": undefined;
    "InvalidConsensusVersion": undefined;
    "UnsupportedAttestationType": undefined;
}>;
export type Ifut0meo4rqdhn = AnonymousEnum<{
    /**
     *The transaction is sent by an unauthorized sender
     */
    "BadSender": undefined;
    /**
     *Deprecated.
     */
    "_InvalidMessage": undefined;
    /**
     *The worker is not registered in the registry.
     */
    "WorkerNotRegistered": undefined;
    /**
     *Deprecated
     */
    "_GatekeeperNotRegistered": undefined;
    /**
     *Not permitted because the session is already bound with another worker.
     */
    "DuplicateBoundSession": undefined;
    /**
     *There's no benchmark result on the blockchain.
     */
    "BenchmarkMissing": undefined;
    /**
     *session not found.
     */
    "SessionNotFound": undefined;
    /**
     *Not permitted because the session is not bound with a worker.
     */
    "SessionNotBound": undefined;
    /**
     *Worker is not in `Ready` state to proceed.
     */
    "WorkerNotReady": undefined;
    /**
     *Worker is not in `Computation` state to stop computing.
     */
    "WorkerNotComputing": undefined;
    /**
     *Not permitted because the worker is not bound with a worker account.
     */
    "WorkerNotBound": undefined;
    /**
     *Cannot reclaim the worker because it's still in cooldown period.
     */
    "CoolDownNotReady": undefined;
    /**
     *Cannot start computing because there's too little stake.
     */
    "InsufficientStake": undefined;
    /**
     *Cannot start computing because there's too much stake (exceeds Vmax).
     */
    "TooMuchStake": undefined;
    /**
     *Internal error. The tokenomic parameter is not set.
     */
    "InternalErrorBadTokenomicParameters": undefined;
    /**
     *Not permitted because the worker is already bound with another session account.
     */
    "DuplicateBoundWorker": undefined;
    /**
     *Indicating the initial benchmark score is too low to start computing.
     */
    "BenchmarkTooLow": undefined;
    /**
     *Internal error. A worker should never start with existing stake in the storage.
     */
    "InternalErrorCannotStartWithExistingStake": undefined;
    /**
     *Migration root not authorized
     */
    "NotMigrationRoot": undefined;
    "NonceIndexInvalid": undefined;
    "BudgetUpdateBlockInvalid": undefined;
    "BudgetExceedMaxLimit": undefined;
    /**
     *The worker need to be re-registered to be added to a pool.
     */
    "WorkerReregisterNeeded": undefined;
}>;
export type Ifn5p2ma236tv1 = AnonymousEnum<{
    /**
     *Account balance must be greater than or equal to the transfer amount.
     */
    "BalanceLow": undefined;
    /**
     *The account to alter does not exist.
     */
    "NoAccount": undefined;
    /**
     *The signing account has no permission to do the operation.
     */
    "NoPermission": undefined;
    /**
     *The given asset ID is unknown.
     */
    "Unknown": undefined;
    /**
     *The origin account is frozen.
     */
    "Frozen": undefined;
    /**
     *The asset ID is already taken.
     */
    "InUse": undefined;
    /**
     *Invalid witness data given.
     */
    "BadWitness": undefined;
    /**
     *Minimum balance should be non-zero.
     */
    "MinBalanceZero": undefined;
    /**
     *Unable to increment the consumer reference counters on the account. Either no provider
     *reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
     *fewer then the maximum number of consumers has been reached.
     */
    "UnavailableConsumer": undefined;
    /**
     *Invalid metadata given.
     */
    "BadMetadata": undefined;
    /**
     *No approval exists that would allow the transfer.
     */
    "Unapproved": undefined;
    /**
     *The source account would not survive the transfer and it needs to stay alive.
     */
    "WouldDie": undefined;
    /**
     *The asset-account already exists.
     */
    "AlreadyExists": undefined;
    /**
     *The asset-account doesn't have an associated deposit.
     */
    "NoDeposit": undefined;
    /**
     *The operation would result in funds being burned.
     */
    "WouldBurn": undefined;
    /**
     *The asset is a live asset and is actively being used. Usually emit for operations such
     *as `start_destroy` which require the asset to be in a destroying state.
     */
    "LiveAsset": undefined;
    /**
     *The asset is not live, and likely being destroyed.
     */
    "AssetNotLive": undefined;
    /**
     *The asset status is not the expected status.
     */
    "IncorrectStatus": undefined;
    /**
     *The asset should be frozen before the given operation.
     */
    "NotFrozen": undefined;
    /**
     *Callback action resulted in error
     */
    "CallbackFailed": undefined;
}>;
export type Ibkijdkm7reooc = AnonymousEnum<{
    "AssetAlreadyExist": undefined;
    "AssetNotRegistered": undefined;
    "BridgeAlreadyEnabled": undefined;
    "BridgeAlreadyDisabled": undefined;
    "FailedToTransactAsset": undefined;
    "DuplictedLocation": undefined;
    "LocationTooLong": undefined;
}>;
export type I1kjdkesqojce1 = AnonymousEnum<{
    /**
     *The worker is not registered in the registry when adding to the pool
     */
    "WorkerNotRegistered": undefined;
    /**
     *The worker doesn't have a valid benchmark when adding to the pool
     */
    "BenchmarkMissing": undefined;
    /**
     *The worker is already added to the pool
     */
    "WorkerExists": undefined;
    /**
     *The worker is already in cd_workers
     */
    "WorkerAlreadyStopped": undefined;
    /**
     *The target worker is not in the pool
     */
    "WorkerDoesNotExist": undefined;
    /**
     *The worker is already added to another pool
     */
    "WorkerInAnotherPool": undefined;
    /**
     *The owner of the pool doesn't have the access to the worker
     *
     *The access to a worker is granted by it's `operator` parameter set by `register_worker`
     */
    "UnauthorizedOperator": undefined;
    /**
     *The caller is not the owner of the pool
     */
    "UnauthorizedPoolOwner": undefined;
    /**
     *The stake capacity is set too low to cover the existing stake
     */
    "InadequateCapacity": undefined;
    /**
     *The stake added to a pool exceeds its capacity
     */
    "StakeExceedsCapacity": undefined;
    /**
     *The specified pool doesn't exist
     */
    "PoolDoesNotExist": undefined;
    "_PoolIsBusy": undefined;
    /**
     *The contributed stake is smaller than the minimum threshold
     */
    "InsufficientContribution": undefined;
    /**
     *The caller has no nft to withdraw
     */
    "NoNftToWithdraw": undefined;
    /**
     *Trying to contribute more than the available balance
     */
    "InsufficientBalance": undefined;
    /**
     *The user doesn't have stake in a pool
     */
    "PoolStakeNotFound": undefined;
    /**
     *Cannot start computing because there's no enough free stake
     */
    "InsufficientFreeStake": undefined;
    /**
     *The withdrawal amount is too small (considered as dust)
     */
    "InvalidWithdrawalAmount": undefined;
    /**
     *Couldn't bind worker and the pool computing subaccount
     */
    "FailedToBindSessionAndWorker": undefined;
    /**
     *Internal error: Cannot withdraw from the subsidy pool. This should never happen.
     */
    "InternalSubsidyPoolCannotWithdraw": undefined;
    /**
     *The pool has already got all the stake completely slashed.
     *
     *In this case, no more funds can be contributed to the pool until all the pending slash
     *has been resolved.
     */
    "PoolBankrupt": undefined;
    /**
     *There's no pending reward to claim
     */
    "NoRewardToClaim": undefined;
    /**
     *The StakePool is not enabled yet.
     */
    "FeatureNotEnabled": undefined;
    /**
     *Failed to add a worker because the number of the workers exceeds the upper limit.
     */
    "WorkersExceedLimit": undefined;
    /**
     *Restarted with a less stake is not allowed in the tokenomic.
     */
    "CannotRestartWithLessStake": undefined;
    /**
     *Invalid amount of balance input when force reward.
     */
    "InvalidForceRewardAmount": undefined;
    /**
     *Withdraw queue is not empty so that we can't restart computing
     */
    "WithdrawQueueNotEmpty": undefined;
    /**
     *Stakepool's collection_id isn't founded
     */
    "MissingCollectionId": undefined;
    /**
     *Vault is forced locked for it has some expired withdrawal
     */
    "VaultIsLocked": undefined;
    /**
     *The target miner is not in the 	`miner` storage
     */
    "SessionDoesNotExist": undefined;
    /**
     *The target worker is not reclaimed and can not be removed from a pool.
     */
    "WorkerIsNotReady": undefined;
    "LockAccountStakeError": undefined;
    "NoLegacyRewardToClaim": undefined;
}>;
export type I8t4petgo43mkr = AnonymousEnum<{
    /**
     *The caller is not the owner of the pool
     */
    "UnauthorizedPoolOwner": undefined;
    /**
     *The withdrawal amount is too small or too large
     */
    "NoEnoughShareToClaim": undefined;
    /**
     *The vault have no owner shares to claim
     */
    "NoRewardToClaim": undefined;
    /**
     *The asset account hasn't been created. It indicates an internal error.
     */
    "AssetAccountNotExist": undefined;
    /**
     *Trying to contribute more than the available balance
     */
    "InsufficientBalance": undefined;
    /**
     *The contributed stake is smaller than the minimum threshold
     */
    "InsufficientContribution": undefined;
    /**
     *The Vault was bankrupt; cannot interact with it unless all the shares are withdrawn.
     */
    "VaultBankrupt": undefined;
    /**
     *The caller has no nft to withdraw
     */
    "NoNftToWithdraw": undefined;
    /**
     *The commission is not changed
     */
    "CommissionNotChanged": undefined;
}>;
export type I84uo43qg6m16c = AnonymousEnum<{
    /**
     *user's `FinanceAccount` does not exist in storage: `StakerAccounts`
     */
    "StakerAccountNotFound": undefined;
    /**
     *Trying to unwrap more than the available balance
     */
    "UnwrapAmountExceedsAvaliableStake": undefined;
    /**
     *Trying to vote more than the available balance
     */
    "VoteAmountLargerThanTotalStakes": undefined;
    /**
     *The vote is not currently on going
     */
    "ReferendumInvalid": undefined;
    /**
     *The vote is now on going and the W-PHA used in voting can not be unlocked
     */
    "ReferendumOngoing": undefined;
    /**
     *The Iteration exceed the max limitaion
     */
    "IterationsIsNotVaild": undefined;
}>;
export type Iddaquu1algj03 = AnonymousEnum<{
    /**
     *basepool's collection_id isn't founded
     */
    "MissCollectionId": undefined;
    /**
     *The pool has already got all the stake completely slashed.
     *
     *In this case, no more funds can be contributed to the pool until all the pending slash
     *has been resolved.
     */
    "PoolBankrupt": undefined;
    /**
     *CheckSub less than zero, indicate share amount is invalid
     */
    "InvalidShareToWithdraw": undefined;
    /**
     *The withdrawal amount is too small (considered as dust)
     */
    "InvalidWithdrawalAmount": undefined;
    /**
     *RMRK errors
     */
    "RmrkError": undefined;
    /**
     *The Specified pid does not match to any pool
     */
    "PoolDoesNotExist": undefined;
    /**
     *Tried to access a pool type that doesn't match the actual pool type in the storage.
     *
     *E.g. Try to access a vault but it's actually a  stake pool.
     */
    "PoolTypeNotMatch": undefined;
    /**
     *NftId does not match any nft
     */
    "NftIdNotFound": undefined;
    /**
     *Occurs when pool's shares is zero
     */
    "InvalidSharePrice": undefined;
    /**
     *Tried to get a `NftGuard` when the nft is locked. It indicates an internal error occured.
     */
    "AttrLocked": undefined;
    /**
     *The caller is not the owner of the pool
     */
    "UnauthorizedPoolOwner": undefined;
    /**
     *Can not add the staker to whitelist because the staker is already in whitelist.
     */
    "AlreadyInContributeWhitelist": undefined;
    /**
     *Invalid staker to contribute because origin isn't in Pool's contribution whitelist.
     */
    "NotInContributeWhitelist": undefined;
    /**
     *Too many stakers in contribution whitelist that exceed the limit
     */
    "ExceedWhitelistMaxLen": undefined;
    /**
     *The pool hasn't have a whitelist created
     */
    "NoWhitelistCreated": undefined;
    /**
     *Too long for pool description length
     */
    "ExceedMaxDescriptionLen": undefined;
    /**
     *Migration root not authorized
     */
    "NotMigrationRoot": undefined;
    /**
     *Burn nft failed
     */
    "BurnNftFailed": undefined;
    "DeprecatedTransferSharesAmountInvalid": undefined;
    /**
     *No reimbursement to claim
     */
    "NoReimbursementToClaim": undefined;
    "InternalSubsidyPoolCannotWithdraw": undefined;
}>;
export type I3759m0a96qion = AnonymousEnum<{
    /**
     *Error names should be descriptive.
     */
    "NoneValue": undefined;
    /**
     *Errors should have helpful documentation associated with them.
     */
    "StorageOverflow": undefined;
    "TooLong": undefined;
    "NoAvailableCollectionId": undefined;
    "NoAvailableResourceId": undefined;
    "MetadataNotSet": undefined;
    "RecipientNotSet": undefined;
    "NoAvailableNftId": undefined;
    "NotInRange": undefined;
    "RoyaltyNotSet": undefined;
    "CollectionUnknown": undefined;
    "NoPermission": undefined;
    "NoWitness": undefined;
    "CollectionNotEmpty": undefined;
    "CollectionFullOrLocked": undefined;
    "CannotSendToDescendentOrSelf": undefined;
    "ResourceAlreadyExists": undefined;
    "NftAlreadyExists": undefined;
    "EmptyResource": undefined;
    /**
     *The recursion limit has been reached.
     */
    "TooManyRecursions": undefined;
    "NftIsLocked": undefined;
    "CannotAcceptNonOwnedNft": undefined;
    "CannotRejectNonOwnedNft": undefined;
    "CannotRejectNonPendingNft": undefined;
    "ResourceDoesntExist": undefined;
    /**
     *Accepting a resource that is not pending should fail
     */
    "ResourceNotPending": undefined;
    "NonTransferable": undefined;
    "CannotSendEquippedItem": undefined;
    "CannotAcceptToNewOwner": undefined;
    "FailedTransferHooksPreCheck": undefined;
    "FailedTransferHooksPostTransfer": undefined;
}>;
export type Ilglkdu2iq348 = AnonymousEnum<{
    "PermissionError": undefined;
    "ItemDoesntExist": undefined;
    "EquipperDoesntExist": undefined;
    "NoAvailableBaseId": undefined;
    "TooManyEquippables": undefined;
    "NoAvailablePartId": undefined;
    "MustBeDirectParent": undefined;
    "PartDoesntExist": undefined;
    "BaseDoesntExist": undefined;
    "CantEquipFixedPart": undefined;
    "NoResourceForThisBaseFoundOnNft": undefined;
    "CollectionNotEquippable": undefined;
    "ItemHasNoResourceToEquipThere": undefined;
    "NoEquippableOnFixedPart": undefined;
    "NeedsDefaultThemeFirst": undefined;
    "ItemAlreadyEquipped": undefined;
    "SlotAlreadyEquipped": undefined;
    "SlotNotEquipped": undefined;
    "UnknownError": undefined;
    "ExceedsMaxPartsPerBase": undefined;
    "TooManyProperties": undefined;
    "ItemNotEquipped": undefined;
    "UnequipperMustOwnEitherItemOrEquipper": undefined;
    "UnexpectedTryFromIntError": undefined;
    "UnexpectedVecConversionError": undefined;
}>;
export type I9oopoegfb4dgg = AnonymousEnum<{
    /**
     *No permissions for account to interact with NFT
     */
    "NoPermission": undefined;
    /**
     *Token cannot be bought
     */
    "TokenNotForSale": undefined;
    /**
     *Offer already accepted and cannot withdraw
     */
    "CannotWithdrawOffer": undefined;
    /**
     *Cannot unlist NFT as it has already been unlisted or sold
     */
    "CannotUnlistToken": undefined;
    /**
     *Cannot make offer on NFT on own NFT
     */
    "CannotOfferOnOwnToken": undefined;
    /**
     *Cannot buy NFT that is already owned
     */
    "CannotBuyOwnToken": undefined;
    /**
     *Offer is unknown
     */
    "UnknownOffer": undefined;
    /**
     *Cannot list NFT owned by a NFT
     */
    "CannotListNftOwnedByNft": undefined;
    /**
     *Cannot list a non-existing NFT
     */
    "TokenDoesNotExist": undefined;
    /**
     *Offer is below the OfferMinimumAmount threshold
     */
    "OfferTooLow": undefined;
    /**
     *Account cannot offer on a NFT again with an active offer
     */
    "AlreadyOffered": undefined;
    /**
     *Accepted offer has expired and cannot be accepted
     */
    "OfferHasExpired": undefined;
    /**
     *Listing has expired and cannot be bought
     */
    "ListingHasExpired": undefined;
    /**
     *Price differs from when `buy` was executed
     */
    "PriceDiffersFromExpected": undefined;
    /**
     *Not possible to list non-transferable NFT
     */
    "NonTransferable": undefined;
    /**
     *Marketplace owner not configured
     */
    "MarketplaceOwnerNotSet": undefined;
    /**
     *Cannot list NFT based on downstream logic implemented for MarketplaceHooks trait
     */
    "CannotListNft": undefined;
}>;
export type I13v692qjihtdv = AnonymousEnum<{
    "WorldClockAlreadySet": undefined;
    "SpiritClaimNotAvailable": undefined;
    "RareOriginOfShellPurchaseNotAvailable": undefined;
    "PrimeOriginOfShellPurchaseNotAvailable": undefined;
    "PreorderOriginOfShellNotAvailable": undefined;
    "PreorderClaimNotAvailable": undefined;
    "SpiritAlreadyClaimed": undefined;
    "InvalidSpiritClaim": undefined;
    "InvalidMetadata": undefined;
    "MustOwnSpiritToPurchase": undefined;
    "OriginOfShellAlreadyPurchased": undefined;
    "BelowMinimumBalanceThreshold": undefined;
    "WhitelistVerificationFailed": undefined;
    "InvalidPurchase": undefined;
    "NoAvailablePreorderId": undefined;
    "PreorderClaimNotDetected": undefined;
    "RefundClaimNotDetected": undefined;
    "PreorderIsPending": undefined;
    "PreordersCorrupted": undefined;
    "NotPreorderOwner": undefined;
    "RaceMintMaxReached": undefined;
    "OverlordNotSet": undefined;
    "RequireOverlordAccount": undefined;
    "InvalidStatusType": undefined;
    "WrongRarityType": undefined;
    "SpiritCollectionNotSet": undefined;
    "SpiritCollectionIdAlreadySet": undefined;
    "SpiritsMetadataNotSet": undefined;
    "OriginOfShellCollectionNotSet": undefined;
    "OriginOfShellCollectionIdAlreadySet": undefined;
    "OriginOfShellInventoryCorrupted": undefined;
    "OriginOfShellInventoryAlreadySet": undefined;
    "OriginOfShellsMetadataNotSet": undefined;
    "KeyTooLong": undefined;
    "NoAvailableRaceGivewayLeft": undefined;
    "NoAvailableRaceReservedLeft": undefined;
    "WrongNftSaleType": undefined;
    "NoAvailableResourceId": undefined;
    "NoAvailableNftId": undefined;
    "ValueNotDetected": undefined;
    "PayeeNotSet": undefined;
    "SignerNotSet": undefined;
    "NoAvailableCollectionId": undefined;
}>;
export type I5pfh4dm70i4t6 = AnonymousEnum<{
    "StartIncubationNotAvailable": undefined;
    "HatchingInProgress": undefined;
    "CannotHatchOriginOfShell": undefined;
    "CannotSendFoodToOriginOfShell": undefined;
    "_Deprecated_MaxFoodFedLimitReached": undefined;
    "CannotSetOriginOfShellChosenParts": undefined;
    "AlreadySentFoodTwice": undefined;
    "_Deprecated_NoFoodAvailable": undefined;
    "NotOwner": undefined;
    "NoPermission": undefined;
    "WrongCollectionId": undefined;
    "_Deprecated_NoHatchTimeDetected": undefined;
    "ShellCollectionIdAlreadySet": undefined;
    "ShellCollectionIdNotSet": undefined;
    "RaceNotDetected": undefined;
    "CareerNotDetected": undefined;
    "RarityTypeNotDetected": undefined;
    "GenerationNotDetected": undefined;
    "FoodInfoUpdateError": undefined;
    "ShellPartsCollectionIdAlreadySet": undefined;
    "ShellPartsCollectionIdNotSet": undefined;
    "ChosenPartsNotDetected": undefined;
    "MissingShellPartMetadata": undefined;
    "NoFoodLeftToFeedOriginOfShell": undefined;
}>;
export type I1l9ih8mo83ar8 = AnonymousEnum<{
    /**
     *Function unimplemented
     */
    "Unimplemented": undefined;
    /**
     *Failed to grant extrinsic access permission to an account
     */
    "GrantAccessFailed": undefined;
}>;
export type I8j0hqauqvv5ds = AnonymousEnum<{
    /**
     *Function unimplemented
     */
    "Unimplemented": undefined;
    /**
     *Account has not gained access permission
     */
    "AccessDenied": undefined;
}>;
export type I1gfd31lmg2dnr = AnonymousEnum<{
    /**
     *Account has not gained access permission
     */
    "AccessDenied": undefined;
    /**
     *Protected operation, must be performed by relayer
     */
    "BadMpcSignature": undefined;
    /**
     *Insufficient balance on sender account
     */
    "InsufficientBalance": undefined;
    /**
     *Asset transactor execution failed
     */
    "TransactFailed": undefined;
    /**
     *The withdrawn amount can not cover the fee payment
     */
    "FeeTooExpensive": undefined;
    /**
     *MPC address not set
     */
    "MissingMpcAddress": undefined;
    /**
     *MPC address can not be updated
     */
    "MpcAddrNotUpdatable": undefined;
    /**
     *Bridge is paused
     */
    "BridgePaused": undefined;
    /**
     *Bridge is unpaused
     */
    "BridgeUnpaused": undefined;
    /**
     *Fee config option missing
     */
    "MissingFeeConfig": undefined;
    /**
     *Asset not bound to a resource id
     */
    "AssetNotBound": undefined;
    /**
     *Proposal has either failed or succeeded
     */
    "ProposalAlreadyComplete": undefined;
    /**
     *Proposal list empty
     */
    "EmptyProposalList": undefined;
    /**
     *Transactor operation failed
     */
    "TransactorFailed": undefined;
    /**
     *Deposit data not correct
     */
    "InvalidDepositData": undefined;
    /**
     *Dest domain not supported
     */
    "DestDomainNotSupported": undefined;
    /**
     *Dest chain id not match
     */
    "DestChainIDNotMatch": undefined;
    /**
     *Failed to extract destination data
     */
    "ExtractDestDataFailed": undefined;
    /**
     *Failed on the decimal converter
     */
    "DecimalConversionFail": undefined;
    /**
     *Deposit nonce has reached max integer value
     */
    "DepositNonceOverflow": undefined;
    /**
     *Asset not bound to a liquidity holder account
     */
    "NoLiquidityHolderAccountBound": undefined;
    /**
     *Function unimplemented
     */
    "Unimplemented": undefined;
}>;
export type I2h6542dinnsrc = AnonymousEnum<{
    /**
     *Can not transfer asset to dest
     */
    "CannotDepositAsset": undefined;
    /**
     *Unimplemented function
     */
    "Unimplemented": undefined;
}>;
export type Iefm1ab9pcog4k = AnonymousEnum<{
    /**
     *Function unimplemented
     */
    "Unimplemented": undefined;
    /**
     *Account has not gained access permission
     */
    "AccessDenied": undefined;
    /**
     *Fee rate is out of range [0, 10000)
     */
    "FeeRateOutOfRange": undefined;
    /**
     *Percentage fee bound is invalid
     */
    "InvalidFeeBound": undefined;
}>;
export type I2u1uo8mu67sq2 = AnonymousEnum<{
    "AssetNotFound": undefined;
    "WorkerAlreadySet": undefined;
    "WorkerNotSet": undefined;
    "WorkerMismatch": undefined;
    "TaskAlreadyExist": undefined;
    "NotFoundInTaskQueue": undefined;
    "TaskQueueEmpty": undefined;
    "TransactFailed": undefined;
    "FeeTooExpensive": undefined;
}>;
export type I6tfmspqpfj4pi = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<I4mqbmjfr14n4b>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I5obqc5uk378oc>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Idc147vhi3aof4>;
}>;
export type I4mqbmjfr14n4b = {
    "index": number;
    "error": Anonymize<I3dsucu19hnc49>;
};
export type I5obqc5uk378oc = {
    "error": Anonymize<I3dsucu19hnc49>;
};
export type Idc147vhi3aof4 = {
    "result": Anonymize<I50tr9ehhcjc1m>;
};
export type I50tr9ehhcjc1m = ResultPayload<undefined, Anonymize<I3dsucu19hnc49>>;
export type Iedkedgjicffbf = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<I81npg3gfnnfvo>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type I81npg3gfnnfvo = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I50tr9ehhcjc1m>;
};
export type I4ge36hj773n2f = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Idc147vhi3aof4>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<I3losnoicnf24b>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I222ob4fvnhvmb>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I222ob4fvnhvmb>;
}>;
export type I3losnoicnf24b = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<Ifulsuf67dt4c7>;
    "disambiguation_index": number;
};
export type Ifulsuf67dt4c7 = AnonymousEnum<{
    "Any": undefined;
    "NonTransfer": undefined;
    "CancelProxy": undefined;
    "Governance": undefined;
    "Collator": undefined;
    "StakePoolManager": undefined;
}>;
export type I222ob4fvnhvmb = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<Ifulsuf67dt4c7>;
    "delay": number;
};
export type Idepo3b1fn6b3a = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<I88sil542morsu>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type I88sil542morsu = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<I50tr9ehhcjc1m>;
};
export type Iattscgt3q8j3r = AnonymousEnum<{
    /**
     *The validation function has been scheduled to apply.
     */
    "ValidationFunctionStored": undefined;
    /**
     *The validation function was applied as of the contained relay chain block number.
     */
    "ValidationFunctionApplied": Anonymize<Idd7hd99u0ho0n>;
    /**
     *The relay-chain aborted the upgrade process.
     */
    "ValidationFunctionDiscarded": undefined;
    /**
     *An upgrade has been authorized.
     */
    "UpgradeAuthorized": Anonymize<Ib51vk42m1po4n>;
    /**
     *Some downward messages have been received and will be processed.
     */
    "DownwardMessagesReceived": Anonymize<Iafscmv8tjf0ou>;
    /**
     *Downward messages were processed using the given weight.
     */
    "DownwardMessagesProcessed": Anonymize<I100l07kaehdlp>;
    /**
     *An upward message was sent to the relay chain.
     */
    "UpwardMessageSent": Anonymize<I6gnbnvip5vvdi>;
}>;
export type I8umj05c18ked4 = AnonymousEnum<{
    /**
     *Some XCM was executed ok.
     */
    "Success": Anonymize<I2650grdiibijj>;
    /**
     *Some XCM failed.
     */
    "Fail": Anonymize<I5q96bb8stug61>;
    /**
     *Bad XCM version used.
     */
    "BadVersion": Anonymize<I137t1cld92pod>;
    /**
     *Bad XCM format used.
     */
    "BadFormat": Anonymize<I137t1cld92pod>;
    /**
     *An HRMP message was sent to a sibling parachain.
     */
    "XcmpMessageSent": Anonymize<I137t1cld92pod>;
    /**
     *An XCM exceeded the individual message weight budget.
     */
    "OverweightEnqueued": Anonymize<If8b64mo2bodj0>;
    /**
     *An XCM from the overweight queue was executed with the given actual weight used.
     */
    "OverweightServiced": Anonymize<Icu5p58ltu1veo>;
}>;
export type I2650grdiibijj = {
    "message_hash": FixedSizeBinary<32>;
    "message_id": FixedSizeBinary<32>;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I5q96bb8stug61 = {
    "message_hash": FixedSizeBinary<32>;
    "message_id": FixedSizeBinary<32>;
    "error": XcmV3TraitsError;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type If8b64mo2bodj0 = {
    "sender": number;
    "sent_at": number;
    "index": bigint;
    "required": Anonymize<I4q39t5hn830vp>;
};
export type Icu5p58ltu1veo = {
    "index": bigint;
    "used": Anonymize<I4q39t5hn830vp>;
};
export type I4f9jlfai43i7r = AnonymousEnum<{
    /**
     *Downward message is invalid XCM.
     *\[ id \]
     */
    "InvalidFormat": FixedSizeBinary<32>;
    /**
     *Downward message is unsupported version of XCM.
     *\[ id \]
     */
    "UnsupportedVersion": FixedSizeBinary<32>;
    /**
     *Downward message executed with the given outcome.
     *\[ id, outcome \]
     */
    "ExecutedDownward": Anonymize<I2c8bkmorso999>;
}>;
export type I2c8bkmorso999 = [FixedSizeBinary<32>, Anonymize<Ib01fvb3ofrhi8>];
export type Ib01fvb3ofrhi8 = AnonymousEnum<{
    "Complete": Anonymize<I4q39t5hn830vp>;
    "Incomplete": Anonymize<I5mb4mkqf18gp8>;
    "Error": XcmV3TraitsError;
}>;
export type I5mb4mkqf18gp8 = [Anonymize<I4q39t5hn830vp>, XcmV3TraitsError];
export type I5s7k7819l2j41 = AnonymousEnum<{
    /**
     *Downward message is invalid XCM.
     */
    "InvalidFormat": Anonymize<I137t1cld92pod>;
    /**
     *Downward message is unsupported version of XCM.
     */
    "UnsupportedVersion": Anonymize<I137t1cld92pod>;
    /**
     *Downward message executed with the given outcome.
     */
    "ExecutedDownward": Anonymize<I2gfpd8ikmku31>;
    /**
     *The weight limit for handling downward messages was reached.
     */
    "WeightExhausted": Anonymize<Iadf1uv6agh6rp>;
    /**
     *Downward message is overweight and was placed in the overweight queue.
     */
    "OverweightEnqueued": Anonymize<If4e6jvgfn13rl>;
    /**
     *Downward message from the overweight queue was executed.
     */
    "OverweightServiced": Anonymize<Ise9gq7rqlnvm>;
    /**
     *The maximum number of downward messages was reached.
     */
    "MaxMessagesExhausted": Anonymize<I137t1cld92pod>;
}>;
export type I2gfpd8ikmku31 = {
    "message_hash": FixedSizeBinary<32>;
    "message_id": FixedSizeBinary<32>;
    "outcome": Anonymize<Ib01fvb3ofrhi8>;
};
export type Iadf1uv6agh6rp = {
    "message_hash": FixedSizeBinary<32>;
    "message_id": FixedSizeBinary<32>;
    "remaining_weight": Anonymize<I4q39t5hn830vp>;
    "required_weight": Anonymize<I4q39t5hn830vp>;
};
export type If4e6jvgfn13rl = {
    "message_hash": FixedSizeBinary<32>;
    "message_id": FixedSizeBinary<32>;
    "overweight_index": bigint;
    "required_weight": Anonymize<I4q39t5hn830vp>;
};
export type Ise9gq7rqlnvm = {
    "overweight_index": bigint;
    "weight_used": Anonymize<I4q39t5hn830vp>;
};
export type I4r0b7tct6o9ht = AnonymousEnum<{
    /**
     *Execution of an XCM message was attempted.
     */
    "Attempted": Anonymize<Ifmqhv1oc3rh3>;
    /**
     *A XCM message was sent.
     */
    "Sent": Anonymize<Ia37keupp0t7n6>;
    /**
     *Query response received which does not match a registered query. This may be because a
     *matching query was never registered, it may be because it is a duplicate response, or
     *because the query timed out.
     */
    "UnexpectedResponse": Anonymize<Iel50id65eke1v>;
    /**
     *Query response has been received and is ready for taking with `take_response`. There is
     *no registered notification call.
     */
    "ResponseReady": Anonymize<I9s1ksje8tscgp>;
    /**
     *Query response has been received and query is removed. The registered notification has
     *been dispatched and executed successfully.
     */
    "Notified": Anonymize<I2uqmls7kcdnii>;
    /**
     *Query response has been received and query is removed. The registered notification
     *could not be dispatched because the dispatch weight is greater than the maximum weight
     *originally budgeted by this runtime for the query result.
     */
    "NotifyOverweight": Anonymize<Idg69klialbkb8>;
    /**
     *Query response has been received and query is removed. There was a general error with
     *dispatching the notification call.
     */
    "NotifyDispatchError": Anonymize<I2uqmls7kcdnii>;
    /**
     *Query response has been received and query is removed. The dispatch was unable to be
     *decoded into a `Call`; this might be due to dispatch function having a signature which
     *is not `(origin, QueryId, Response)`.
     */
    "NotifyDecodeFailed": Anonymize<I2uqmls7kcdnii>;
    /**
     *Expected query response has been received but the origin location of the response does
     *not match that expected. The query remains registered for a later, valid, response to
     *be received and acted upon.
     */
    "InvalidResponder": Anonymize<I6ama1doqn7ush>;
    /**
     *Expected query response has been received but the expected origin location placed in
     *storage by this runtime previously cannot be decoded. The query remains registered.
     *
     *This is unexpected (since a location placed in storage in a previously executing
     *runtime should be readable prior to query timeout) and dangerous since the possibly
     *valid response will be dropped. Manual governance intervention is probably going to be
     *needed.
     */
    "InvalidResponderVersion": Anonymize<Iel50id65eke1v>;
    /**
     *Received query response has been read and removed.
     */
    "ResponseTaken": Anonymize<I30pg328m00nr3>;
    /**
     *Some assets have been placed in an asset trap.
     */
    "AssetsTrapped": Anonymize<I2on6pi7n0k0ik>;
    /**
     *An XCM version change notification message has been attempted to be sent.
     *
     *The cost of sending it (borne by the chain) is included.
     */
    "VersionChangeNotified": Anonymize<Iduq5i0c15rc0o>;
    /**
     *The supported version of a location has been changed. This might be through an
     *automatic notification or a manual intervention.
     */
    "SupportedVersionChanged": Anonymize<I44pbivm2pe7qc>;
    /**
     *A given location which had a version change subscription was dropped owing to an error
     *sending the notification to it.
     */
    "NotifyTargetSendFail": Anonymize<I75o78kjj6nl2u>;
    /**
     *A given location which had a version change subscription was dropped owing to an error
     *migrating the location to our new XCM format.
     */
    "NotifyTargetMigrationFail": Anonymize<Ien06stpa519em>;
    /**
     *Expected query response has been received but the expected querier location placed in
     *storage by this runtime previously cannot be decoded. The query remains registered.
     *
     *This is unexpected (since a location placed in storage in a previously executing
     *runtime should be readable prior to query timeout) and dangerous since the possibly
     *valid response will be dropped. Manual governance intervention is probably going to be
     *needed.
     */
    "InvalidQuerierVersion": Anonymize<Iel50id65eke1v>;
    /**
     *Expected query response has been received but the querier location of the response does
     *not match the expected. The query remains registered for a later, valid, response to
     *be received and acted upon.
     */
    "InvalidQuerier": Anonymize<I13106a549td2f>;
    /**
     *A remote has requested XCM version change notification from us and we have honored it.
     *A version information message is sent to them and its cost is included.
     */
    "VersionNotifyStarted": Anonymize<Icti9s23lkm0qj>;
    /**
     *We have requested that a remote chain send us XCM version change notifications.
     */
    "VersionNotifyRequested": Anonymize<Icti9s23lkm0qj>;
    /**
     *We have requested that a remote chain stops sending us XCM version change
     *notifications.
     */
    "VersionNotifyUnrequested": Anonymize<Icti9s23lkm0qj>;
    /**
     *Fees were paid from a location for an operation (often for using `SendXcm`).
     */
    "FeesPaid": Anonymize<Iemrprej97cn2e>;
    /**
     *Some assets have been claimed from an asset trap
     */
    "AssetsClaimed": Anonymize<I2on6pi7n0k0ik>;
}>;
export type Ifmqhv1oc3rh3 = {
    "outcome": Anonymize<Ib01fvb3ofrhi8>;
};
export type Ia37keupp0t7n6 = {
    "origin": Anonymize<Idpatrs8teqg2g>;
    "destination": Anonymize<Idpatrs8teqg2g>;
    "message": Anonymize<I72ak5168u17sk>;
    "message_id": FixedSizeBinary<32>;
};
export type Idpatrs8teqg2g = {
    "parents": number;
    "interior": Anonymize<I86spl6bcfm5it>;
};
export type I86spl6bcfm5it = AnonymousEnum<{
    "Here": undefined;
    "X1": Anonymize<Iaqrmqn3umgltq>;
    "X2": Anonymize<Ie2h0g82g919jp>;
    "X3": Anonymize<I7rd0eu6t11pja>;
    "X4": Anonymize<Id0oj2tdrov4gp>;
    "X5": Anonymize<Ia4q7dm5je9g20>;
    "X6": Anonymize<I8j2bbr81dqivo>;
    "X7": Anonymize<Ic3n2fss2o4nid>;
    "X8": Anonymize<Ifsevjbrfbd0cf>;
}>;
export type Iaqrmqn3umgltq = AnonymousEnum<{
    "Parachain": number;
    "AccountId32": Anonymize<I5tu7d7brs9qv0>;
    "AccountIndex64": Anonymize<I935c26tatk9oj>;
    "AccountKey20": Anonymize<I3qq910chjhj78>;
    "PalletInstance": number;
    "GeneralIndex": bigint;
    "GeneralKey": Anonymize<I15lht6t53odo4>;
    "OnlyChild": undefined;
    "Plurality": Anonymize<I518fbtnclg1oc>;
    "GlobalConsensus": Anonymize<I4k01tahcim329>;
}>;
export type I5tu7d7brs9qv0 = {
    "network"?: Anonymize<I6l3gca91gb148>;
    "id": FixedSizeBinary<32>;
};
export type I6l3gca91gb148 = (Anonymize<I4k01tahcim329>) | undefined;
export type I4k01tahcim329 = AnonymousEnum<{
    "ByGenesis": FixedSizeBinary<32>;
    "ByFork": Anonymize<I15vf5oinmcgps>;
    "Polkadot": undefined;
    "Kusama": undefined;
    "Westend": undefined;
    "Rococo": undefined;
    "Wococo": undefined;
    "Ethereum": Anonymize<I623eo8t3jrbeo>;
    "BitcoinCore": undefined;
    "BitcoinCash": undefined;
}>;
export type I935c26tatk9oj = {
    "network"?: Anonymize<I6l3gca91gb148>;
    "index": bigint;
};
export type I3qq910chjhj78 = {
    "network"?: Anonymize<I6l3gca91gb148>;
    "key": FixedSizeBinary<20>;
};
export type Ie2h0g82g919jp = FixedSizeArray<2, Anonymize<Iaqrmqn3umgltq>>;
export type I7rd0eu6t11pja = FixedSizeArray<3, Anonymize<Iaqrmqn3umgltq>>;
export type Id0oj2tdrov4gp = FixedSizeArray<4, Anonymize<Iaqrmqn3umgltq>>;
export type Ia4q7dm5je9g20 = FixedSizeArray<5, Anonymize<Iaqrmqn3umgltq>>;
export type I8j2bbr81dqivo = FixedSizeArray<6, Anonymize<Iaqrmqn3umgltq>>;
export type Ic3n2fss2o4nid = FixedSizeArray<7, Anonymize<Iaqrmqn3umgltq>>;
export type Ifsevjbrfbd0cf = FixedSizeArray<8, Anonymize<Iaqrmqn3umgltq>>;
export type I72ak5168u17sk = Array<Anonymize<Icss00hl25cgl4>>;
export type Icss00hl25cgl4 = AnonymousEnum<{
    "WithdrawAsset": Anonymize<Iboaccp6frb5e1>;
    "ReserveAssetDeposited": Anonymize<Iboaccp6frb5e1>;
    "ReceiveTeleportedAsset": Anonymize<Iboaccp6frb5e1>;
    "QueryResponse": Anonymize<Ichiormkgdm39c>;
    "TransferAsset": Anonymize<I5op0aupsb9k7s>;
    "TransferReserveAsset": Anonymize<I5gqu7d5fkcrg9>;
    "Transact": Anonymize<I92p6l5cs3fr50>;
    "HrmpNewChannelOpenRequest": Anonymize<I5uhhrjqfuo4e5>;
    "HrmpChannelAccepted": Anonymize<Ifij4jam0o7sub>;
    "HrmpChannelClosing": Anonymize<Ieeb4svd9i8fji>;
    "ClearOrigin": undefined;
    "DescendOrigin": Anonymize<I86spl6bcfm5it>;
    "ReportError": Anonymize<Ibddbsh398geer>;
    "DepositAsset": Anonymize<Ib1gj9d00g5h47>;
    "DepositReserveAsset": Anonymize<I3t1ec033e7g05>;
    "ExchangeAsset": Anonymize<I2fo47cpkblqqd>;
    "InitiateReserveWithdraw": Anonymize<I8bisgpjg16dbj>;
    "InitiateTeleport": Anonymize<I3t1ec033e7g05>;
    "ReportHolding": Anonymize<If5a69784hh2e9>;
    "BuyExecution": Anonymize<I2fhsfqrk980f>;
    "RefundSurplus": undefined;
    "SetErrorHandler": Anonymize<I72ak5168u17sk>;
    "SetAppendix": Anonymize<I72ak5168u17sk>;
    "ClearError": undefined;
    "ClaimAsset": Anonymize<Ie59v1fi3gi1n3>;
    "Trap": bigint;
    "SubscribeVersion": Anonymize<Ieprdqqu7ildvr>;
    "UnsubscribeVersion": undefined;
    "BurnAsset": Anonymize<Iboaccp6frb5e1>;
    "ExpectAsset": Anonymize<Iboaccp6frb5e1>;
    "ExpectOrigin"?: Anonymize<Ias74o62k4go4m>;
    "ExpectError"?: Anonymize<I7sltvf8v2nure>;
    "ExpectTransactStatus": XcmV3MaybeErrorCode;
    "QueryPallet": Anonymize<If6md0k8vtoh9h>;
    "ExpectPallet": Anonymize<Id7mf37dkpgfjs>;
    "ReportTransactStatus": Anonymize<Ibddbsh398geer>;
    "ClearTransactStatus": undefined;
    "UniversalOrigin": Anonymize<Iaqrmqn3umgltq>;
    "ExportMessage": Anonymize<I2665dmuj4uv3s>;
    "LockAsset": Anonymize<Ipl8sk2kjg8a>;
    "UnlockAsset": Anonymize<Iadlcvi0tqedn3>;
    "NoteUnlockable": Anonymize<I1q1pg7m890gqi>;
    "RequestUnlock": Anonymize<I8jlbge4ved024>;
    "SetFeesMode": Anonymize<I4nae9rsql8fa7>;
    "SetTopic": FixedSizeBinary<32>;
    "ClearTopic": undefined;
    "AliasOrigin": Anonymize<Idpatrs8teqg2g>;
    "UnpaidExecution": Anonymize<I8otukuccgc8qa>;
}>;
export type Iboaccp6frb5e1 = Array<Anonymize<I8pa7df789c95j>>;
export type I8pa7df789c95j = {
    "id": Anonymize<Ic00osfu517iss>;
    "fun": XcmV3MultiassetFungibility;
};
export type Ic00osfu517iss = AnonymousEnum<{
    "Concrete": Anonymize<Idpatrs8teqg2g>;
    "Abstract": FixedSizeBinary<32>;
}>;
export type Ichiormkgdm39c = {
    "query_id": bigint;
    "response": Anonymize<I4e56rm9p07o27>;
    "max_weight": Anonymize<I4q39t5hn830vp>;
    "querier"?: Anonymize<Ias74o62k4go4m>;
};
export type I4e56rm9p07o27 = AnonymousEnum<{
    "Null": undefined;
    "Assets": Anonymize<Iboaccp6frb5e1>;
    "ExecutionResult"?: Anonymize<I7sltvf8v2nure>;
    "Version": number;
    "PalletsInfo": Anonymize<I599u7h20b52at>;
    "DispatchResult": XcmV3MaybeErrorCode;
}>;
export type Ias74o62k4go4m = (Anonymize<Idpatrs8teqg2g>) | undefined;
export type I5op0aupsb9k7s = {
    "assets": Anonymize<Iboaccp6frb5e1>;
    "beneficiary": Anonymize<Idpatrs8teqg2g>;
};
export type I5gqu7d5fkcrg9 = {
    "assets": Anonymize<Iboaccp6frb5e1>;
    "dest": Anonymize<Idpatrs8teqg2g>;
    "xcm": Anonymize<I72ak5168u17sk>;
};
export type Ibddbsh398geer = {
    "destination": Anonymize<Idpatrs8teqg2g>;
    "query_id": bigint;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Ib1gj9d00g5h47 = {
    "assets": Anonymize<I9enf1rh4u3kii>;
    "beneficiary": Anonymize<Idpatrs8teqg2g>;
};
export type I9enf1rh4u3kii = AnonymousEnum<{
    "Definite": Anonymize<Iboaccp6frb5e1>;
    "Wild": Anonymize<Idhb8s9d0ie70f>;
}>;
export type Idhb8s9d0ie70f = AnonymousEnum<{
    "All": undefined;
    "AllOf": Anonymize<I4r2klrb3bu66v>;
    "AllCounted": number;
    "AllOfCounted": Anonymize<I9cip2kacdd2hl>;
}>;
export type I4r2klrb3bu66v = {
    "id": Anonymize<Ic00osfu517iss>;
    "fun": XcmV2MultiassetWildFungibility;
};
export type I9cip2kacdd2hl = {
    "id": Anonymize<Ic00osfu517iss>;
    "fun": XcmV2MultiassetWildFungibility;
    "count": number;
};
export type I3t1ec033e7g05 = {
    "assets": Anonymize<I9enf1rh4u3kii>;
    "dest": Anonymize<Idpatrs8teqg2g>;
    "xcm": Anonymize<I72ak5168u17sk>;
};
export type I2fo47cpkblqqd = {
    "give": Anonymize<I9enf1rh4u3kii>;
    "want": Anonymize<Iboaccp6frb5e1>;
    "maximal": boolean;
};
export type I8bisgpjg16dbj = {
    "assets": Anonymize<I9enf1rh4u3kii>;
    "reserve": Anonymize<Idpatrs8teqg2g>;
    "xcm": Anonymize<I72ak5168u17sk>;
};
export type If5a69784hh2e9 = {
    "response_info": Anonymize<Ibddbsh398geer>;
    "assets": Anonymize<I9enf1rh4u3kii>;
};
export type I2fhsfqrk980f = {
    "fees": Anonymize<I8pa7df789c95j>;
    "weight_limit": XcmV3WeightLimit;
};
export type Ie59v1fi3gi1n3 = {
    "assets": Anonymize<Iboaccp6frb5e1>;
    "ticket": Anonymize<Idpatrs8teqg2g>;
};
export type If6md0k8vtoh9h = {
    "module_name": Binary;
    "response_info": Anonymize<Ibddbsh398geer>;
};
export type I2665dmuj4uv3s = {
    "network": Anonymize<I4k01tahcim329>;
    "destination": Anonymize<I86spl6bcfm5it>;
    "xcm": Anonymize<I72ak5168u17sk>;
};
export type Ipl8sk2kjg8a = {
    "asset": Anonymize<I8pa7df789c95j>;
    "unlocker": Anonymize<Idpatrs8teqg2g>;
};
export type Iadlcvi0tqedn3 = {
    "asset": Anonymize<I8pa7df789c95j>;
    "target": Anonymize<Idpatrs8teqg2g>;
};
export type I1q1pg7m890gqi = {
    "asset": Anonymize<I8pa7df789c95j>;
    "owner": Anonymize<Idpatrs8teqg2g>;
};
export type I8jlbge4ved024 = {
    "asset": Anonymize<I8pa7df789c95j>;
    "locker": Anonymize<Idpatrs8teqg2g>;
};
export type I8otukuccgc8qa = {
    "weight_limit": XcmV3WeightLimit;
    "check_origin"?: Anonymize<Ias74o62k4go4m>;
};
export type Iel50id65eke1v = {
    "origin": Anonymize<Idpatrs8teqg2g>;
    "query_id": bigint;
};
export type I9s1ksje8tscgp = {
    "query_id": bigint;
    "response": Anonymize<I4e56rm9p07o27>;
};
export type I6ama1doqn7ush = {
    "origin": Anonymize<Idpatrs8teqg2g>;
    "query_id": bigint;
    "expected_location"?: Anonymize<Ias74o62k4go4m>;
};
export type I2on6pi7n0k0ik = {
    "hash": FixedSizeBinary<32>;
    "origin": Anonymize<Idpatrs8teqg2g>;
    "assets": Anonymize<Ik93katrmbiat>;
};
export type Ik93katrmbiat = AnonymousEnum<{
    "V2": Anonymize<I2sllmucln1iic>;
    "V3": Anonymize<Iboaccp6frb5e1>;
}>;
export type Iduq5i0c15rc0o = {
    "destination": Anonymize<Idpatrs8teqg2g>;
    "result": number;
    "cost": Anonymize<Iboaccp6frb5e1>;
    "message_id": FixedSizeBinary<32>;
};
export type I44pbivm2pe7qc = {
    "location": Anonymize<Idpatrs8teqg2g>;
    "version": number;
};
export type I75o78kjj6nl2u = {
    "location": Anonymize<Idpatrs8teqg2g>;
    "query_id": bigint;
    "error": XcmV3TraitsError;
};
export type Ien06stpa519em = {
    "location": Anonymize<Idbg08q7edq40c>;
    "query_id": bigint;
};
export type Idbg08q7edq40c = AnonymousEnum<{
    "V2": Anonymize<I4frqunb5hj2km>;
    "V3": Anonymize<Idpatrs8teqg2g>;
}>;
export type I13106a549td2f = {
    "origin": Anonymize<Idpatrs8teqg2g>;
    "query_id": bigint;
    "expected_querier": Anonymize<Idpatrs8teqg2g>;
    "maybe_actual_querier"?: Anonymize<Ias74o62k4go4m>;
};
export type Icti9s23lkm0qj = {
    "destination": Anonymize<Idpatrs8teqg2g>;
    "cost": Anonymize<Iboaccp6frb5e1>;
    "message_id": FixedSizeBinary<32>;
};
export type Iemrprej97cn2e = {
    "paying": Anonymize<Idpatrs8teqg2g>;
    "fees": Anonymize<Iboaccp6frb5e1>;
};
export type Ipa3jfc46ilad = AnonymousEnum<{
    /**
     *An account was created with some free balance.
     */
    "Endowed": Anonymize<Icv68aq8841478>;
    /**
     *An account was removed whose balance was non-zero but below ExistentialDeposit,
     *resulting in an outright loss.
     */
    "DustLost": Anonymize<Ic262ibdoec56a>;
    /**
     *Transfer succeeded.
     */
    "Transfer": Anonymize<Iflcfm9b6nlmdd>;
    /**
     *A balance was set by root.
     */
    "BalanceSet": Anonymize<Ijrsf4mnp3eka>;
    /**
     *Some balance was reserved (moved from free to reserved).
     */
    "Reserved": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was unreserved (moved from reserved to free).
     */
    "Unreserved": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was moved from the reserve of the first account to the second account.
     *Final argument indicates the destination balance type.
     */
    "ReserveRepatriated": Anonymize<I8tjvj9uq4b7hi>;
    /**
     *Some amount was deposited (e.g. for transaction fees).
     */
    "Deposit": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was withdrawn from the account (e.g. for transaction fees).
     */
    "Withdraw": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was removed from the account (e.g. for misbehavior).
     */
    "Slashed": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was minted into an account.
     */
    "Minted": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was burned from an account.
     */
    "Burned": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was suspended from an account (it can be restored later).
     */
    "Suspended": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some amount was restored into an account.
     */
    "Restored": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *An account was upgraded.
     */
    "Upgraded": Anonymize<I4cbvqmqadhrea>;
    /**
     *Total issuance was increased by `amount`, creating a credit to be balanced.
     */
    "Issued": Anonymize<I3qt1hgg4djhgb>;
    /**
     *Total issuance was decreased by `amount`, creating a debt to be balanced.
     */
    "Rescinded": Anonymize<I3qt1hgg4djhgb>;
    /**
     *Some balance was locked.
     */
    "Locked": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was unlocked.
     */
    "Unlocked": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was frozen.
     */
    "Frozen": Anonymize<Id5fm4p8lj5qgi>;
    /**
     *Some balance was thawed.
     */
    "Thawed": Anonymize<Id5fm4p8lj5qgi>;
}>;
export type I2k46ltub59oi1 = AnonymousEnum<{
    /**
     *New Invulnerables were set.
     */
    "NewInvulnerables": Anonymize<I39t01nnod9109>;
    /**
     *A new Invulnerable was added.
     */
    "InvulnerableAdded": Anonymize<I6v8sm60vvkmk7>;
    /**
     *An Invulnerable was removed.
     */
    "InvulnerableRemoved": Anonymize<I6v8sm60vvkmk7>;
    /**
     *The number of desired candidates was set.
     */
    "NewDesiredCandidates": Anonymize<I1qmtmbe5so8r3>;
    /**
     *The candidacy bond was set.
     */
    "NewCandidacyBond": Anonymize<Ih99m6ehpcar7>;
    /**
     *A new candidate joined.
     */
    "CandidateAdded": Anonymize<Idgorhsbgdq2ap>;
    /**
     *A candidate was removed.
     */
    "CandidateRemoved": Anonymize<I6v8sm60vvkmk7>;
    /**
     *An account was unable to be added to the Invulnerables because they did not have keys
     *registered. Other Invulnerables may have been set.
     */
    "InvalidInvulnerableSkipped": Anonymize<I6v8sm60vvkmk7>;
}>;
export type Ifugjudpfm708s = AnonymousEnum<{
    /**
     *A name was set or reset (which will remove all judgements).
     */
    "IdentitySet": Anonymize<I4cbvqmqadhrea>;
    /**
     *A name was cleared, and the given balance returned.
     */
    "IdentityCleared": Anonymize<Iep1lmt6q3s6r3>;
    /**
     *A name was removed and the given balance slashed.
     */
    "IdentityKilled": Anonymize<Iep1lmt6q3s6r3>;
    /**
     *A judgement was asked from a registrar.
     */
    "JudgementRequested": Anonymize<I1fac16213rie2>;
    /**
     *A judgement request was retracted.
     */
    "JudgementUnrequested": Anonymize<I1fac16213rie2>;
    /**
     *A judgement was given by a registrar.
     */
    "JudgementGiven": Anonymize<Ifjt77oc391o43>;
    /**
     *A registrar was added.
     */
    "RegistrarAdded": Anonymize<Itvt1jsipv0lc>;
    /**
     *A sub-identity was added to an identity and the deposit paid.
     */
    "SubIdentityAdded": Anonymize<Ick3mveut33f44>;
    /**
     *A sub-identity was removed from an identity and the deposit freed.
     */
    "SubIdentityRemoved": Anonymize<Ick3mveut33f44>;
    /**
     *A sub-identity was cleared, and the given deposit repatriated from the
     *main identity account to the sub-identity account.
     */
    "SubIdentityRevoked": Anonymize<Ick3mveut33f44>;
}>;
export type I31vpk212o78ss = AnonymousEnum<{
    /**
     *A motion (given hash) has been proposed (by given account) with a threshold (given
     *`MemberCount`).
     */
    "Proposed": Anonymize<Ift6f10887nk72>;
    /**
     *A motion (given hash) has been voted on by given account, leaving
     *a tally (yes votes and no votes given respectively as `MemberCount`).
     */
    "Voted": Anonymize<I7qc53b1tvqjg2>;
    /**
     *A motion was approved by the required threshold.
     */
    "Approved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was not approved by the required threshold.
     */
    "Disapproved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was executed; result will be `Ok` if it returned without error.
     */
    "Executed": Anonymize<Icsjv1bijjsne1>;
    /**
     *A single member did some action; result will be `Ok` if it returned without error.
     */
    "MemberExecuted": Anonymize<Icsjv1bijjsne1>;
    /**
     *A proposal was closed because its threshold was reached or after its duration was up.
     */
    "Closed": Anonymize<Iak7fhrgb9jnnq>;
}>;
export type Icsjv1bijjsne1 = {
    "proposal_hash": FixedSizeBinary<32>;
    "result": Anonymize<I50tr9ehhcjc1m>;
};
export type I3ul3cf3die25m = AnonymousEnum<{
    /**
     *New proposal.
     */
    "Proposed": Anonymize<I44hc4lgsn4o1j>;
    /**
     *We have ended a spend period and will now allocate funds.
     */
    "Spending": Anonymize<I8iksqi3eani0a>;
    /**
     *Some funds have been allocated.
     */
    "Awarded": Anonymize<I16enopmju1p0q>;
    /**
     *A proposal was rejected; funds were slashed.
     */
    "Rejected": Anonymize<Ifgqhle2413de7>;
    /**
     *Some of our funds have been burnt.
     */
    "Burnt": Anonymize<I43kq8qudg7pq9>;
    /**
     *Spending has finished; this is the amount that rolls over until next spend.
     */
    "Rollover": Anonymize<I76riseemre533>;
    /**
     *Some funds have been deposited.
     */
    "Deposit": Anonymize<Ie5v6njpckr05b>;
    /**
     *A new spend proposal has been approved.
     */
    "SpendApproved": Anonymize<I38bmcrmh852rk>;
    /**
     *The inactive funds of the pallet have been updated.
     */
    "UpdatedInactive": Anonymize<I4hcillge8de5f>;
}>;
export type Ialepu0vuuvje8 = AnonymousEnum<{
    /**
     *New bounty proposal.
     */
    "BountyProposed": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty proposal was rejected; funds were slashed.
     */
    "BountyRejected": Anonymize<Id9idaj83175f9>;
    /**
     *A bounty proposal is funded and became active.
     */
    "BountyBecameActive": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty is awarded to a beneficiary.
     */
    "BountyAwarded": Anonymize<Ie1semicfuv5uu>;
    /**
     *A bounty is claimed by beneficiary.
     */
    "BountyClaimed": Anonymize<If25fjs9o37co1>;
    /**
     *A bounty is cancelled.
     */
    "BountyCanceled": Anonymize<I666bl2fqjkejo>;
    /**
     *A bounty expiry is extended.
     */
    "BountyExtended": Anonymize<I666bl2fqjkejo>;
}>;
export type I8vg8ohhden12t = AnonymousEnum<{
    /**
     *A lottery has been started!
     */
    "LotteryStarted": undefined;
    /**
     *A new set of calls have been set!
     */
    "CallsUpdated": undefined;
    /**
     *A winner has been chosen!
     */
    "Winner": Anonymize<Idtfinpnsamten>;
    /**
     *A ticket has been bought!
     */
    "TicketBought": Anonymize<I455dk0vr5anih>;
}>;
export type Idtfinpnsamten = {
    "winner": SS58String;
    "lottery_balance": bigint;
};
export type I455dk0vr5anih = {
    "who": SS58String;
    "call_index": FixedSizeBinary<2>;
};
export type I6rkaq3ijqb566 = AnonymousEnum<{
    /**
     *Vote threshold has changed (new_threshold)
     */
    "RelayerThresholdChanged": number;
    /**
     *Chain now available for transfers (chain_id)
     */
    "ChainWhitelisted": number;
    /**
     *Relayer added to set
     */
    "RelayerAdded": SS58String;
    /**
     *Relayer removed from set
     */
    "RelayerRemoved": SS58String;
    /**
     *FungibleTransfer is for relaying fungibles (dest_id, nonce, resource_id, amount, recipient)
     */
    "FungibleTransfer": Anonymize<I6o5gj873rg52t>;
    /**
     *NonFungibleTransfer is for relaying NFTs (dest_id, nonce, resource_id, token_id, recipient, metadata)
     */
    "NonFungibleTransfer": Anonymize<Icfvncndiepf13>;
    /**
     *GenericTransfer is for a generic data payload (dest_id, nonce, resource_id, metadata)
     */
    "GenericTransfer": Anonymize<I5hfier3p0p9jc>;
    /**
     *Vote submitted in favour of proposal
     */
    "VoteFor": Anonymize<Ie4gu6f3b6uctq>;
    /**
     *Vot submitted against proposal
     */
    "VoteAgainst": Anonymize<Ie4gu6f3b6uctq>;
    /**
     *Voting successful for a proposal
     */
    "ProposalApproved": Anonymize<I4ojmnsk1dchql>;
    /**
     *Voting rejected a proposal
     */
    "ProposalRejected": Anonymize<I4ojmnsk1dchql>;
    /**
     *Execution of call succeeded
     */
    "ProposalSucceeded": Anonymize<I4ojmnsk1dchql>;
    /**
     *Execution of call failed
     */
    "ProposalFailed": Anonymize<I4ojmnsk1dchql>;
    "FeeUpdated": Anonymize<I9p8b8lamchikq>;
}>;
export type I6o5gj873rg52t = [number, bigint, FixedSizeBinary<32>, Anonymize<I4totqt881mlti>, Binary];
export type Icfvncndiepf13 = [number, bigint, FixedSizeBinary<32>, Binary, Binary, Binary];
export type I5hfier3p0p9jc = [number, bigint, FixedSizeBinary<32>, Binary];
export type I9p8b8lamchikq = {
    "dest_id": number;
    "fee": bigint;
};
export type Idne7u2n7hrn30 = AnonymousEnum<{
    /**
     *Assets sent to parachain or relaychain.
     */
    "AssetTransfered": Anonymize<I5vjpealkafo1p>;
}>;
export type I5vjpealkafo1p = {
    "asset": Anonymize<I8pa7df789c95j>;
    "origin": Anonymize<Idpatrs8teqg2g>;
    "dest": Anonymize<Idpatrs8teqg2g>;
};
export type Ianiea8edkp6ug = AnonymousEnum<{
    /**
     *Assets being withdrawn from somewhere.
     */
    "Withdrawn": Anonymize<Ibqslebq6u42vb>;
    /**
     *Assets being deposited to somewhere.
     */
    "Deposited": Anonymize<Ibqslebq6u42vb>;
    /**
     *Assets being forwarded to somewhere.
     */
    "Forwarded": Anonymize<Ibqslebq6u42vb>;
}>;
export type Ibqslebq6u42vb = {
    "what": Anonymize<I8pa7df789c95j>;
    "who": Anonymize<Idpatrs8teqg2g>;
    "memo": Binary;
};
export type I2b6kch0pgc7sh = AnonymousEnum<{
    /**
     *A new Gatekeeper is enabled on the blockchain
     */
    "GatekeeperAdded": Anonymize<Icmtuqsikv2bvd>;
    "GatekeeperRemoved": Anonymize<Icmtuqsikv2bvd>;
    "WorkerAdded": Anonymize<I3a6hiniv07tkc>;
    "WorkerUpdated": Anonymize<I3a6hiniv07tkc>;
    "MasterKeyRotated": Anonymize<I2b65htl0pjlqh>;
    "MasterKeyRotationFailed": Anonymize<Ibf0qcof7of6r3>;
    "InitialScoreSet": Anonymize<I3klqo14nbar9n>;
    "MinimumPRuntimeVersionChangedTo": Anonymize<Ielgh4t8o7rcvt>;
    "PRuntimeConsensusVersionChangedTo": number;
    "GatekeeperLaunched": undefined;
}>;
export type Icmtuqsikv2bvd = {
    "pubkey": FixedSizeBinary<32>;
};
export type I3a6hiniv07tkc = {
    "pubkey": FixedSizeBinary<32>;
    "attestation_provider"?: Anonymize<Ifh3cr97t023rt>;
    "confidence_level": number;
};
export type Ifh3cr97t023rt = (Anonymize<Idrgh1cgmfbr5u>) | undefined;
export type Idrgh1cgmfbr5u = AnonymousEnum<{
    "Root": undefined;
    "Ias": undefined;
    "Dcap": undefined;
}>;
export type I2b65htl0pjlqh = {
    "rotation_id": bigint;
    "master_pubkey": FixedSizeBinary<32>;
};
export type Ibf0qcof7of6r3 = {
    "rotation_lock"?: Anonymize<I35p85j063s0il>;
    "gatekeeper_rotation_id": bigint;
};
export type I3klqo14nbar9n = {
    "pubkey": FixedSizeBinary<32>;
    "init_score": number;
};
export type I1s2h7uolcs2gt = AnonymousEnum<{
    /**
     *Cool down expiration changed (in sec).
     *
     *Indicates a change in [`CoolDownPeriod`].
     */
    "CoolDownExpirationChanged": Anonymize<Iffvohb3t8h71u>;
    /**
     *A worker starts computing.
     *
     *Affected states:
     *- the worker info at [`Sessions`] is updated with `WorkerIdle` state
     *- [`NextSessionId`] for the session is incremented
     *- [`Stakes`] for the session is updated
     *- [`OnlineWorkers`] is incremented
     */
    "WorkerStarted": Anonymize<Ibpvnujci6lmps>;
    /**
     *Worker stops computing.
     *
     *Affected states:
     *- the worker info at [`Sessions`] is updated with `WorkerCoolingDown` state
     *- [`OnlineWorkers`] is decremented
     */
    "WorkerStopped": Anonymize<I947um9nhnghi1>;
    /**
     *Worker is reclaimed, with its slash settled.
     */
    "WorkerReclaimed": Anonymize<Inpik2efrovhj>;
    /**
     *Worker & session are bounded.
     *
     *Affected states:
     *- [`SessionBindings`] for the session account is pointed to the worker
     *- [`WorkerBindings`] for the worker is pointed to the session account
     *- the worker info at [`Sessions`] is updated with `Ready` state
     */
    "SessionBound": Anonymize<I2rpqkg7ssb4am>;
    /**
     *Worker & worker are unbound.
     *
     *Affected states:
     *- [`SessionBindings`] for the session account is removed
     *- [`WorkerBindings`] for the worker is removed
     */
    "SessionUnbound": Anonymize<I2rpqkg7ssb4am>;
    /**
     *Worker enters unresponsive state.
     *
     *Affected states:
     *- the worker info at [`Sessions`] is updated from `WorkerIdle` to `WorkerUnresponsive`
     */
    "WorkerEnterUnresponsive": Anonymize<I947um9nhnghi1>;
    /**
     *Worker returns to responsive state.
     *
     *Affected states:
     *- the worker info at [`Sessions`] is updated from `WorkerUnresponsive` to `WorkerIdle`
     */
    "WorkerExitUnresponsive": Anonymize<I947um9nhnghi1>;
    /**
     *Worker settled successfully.
     *
     *It results in the v in [`Sessions`] being updated. It also indicates the downstream
     *stake pool has received the computing reward (payout), and the treasury has received the
     *tax.
     */
    "SessionSettled": Anonymize<I99h25vhi9ugv4>;
    /**
     *Some internal error happened when settling a worker's ledger.
     */
    "InternalErrorWorkerSettleFailed": Anonymize<I4ct3iu08fvs4m>;
    /**
     *Block subsidy halved by 25%.
     *
     *This event will be followed by a [`TokenomicParametersChanged`](#variant.TokenomicParametersChanged)
     *event indicating the change of the block subsidy budget in the parameter.
     */
    "SubsidyBudgetHalved": undefined;
    /**
     *Some internal error happened when trying to halve the subsidy
     */
    "InternalErrorWrongHalvingConfigured": undefined;
    /**
     *Tokenomic parameter changed.
     *
     *Affected states:
     *- [`TokenomicParameters`] is updated.
     */
    "TokenomicParametersChanged": undefined;
    /**
     *A session settlement was dropped because the on-chain version is more up-to-date.
     *
     *This is a temporary walk-around of the computing staking design. Will be fixed by
     *StakePool v2.
     */
    "SessionSettlementDropped": Anonymize<I3d9shde1q80sl>;
    /**
     *Benchmark Updated
     */
    "BenchmarkUpdated": Anonymize<I71394bfgmh7f4>;
    "BudgetUpdated": Anonymize<Icas6s87koosbm>;
}>;
export type Iffvohb3t8h71u = {
    "period": bigint;
};
export type Ibpvnujci6lmps = {
    "session": SS58String;
    "init_v": bigint;
    "init_p": number;
};
export type I947um9nhnghi1 = {
    "session": SS58String;
};
export type Inpik2efrovhj = {
    "session": SS58String;
    "original_stake": bigint;
    "slashed": bigint;
};
export type I2rpqkg7ssb4am = {
    "session": SS58String;
    "worker": FixedSizeBinary<32>;
};
export type I99h25vhi9ugv4 = {
    "session": SS58String;
    "v_bits": bigint;
    "payout_bits": bigint;
};
export type I4ct3iu08fvs4m = {
    "worker": FixedSizeBinary<32>;
};
export type I3d9shde1q80sl = {
    "session": SS58String;
    "v": bigint;
    "payout": bigint;
};
export type I71394bfgmh7f4 = {
    "session": SS58String;
    "p_instant": number;
};
export type Icas6s87koosbm = {
    "nonce": bigint;
    "budget": bigint;
};
export type AssetsEvent = Enum<{
    /**
     *Some asset class was created.
     */
    "Created": Anonymize<I88ff3u4dpivk>;
    /**
     *Some assets were issued.
     */
    "Issued": Anonymize<I33cp947glv1ks>;
    /**
     *Some assets were transferred.
     */
    "Transferred": Anonymize<Ic9om1gmmqu7rq>;
    /**
     *Some assets were destroyed.
     */
    "Burned": Anonymize<I5hfov2b68ppb6>;
    /**
     *The management team changed.
     */
    "TeamChanged": Anonymize<Ibthhb2m9vneds>;
    /**
     *The owner changed.
     */
    "OwnerChanged": Anonymize<Iaitn5bqfacj7k>;
    /**
     *Some account `who` was frozen.
     */
    "Frozen": Anonymize<If4ebvclj2ugvi>;
    /**
     *Some account `who` was thawed.
     */
    "Thawed": Anonymize<If4ebvclj2ugvi>;
    /**
     *Some asset `asset_id` was frozen.
     */
    "AssetFrozen": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Some asset `asset_id` was thawed.
     */
    "AssetThawed": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Accounts were destroyed for given asset.
     */
    "AccountsDestroyed": Anonymize<Ieduc1e6frq8rb>;
    /**
     *Approvals were destroyed for given asset.
     */
    "ApprovalsDestroyed": Anonymize<I9h6gbtabovtm4>;
    /**
     *An asset class is in the process of being destroyed.
     */
    "DestructionStarted": Anonymize<Ia5le7udkgbaq9>;
    /**
     *An asset class was destroyed.
     */
    "Destroyed": Anonymize<Ia5le7udkgbaq9>;
    /**
     *Some asset class was force-created.
     */
    "ForceCreated": Anonymize<Iaitn5bqfacj7k>;
    /**
     *New metadata has been set for an asset.
     */
    "MetadataSet": Anonymize<Ifnsa0dkkpf465>;
    /**
     *Metadata has been cleared for an asset.
     */
    "MetadataCleared": Anonymize<Ia5le7udkgbaq9>;
    /**
     *(Additional) funds have been approved for transfer to a destination account.
     */
    "ApprovedTransfer": Anonymize<I65dtqr2egjbc3>;
    /**
     *An approval for account `delegate` was cancelled by `owner`.
     */
    "ApprovalCancelled": Anonymize<Ibqj3vg5s5lk0c>;
    /**
     *An `amount` was transferred in its entirety from `owner` to `destination` by
     *the approved `delegate`.
     */
    "TransferredApproved": Anonymize<I6l73u513p8rna>;
    /**
     *An asset has had its attributes changed by the `Force` origin.
     */
    "AssetStatusChanged": Anonymize<Ia5le7udkgbaq9>;
    /**
     *The min_balance of an asset has been updated by the asset owner.
     */
    "AssetMinBalanceChanged": Anonymize<Iefqmt2htu1dlu>;
    /**
     *Some account `who` was created with a deposit from `depositor`.
     */
    "Touched": Anonymize<If8bgtgqrchjtu>;
    /**
     *Some account `who` was blocked.
     */
    "Blocked": Anonymize<If4ebvclj2ugvi>;
}>;
export declare const AssetsEvent: GetEnum<AssetsEvent>;
export type I1s920gna6mfcj = AnonymousEnum<{
    /**
     *Asset is registerd.
     */
    "AssetRegistered": Anonymize<I8p40dt899dtuq>;
    /**
     *Asset is unregisterd.
     */
    "AssetUnregistered": Anonymize<I8p40dt899dtuq>;
    /**
     *Asset enabled chainbridge.
     */
    "ChainbridgeEnabled": Anonymize<I6hjfgcu14eb0q>;
    /**
     *Asset disabled chainbridge.
     */
    "ChainbridgeDisabled": Anonymize<I6hjfgcu14eb0q>;
    /**
     *Asset enabled sygmabridge.
     */
    "SygmabridgeEnabled": Anonymize<Ic93n0cje721n3>;
    /**
     *Asset disabled sygmabridge.
     */
    "SygmabridgeDisabled": Anonymize<Ic93n0cje721n3>;
    /**
     *Force mint asset to an certain account.
     */
    "ForceMinted": Anonymize<Ifvtjt50q884bb>;
    /**
     *Force burn asset from an certain account.
     */
    "ForceBurnt": Anonymize<Idusmq77988cmt>;
}>;
export type I8p40dt899dtuq = {
    "asset_id": number;
    "location": Anonymize<Idpatrs8teqg2g>;
};
export type I6hjfgcu14eb0q = {
    "asset_id": number;
    "chain_id": number;
    "resource_id": FixedSizeBinary<32>;
};
export type Ic93n0cje721n3 = {
    "asset_id": number;
    "domain_id": number;
    "resource_id": FixedSizeBinary<32>;
};
export type Ifvtjt50q884bb = {
    "asset_id": number;
    "beneficiary": SS58String;
    "amount": bigint;
};
export type I9tg40g9qio0cs = AnonymousEnum<{
    /**
     *A stake pool is created by `owner`
     *
     *Affected states:
     *- a new entry in [`Pools`] with the pid
     */
    "PoolCreated": Anonymize<I31du8nf8ebd7l>;
    /**
     *The commission of a pool is updated
     *
     *The commission ratio is represented by an integer. The real value is
     *`commission / 1_000_000u32`.
     *
     *Affected states:
     *- the `payout_commission` field in [`Pools`] is updated
     */
    "PoolCommissionSet": Anonymize<I2q85o3gc28n4s>;
    /**
     *The stake capacity of the pool is updated
     *
     *Affected states:
     *- the `cap` field in [`Pools`] is updated
     */
    "PoolCapacitySet": Anonymize<Ibfm3gehrtppo6>;
    /**
     *A worker is added to the pool
     *
     *Affected states:
     *- the `worker` is added to the vector `workers` in [`Pools`]
     *- the worker in the [`WorkerAssignments`] is pointed to `pid`
     *- the worker-session binding is updated in `computation` pallet ([`WorkerBindings`](computation::pallet::WorkerBindings),
     *  [`SessionBindings`](computation::pallet::SessionBindings))
     */
    "PoolWorkerAdded": Anonymize<I90vvr8uqrv92h>;
    /**
     *Someone contributed to a pool
     *
     *Affected states:
     *- the stake related fields in [`Pools`]
     *- the user W-PHA balance reduced
     *- the user recive ad share NFT once contribution succeeded
     *- when there was any request in the withdraw queue, the action may trigger withdrawals
     *  ([`Withdrawal`](#variant.Withdrawal) event)
     */
    "Contribution": Anonymize<I2d0uit6oup7dt>;
    /**
     *Owner rewards were withdrawn by pool owner
     *
     *Affected states:
     *- the stake related fields in [`Pools`]
     *- the owner asset account
     */
    "OwnerRewardsWithdrawn": Anonymize<I2tutt7vqt5geb>;
    /**
     *The pool received a slash event from one of its workers (currently disabled)
     *
     *The slash is accured to the pending slash accumulator.
     */
    "PoolSlashed": Anonymize<I6bpho1qciu1vq>;
    /**
     *Some slash is actually settled to a contributor (currently disabled)
     */
    "SlashSettled": Anonymize<I2tutt7vqt5geb>;
    /**
     *Some reward is dismissed because the worker is no longer bound to a pool
     *
     *There's no affected state.
     */
    "RewardDismissedNotInPool": Anonymize<I69u9ruosjbvbq>;
    /**
     *Some reward is dismissed because the pool doesn't have any share
     *
     *There's no affected state.
     */
    "RewardDismissedNoShare": Anonymize<I6bpho1qciu1vq>;
    /**
     *Some reward is dismissed because the amount is too tiny (dust)
     *
     *There's no affected state.
     */
    "RewardDismissedDust": Anonymize<I6bpho1qciu1vq>;
    /**
     *A worker is removed from a pool.
     *
     *Affected states:
     *- the worker item in [`WorkerAssignments`] is removed
     *- the worker is removed from the [`Pools`] item
     */
    "PoolWorkerRemoved": Anonymize<I573qjpa7bj77k>;
    /**
     *A worker is reclaimed from the pool
     */
    "WorkerReclaimed": Anonymize<I573qjpa7bj77k>;
    /**
     *The amount of reward that distributed to owner and stakers
     */
    "RewardReceived": Anonymize<I1jcetuoafqqbr>;
    /**
     *The amount of stakes for a worker to start computing
     */
    "WorkingStarted": Anonymize<Ita6m0fl0nn5o>;
    /**
     *Some to-distribute reward is dismissed because the amount is too tiny (dust)
     *
     *There's no affected state.
     */
    "RewardToOwnerDismissedDust": Anonymize<I6bpho1qciu1vq>;
    /**
     *Some to-distribute reward is dismissed because the amount is too tiny (dust)
     *
     *There's no affected state.
     */
    "RewardToDistributionDismissedDust": Anonymize<I6bpho1qciu1vq>;
}>;
export type I31du8nf8ebd7l = {
    "owner": SS58String;
    "pid": bigint;
    "cid": number;
    "pool_account_id": SS58String;
};
export type I2q85o3gc28n4s = {
    "pid": bigint;
    "commission": number;
};
export type Ibfm3gehrtppo6 = {
    "pid": bigint;
    "cap": bigint;
};
export type I90vvr8uqrv92h = {
    "pid": bigint;
    "worker": FixedSizeBinary<32>;
    "session": SS58String;
};
export type I2d0uit6oup7dt = {
    "pid": bigint;
    "user": SS58String;
    "amount": bigint;
    "shares": bigint;
    "as_vault"?: Anonymize<I35p85j063s0il>;
};
export type I2tutt7vqt5geb = {
    "pid": bigint;
    "user": SS58String;
    "amount": bigint;
};
export type I6bpho1qciu1vq = {
    "pid": bigint;
    "amount": bigint;
};
export type I69u9ruosjbvbq = {
    "worker": FixedSizeBinary<32>;
    "amount": bigint;
};
export type I573qjpa7bj77k = {
    "pid": bigint;
    "worker": FixedSizeBinary<32>;
};
export type I1jcetuoafqqbr = {
    "pid": bigint;
    "to_owner": bigint;
    "to_stakers": bigint;
};
export type Ita6m0fl0nn5o = {
    "pid": bigint;
    "worker": FixedSizeBinary<32>;
    "amount": bigint;
};
export type I9q81qthauhnqf = AnonymousEnum<{
    /**
     *A vault is created by `owner`
     *
     *Affected states:
     *- a new entry in [`Pools`] with the pid
     */
    "PoolCreated": Anonymize<I31du8nf8ebd7l>;
    /**
     *The commission of a vault is updated
     *
     *The commission ratio is represented by an integer. The real value is
     *`commission / 1_000_000u32`.
     *
     *Affected states:
     *- the `commission` field in [`Pools`] is updated
     */
    "VaultCommissionSet": Anonymize<I2q85o3gc28n4s>;
    /**
     *Owner shares is claimed by pool owner
     *Affected states:
     *- the shares related fields in [`Pools`]
     *- the nft related storages in rmrk and pallet unique
     */
    "OwnerSharesClaimed": Anonymize<I26pv5uad3shu7>;
    /**
     *Additional owner shares are mint into the pool
     *
     *Affected states:
     *- the shares related fields in [`Pools`]
     *- last_share_price_checkpoint in [`Pools`]
     */
    "OwnerSharesGained": Anonymize<I4l3grg74he7f8>;
    /**
     *Someone contributed to a vault
     *
     *Affected states:
     *- the stake related fields in [`Pools`]
     *- the user W-PHA balance reduced
     *- the user recive ad share NFT once contribution succeeded
     *- when there was any request in the withdraw queue, the action may trigger withdrawals
     *  ([`Withdrawal`](#variant.Withdrawal) event)
     */
    "Contribution": Anonymize<Ia69ln29ruhu9e>;
    "ForceShutdown": Anonymize<I2hpkvh0joj3gp>;
}>;
export type I26pv5uad3shu7 = {
    "pid": bigint;
    "user": SS58String;
    "shares": bigint;
};
export type I4l3grg74he7f8 = {
    "pid": bigint;
    "shares": bigint;
    "checkout_price": bigint;
};
export type Ia69ln29ruhu9e = {
    "pid": bigint;
    "user": SS58String;
    "amount": bigint;
    "shares": bigint;
};
export type I2hpkvh0joj3gp = {
    "pid": bigint;
    "reason": Anonymize<I7a4rfjdnrjvmk>;
};
export type I7a4rfjdnrjvmk = AnonymousEnum<{
    "NoEnoughReleasingStake": undefined;
    "Waiting3xGracePeriod": undefined;
}>;
export type Ibnbjoj89lbu9t = AnonymousEnum<{
    /**
     *Some dust stake is removed
     *
     *Triggered when the remaining stake of a user is too small after withdrawal or slash.
     *
     *Affected states:
     *- the balance of the locking ledger of the contributor at [`StakeLedger`] is set to 0
     *- the user's dust stake is moved to treasury
     */
    "DustRemoved": Anonymize<Iclu7lhjet5kei>;
    "Wrapped": Anonymize<Iclu7lhjet5kei>;
    "Unwrapped": Anonymize<Iclu7lhjet5kei>;
    "Voted": Anonymize<Ibqrtilbvj9oag>;
}>;
export type Iclu7lhjet5kei = {
    "user": SS58String;
    "amount": bigint;
};
export type Ibqrtilbvj9oag = {
    "user": SS58String;
    "vote_id": number;
    "aye_amount": bigint;
    "nay_amount": bigint;
};
export type Iaadtb30eflmf3 = AnonymousEnum<{
    /**
     *A Nft is created to contain pool shares
     */
    "NftCreated": Anonymize<I6k3obpc83bkgt>;
    /**
     *A withdrawal request is inserted to a queue
     *
     *Affected states:
     *- a new item is inserted to or an old item is being replaced by the new item in the
     *  withdraw queue in [`Pools`]
     */
    "WithdrawalQueued": Anonymize<I1u512ep96c36b>;
    /**
     *Some stake was withdrawn from a pool
     *
     *The lock in [`Balances`](pallet_balances::pallet::Pallet) is updated to release the
     *locked stake.
     *
     *Affected states:
     *- the stake related fields in [`Pools`]
     *- the user staking asset account
     */
    "Withdrawal": Anonymize<Iduib0sos7pca1>;
    /**
     *A pool contribution whitelist is added
     *
     *- lazy operated when the first staker is added to the whitelist
     */
    "PoolWhitelistCreated": Anonymize<Ibihfmtr4nutgv>;
    /**
     *The pool contribution whitelist is deleted
     *
     *- lazy operated when the last staker is removed from the whitelist
     */
    "PoolWhitelistDeleted": Anonymize<Ibihfmtr4nutgv>;
    /**
     *A staker is added to the pool contribution whitelist
     */
    "PoolWhitelistStakerAdded": Anonymize<If8bcs63vv4eft>;
    /**
     *A staker is removed from the pool contribution whitelist
     */
    "PoolWhitelistStakerRemoved": Anonymize<If8bcs63vv4eft>;
}>;
export type I6k3obpc83bkgt = {
    "pid": bigint;
    "cid": number;
    "nft_id": number;
    "owner": SS58String;
    "shares": bigint;
};
export type I1u512ep96c36b = {
    "pid": bigint;
    "user": SS58String;
    "shares": bigint;
    /**
     *Target NFT to withdraw
     */
    "nft_id": number;
    "as_vault"?: Anonymize<I35p85j063s0il>;
    /**
     *Splitted NFT for withdrawing
     */
    "withdrawing_nft_id": number;
};
export type Iduib0sos7pca1 = {
    "pid": bigint;
    "user": SS58String;
    "amount": bigint;
    "shares": bigint;
    "burnt_shares": bigint;
};
export type Ibihfmtr4nutgv = {
    "pid": bigint;
};
export type If8bcs63vv4eft = {
    "pid": bigint;
    "staker": SS58String;
};
export type I55o5eqokdpfpg = AnonymousEnum<{
    "CollectionCreated": Anonymize<I86pkmcnt7cik7>;
    "NftMinted": Anonymize<I37orqm0h7voie>;
    "NFTBurned": Anonymize<Idn09te2cs37nc>;
    "CollectionDestroyed": Anonymize<I86pkmcnt7cik7>;
    "NFTSent": Anonymize<Ie6j9cnp8aj7k7>;
    "NFTAccepted": Anonymize<I9kmfil6jdj4l8>;
    "NFTRejected": Anonymize<I9o9f05ebunqev>;
    "IssuerChanged": Anonymize<Ifb32prv2c7htc>;
    "PropertySet": Anonymize<I7of83qrfaioip>;
    "PropertyRemoved": Anonymize<I8jvqf5673ih1q>;
    "PropertiesRemoved": Anonymize<Ie6p960gf85qqh>;
    "CollectionLocked": Anonymize<I86pkmcnt7cik7>;
    "ResourceAdded": Anonymize<If878fl46fbcu3>;
    "ResourceReplaced": Anonymize<If878fl46fbcu3>;
    "ResourceAccepted": Anonymize<If878fl46fbcu3>;
    "ResourceRemoval": Anonymize<If878fl46fbcu3>;
    "ResourceRemovalAccepted": Anonymize<If878fl46fbcu3>;
    "PrioritySet": Anonymize<Idap45qa17pms2>;
}>;
export type I86pkmcnt7cik7 = {
    "issuer": SS58String;
    "collection_id": number;
};
export type I37orqm0h7voie = {
    "owner": Anonymize<I4g7te25vr8u12>;
    "collection_id": number;
    "nft_id": number;
};
export type I4g7te25vr8u12 = AnonymousEnum<{
    "AccountId": SS58String;
    "CollectionAndNftTuple": Anonymize<I9jd27rnpm8ttv>;
}>;
export type Idn09te2cs37nc = {
    "owner": SS58String;
    "collection_id": number;
    "nft_id": number;
};
export type Ie6j9cnp8aj7k7 = {
    "sender": SS58String;
    "recipient": Anonymize<I4g7te25vr8u12>;
    "collection_id": number;
    "nft_id": number;
    "approval_required": boolean;
};
export type I9kmfil6jdj4l8 = {
    "sender": SS58String;
    "recipient": Anonymize<I4g7te25vr8u12>;
    "collection_id": number;
    "nft_id": number;
};
export type I9o9f05ebunqev = {
    "sender": SS58String;
    "collection_id": number;
    "nft_id": number;
};
export type Ifb32prv2c7htc = {
    "old_issuer": SS58String;
    "new_issuer": SS58String;
    "collection_id": number;
};
export type I7of83qrfaioip = {
    "collection_id": number;
    "maybe_nft_id"?: Anonymize<I4arjljr6dpflb>;
    "key": Binary;
    "value": Binary;
};
export type I8jvqf5673ih1q = {
    "collection_id": number;
    "maybe_nft_id"?: Anonymize<I4arjljr6dpflb>;
    "key": Binary;
};
export type Ie6p960gf85qqh = {
    "collection_id": number;
    "maybe_nft_id"?: Anonymize<I4arjljr6dpflb>;
};
export type If878fl46fbcu3 = {
    "nft_id": number;
    "resource_id": number;
    "collection_id": number;
};
export type Idap45qa17pms2 = {
    "collection_id": number;
    "nft_id": number;
};
export type I9it0aqsa2gi7p = AnonymousEnum<{
    "BaseCreated": Anonymize<I9pbttir0alsh4>;
    "SlotEquipped": Anonymize<Ie27tfrcer2j34>;
    "SlotUnequipped": Anonymize<Ie27tfrcer2j34>;
    "EquippablesUpdated": Anonymize<I4a41r9balkt5o>;
    "BaseIssuerChanged": Anonymize<Ifokke6olpki32>;
}>;
export type I9pbttir0alsh4 = {
    "issuer": SS58String;
    "base_id": number;
};
export type Ie27tfrcer2j34 = {
    "item_collection": number;
    "item_nft": number;
    "base_id": number;
    "slot_id": number;
};
export type I4a41r9balkt5o = {
    "base_id": number;
    "slot_id": number;
};
export type Ifokke6olpki32 = {
    "old_issuer": SS58String;
    "new_issuer": SS58String;
    "base_id": number;
};
export type I18cu0963032lj = AnonymousEnum<{
    /**
     *The price for a token was updated
     */
    "TokenPriceUpdated": Anonymize<Ibnjv02qe8q15q>;
    /**
     *Token was sold to a new owner
     */
    "TokenSold": Anonymize<Iufi3tjf8uomh>;
    /**
     *Token listed on Marketplace
     */
    "TokenListed": Anonymize<Icdqlqqb8bqrfq>;
    /**
     *Token unlisted on Marketplace
     */
    "TokenUnlisted": Anonymize<Idn09te2cs37nc>;
    /**
     *Offer was placed on a token
     */
    "OfferPlaced": Anonymize<I6uachrs3kgekh>;
    /**
     *Offer was withdrawn
     */
    "OfferWithdrawn": Anonymize<I9o9f05ebunqev>;
    /**
     *Offer was accepted
     */
    "OfferAccepted": Anonymize<Ict3k310u6ic13>;
    /**
     *Royalty fee paid to royalty owner
     */
    "RoyaltyFeePaid": Anonymize<I19a4q1q9b96bj>;
    /**
     *Market fee paid to marketplace owner
     */
    "MarketFeePaid": Anonymize<I9vspelmo3v87n>;
}>;
export type Ibnjv02qe8q15q = {
    "owner": SS58String;
    "collection_id": number;
    "nft_id": number;
    "price"?: Anonymize<I35p85j063s0il>;
};
export type Iufi3tjf8uomh = {
    "owner": SS58String;
    "buyer": SS58String;
    "collection_id": number;
    "nft_id": number;
    "price": bigint;
};
export type Icdqlqqb8bqrfq = {
    "owner": SS58String;
    "collection_id": number;
    "nft_id": number;
    "price": bigint;
};
export type I6uachrs3kgekh = {
    "offerer": SS58String;
    "collection_id": number;
    "nft_id": number;
    "price": bigint;
};
export type Ict3k310u6ic13 = {
    "owner": SS58String;
    "buyer": SS58String;
    "collection_id": number;
    "nft_id": number;
};
export type I19a4q1q9b96bj = {
    "sender": SS58String;
    "royalty_owner": SS58String;
    "collection_id": number;
    "nft_id": number;
    "amount": bigint;
};
export type I9vspelmo3v87n = {
    "sender": SS58String;
    "marketplace_owner": SS58String;
    "collection_id": number;
    "nft_id": number;
    "amount": bigint;
};
export type If21pgjrd9nomd = AnonymousEnum<{
    /**
     *Phala World clock zero day started
     */
    "WorldClockStarted": Anonymize<I6qhju41p0nhnu>;
    /**
     *Start of a new era
     */
    "NewEra": Anonymize<Ibt8b4upq3lk9f>;
    /**
     *Spirit has been claimed
     */
    "SpiritClaimed": Anonymize<Idn09te2cs37nc>;
    /**
     *A chance to get an Origin of Shell through preorder
     */
    "OriginOfShellPreordered": Anonymize<Idib7if2ahdbms>;
    /**
     *Origin of Shell minted from the preorder
     */
    "OriginOfShellMinted": Anonymize<I4t66odnqrn9eg>;
    /**
     *Spirit collection id was set
     */
    "SpiritCollectionIdSet": Anonymize<I9m43jftr52of7>;
    /**
     *Origin of Shell collection id was set
     */
    "OriginOfShellCollectionIdSet": Anonymize<I9m43jftr52of7>;
    /**
     *Origin of Shell inventory updated
     */
    "OriginOfShellInventoryUpdated": Anonymize<Ia0p84d9hde4ib>;
    /**
     *Spirit Claims status has changed
     */
    "ClaimSpiritStatusChanged": Anonymize<I4va5v84pe84si>;
    /**
     *Purchase Rare Origin of Shells status has changed
     */
    "PurchaseRareOriginOfShellsStatusChanged": Anonymize<I4va5v84pe84si>;
    /**
     *Purchase Prime Origin of Shells status changed
     */
    "PurchasePrimeOriginOfShellsStatusChanged": Anonymize<I4va5v84pe84si>;
    /**
     *Preorder Origin of Shells status has changed
     */
    "PreorderOriginOfShellsStatusChanged": Anonymize<I4va5v84pe84si>;
    /**
     *Chosen preorder was minted to owner
     */
    "ChosenPreorderMinted": Anonymize<Ifo39hdbrbqtav>;
    /**
     *Not chosen preorder was refunded to owner
     */
    "NotChosenPreorderRefunded": Anonymize<Idk4dt1en5fp0m>;
    /**
     *Last Day of Sale status has changed
     */
    "LastDayOfSaleStatusChanged": Anonymize<I4va5v84pe84si>;
    "OverlordChanged": Anonymize<Ia8044k5ucjpl4>;
    /**
     *Origin of Shells Inventory was set
     */
    "OriginOfShellsInventoryWasSet": Anonymize<I4va5v84pe84si>;
    /**
     *Gift a Origin of Shell for giveaway or reserved NFT to owner
     */
    "OriginOfShellGiftedToOwner": Anonymize<I7c67e7fb6ehc6>;
    /**
     *Spirits Metadata was set
     */
    "SpiritsMetadataSet": Anonymize<I2vpi04e2m2t1f>;
    /**
     *Origin of Shells Metadata was set
     */
    "OriginOfShellsMetadataSet": Anonymize<Ifenfkh9pftsgo>;
    /**
     *Payee changed to new account
     */
    "PayeeChanged": Anonymize<I837pu8dkfum8r>;
    /**
     *Signer changed to new account
     */
    "SignerChanged": Anonymize<I52sadtookvdev>;
}>;
export type I6qhju41p0nhnu = {
    "start_time": bigint;
};
export type Ibt8b4upq3lk9f = {
    "time": bigint;
    "era": bigint;
};
export type Idib7if2ahdbms = {
    "owner": SS58String;
    "preorder_id": number;
    "race": Anonymize<I822rk526sun2n>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
};
export type I822rk526sun2n = AnonymousEnum<{
    "Cyborg": undefined;
    "AISpectre": undefined;
    "XGene": undefined;
    "Pandroid": undefined;
}>;
export type I2p6ke7vsu6rp3 = AnonymousEnum<{
    "HackerWizard": undefined;
    "HardwareDruid": undefined;
    "RoboWarrior": undefined;
    "TradeNegotiator": undefined;
    "Web3Monk": undefined;
}>;
export type I4t66odnqrn9eg = {
    "rarity_type": Anonymize<Iefk0q8nig47ud>;
    "collection_id": number;
    "nft_id": number;
    "owner": SS58String;
    "race": Anonymize<I822rk526sun2n>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
    "generation_id": number;
};
export type Iefk0q8nig47ud = AnonymousEnum<{
    "Prime": undefined;
    "Magic": undefined;
    "Legendary": undefined;
}>;
export type I9m43jftr52of7 = {
    "collection_id": number;
};
export type Ia0p84d9hde4ib = {
    "rarity_type": Anonymize<Iefk0q8nig47ud>;
};
export type I4va5v84pe84si = {
    "status": boolean;
};
export type Ifo39hdbrbqtav = {
    "preorder_id": number;
    "owner": SS58String;
    "nft_id": number;
};
export type Idk4dt1en5fp0m = {
    "preorder_id": number;
    "owner": SS58String;
};
export type Ia8044k5ucjpl4 = {
    "old_overlord"?: Anonymize<Ihfphjolmsqq1>;
    "new_overlord": SS58String;
};
export type I7c67e7fb6ehc6 = {
    "owner": SS58String;
    "nft_sale_type": Anonymize<Ifa89aaarcts2r>;
};
export type Ifa89aaarcts2r = AnonymousEnum<{
    "ForSale": undefined;
    "Giveaway": undefined;
    "Reserved": undefined;
}>;
export type I2vpi04e2m2t1f = {
    "spirits_metadata": Binary;
};
export type Ifenfkh9pftsgo = {
    "origin_of_shells_metadata": Anonymize<I7bd90u31s5tlt>;
};
export type I7bd90u31s5tlt = Array<Anonymize<I7nbl86kecgbrf>>;
export type I7nbl86kecgbrf = [Anonymize<I822rk526sun2n>, Binary];
export type I837pu8dkfum8r = {
    "old_payee"?: Anonymize<Ihfphjolmsqq1>;
    "new_payee": SS58String;
};
export type I52sadtookvdev = {
    "old_signer"?: Anonymize<Ihfphjolmsqq1>;
    "new_signer": SS58String;
};
export type I5orvk2ouioseb = AnonymousEnum<{
    /**
     *CanStartIncubation status changed and set official hatch time.
     */
    "CanStartIncubationStatusChanged": Anonymize<Ialctqbnr13sst>;
    /**
     *Origin of Shell owner has initiated the incubation sequence.
     */
    "StartedIncubation": Anonymize<Icaun1vc4v6jph>;
    /**
     *Origin of Shell received food from an account.
     */
    "OriginOfShellReceivedFood": Anonymize<I4gde9qrjsf33a>;
    /**
     *Origin of Shell updated chosen parts.
     */
    "OriginOfShellChosenPartsUpdated": Anonymize<I8i7ef3cp3tpfh>;
    /**
     *Shell Collection ID is set.
     */
    "ShellCollectionIdSet": Anonymize<I9m43jftr52of7>;
    /**
     *Shell Parts Collection ID is set.
     */
    "ShellPartsCollectionIdSet": Anonymize<I9m43jftr52of7>;
    /**
     *Shell Part minted.
     */
    "ShellPartMinted": Anonymize<If0vn6pict0g8d>;
    /**
     *Shell has been awakened from an origin_of_shell being hatched and burned.
     */
    "ShellAwakened": Anonymize<Iearam1ubnnaa6>;
}>;
export type Ialctqbnr13sst = {
    "status": boolean;
    "start_time": bigint;
    "official_hatch_time": bigint;
};
export type Icaun1vc4v6jph = {
    "collection_id": number;
    "nft_id": number;
    "owner": SS58String;
    "start_time": bigint;
    "hatch_time": bigint;
};
export type I4gde9qrjsf33a = {
    "collection_id": number;
    "nft_id": number;
    "sender": SS58String;
    "era": bigint;
};
export type I8i7ef3cp3tpfh = {
    "collection_id": number;
    "nft_id": number;
    "old_chosen_parts"?: Anonymize<I8i196bo7c4roo>;
    "new_chosen_parts": Anonymize<I10qofmpakv270>;
};
export type I8i196bo7c4roo = (Anonymize<I10qofmpakv270>) | undefined;
export type I10qofmpakv270 = Array<Anonymize<I61lm07ckg851h>>;
export type I61lm07ckg851h = [Binary, Anonymize<Ihpkocju2982f>];
export type Ihpkocju2982f = {
    "shell_part": Anonymize<Ics7qes1eh2nqg>;
    "sub_parts"?: Anonymize<I6chdh3uaft3l7>;
};
export type Ics7qes1eh2nqg = {
    "name": Binary;
    "rarity": Anonymize<I4epu0u11rksip>;
    "race"?: Anonymize<Ibvfokad59qon>;
    "career"?: Anonymize<Iamekth16hiqp7>;
    "sizes"?: Anonymize<Icp972nbdtk4q4>;
    "style"?: Anonymize<Iabpgqcjikia83>;
    "metadata"?: Anonymize<Iabpgqcjikia83>;
    "layer": number;
    "x": number;
    "y": number;
    "tradeable": boolean;
};
export type I4epu0u11rksip = AnonymousEnum<{
    "Normal": undefined;
    "Rare": undefined;
    "Epic": undefined;
    "Legend": undefined;
}>;
export type Ibvfokad59qon = (Anonymize<I822rk526sun2n>) | undefined;
export type Iamekth16hiqp7 = (Anonymize<I2p6ke7vsu6rp3>) | undefined;
export type Icp972nbdtk4q4 = (Anonymize<Iects8v9o89ckr>) | undefined;
export type Iects8v9o89ckr = Array<Anonymize<I617ovjvshg71q>>;
export type I617ovjvshg71q = AnonymousEnum<{
    "MA": undefined;
    "MB": undefined;
    "MC": undefined;
    "FA": undefined;
    "FB": undefined;
    "FC": undefined;
    "XA": undefined;
    "XB": undefined;
    "XC": undefined;
    "PA": undefined;
    "PB": undefined;
    "PC": undefined;
    "PD": undefined;
    "AA": undefined;
}>;
export type I6chdh3uaft3l7 = (Anonymize<I2b6e2qnq2lql9>) | undefined;
export type I2b6e2qnq2lql9 = Array<Anonymize<Ics7qes1eh2nqg>>;
export type If0vn6pict0g8d = {
    "shell_parts_collection_id": number;
    "shell_part_nft_id": number;
    "parent_shell_collection_id": number;
    "parent_shell_nft_id": number;
    "owner": SS58String;
};
export type Iearam1ubnnaa6 = {
    "shell_collection_id": number;
    "shell_nft_id": number;
    "rarity": Anonymize<Iefk0q8nig47ud>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
    "race": Anonymize<I822rk526sun2n>;
    "generation_id": number;
    "origin_of_shell_collection_id": number;
    "origin_of_shell_nft_id": number;
    "owner": SS58String;
};
export type Ip5f6el4hpqa1 = AnonymousEnum<{
    /**
     *Marketplace owner is set.
     */
    "MarketplaceOwnerSet": Anonymize<I1dfc0e5uj3l57>;
    /**
     *RoyaltyInfo updated for a NFT.
     */
    "RoyaltyInfoUpdated": Anonymize<If1ljpevtjrmba>;
}>;
export type I1dfc0e5uj3l57 = {
    "old_marketplace_owner"?: Anonymize<Ihfphjolmsqq1>;
    "new_marketplace_owner": SS58String;
};
export type If1ljpevtjrmba = {
    "collection_id": number;
    "nft_id": number;
    "old_royalty_info"?: Anonymize<I7gf8qq59rrghk>;
    "new_royalty_info": Anonymize<I4bq7muekha6gj>;
};
export type I7gf8qq59rrghk = (Anonymize<I4bq7muekha6gj>) | undefined;
export type I4bq7muekha6gj = {
    "recipient": SS58String;
    "amount": number;
};
export type I5m28oic15nfhj = AnonymousEnum<{
    /**
     *Extrinsic access grant to someone
     *args: [pallet_index, extrinsic_name, who]
     */
    "AccessGranted": Anonymize<Iem1enf2fufb5v>;
}>;
export type Iem1enf2fufb5v = {
    "pallet_index": number;
    "extrinsic_name": Binary;
    "who": SS58String;
};
export type I1ak528ok7k6jk = AnonymousEnum<{
    /**
     *Fee set for a specific asset
     *args: [domain, asset, amount]
     */
    "FeeSet": Anonymize<Ifp4t9o738p31f>;
}>;
export type Ifp4t9o738p31f = {
    "domain": number;
    "asset": Anonymize<Ic00osfu517iss>;
    "amount": bigint;
};
export type I61mboln29qs8v = AnonymousEnum<{
    /**
     *When initial bridge transfer send to dest domain
     *args: [dest_domain_id, resource_id, deposit_nonce, sender, transfer_type,
     *deposit_data, handler_response, ]
     */
    "Deposit": Anonymize<Iatonj6bqf2dcb>;
    /**
     *When proposal was executed successfully
     */
    "ProposalExecution": Anonymize<Iepshvhf8fi3ce>;
    /**
     *When proposal was faild to execute
     */
    "FailedHandlerExecution": Anonymize<I8vto936slaf4>;
    /**
     *When user is going to retry a bridge transfer
     *args: [deposit_on_block_height, dest_domain_id, sender]
     */
    "Retry": Anonymize<Ie628frm5eo165>;
    /**
     *When bridge is paused
     *args: [dest_domain_id]
     */
    "BridgePaused": Anonymize<I4cdvg646kt2e0>;
    /**
     *When bridge is unpaused
     *args: [dest_domain_id]
     */
    "BridgeUnpaused": Anonymize<I4cdvg646kt2e0>;
    /**
     *When registering a new dest domainID with its corresponding chainID
     */
    "RegisterDestDomain": Anonymize<I6lnq492gvt8n2>;
    /**
     *When unregistering a dest domainID with its corresponding chainID
     */
    "UnregisterDestDomain": Anonymize<I6lnq492gvt8n2>;
    /**
     *When bridge fee is collected
     */
    "FeeCollected": Anonymize<I83logdba4873j>;
    /**
     *When all bridges are paused
     */
    "AllBridgePaused": Anonymize<Idndvbb9nej6lj>;
    /**
     *When all bridges are unpaused
     */
    "AllBridgeUnpaused": Anonymize<Idndvbb9nej6lj>;
}>;
export type Iatonj6bqf2dcb = {
    "dest_domain_id": number;
    "resource_id": FixedSizeBinary<32>;
    "deposit_nonce": bigint;
    "sender": SS58String;
    "transfer_type": Anonymize<Icsm0a8dtoeisn>;
    "deposit_data": Binary;
    "handler_response": Binary;
};
export type Icsm0a8dtoeisn = AnonymousEnum<{
    "FungibleTransfer": undefined;
    "NonFungibleTransfer": undefined;
    "GenericTransfer": undefined;
}>;
export type Iepshvhf8fi3ce = {
    "origin_domain_id": number;
    "deposit_nonce": bigint;
    "data_hash": FixedSizeBinary<32>;
};
export type I8vto936slaf4 = {
    "error": Binary;
    "origin_domain_id": number;
    "deposit_nonce": bigint;
};
export type Ie628frm5eo165 = {
    "deposit_on_block_height": bigint;
    "dest_domain_id": number;
    "sender": SS58String;
};
export type I4cdvg646kt2e0 = {
    "dest_domain_id": number;
};
export type I6lnq492gvt8n2 = {
    "sender": SS58String;
    "domain_id": number;
    "chain_id": Anonymize<I4totqt881mlti>;
};
export type I83logdba4873j = {
    "fee_payer": SS58String;
    "dest_domain_id": number;
    "resource_id": FixedSizeBinary<32>;
    "fee_amount": bigint;
    "fee_asset_id": Anonymize<Ic00osfu517iss>;
};
export type Idndvbb9nej6lj = {
    "sender": SS58String;
};
export type I1qdt16l0lgv0 = AnonymousEnum<{
    /**
     *When fee handler was set for a specific (domain, asset) pair
     *args: [dest_domain_id, asset_id, handler_type]
     */
    "FeeHandlerSet": Anonymize<I5j5chkhnfbh8j>;
}>;
export type I5j5chkhnfbh8j = {
    "domain": number;
    "asset": Anonymize<Ic00osfu517iss>;
    "handler_type": Anonymize<I5p3oo2n3c074l>;
};
export type I5p3oo2n3c074l = AnonymousEnum<{
    "BasicFeeHandler": undefined;
    "PercentageFeeHandler": undefined;
    "DynamicFeeHandler": undefined;
}>;
export type I8cm7e3mlhvjjh = AnonymousEnum<{
    /**
     *Fee set rate for a specific asset and domain
     *args: [domain, asset, rate_basis_point, fee_lower_bound, fee_upper_bound]
     */
    "FeeRateSet": Anonymize<Ife179qlf4g24i>;
}>;
export type Ife179qlf4g24i = {
    "domain": number;
    "asset": Anonymize<Ic00osfu517iss>;
    "rate_basis_point": number;
    "fee_lower_bound": bigint;
    "fee_upper_bound": bigint;
};
export type I1e6fpb3424k9c = AnonymousEnum<{
    /**
     *Worker is set.
     */
    "WorkerAdd": Anonymize<Iem2tclvr85h3e>;
    /**
     *Worker is set.
     */
    "WorkerRemove": Anonymize<Iem2tclvr85h3e>;
    /**
     *New task saved.
     */
    "NewTask": Anonymize<Ieg3201strrrud>;
    /**
     *Task has been claimed.
     */
    "Claimed": Anonymize<Icqa1le0ffav0n>;
}>;
export type Iem2tclvr85h3e = {
    "worker": SS58String;
};
export type Ieg3201strrrud = {
    /**
     *Record
     */
    "deposit_info": Anonymize<Idmrjcv7s8vviq>;
};
export type Idmrjcv7s8vviq = {
    "sender": SS58String;
    "asset": Anonymize<Ic00osfu517iss>;
    "amount": bigint;
    "recipient": Binary;
    "task": Binary;
};
export type Icqa1le0ffav0n = {
    "tasks": Anonymize<Ic5m5lp1oioo8r>;
    "fee": bigint;
};
export type I3b7ubon4divk4 = [Anonymize<I7ntd0cf4p1gls>, bigint];
export type I7ntd0cf4p1gls = Array<Anonymize<I2u3ov0pi69hb5>>;
export type I2u3ov0pi69hb5 = {
    "delegate": SS58String;
    "proxy_type": Anonymize<Ifulsuf67dt4c7>;
    "delay": number;
};
export type I8l842dlicg2jr = Array<Anonymize<I1gq4davckq2rn>>;
export type I1gq4davckq2rn = (Anonymize<I3jmgg6g9v4tni>) | undefined;
export type I3jmgg6g9v4tni = {
    "maybe_id"?: Anonymize<I4s6vifaf8k998>;
    "priority": number;
    "call": PreimagesBounded;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "origin": Anonymize<Idcg7jnap6cfdj>;
};
export type Idcg7jnap6cfdj = AnonymousEnum<{
    "system": DispatchRawOrigin;
    "CumulusXcm": Anonymize<I3in0d0lb61qi8>;
    "PolkadotXcm": Anonymize<I1r9hjo7723qso>;
    "Council": Anonymize<I637q9f60cmh3e>;
    "TechnicalCommittee": Anonymize<I637q9f60cmh3e>;
    "Void": undefined;
}>;
export type I1r9hjo7723qso = AnonymousEnum<{
    "Xcm": Anonymize<Idpatrs8teqg2g>;
    "Response": Anonymize<Idpatrs8teqg2g>;
}>;
export type I9cllvl0tmdeco = Array<Anonymize<Icirj9v0tmgkfu>>;
export type Icirj9v0tmgkfu = {
    "sender": number;
    "state": Anonymize<Ic2gg6ldfq068e>;
    "message_metadata": Anonymize<Iaovgsvv6sk5ee>;
};
export type Iaovgsvv6sk5ee = Array<Anonymize<Ib7nn0rucuglap>>;
export type Ib7nn0rucuglap = [number, Anonymize<I9agqbocvfm7aa>];
export type I9agqbocvfm7aa = AnonymousEnum<{
    "ConcatenatedVersionedXcm": undefined;
    "ConcatenatedEncodedBlob": undefined;
    "Signals": undefined;
}>;
export type Ie0cpusdmler9p = {
    "suspend_threshold": number;
    "drop_threshold": number;
    "resume_threshold": number;
    "threshold_weight": Anonymize<I4q39t5hn830vp>;
    "weight_restrict_decay": Anonymize<I4q39t5hn830vp>;
    "xcmp_max_individual_weight": Anonymize<I4q39t5hn830vp>;
};
export type I6o3vavku3vjsk = [number, number, Binary];
export type Iepvrcsdbii2qt = {
    "begin_used": number;
    "end_used": number;
    "overweight_count": bigint;
};
export type I82vjkits3vc46 = Array<Anonymize<Icp9h5ma02v1rg>>;
export type Icp9h5ma02v1rg = [number, Binary];
export type I9us7218h9qeio = AnonymousEnum<{
    "Pending": Anonymize<Ifln1jc15vs9rm>;
    "VersionNotifier": Anonymize<Ib7dk7g6saf07c>;
    "Ready": Anonymize<I4v4qo4kmm8hrq>;
}>;
export type Ifln1jc15vs9rm = {
    "responder": Anonymize<Idbg08q7edq40c>;
    "maybe_match_querier"?: Anonymize<Ibj8unn8g9ie3p>;
    "maybe_notify"?: Anonymize<I1faufi0iffstp>;
    "timeout": number;
};
export type Ibj8unn8g9ie3p = (Anonymize<Idbg08q7edq40c>) | undefined;
export type Ib7dk7g6saf07c = {
    "origin": Anonymize<Idbg08q7edq40c>;
    "is_active": boolean;
};
export type I4v4qo4kmm8hrq = {
    "response": Anonymize<Ifjsumieiq38rh>;
    "at": number;
};
export type Ifjsumieiq38rh = AnonymousEnum<{
    "V2": XcmV2Response;
    "V3": Anonymize<I4e56rm9p07o27>;
}>;
export type I68itkd3tsdg5p = [number, Anonymize<Idbg08q7edq40c>];
export type I9osn6oe908bj1 = Array<Anonymize<Ifkpd7lqlvipvc>>;
export type Ifkpd7lqlvipvc = [Anonymize<Idbg08q7edq40c>, number];
export type I78c7o5kd104ql = {
    "amount": bigint;
    "owner": Anonymize<Idbg08q7edq40c>;
    "locker": Anonymize<Idbg08q7edq40c>;
    "consumers": Anonymize<I2ia97v5nng96b>;
};
export type I165b31dp8f95m = [number, SS58String, Anonymize<I9j0cetcqgjtaf>];
export type I9j0cetcqgjtaf = AnonymousEnum<{
    "V3": Anonymize<Ic00osfu517iss>;
}>;
export type I7csvdmmfnffaq = Array<Anonymize<Ieoqa3do3q3sro>>;
export type Ieoqa3do3q3sro = [bigint, Anonymize<Idbg08q7edq40c>];
export type I64fsp45mmeq7r = AnonymousEnum<{
    "System": Anonymize<Iccjej82b2j3c5>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Utility": Anonymize<I9rpquacdp75lo>;
    "Multisig": Anonymize<I87kc8khn79t3u>;
    "Proxy": Anonymize<Icnmpu4akb9i9k>;
    "Vesting": Anonymize<Ifd9d47pq35o0o>;
    "Scheduler": Anonymize<I2k9mdbgbgkm8r>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "XcmpQueue": Anonymize<I57tqg8fvt7f6m>;
    "DmpQueue": Anonymize<I3lfpt1qictomp>;
    "PolkadotXcm": Anonymize<Ia6ktlm9tkn8j6>;
    "Balances": Anonymize<I1uvhaq3q54bet>;
    "CollatorSelection": Anonymize<I5c9voacr9gah8>;
    "Session": Anonymize<I77dda7hps0u37>;
    "Identity": Anonymize<I9r781s58svp6k>;
    "Democracy": Anonymize<I10dimmis6musr>;
    "Council": Anonymize<I3igadb72e989>;
    "Treasury": Anonymize<I8pvomobr0rgmg>;
    "Bounties": Anonymize<I91kpi5kjh9on2>;
    "Lottery": Anonymize<I9lfqobpm53ton>;
    "TechnicalCommittee": Anonymize<I3igadb72e989>;
    "TechnicalMembership": Anonymize<I6tsknu13e0euf>;
    "PhragmenElection": Anonymize<I3d851pnneuhv8>;
    "Tips": Anonymize<Ifmtsab3vbnv10>;
    "ChildBounties": Anonymize<I1b6drdhvt5hl9>;
    "ChainBridge": Anonymize<Iecgetr6r485af>;
    "XTransfer": Anonymize<I8d1rs27iurnan>;
    "PhalaMq": Anonymize<Iecinmgkn2ids0>;
    "PhalaRegistry": Anonymize<I389ljd813gkvi>;
    "PhalaComputation": Anonymize<I79bb2pdcfefoc>;
    "Assets": Anonymize<Ideusanoto4b1j>;
    "AssetsRegistry": Anonymize<Id2vn8p7c328up>;
    "PhalaStakePoolv2": Anonymize<I9s8pr1bb02go>;
    "PhalaVault": Anonymize<I9sicj360dvif8>;
    "PhalaWrappedBalances": Anonymize<I5346mu4igb8nj>;
    "PhalaBasePool": Anonymize<Iam36odngl5jju>;
    "Uniques": Anonymize<I7g34e4vegl9s4>;
    "RmrkCore": Anonymize<I6unlhbittuj3b>;
    "RmrkEquip": Anonymize<I9c5kqlsb7n82j>;
    "RmrkMarket": Anonymize<Iag2lfjshi8c8s>;
    "PWNftSale": Anonymize<Iel94kn88d0kj7>;
    "PWIncubation": Anonymize<I8tfnmviofc7tn>;
    "PWMarketplace": Anonymize<I2deup5hdrd0i2>;
    "SygmaAccessSegregator": Anonymize<I4m46aem8c6ueq>;
    "SygmaBasicFeeHandler": Anonymize<Ieqaalig8ljrel>;
    "SygmaBridge": Anonymize<I5fijo62u5802j>;
    "SygmaFeeHandlerRouter": Anonymize<I742jl84cif6uo>;
    "SygmaPercentageFeeHandler": Anonymize<I6a4e2ah19v6k4>;
    "PalletIndex": Anonymize<Ifkvdoemdb4o58>;
}>;
export type Iccjej82b2j3c5 = AnonymousEnum<{
    /**
     *See [`Pallet::remark`].
     */
    "remark": Anonymize<I8ofcg5rbj0g2c>;
    /**
     *See [`Pallet::set_heap_pages`].
     */
    "set_heap_pages": Anonymize<I4adgbll7gku4i>;
    /**
     *See [`Pallet::set_code`].
     */
    "set_code": Anonymize<I6pjjpfvhvcfru>;
    /**
     *See [`Pallet::set_code_without_checks`].
     */
    "set_code_without_checks": Anonymize<I6pjjpfvhvcfru>;
    /**
     *See [`Pallet::set_storage`].
     */
    "set_storage": Anonymize<I9pj91mj79qekl>;
    /**
     *See [`Pallet::kill_storage`].
     */
    "kill_storage": Anonymize<I39uah9nss64h9>;
    /**
     *See [`Pallet::kill_prefix`].
     */
    "kill_prefix": Anonymize<Ik64dknsq7k08>;
    /**
     *See [`Pallet::remark_with_event`].
     */
    "remark_with_event": Anonymize<I8ofcg5rbj0g2c>;
}>;
export type I9rpquacdp75lo = AnonymousEnum<{
    /**
     *See [`Pallet::batch`].
     */
    "batch": Anonymize<I3k0uq4uiffpmu>;
    /**
     *See [`Pallet::as_derivative`].
     */
    "as_derivative": Anonymize<I1plrh2qpmgio7>;
    /**
     *See [`Pallet::batch_all`].
     */
    "batch_all": Anonymize<I3k0uq4uiffpmu>;
    /**
     *See [`Pallet::dispatch_as`].
     */
    "dispatch_as": Anonymize<I99ihrklvh38vf>;
    /**
     *See [`Pallet::force_batch`].
     */
    "force_batch": Anonymize<I3k0uq4uiffpmu>;
    /**
     *See [`Pallet::with_weight`].
     */
    "with_weight": Anonymize<I33qpm7ucsp30h>;
}>;
export type I3k0uq4uiffpmu = {
    "calls": Anonymize<Irmpco5diqimm>;
};
export type Irmpco5diqimm = Array<TxCallData>;
export type I1plrh2qpmgio7 = {
    "index": number;
    "call": TxCallData;
};
export type I99ihrklvh38vf = {
    "as_origin": Anonymize<Idcg7jnap6cfdj>;
    "call": TxCallData;
};
export type I33qpm7ucsp30h = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I87kc8khn79t3u = AnonymousEnum<{
    /**
     *See [`Pallet::as_multi_threshold_1`].
     */
    "as_multi_threshold_1": Anonymize<Ib9m3svtek7i5r>;
    /**
     *See [`Pallet::as_multi`].
     */
    "as_multi": Anonymize<Ie2rfi2t415ig0>;
    /**
     *See [`Pallet::approve_as_multi`].
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *See [`Pallet::cancel_as_multi`].
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Ib9m3svtek7i5r = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Ie2rfi2t415ig0 = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Icnmpu4akb9i9k = AnonymousEnum<{
    /**
     *See [`Pallet::proxy`].
     */
    "proxy": Anonymize<I75vjvtfb2l8k5>;
    /**
     *See [`Pallet::add_proxy`].
     */
    "add_proxy": Anonymize<If4tj1q0g38fjg>;
    /**
     *See [`Pallet::remove_proxy`].
     */
    "remove_proxy": Anonymize<If4tj1q0g38fjg>;
    /**
     *See [`Pallet::remove_proxies`].
     */
    "remove_proxies": undefined;
    /**
     *See [`Pallet::create_pure`].
     */
    "create_pure": Anonymize<I213kjmutgr2fi>;
    /**
     *See [`Pallet::kill_pure`].
     */
    "kill_pure": Anonymize<Ia4iqoohe2opk8>;
    /**
     *See [`Pallet::announce`].
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *See [`Pallet::remove_announcement`].
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *See [`Pallet::reject_announcement`].
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *See [`Pallet::proxy_announced`].
     */
    "proxy_announced": Anonymize<Idbfh1iujsi9ti>;
}>;
export type I75vjvtfb2l8k5 = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ibplma4li8dhkt>;
    "call": TxCallData;
};
export type Ibplma4li8dhkt = (Anonymize<Ifulsuf67dt4c7>) | undefined;
export type If4tj1q0g38fjg = {
    "delegate": MultiAddress;
    "proxy_type": Anonymize<Ifulsuf67dt4c7>;
    "delay": number;
};
export type I213kjmutgr2fi = {
    "proxy_type": Anonymize<Ifulsuf67dt4c7>;
    "delay": number;
    "index": number;
};
export type Ia4iqoohe2opk8 = {
    "spawner": MultiAddress;
    "proxy_type": Anonymize<Ifulsuf67dt4c7>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type Idbfh1iujsi9ti = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ibplma4li8dhkt>;
    "call": TxCallData;
};
export type Ifd9d47pq35o0o = AnonymousEnum<{
    /**
     *See [`Pallet::vest`].
     */
    "vest": undefined;
    /**
     *See [`Pallet::vest_other`].
     */
    "vest_other": Anonymize<Id9uqtigc0il3v>;
    /**
     *See [`Pallet::vested_transfer`].
     */
    "vested_transfer": Anonymize<Iaa2o6cgjdpdn5>;
    /**
     *See [`Pallet::force_vested_transfer`].
     */
    "force_vested_transfer": Anonymize<Iam6hrl7ptd85l>;
    /**
     *See [`Pallet::merge_schedules`].
     */
    "merge_schedules": Anonymize<Ict9ivhr2c5hv0>;
}>;
export type I2k9mdbgbgkm8r = AnonymousEnum<{
    /**
     *See [`Pallet::schedule`].
     */
    "schedule": Anonymize<I1bsgq6ub3pn7s>;
    /**
     *See [`Pallet::cancel`].
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *See [`Pallet::schedule_named`].
     */
    "schedule_named": Anonymize<I5l4i5dfrq48ck>;
    /**
     *See [`Pallet::cancel_named`].
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *See [`Pallet::schedule_after`].
     */
    "schedule_after": Anonymize<Ibmhd8uhhdbblo>;
    /**
     *See [`Pallet::schedule_named_after`].
     */
    "schedule_named_after": Anonymize<Ibefb049jqh41>;
}>;
export type I1bsgq6ub3pn7s = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I5l4i5dfrq48ck = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ibmhd8uhhdbblo = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ibefb049jqh41 = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I57tqg8fvt7f6m = AnonymousEnum<{
    /**
     *See [`Pallet::service_overweight`].
     */
    "service_overweight": Anonymize<Iab1retd4gg4q1>;
    /**
     *See [`Pallet::suspend_xcm_execution`].
     */
    "suspend_xcm_execution": undefined;
    /**
     *See [`Pallet::resume_xcm_execution`].
     */
    "resume_xcm_execution": undefined;
    /**
     *See [`Pallet::update_suspend_threshold`].
     */
    "update_suspend_threshold": Anonymize<I3vh014cqgmrfd>;
    /**
     *See [`Pallet::update_drop_threshold`].
     */
    "update_drop_threshold": Anonymize<I3vh014cqgmrfd>;
    /**
     *See [`Pallet::update_resume_threshold`].
     */
    "update_resume_threshold": Anonymize<I3vh014cqgmrfd>;
    /**
     *See [`Pallet::update_threshold_weight`].
     */
    "update_threshold_weight": Anonymize<I2tni7rrb2buqm>;
    /**
     *See [`Pallet::update_weight_restrict_decay`].
     */
    "update_weight_restrict_decay": Anonymize<I2tni7rrb2buqm>;
    /**
     *See [`Pallet::update_xcmp_max_individual_weight`].
     */
    "update_xcmp_max_individual_weight": Anonymize<I2tni7rrb2buqm>;
}>;
export type Iab1retd4gg4q1 = {
    "index": bigint;
    "weight_limit": Anonymize<I4q39t5hn830vp>;
};
export type I2tni7rrb2buqm = {
    "new": Anonymize<I4q39t5hn830vp>;
};
export type I3lfpt1qictomp = AnonymousEnum<{
    /**
     *See [`Pallet::service_overweight`].
     */
    "service_overweight": Anonymize<Iab1retd4gg4q1>;
}>;
export type Ia6ktlm9tkn8j6 = AnonymousEnum<{
    /**
     *See [`Pallet::send`].
     */
    "send": Anonymize<I177omkp0t3av4>;
    /**
     *See [`Pallet::teleport_assets`].
     */
    "teleport_assets": Anonymize<I561t4i7oneora>;
    /**
     *See [`Pallet::reserve_transfer_assets`].
     */
    "reserve_transfer_assets": Anonymize<I561t4i7oneora>;
    /**
     *See [`Pallet::execute`].
     */
    "execute": Anonymize<Ia8um7upnt2t99>;
    /**
     *See [`Pallet::force_xcm_version`].
     */
    "force_xcm_version": Anonymize<I44pbivm2pe7qc>;
    /**
     *See [`Pallet::force_default_xcm_version`].
     */
    "force_default_xcm_version": Anonymize<Ic76kfh5ebqkpl>;
    /**
     *See [`Pallet::force_subscribe_version_notify`].
     */
    "force_subscribe_version_notify": Anonymize<I8nm9vc7o6er85>;
    /**
     *See [`Pallet::force_unsubscribe_version_notify`].
     */
    "force_unsubscribe_version_notify": Anonymize<I8nm9vc7o6er85>;
    /**
     *See [`Pallet::limited_reserve_transfer_assets`].
     */
    "limited_reserve_transfer_assets": Anonymize<I5up1l6nq7b3hn>;
    /**
     *See [`Pallet::limited_teleport_assets`].
     */
    "limited_teleport_assets": Anonymize<I5up1l6nq7b3hn>;
    /**
     *See [`Pallet::force_suspension`].
     */
    "force_suspension": Anonymize<Ibgm4rnf22lal1>;
}>;
export type I177omkp0t3av4 = {
    "dest": Anonymize<Idbg08q7edq40c>;
    "message": Anonymize<I5f1g9rtdd19nm>;
};
export type I5f1g9rtdd19nm = AnonymousEnum<{
    "V2": Anonymize<Iemqgk0vect4v7>;
    "V3": Anonymize<I72ak5168u17sk>;
}>;
export type I561t4i7oneora = {
    "dest": Anonymize<Idbg08q7edq40c>;
    "beneficiary": Anonymize<Idbg08q7edq40c>;
    "assets": Anonymize<Ik93katrmbiat>;
    "fee_asset_item": number;
};
export type Ia8um7upnt2t99 = {
    "message": Anonymize<I5f1g9rtdd19nm>;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I8nm9vc7o6er85 = {
    "location": Anonymize<Idbg08q7edq40c>;
};
export type I5up1l6nq7b3hn = {
    "dest": Anonymize<Idbg08q7edq40c>;
    "beneficiary": Anonymize<Idbg08q7edq40c>;
    "assets": Anonymize<Ik93katrmbiat>;
    "fee_asset_item": number;
    "weight_limit": XcmV3WeightLimit;
};
export type I1uvhaq3q54bet = AnonymousEnum<{
    /**
     *See [`Pallet::transfer_allow_death`].
     */
    "transfer_allow_death": Anonymize<I4ktuaksf5i1gk>;
    /**
     *See [`Pallet::force_transfer`].
     */
    "force_transfer": Anonymize<I9bqtpv2ii35mp>;
    /**
     *See [`Pallet::transfer_keep_alive`].
     */
    "transfer_keep_alive": Anonymize<I4ktuaksf5i1gk>;
    /**
     *See [`Pallet::transfer_all`].
     */
    "transfer_all": Anonymize<I9j7pagd6d4bda>;
    /**
     *See [`Pallet::force_unreserve`].
     */
    "force_unreserve": Anonymize<I2h9pmio37r7fb>;
    /**
     *See [`Pallet::upgrade_accounts`].
     */
    "upgrade_accounts": Anonymize<Ibmr18suc9ikh9>;
    /**
     *See [`Pallet::force_set_balance`].
     */
    "force_set_balance": Anonymize<I9iq22t0burs89>;
}>;
export type I5c9voacr9gah8 = AnonymousEnum<{
    /**
     *See [`Pallet::set_invulnerables`].
     */
    "set_invulnerables": Anonymize<Ifccifqltb5obi>;
    /**
     *See [`Pallet::set_desired_candidates`].
     */
    "set_desired_candidates": Anonymize<Iadtsfv699cq8b>;
    /**
     *See [`Pallet::set_candidacy_bond`].
     */
    "set_candidacy_bond": Anonymize<Ialpmgmhr3gk5r>;
    /**
     *See [`Pallet::register_as_candidate`].
     */
    "register_as_candidate": undefined;
    /**
     *See [`Pallet::leave_intent`].
     */
    "leave_intent": undefined;
    /**
     *See [`Pallet::add_invulnerable`].
     */
    "add_invulnerable": Anonymize<I4cbvqmqadhrea>;
    /**
     *See [`Pallet::remove_invulnerable`].
     */
    "remove_invulnerable": Anonymize<I4cbvqmqadhrea>;
}>;
export type I9r781s58svp6k = AnonymousEnum<{
    /**
     *See [`Pallet::add_registrar`].
     */
    "add_registrar": Anonymize<Ic6cqd9g0t65v0>;
    /**
     *See [`Pallet::set_identity`].
     */
    "set_identity": Anonymize<I2kds5jji7slh8>;
    /**
     *See [`Pallet::set_subs`].
     */
    "set_subs": Anonymize<Ia9mkdf6l44shb>;
    /**
     *See [`Pallet::clear_identity`].
     */
    "clear_identity": undefined;
    /**
     *See [`Pallet::request_judgement`].
     */
    "request_judgement": Anonymize<I9l2s4klu0831o>;
    /**
     *See [`Pallet::cancel_request`].
     */
    "cancel_request": Anonymize<I2ctrt5nqb8o7c>;
    /**
     *See [`Pallet::set_fee`].
     */
    "set_fee": Anonymize<I711qahikocb1c>;
    /**
     *See [`Pallet::set_account_id`].
     */
    "set_account_id": Anonymize<I6o1er683vod1j>;
    /**
     *See [`Pallet::set_fields`].
     */
    "set_fields": Anonymize<Id6gojh30v9ib2>;
    /**
     *See [`Pallet::provide_judgement`].
     */
    "provide_judgement": Anonymize<Ide1bahhh47lj9>;
    /**
     *See [`Pallet::kill_identity`].
     */
    "kill_identity": Anonymize<Id9uqtigc0il3v>;
    /**
     *See [`Pallet::add_sub`].
     */
    "add_sub": Anonymize<Ic68lsi7chpv5k>;
    /**
     *See [`Pallet::rename_sub`].
     */
    "rename_sub": Anonymize<Ic68lsi7chpv5k>;
    /**
     *See [`Pallet::remove_sub`].
     */
    "remove_sub": Anonymize<Iek0boln8pgnko>;
    /**
     *See [`Pallet::quit_sub`].
     */
    "quit_sub": undefined;
}>;
export type I10dimmis6musr = AnonymousEnum<{
    /**
     *See [`Pallet::propose`].
     */
    "propose": Anonymize<I1moso5oagpiea>;
    /**
     *See [`Pallet::second`].
     */
    "second": Anonymize<Ibeb4n9vpjefp3>;
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<Id7murq9s9fg6h>;
    /**
     *See [`Pallet::emergency_cancel`].
     */
    "emergency_cancel": Anonymize<Ied9mja4bq7va8>;
    /**
     *See [`Pallet::external_propose`].
     */
    "external_propose": Anonymize<I4f7jul8ljs54r>;
    /**
     *See [`Pallet::external_propose_majority`].
     */
    "external_propose_majority": Anonymize<I4f7jul8ljs54r>;
    /**
     *See [`Pallet::external_propose_default`].
     */
    "external_propose_default": Anonymize<I4f7jul8ljs54r>;
    /**
     *See [`Pallet::fast_track`].
     */
    "fast_track": Anonymize<I5agg650597e49>;
    /**
     *See [`Pallet::veto_external`].
     */
    "veto_external": Anonymize<I2ev73t79f46tb>;
    /**
     *See [`Pallet::cancel_referendum`].
     */
    "cancel_referendum": Anonymize<Ied9mja4bq7va8>;
    /**
     *See [`Pallet::delegate`].
     */
    "delegate": Anonymize<Ibot4i7a9t6oo8>;
    /**
     *See [`Pallet::undelegate`].
     */
    "undelegate": undefined;
    /**
     *See [`Pallet::clear_public_proposals`].
     */
    "clear_public_proposals": undefined;
    /**
     *See [`Pallet::unlock`].
     */
    "unlock": Anonymize<Id9uqtigc0il3v>;
    /**
     *See [`Pallet::remove_vote`].
     */
    "remove_vote": Anonymize<I666bl2fqjkejo>;
    /**
     *See [`Pallet::remove_other_vote`].
     */
    "remove_other_vote": Anonymize<I3hsuol7rtl0bj>;
    /**
     *See [`Pallet::blacklist`].
     */
    "blacklist": Anonymize<I3v9h9f3mpm1l8>;
    /**
     *See [`Pallet::cancel_proposal`].
     */
    "cancel_proposal": Anonymize<I9mnj4k4u8ls2c>;
    /**
     *See [`Pallet::set_metadata`].
     */
    "set_metadata": Anonymize<I2kt2u1flctk2q>;
}>;
export type Ibot4i7a9t6oo8 = {
    "to": MultiAddress;
    "conviction": VotingConviction;
    "balance": bigint;
};
export type I3hsuol7rtl0bj = {
    "target": MultiAddress;
    "index": number;
};
export type I3igadb72e989 = AnonymousEnum<{
    /**
     *See [`Pallet::set_members`].
     */
    "set_members": Anonymize<I38jfk5li8iang>;
    /**
     *See [`Pallet::execute`].
     */
    "execute": Anonymize<I6a0mojvhcds6b>;
    /**
     *See [`Pallet::propose`].
     */
    "propose": Anonymize<I6a51fflgrgs2>;
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<I2dtrijkm5601t>;
    /**
     *See [`Pallet::disapprove_proposal`].
     */
    "disapprove_proposal": Anonymize<I2ev73t79f46tb>;
    /**
     *See [`Pallet::close`].
     */
    "close": Anonymize<Ib2obgji960euh>;
}>;
export type I6a0mojvhcds6b = {
    "proposal": TxCallData;
    "length_bound": number;
};
export type I6a51fflgrgs2 = {
    "threshold": number;
    "proposal": TxCallData;
    "length_bound": number;
};
export type I8pvomobr0rgmg = AnonymousEnum<{
    /**
     *See [`Pallet::propose_spend`].
     */
    "propose_spend": Anonymize<Iffcutbjvs7mcv>;
    /**
     *See [`Pallet::reject_proposal`].
     */
    "reject_proposal": Anonymize<Icm9m0qeemu66d>;
    /**
     *See [`Pallet::approve_proposal`].
     */
    "approve_proposal": Anonymize<Icm9m0qeemu66d>;
    /**
     *See [`Pallet::spend`].
     */
    "spend": Anonymize<Icnrv1mfbd3in1>;
    /**
     *See [`Pallet::remove_approval`].
     */
    "remove_approval": Anonymize<Icm9m0qeemu66d>;
}>;
export type Iffcutbjvs7mcv = {
    "value": bigint;
    "beneficiary": MultiAddress;
};
export type I9lfqobpm53ton = AnonymousEnum<{
    /**
     *See [`Pallet::buy_ticket`].
     */
    "buy_ticket": Anonymize<I12ro88u916l0t>;
    /**
     *See [`Pallet::set_calls`].
     */
    "set_calls": Anonymize<I3k0uq4uiffpmu>;
    /**
     *See [`Pallet::start_lottery`].
     */
    "start_lottery": Anonymize<Iacbtv7bdkku2a>;
    /**
     *See [`Pallet::stop_repeat`].
     */
    "stop_repeat": undefined;
}>;
export type I12ro88u916l0t = {
    "call": TxCallData;
};
export type Iacbtv7bdkku2a = {
    "price": bigint;
    "length": number;
    "delay": number;
    "repeat": boolean;
};
export type I6tsknu13e0euf = AnonymousEnum<{
    /**
     *See [`Pallet::add_member`].
     */
    "add_member": Anonymize<I59bngqm85b22v>;
    /**
     *See [`Pallet::remove_member`].
     */
    "remove_member": Anonymize<I59bngqm85b22v>;
    /**
     *See [`Pallet::swap_member`].
     */
    "swap_member": Anonymize<I4u4n2na1l5uo7>;
    /**
     *See [`Pallet::reset_members`].
     */
    "reset_members": Anonymize<I3c63j6sh3evqn>;
    /**
     *See [`Pallet::change_key`].
     */
    "change_key": Anonymize<I8k3rnvpeeh4hv>;
    /**
     *See [`Pallet::set_prime`].
     */
    "set_prime": Anonymize<I59bngqm85b22v>;
    /**
     *See [`Pallet::clear_prime`].
     */
    "clear_prime": undefined;
}>;
export type I4u4n2na1l5uo7 = {
    "remove": MultiAddress;
    "add": MultiAddress;
};
export type I3d851pnneuhv8 = AnonymousEnum<{
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<Iaa13icjlsj13d>;
    /**
     *See [`Pallet::remove_voter`].
     */
    "remove_voter": undefined;
    /**
     *See [`Pallet::submit_candidacy`].
     */
    "submit_candidacy": Anonymize<I98vh5ccjtf1ev>;
    /**
     *See [`Pallet::renounce_candidacy`].
     */
    "renounce_candidacy": Anonymize<I3al0eab2u0gt2>;
    /**
     *See [`Pallet::remove_member`].
     */
    "remove_member": Anonymize<I6tk7rk1nnjhlp>;
    /**
     *See [`Pallet::clean_defunct_voters`].
     */
    "clean_defunct_voters": Anonymize<I6fuug4i4r04hi>;
}>;
export type I6tk7rk1nnjhlp = {
    "who": MultiAddress;
    "slash_bond": boolean;
    "rerun_election": boolean;
};
export type Ifmtsab3vbnv10 = AnonymousEnum<{
    /**
     *See [`Pallet::report_awesome`].
     */
    "report_awesome": Anonymize<I4rh6l1hlna3ip>;
    /**
     *See [`Pallet::retract_tip`].
     */
    "retract_tip": Anonymize<I1jm8m1rh9e20v>;
    /**
     *See [`Pallet::tip_new`].
     */
    "tip_new": Anonymize<I5v1ok3nh6vhmm>;
    /**
     *See [`Pallet::tip`].
     */
    "tip": Anonymize<I1pm30k3i4438u>;
    /**
     *See [`Pallet::close_tip`].
     */
    "close_tip": Anonymize<I1jm8m1rh9e20v>;
    /**
     *See [`Pallet::slash_tip`].
     */
    "slash_tip": Anonymize<I1jm8m1rh9e20v>;
}>;
export type I4rh6l1hlna3ip = {
    "reason": Binary;
    "who": MultiAddress;
};
export type I5v1ok3nh6vhmm = {
    "reason": Binary;
    "who": MultiAddress;
    "tip_value": bigint;
};
export type Iecgetr6r485af = AnonymousEnum<{
    /**
     *See [`Pallet::set_threshold`].
     */
    "set_threshold": Anonymize<I9pfbl6m798rk2>;
    /**
     *See [`Pallet::whitelist_chain`].
     */
    "whitelist_chain": Anonymize<Ic5b47dj4coa3r>;
    /**
     *See [`Pallet::add_relayer`].
     */
    "add_relayer": Anonymize<Ibmkshvkdhh06f>;
    /**
     *See [`Pallet::remove_relayer`].
     */
    "remove_relayer": Anonymize<Ibmkshvkdhh06f>;
    /**
     *See [`Pallet::update_fee`].
     */
    "update_fee": Anonymize<I9p8b8lamchikq>;
    /**
     *See [`Pallet::acknowledge_proposal`].
     */
    "acknowledge_proposal": Anonymize<I2gohqc71fkuaa>;
    /**
     *See [`Pallet::reject_proposal`].
     */
    "reject_proposal": Anonymize<I2gohqc71fkuaa>;
    /**
     *See [`Pallet::eval_vote_state`].
     */
    "eval_vote_state": Anonymize<Ie0co9kduve10>;
    /**
     *See [`Pallet::handle_fungible_transfer`].
     */
    "handle_fungible_transfer": Anonymize<I9md9er0ggas34>;
}>;
export type I9pfbl6m798rk2 = {
    "threshold": number;
};
export type Ibmkshvkdhh06f = {
    "v": SS58String;
};
export type I2gohqc71fkuaa = {
    "nonce": bigint;
    "src_id": number;
    "r_id": FixedSizeBinary<32>;
    "call": TxCallData;
};
export type Ie0co9kduve10 = {
    "nonce": bigint;
    "src_id": number;
    "prop": TxCallData;
};
export type I9md9er0ggas34 = {
    "dest": Binary;
    "amount": bigint;
    "rid": FixedSizeBinary<32>;
};
export type I8d1rs27iurnan = AnonymousEnum<{
    /**
     *See [`Pallet::transfer`].
     */
    "transfer": Anonymize<I1t41l2dqbt5j1>;
    /**
     *See [`Pallet::transfer_generic`].
     */
    "transfer_generic": Anonymize<I5lo526po2gedr>;
}>;
export type I1t41l2dqbt5j1 = {
    "asset": Anonymize<I8pa7df789c95j>;
    "dest": Anonymize<Idpatrs8teqg2g>;
    "dest_weight"?: Anonymize<Iasb8k6ash5mjn>;
};
export type I5lo526po2gedr = {
    "data": Binary;
    "dest": Anonymize<Idpatrs8teqg2g>;
    "dest_weight"?: Anonymize<Iasb8k6ash5mjn>;
};
export type Iecinmgkn2ids0 = AnonymousEnum<{
    /**
     *See [`Pallet::sync_offchain_message`].
     */
    "sync_offchain_message": Anonymize<I4ej0varlqk27n>;
    /**
     *See [`Pallet::push_message`].
     */
    "push_message": Anonymize<I8aufv2kktips8>;
    /**
     *See [`Pallet::force_push_pallet_message`].
     */
    "force_push_pallet_message": Anonymize<I8aufv2kktips8>;
}>;
export type I4ej0varlqk27n = {
    "signed_message": Anonymize<I7qpp8fgt745u4>;
};
export type I7qpp8fgt745u4 = {
    "message": Anonymize<I9l5q144eifduc>;
    "sequence": bigint;
    "signature": Binary;
};
export type I9l5q144eifduc = {
    "sender": Anonymize<Ifo61fvdcequsl>;
    "destination": Binary;
    "payload": Binary;
};
export type Ifo61fvdcequsl = AnonymousEnum<{
    "Pallet": Binary;
    "Contract": FixedSizeBinary<32>;
    "Worker": FixedSizeBinary<32>;
    "AccountId": FixedSizeBinary<32>;
    "MultiLocation": Binary;
    "Gatekeeper": undefined;
    "Cluster": FixedSizeBinary<32>;
    "Reserved": undefined;
}>;
export type I8aufv2kktips8 = {
    "destination": Binary;
    "payload": Binary;
};
export type I389ljd813gkvi = AnonymousEnum<{
    /**
     *See [`Pallet::force_set_benchmark_duration`].
     */
    "force_set_benchmark_duration": Anonymize<Icnkee0to4c5ac>;
    /**
     *See [`Pallet::force_register_worker`].
     */
    "force_register_worker": Anonymize<Ifojc0u4m3uvm3>;
    /**
     *See [`Pallet::force_register_topic_pubkey`].
     */
    "force_register_topic_pubkey": Anonymize<Ibj6p2qmre1slv>;
    /**
     *See [`Pallet::register_gatekeeper`].
     */
    "register_gatekeeper": Anonymize<I77s95qt6vtede>;
    /**
     *See [`Pallet::unregister_gatekeeper`].
     */
    "unregister_gatekeeper": Anonymize<I77s95qt6vtede>;
    /**
     *See [`Pallet::rotate_master_key`].
     */
    "rotate_master_key": undefined;
    /**
     *See [`Pallet::register_worker`].
     */
    "register_worker": Anonymize<I1ur2rlach980v>;
    /**
     *See [`Pallet::register_worker_v2`].
     */
    "register_worker_v2": Anonymize<I4djmoborcve41>;
    /**
     *See [`Pallet::update_worker_endpoint`].
     */
    "update_worker_endpoint": Anonymize<I76icl3jdndgc3>;
    /**
     *See [`Pallet::add_pruntime`].
     */
    "add_pruntime": Anonymize<Ibd9squo71c5pa>;
    /**
     *See [`Pallet::remove_pruntime`].
     */
    "remove_pruntime": Anonymize<Ibd9squo71c5pa>;
    /**
     *See [`Pallet::add_relaychain_genesis_block_hash`].
     */
    "add_relaychain_genesis_block_hash": Anonymize<Ife5k0e5mpkhd2>;
    /**
     *See [`Pallet::remove_relaychain_genesis_block_hash`].
     */
    "remove_relaychain_genesis_block_hash": Anonymize<Ife5k0e5mpkhd2>;
    /**
     *See [`Pallet::set_minimum_pruntime_version`].
     */
    "set_minimum_pruntime_version": Anonymize<I8dq28qkmijvoe>;
    /**
     *See [`Pallet::set_pruntime_consensus_version`].
     */
    "set_pruntime_consensus_version": Anonymize<I6s1nbislhk619>;
}>;
export type Icnkee0to4c5ac = {
    "value": number;
};
export type Ifojc0u4m3uvm3 = {
    "pubkey": FixedSizeBinary<32>;
    "ecdh_pubkey": FixedSizeBinary<32>;
    "operator"?: Anonymize<Ihfphjolmsqq1>;
};
export type Ibj6p2qmre1slv = {
    "topic": Binary;
    "pubkey": Binary;
};
export type I77s95qt6vtede = {
    "gatekeeper": FixedSizeBinary<32>;
};
export type I1ur2rlach980v = {
    "pruntime_info": Anonymize<I56jso8bbj6qhp>;
    "attestation": Anonymize<Idnngph27igdh5>;
};
export type I56jso8bbj6qhp = {
    "version": number;
    "machine_id": Binary;
    "pubkey": FixedSizeBinary<32>;
    "ecdh_pubkey": FixedSizeBinary<32>;
    "genesis_block_hash": FixedSizeBinary<32>;
    "features": Anonymize<Icgljjb6j82uhn>;
    "operator"?: Anonymize<Ihfphjolmsqq1>;
};
export type Idnngph27igdh5 = AnonymousEnum<{
    "SgxIas": Anonymize<I28e9fjtufesmi>;
}>;
export type I28e9fjtufesmi = {
    "ra_report": Binary;
    "signature": Binary;
    "raw_signing_cert": Binary;
};
export type I4djmoborcve41 = {
    "pruntime_info": Anonymize<I9qvbm7po7ng97>;
    "attestation"?: Anonymize<Iv9dt54uhtgtf>;
};
export type I9qvbm7po7ng97 = {
    "version": number;
    "machine_id": Binary;
    "pubkey": FixedSizeBinary<32>;
    "ecdh_pubkey": FixedSizeBinary<32>;
    "genesis_block_hash": FixedSizeBinary<32>;
    "features": Anonymize<Icgljjb6j82uhn>;
    "operator"?: Anonymize<Ihfphjolmsqq1>;
    "para_id": number;
    "max_consensus_version": number;
};
export type Iv9dt54uhtgtf = (Anonymize<I23io981hej93a>) | undefined;
export type I23io981hej93a = AnonymousEnum<{
    "SgxIas": Anonymize<I28e9fjtufesmi>;
    "SgxDcap": Anonymize<Ibedsc7370um28>;
}>;
export type Ibedsc7370um28 = {
    "quote": Binary;
    "collateral"?: Anonymize<Iabeo5v224j4uk>;
};
export type Iabeo5v224j4uk = (Anonymize<Iepvmqjjk7ssuu>) | undefined;
export type Iepvmqjjk7ssuu = AnonymousEnum<{
    "SgxV30": Anonymize<I54uf3utk2oq6v>;
}>;
export type I54uf3utk2oq6v = {
    "pck_crl_issuer_chain": string;
    "root_ca_crl": string;
    "pck_crl": string;
    "tcb_info_issuer_chain": string;
    "tcb_info": string;
    "tcb_info_signature": Binary;
    "qe_identity_issuer_chain": string;
    "qe_identity": string;
    "qe_identity_signature": Binary;
};
export type I76icl3jdndgc3 = {
    "endpoint_payload": Anonymize<I43b59m59ebid9>;
    "signature": Binary;
};
export type I43b59m59ebid9 = {
    "pubkey": FixedSizeBinary<32>;
    "versioned_endpoints": Anonymize<If5ahrn9t884ts>;
    "signing_time": bigint;
};
export type If5ahrn9t884ts = AnonymousEnum<{
    "V1": Anonymize<I6lr8sctk0bi4e>;
}>;
export type Ibd9squo71c5pa = {
    "pruntime_hash": Binary;
};
export type Ife5k0e5mpkhd2 = {
    "genesis_block_hash": FixedSizeBinary<32>;
};
export type I8dq28qkmijvoe = {
    "major": number;
    "minor": number;
    "patch": number;
};
export type I79bb2pdcfefoc = AnonymousEnum<{
    /**
     *See [`Pallet::set_cool_down_expiration`].
     */
    "set_cool_down_expiration": Anonymize<Iffvohb3t8h71u>;
    /**
     *See [`Pallet::unbind`].
     */
    "unbind": Anonymize<I947um9nhnghi1>;
    /**
     *See [`Pallet::force_heartbeat`].
     */
    "force_heartbeat": undefined;
    /**
     *See [`Pallet::force_start_computing`].
     */
    "force_start_computing": Anonymize<I7rou92jg5lvkv>;
    /**
     *See [`Pallet::force_stop_computing`].
     */
    "force_stop_computing": Anonymize<I947um9nhnghi1>;
    /**
     *See [`Pallet::update_tokenomic`].
     */
    "update_tokenomic": Anonymize<I99b3k55ooqgai>;
    /**
     *See [`Pallet::set_heartbeat_paused`].
     */
    "set_heartbeat_paused": Anonymize<I66q98ur9ul454>;
    /**
     *See [`Pallet::set_budget_per_block`].
     */
    "set_budget_per_block": Anonymize<If1d2pnfu9k0hv>;
    /**
     *See [`Pallet::update_contract_root`].
     */
    "update_contract_root": Anonymize<I6v8sm60vvkmk7>;
}>;
export type I7rou92jg5lvkv = {
    "session": SS58String;
    "stake": bigint;
};
export type I99b3k55ooqgai = {
    "new_params": Anonymize<Ifft6v9k9ntfp4>;
};
export type Ifft6v9k9ntfp4 = {
    "pha_rate": bigint;
    "rho": bigint;
    "budget_per_block": bigint;
    "v_max": bigint;
    "cost_k": bigint;
    "cost_b": bigint;
    "slash_rate": bigint;
    "treasury_ratio": bigint;
    "heartbeat_window": number;
    "rig_k": bigint;
    "rig_b": bigint;
    "re": bigint;
    "k": bigint;
    "kappa": bigint;
};
export type I66q98ur9ul454 = {
    "paused": boolean;
};
export type If1d2pnfu9k0hv = {
    "nonce": bigint;
    "block_number": number;
    "budget": bigint;
};
export type Id2vn8p7c328up = AnonymousEnum<{
    /**
     *See [`Pallet::force_withdraw_fund`].
     */
    "force_withdraw_fund": Anonymize<Idfhfc170a4ugb>;
    /**
     *See [`Pallet::force_register_asset`].
     */
    "force_register_asset": Anonymize<I1dbabrrad6gor>;
    /**
     *See [`Pallet::force_unregister_asset`].
     */
    "force_unregister_asset": Anonymize<Ia5le7udkgbaq9>;
    /**
     *See [`Pallet::force_set_metadata`].
     */
    "force_set_metadata": Anonymize<Ifs4cp5rg3k9nc>;
    /**
     *See [`Pallet::force_mint`].
     */
    "force_mint": Anonymize<Ifvtjt50q884bb>;
    /**
     *See [`Pallet::force_burn`].
     */
    "force_burn": Anonymize<Idusmq77988cmt>;
    /**
     *See [`Pallet::force_set_price`].
     */
    "force_set_price": Anonymize<I3pgrm00u7fff4>;
    /**
     *See [`Pallet::force_set_location`].
     */
    "force_set_location": Anonymize<I8p40dt899dtuq>;
    /**
     *See [`Pallet::force_enable_chainbridge`].
     */
    "force_enable_chainbridge": Anonymize<I32b0jhgrkml07>;
    /**
     *See [`Pallet::force_disable_chainbridge`].
     */
    "force_disable_chainbridge": Anonymize<I98387i4qus0q0>;
    /**
     *See [`Pallet::force_enable_sygmabridge`].
     */
    "force_enable_sygmabridge": Anonymize<I9r8hk2r0veiqk>;
    /**
     *See [`Pallet::force_disable_sygmabridge`].
     */
    "force_disable_sygmabridge": Anonymize<Ic93n0cje721n3>;
}>;
export type Idfhfc170a4ugb = {
    "asset_id"?: Anonymize<I4arjljr6dpflb>;
    "recipient": SS58String;
    "amount": bigint;
};
export type I1dbabrrad6gor = {
    "location": Anonymize<Idpatrs8teqg2g>;
    "asset_id": number;
    "properties": Anonymize<Ia47pat0p8ipkl>;
};
export type Ia47pat0p8ipkl = {
    "name": Binary;
    "symbol": Binary;
    "decimals": number;
};
export type Ifs4cp5rg3k9nc = {
    "asset_id": number;
    "properties": Anonymize<Ia47pat0p8ipkl>;
};
export type I3pgrm00u7fff4 = {
    "asset_id": number;
    "execution_price": bigint;
};
export type I32b0jhgrkml07 = {
    "asset_id": number;
    "chain_id": number;
    "is_mintable": boolean;
    "metadata": Binary;
};
export type I98387i4qus0q0 = {
    "asset_id": number;
    "chain_id": number;
};
export type I9r8hk2r0veiqk = {
    "asset_id": number;
    "resource_id": FixedSizeBinary<32>;
    "domain_id": number;
    "is_mintable": boolean;
    "metadata": Binary;
};
export type I9s8pr1bb02go = AnonymousEnum<{
    /**
     *See [`Pallet::create`].
     */
    "create": undefined;
    /**
     *See [`Pallet::add_worker`].
     */
    "add_worker": Anonymize<Ivuka4fpegqab>;
    /**
     *See [`Pallet::remove_worker`].
     */
    "remove_worker": Anonymize<I573qjpa7bj77k>;
    /**
     *See [`Pallet::set_cap`].
     */
    "set_cap": Anonymize<Ibfm3gehrtppo6>;
    /**
     *See [`Pallet::set_payout_pref`].
     */
    "set_payout_pref": Anonymize<I7is3ul3rohkhb>;
    /**
     *See [`Pallet::claim_legacy_rewards`].
     */
    "claim_legacy_rewards": Anonymize<Ieari17laupqqv>;
    /**
     *See [`Pallet::claim_owner_rewards`].
     */
    "claim_owner_rewards": Anonymize<Ieari17laupqqv>;
    /**
     *See [`Pallet::check_and_maybe_force_withdraw`].
     */
    "check_and_maybe_force_withdraw": Anonymize<Ibihfmtr4nutgv>;
    /**
     *See [`Pallet::contribute`].
     */
    "contribute": Anonymize<I28a39o0noo9cs>;
    /**
     *See [`Pallet::withdraw`].
     */
    "withdraw": Anonymize<I6mppljttce685>;
    /**
     *See [`Pallet::start_computing`].
     */
    "start_computing": Anonymize<I7egjhl0mn1j4l>;
    /**
     *See [`Pallet::stop_computing`].
     */
    "stop_computing": Anonymize<I573qjpa7bj77k>;
    /**
     *See [`Pallet::reclaim_pool_worker`].
     */
    "reclaim_pool_worker": Anonymize<I573qjpa7bj77k>;
    /**
     *See [`Pallet::restart_computing`].
     */
    "restart_computing": Anonymize<I7egjhl0mn1j4l>;
}>;
export type Ivuka4fpegqab = {
    "pid": bigint;
    "pubkey": FixedSizeBinary<32>;
};
export type I7is3ul3rohkhb = {
    "pid": bigint;
    "payout_commission"?: Anonymize<I4arjljr6dpflb>;
};
export type Ieari17laupqqv = {
    "pid": bigint;
    "target": SS58String;
};
export type I28a39o0noo9cs = {
    "pid": bigint;
    "amount": bigint;
    "as_vault"?: Anonymize<I35p85j063s0il>;
};
export type I6mppljttce685 = {
    "pid": bigint;
    "shares": bigint;
    "as_vault"?: Anonymize<I35p85j063s0il>;
};
export type I7egjhl0mn1j4l = {
    "pid": bigint;
    "worker": FixedSizeBinary<32>;
    "stake": bigint;
};
export type I9sicj360dvif8 = AnonymousEnum<{
    /**
     *See [`Pallet::create`].
     */
    "create": undefined;
    /**
     *See [`Pallet::set_payout_pref`].
     */
    "set_payout_pref": Anonymize<I7is3ul3rohkhb>;
    /**
     *See [`Pallet::claim_owner_shares`].
     */
    "claim_owner_shares": Anonymize<I7nuotcce43q45>;
    /**
     *See [`Pallet::maybe_gain_owner_shares`].
     */
    "maybe_gain_owner_shares": Anonymize<Ibhr0o5fchkus0>;
    /**
     *See [`Pallet::check_and_maybe_force_withdraw`].
     */
    "check_and_maybe_force_withdraw": Anonymize<Ibhr0o5fchkus0>;
    /**
     *See [`Pallet::contribute`].
     */
    "contribute": Anonymize<I6bpho1qciu1vq>;
    /**
     *See [`Pallet::withdraw`].
     */
    "withdraw": Anonymize<I9ge3l8s7gjron>;
}>;
export type I7nuotcce43q45 = {
    "vault_pid": bigint;
    "target": SS58String;
    "shares": bigint;
};
export type Ibhr0o5fchkus0 = {
    "vault_pid": bigint;
};
export type I9ge3l8s7gjron = {
    "pid": bigint;
    "shares": bigint;
};
export type I5346mu4igb8nj = AnonymousEnum<{
    /**
     *See [`Pallet::wrap`].
     */
    "wrap": Anonymize<I3qt1hgg4djhgb>;
    /**
     *See [`Pallet::unwrap_all`].
     */
    "unwrap_all": undefined;
    /**
     *See [`Pallet::unwrap`].
     */
    "unwrap": Anonymize<I3qt1hgg4djhgb>;
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<Ie64b2bdu3uou9>;
    /**
     *See [`Pallet::unlock`].
     */
    "unlock": Anonymize<I4nhnnt51clo6>;
}>;
export type Ie64b2bdu3uou9 = {
    "aye_amount": bigint;
    "nay_amount": bigint;
    "vote_id": number;
};
export type I4nhnnt51clo6 = {
    "vote_id": number;
    "max_iterations": number;
};
export type Iam36odngl5jju = AnonymousEnum<{
    /**
     *See [`Pallet::add_staker_to_whitelist`].
     */
    "add_staker_to_whitelist": Anonymize<If8bcs63vv4eft>;
    /**
     *See [`Pallet::set_pool_description`].
     */
    "set_pool_description": Anonymize<Icv39e87t78khf>;
    /**
     *See [`Pallet::remove_staker_from_whitelist`].
     */
    "remove_staker_from_whitelist": Anonymize<If8bcs63vv4eft>;
    /**
     *See [`Pallet::claim_reimbursement`].
     */
    "claim_reimbursement": Anonymize<Ieari17laupqqv>;
    /**
     *See [`Pallet::set_reimbursements`].
     */
    "set_reimbursements": Anonymize<I3cucnpdvg2uaf>;
}>;
export type Icv39e87t78khf = {
    "pid": bigint;
    "description": Binary;
};
export type I3cucnpdvg2uaf = {
    "input": Anonymize<I4h6ivgjtd51lv>;
    "add": boolean;
};
export type I4h6ivgjtd51lv = Array<Anonymize<Ic3orq32is6lrl>>;
export type I7g34e4vegl9s4 = AnonymousEnum<{
    /**
     *See [`Pallet::create`].
     */
    "create": Anonymize<If66ivi02f7256>;
    /**
     *See [`Pallet::force_create`].
     */
    "force_create": Anonymize<I223jtcatlfkrc>;
    /**
     *See [`Pallet::destroy`].
     */
    "destroy": Anonymize<I223jg78mng8hq>;
    /**
     *See [`Pallet::mint`].
     */
    "mint": Anonymize<I4iiuiftkpq3fd>;
    /**
     *See [`Pallet::burn`].
     */
    "burn": Anonymize<Ibra6533h92c0a>;
    /**
     *See [`Pallet::transfer`].
     */
    "transfer": Anonymize<Ibgvkh96s68a66>;
    /**
     *See [`Pallet::redeposit`].
     */
    "redeposit": Anonymize<If9vko7pv0231m>;
    /**
     *See [`Pallet::freeze`].
     */
    "freeze": Anonymize<Iafkqus0ohh6l6>;
    /**
     *See [`Pallet::thaw`].
     */
    "thaw": Anonymize<Iafkqus0ohh6l6>;
    /**
     *See [`Pallet::freeze_collection`].
     */
    "freeze_collection": Anonymize<I6cu7obfo0rr0o>;
    /**
     *See [`Pallet::thaw_collection`].
     */
    "thaw_collection": Anonymize<I6cu7obfo0rr0o>;
    /**
     *See [`Pallet::transfer_ownership`].
     */
    "transfer_ownership": Anonymize<Ie5i0q2glmr0md>;
    /**
     *See [`Pallet::set_team`].
     */
    "set_team": Anonymize<I1ap9tlenhr44l>;
    /**
     *See [`Pallet::approve_transfer`].
     */
    "approve_transfer": Anonymize<Ib92t90p616grb>;
    /**
     *See [`Pallet::cancel_approval`].
     */
    "cancel_approval": Anonymize<Ieipuujd6879do>;
    /**
     *See [`Pallet::force_item_status`].
     */
    "force_item_status": Anonymize<Ie56eq9sg1rsoc>;
    /**
     *See [`Pallet::set_attribute`].
     */
    "set_attribute": Anonymize<I5tvvgui05tn6e>;
    /**
     *See [`Pallet::clear_attribute`].
     */
    "clear_attribute": Anonymize<Ibal0joadvdc2h>;
    /**
     *See [`Pallet::set_metadata`].
     */
    "set_metadata": Anonymize<Iceq9fmmp9aeqv>;
    /**
     *See [`Pallet::clear_metadata`].
     */
    "clear_metadata": Anonymize<Iafkqus0ohh6l6>;
    /**
     *See [`Pallet::set_collection_metadata`].
     */
    "set_collection_metadata": Anonymize<I9viqhmdtuof5e>;
    /**
     *See [`Pallet::clear_collection_metadata`].
     */
    "clear_collection_metadata": Anonymize<I6cu7obfo0rr0o>;
    /**
     *See [`Pallet::set_accept_ownership`].
     */
    "set_accept_ownership": Anonymize<Ibqooroq6rr5kr>;
    /**
     *See [`Pallet::set_collection_max_supply`].
     */
    "set_collection_max_supply": Anonymize<I6h88h8vba22v8>;
    /**
     *See [`Pallet::set_price`].
     */
    "set_price": Anonymize<Ia9cd4jqb5eecb>;
    /**
     *See [`Pallet::buy_item`].
     */
    "buy_item": Anonymize<I19jiel1ftbcce>;
}>;
export type I6unlhbittuj3b = AnonymousEnum<{
    /**
     *See [`Pallet::mint_nft`].
     */
    "mint_nft": Anonymize<I8uhqcv2tbpaul>;
    /**
     *See [`Pallet::mint_nft_directly_to_nft`].
     */
    "mint_nft_directly_to_nft": Anonymize<Ialemosrn6f6v>;
    /**
     *See [`Pallet::create_collection`].
     */
    "create_collection": Anonymize<I2bf315tpln3ie>;
    /**
     *See [`Pallet::burn_nft`].
     */
    "burn_nft": Anonymize<Idap45qa17pms2>;
    /**
     *See [`Pallet::destroy_collection`].
     */
    "destroy_collection": Anonymize<I9m43jftr52of7>;
    /**
     *See [`Pallet::send`].
     */
    "send": Anonymize<Ied59p4g9emfn>;
    /**
     *See [`Pallet::accept_nft`].
     */
    "accept_nft": Anonymize<Ied59p4g9emfn>;
    /**
     *See [`Pallet::reject_nft`].
     */
    "reject_nft": Anonymize<Idap45qa17pms2>;
    /**
     *See [`Pallet::change_collection_issuer`].
     */
    "change_collection_issuer": Anonymize<I715u7ss17c7t>;
    /**
     *See [`Pallet::set_property`].
     */
    "set_property": Anonymize<I7of83qrfaioip>;
    /**
     *See [`Pallet::lock_collection`].
     */
    "lock_collection": Anonymize<I9m43jftr52of7>;
    /**
     *See [`Pallet::add_basic_resource`].
     */
    "add_basic_resource": Anonymize<Ibsv4ivp1dg0u4>;
    /**
     *See [`Pallet::add_composable_resource`].
     */
    "add_composable_resource": Anonymize<Ibau3aourms2ev>;
    /**
     *See [`Pallet::add_slot_resource`].
     */
    "add_slot_resource": Anonymize<Ibku9o3184ad8p>;
    /**
     *See [`Pallet::replace_resource`].
     */
    "replace_resource": Anonymize<I6kkm2uudo9ubv>;
    /**
     *See [`Pallet::accept_resource`].
     */
    "accept_resource": Anonymize<If878fl46fbcu3>;
    /**
     *See [`Pallet::remove_resource`].
     */
    "remove_resource": Anonymize<If878fl46fbcu3>;
    /**
     *See [`Pallet::accept_resource_removal`].
     */
    "accept_resource_removal": Anonymize<If878fl46fbcu3>;
    /**
     *See [`Pallet::set_priority`].
     */
    "set_priority": Anonymize<Ib60g2h688gk1p>;
}>;
export type I8uhqcv2tbpaul = {
    "owner"?: Anonymize<Ihfphjolmsqq1>;
    "nft_id": number;
    "collection_id": number;
    "royalty_recipient"?: Anonymize<Ihfphjolmsqq1>;
    "royalty"?: Anonymize<I4arjljr6dpflb>;
    "metadata": Binary;
    "transferable": boolean;
    "resources"?: Anonymize<I5f2b5qmfeigtc>;
};
export type I5f2b5qmfeigtc = (Anonymize<I5ivfb95cnm28l>) | undefined;
export type I5ivfb95cnm28l = Array<Anonymize<I20vvnlsbpmdm8>>;
export type I20vvnlsbpmdm8 = {
    "id": number;
    "resource": Anonymize<Ic317ui0teiihc>;
};
export type Ic317ui0teiihc = AnonymousEnum<{
    "Basic": Binary;
    "Composable": Anonymize<Icvt5cdiknvu76>;
    "Slot": Anonymize<I1mkgfjpv3g505>;
}>;
export type Icvt5cdiknvu76 = {
    "parts": Anonymize<Icgljjb6j82uhn>;
    "base": number;
    "metadata"?: Anonymize<Iabpgqcjikia83>;
    "slot"?: Anonymize<Iep7au1720bm0e>;
};
export type I1mkgfjpv3g505 = {
    "base": number;
    "metadata"?: Anonymize<Iabpgqcjikia83>;
    "slot": number;
};
export type Ialemosrn6f6v = {
    "owner": Anonymize<I9jd27rnpm8ttv>;
    "nft_id": number;
    "collection_id": number;
    "royalty_recipient"?: Anonymize<Ihfphjolmsqq1>;
    "royalty"?: Anonymize<I4arjljr6dpflb>;
    "metadata": Binary;
    "transferable": boolean;
    "resources"?: Anonymize<I5f2b5qmfeigtc>;
};
export type I2bf315tpln3ie = {
    "collection_id": number;
    "metadata": Binary;
    "max"?: Anonymize<I4arjljr6dpflb>;
    "symbol": Binary;
};
export type Ied59p4g9emfn = {
    "collection_id": number;
    "nft_id": number;
    "new_owner": Anonymize<I4g7te25vr8u12>;
};
export type I715u7ss17c7t = {
    "collection_id": number;
    "new_issuer": MultiAddress;
};
export type Ibsv4ivp1dg0u4 = {
    "collection_id": number;
    "nft_id": number;
    "resource": Binary;
    "resource_id": number;
};
export type Ibau3aourms2ev = {
    "collection_id": number;
    "nft_id": number;
    "resource": Anonymize<Icvt5cdiknvu76>;
    "resource_id": number;
};
export type Ibku9o3184ad8p = {
    "collection_id": number;
    "nft_id": number;
    "resource": Anonymize<I1mkgfjpv3g505>;
    "resource_id": number;
};
export type I6kkm2uudo9ubv = {
    "collection_id": number;
    "nft_id": number;
    "resource": Anonymize<Ic317ui0teiihc>;
    "resource_id": number;
};
export type Ib60g2h688gk1p = {
    "collection_id": number;
    "nft_id": number;
    "priorities": Anonymize<Icgljjb6j82uhn>;
};
export type I9c5kqlsb7n82j = AnonymousEnum<{
    /**
     *See [`Pallet::change_base_issuer`].
     */
    "change_base_issuer": Anonymize<Idj4ot80o5e11t>;
    /**
     *See [`Pallet::equip`].
     */
    "equip": Anonymize<I7sm7g1ejv0h1q>;
    /**
     *See [`Pallet::unequip`].
     */
    "unequip": Anonymize<I6mqoemo8r3tqu>;
    /**
     *See [`Pallet::equippable`].
     */
    "equippable": Anonymize<Iclrcvqgva5chh>;
    /**
     *See [`Pallet::equippable_add`].
     */
    "equippable_add": Anonymize<Ifkdal1nu7d0oc>;
    /**
     *See [`Pallet::equippable_remove`].
     */
    "equippable_remove": Anonymize<Ifkdal1nu7d0oc>;
    /**
     *See [`Pallet::theme_add`].
     */
    "theme_add": Anonymize<I397r94a4pub9e>;
    /**
     *See [`Pallet::create_base`].
     */
    "create_base": Anonymize<I4sv46pqslbnlv>;
}>;
export type Idj4ot80o5e11t = {
    "base_id": number;
    "new_issuer": MultiAddress;
};
export type I7sm7g1ejv0h1q = {
    "item": Anonymize<I9jd27rnpm8ttv>;
    "equipper": Anonymize<I9jd27rnpm8ttv>;
    "resource_id": number;
    "base": number;
    "slot": number;
};
export type I6mqoemo8r3tqu = {
    "item": Anonymize<I9jd27rnpm8ttv>;
    "unequipper": Anonymize<I9jd27rnpm8ttv>;
    "base": number;
    "slot": number;
};
export type Iclrcvqgva5chh = {
    "base_id": number;
    "slot_id": number;
    "equippables": Anonymize<Idrf9ef0lmfnmc>;
};
export type Idrf9ef0lmfnmc = AnonymousEnum<{
    "All": undefined;
    "Empty": undefined;
    "Custom": Anonymize<Icgljjb6j82uhn>;
}>;
export type Ifkdal1nu7d0oc = {
    "base_id": number;
    "slot_id": number;
    "equippable": number;
};
export type I397r94a4pub9e = {
    "base_id": number;
    "theme": Anonymize<I6m6qv93vunp83>;
};
export type I6m6qv93vunp83 = {
    "name": Binary;
    "properties": Anonymize<I4t3is9dal31u5>;
    "inherit": boolean;
};
export type I4t3is9dal31u5 = Array<Anonymize<I7cmchm9ahegij>>;
export type I7cmchm9ahegij = {
    "key": Binary;
    "value": Binary;
};
export type I4sv46pqslbnlv = {
    "base_type": Binary;
    "symbol": Binary;
    "parts": Anonymize<I5r8tbpuflb7st>;
};
export type I5r8tbpuflb7st = Array<Anonymize<I9tgfb3nfi7kmf>>;
export type I9tgfb3nfi7kmf = AnonymousEnum<{
    "FixedPart": Anonymize<Ibmks778t0aak7>;
    "SlotPart": Anonymize<I2jokijcjuh5l8>;
}>;
export type Ibmks778t0aak7 = {
    "id": number;
    "z": number;
    "src": Binary;
};
export type I2jokijcjuh5l8 = {
    "id": number;
    "equippable": Anonymize<Idrf9ef0lmfnmc>;
    "src"?: Anonymize<Iabpgqcjikia83>;
    "z": number;
};
export type Iag2lfjshi8c8s = AnonymousEnum<{
    /**
     *See [`Pallet::buy`].
     */
    "buy": Anonymize<I3q4fduif2p624>;
    /**
     *See [`Pallet::list`].
     */
    "list": Anonymize<I988hmt4l3b72b>;
    /**
     *See [`Pallet::unlist`].
     */
    "unlist": Anonymize<Idap45qa17pms2>;
    /**
     *See [`Pallet::make_offer`].
     */
    "make_offer": Anonymize<I988hmt4l3b72b>;
    /**
     *See [`Pallet::withdraw_offer`].
     */
    "withdraw_offer": Anonymize<Idap45qa17pms2>;
    /**
     *See [`Pallet::accept_offer`].
     */
    "accept_offer": Anonymize<Iev9giuq7lsi3o>;
}>;
export type I3q4fduif2p624 = {
    "collection_id": number;
    "nft_id": number;
    "amount"?: Anonymize<I35p85j063s0il>;
};
export type I988hmt4l3b72b = {
    "collection_id": number;
    "nft_id": number;
    "amount": bigint;
    "expires"?: Anonymize<I4arjljr6dpflb>;
};
export type Iev9giuq7lsi3o = {
    "collection_id": number;
    "nft_id": number;
    "offerer": SS58String;
};
export type Iel94kn88d0kj7 = AnonymousEnum<{
    /**
     *See [`Pallet::claim_spirit`].
     */
    "claim_spirit": undefined;
    /**
     *See [`Pallet::redeem_spirit`].
     */
    "redeem_spirit": Anonymize<Ia5sebfb1ac6ic>;
    /**
     *See [`Pallet::buy_rare_origin_of_shell`].
     */
    "buy_rare_origin_of_shell": Anonymize<I279hr8ceodeqv>;
    /**
     *See [`Pallet::buy_prime_origin_of_shell`].
     */
    "buy_prime_origin_of_shell": Anonymize<I2to1shs3iimet>;
    /**
     *See [`Pallet::preorder_origin_of_shell`].
     */
    "preorder_origin_of_shell": Anonymize<Ifnmta42426hin>;
    /**
     *See [`Pallet::mint_chosen_preorders`].
     */
    "mint_chosen_preorders": Anonymize<Ie13c6a2sleeto>;
    /**
     *See [`Pallet::refund_not_chosen_preorders`].
     */
    "refund_not_chosen_preorders": Anonymize<Ie13c6a2sleeto>;
    /**
     *See [`Pallet::mint_gift_origin_of_shell`].
     */
    "mint_gift_origin_of_shell": Anonymize<I566tth5pdgj0h>;
    /**
     *See [`Pallet::set_overlord`].
     */
    "set_overlord": Anonymize<I1q8o4rcchpbp2>;
    /**
     *See [`Pallet::initialize_world_clock`].
     */
    "initialize_world_clock": undefined;
    /**
     *See [`Pallet::set_status_type`].
     */
    "set_status_type": Anonymize<Idks4ejjndk3gf>;
    /**
     *See [`Pallet::init_rarity_type_counts`].
     */
    "init_rarity_type_counts": undefined;
    /**
     *See [`Pallet::update_rarity_type_counts`].
     */
    "update_rarity_type_counts": Anonymize<Iesu99vpsheln5>;
    /**
     *See [`Pallet::set_spirit_collection_id`].
     */
    "set_spirit_collection_id": Anonymize<I9m43jftr52of7>;
    /**
     *See [`Pallet::set_origin_of_shell_collection_id`].
     */
    "set_origin_of_shell_collection_id": Anonymize<I9m43jftr52of7>;
    /**
     *See [`Pallet::pw_create_collection`].
     */
    "pw_create_collection": Anonymize<I7o27itm5313oe>;
    /**
     *See [`Pallet::set_spirits_metadata`].
     */
    "set_spirits_metadata": Anonymize<I2vpi04e2m2t1f>;
    /**
     *See [`Pallet::set_origin_of_shells_metadata`].
     */
    "set_origin_of_shells_metadata": Anonymize<Ifenfkh9pftsgo>;
    /**
     *See [`Pallet::set_payee`].
     */
    "set_payee": Anonymize<I7v5kkvmvgg9ru>;
    /**
     *See [`Pallet::set_signer`].
     */
    "set_signer": Anonymize<Ifunaa08a8n0b8>;
}>;
export type Ia5sebfb1ac6ic = {
    "signature": FixedSizeBinary<64>;
};
export type I279hr8ceodeqv = {
    "rarity_type": Anonymize<Iefk0q8nig47ud>;
    "race": Anonymize<I822rk526sun2n>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
};
export type I2to1shs3iimet = {
    "signature": FixedSizeBinary<64>;
    "race": Anonymize<I822rk526sun2n>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
};
export type Ifnmta42426hin = {
    "race": Anonymize<I822rk526sun2n>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
};
export type Ie13c6a2sleeto = {
    "preorders": Anonymize<Icgljjb6j82uhn>;
};
export type I566tth5pdgj0h = {
    "owner": SS58String;
    "rarity_type": Anonymize<Iefk0q8nig47ud>;
    "race": Anonymize<I822rk526sun2n>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
    "nft_sale_type": Anonymize<Ifa89aaarcts2r>;
};
export type I1q8o4rcchpbp2 = {
    "new_overlord": SS58String;
};
export type Idks4ejjndk3gf = {
    "status": boolean;
    "status_type": Anonymize<If7dv55jjq28cu>;
};
export type If7dv55jjq28cu = AnonymousEnum<{
    "ClaimSpirits": undefined;
    "PurchaseRareOriginOfShells": undefined;
    "PurchasePrimeOriginOfShells": undefined;
    "PreorderOriginOfShells": undefined;
    "LastDayOfSale": undefined;
}>;
export type Iesu99vpsheln5 = {
    "rarity_type": Anonymize<Iefk0q8nig47ud>;
    "for_sale_count": number;
    "giveaway_count": number;
};
export type I7o27itm5313oe = {
    "metadata": Binary;
    "max"?: Anonymize<I4arjljr6dpflb>;
    "symbol": Binary;
};
export type I7v5kkvmvgg9ru = {
    "new_payee": SS58String;
};
export type Ifunaa08a8n0b8 = {
    "new_signer": SS58String;
};
export type I8tfnmviofc7tn = AnonymousEnum<{
    /**
     *See [`Pallet::start_incubation`].
     */
    "start_incubation": Anonymize<Idap45qa17pms2>;
    /**
     *See [`Pallet::feed_origin_of_shell`].
     */
    "feed_origin_of_shell": Anonymize<Idap45qa17pms2>;
    /**
     *See [`Pallet::hatch_origin_of_shell`].
     */
    "hatch_origin_of_shell": Anonymize<Ibke8ht42ffia2>;
    /**
     *See [`Pallet::set_can_start_incubation_status`].
     */
    "set_can_start_incubation_status": Anonymize<I4va5v84pe84si>;
    /**
     *See [`Pallet::set_shell_collection_id`].
     */
    "set_shell_collection_id": Anonymize<I9m43jftr52of7>;
    /**
     *See [`Pallet::set_shell_parts_collection_id`].
     */
    "set_shell_parts_collection_id": Anonymize<I9m43jftr52of7>;
    /**
     *See [`Pallet::set_origin_of_shell_chosen_parts`].
     */
    "set_origin_of_shell_chosen_parts": Anonymize<I6eo5vuu31f8te>;
}>;
export type Ibke8ht42ffia2 = {
    "collection_id": number;
    "nft_id": number;
    "default_shell_metadata": Binary;
};
export type I6eo5vuu31f8te = {
    "collection_id": number;
    "nft_id": number;
    "chosen_parts": Anonymize<I10qofmpakv270>;
};
export type I2deup5hdrd0i2 = AnonymousEnum<{
    /**
     *See [`Pallet::set_marketplace_owner`].
     */
    "set_marketplace_owner": Anonymize<I1pbteqq1kouhv>;
    /**
     *See [`Pallet::set_nfts_royalty_info`].
     */
    "set_nfts_royalty_info": Anonymize<I46od8ucbvl2ju>;
}>;
export type I1pbteqq1kouhv = {
    "new_marketplace_owner": SS58String;
};
export type I46od8ucbvl2ju = {
    "royalty_info": Anonymize<I4bq7muekha6gj>;
    "collection_id": number;
    "nft_ids": Anonymize<Icgljjb6j82uhn>;
};
export type I4m46aem8c6ueq = AnonymousEnum<{
    /**
     *See [`Pallet::grant_access`].
     */
    "grant_access": Anonymize<Iem1enf2fufb5v>;
}>;
export type Ieqaalig8ljrel = AnonymousEnum<{
    /**
     *See [`Pallet::set_fee`].
     */
    "set_fee": Anonymize<Ifp4t9o738p31f>;
}>;
export type I5fijo62u5802j = AnonymousEnum<{
    /**
     *See [`Pallet::pause_bridge`].
     */
    "pause_bridge": Anonymize<I4cdvg646kt2e0>;
    /**
     *See [`Pallet::unpause_bridge`].
     */
    "unpause_bridge": Anonymize<I4cdvg646kt2e0>;
    /**
     *See [`Pallet::set_mpc_address`].
     */
    "set_mpc_address": Anonymize<Idlg4l2qff953q>;
    /**
     *See [`Pallet::register_domain`].
     */
    "register_domain": Anonymize<I516q1duegu1bc>;
    /**
     *See [`Pallet::unregister_domain`].
     */
    "unregister_domain": Anonymize<I516q1duegu1bc>;
    /**
     *See [`Pallet::deposit`].
     */
    "deposit": Anonymize<Icpsl5uslfkju4>;
    /**
     *See [`Pallet::retry`].
     */
    "retry": Anonymize<I59qvdvbm7opmu>;
    /**
     *See [`Pallet::execute_proposal`].
     */
    "execute_proposal": Anonymize<I8e10h8p8npln5>;
    /**
     *See [`Pallet::pause_all_bridges`].
     */
    "pause_all_bridges": undefined;
    /**
     *See [`Pallet::unpause_all_bridges`].
     */
    "unpause_all_bridges": undefined;
}>;
export type Idlg4l2qff953q = {
    "addr": FixedSizeBinary<20>;
};
export type I516q1duegu1bc = {
    "dest_domain_id": number;
    "dest_chain_id": Anonymize<I4totqt881mlti>;
};
export type Icpsl5uslfkju4 = {
    "asset": Anonymize<I8pa7df789c95j>;
    "dest": Anonymize<Idpatrs8teqg2g>;
};
export type I59qvdvbm7opmu = {
    "deposit_on_block_height": bigint;
    "dest_domain_id": number;
};
export type I8e10h8p8npln5 = {
    "proposals": Anonymize<I3nvuvlijhnbku>;
    "signature": Binary;
};
export type I3nvuvlijhnbku = Array<Anonymize<If6ev1d7jr5qjh>>;
export type If6ev1d7jr5qjh = {
    "origin_domain_id": number;
    "deposit_nonce": bigint;
    "resource_id": FixedSizeBinary<32>;
    "data": Binary;
};
export type I742jl84cif6uo = AnonymousEnum<{
    /**
     *See [`Pallet::set_fee_handler`].
     */
    "set_fee_handler": Anonymize<I5j5chkhnfbh8j>;
}>;
export type I6a4e2ah19v6k4 = AnonymousEnum<{
    /**
     *See [`Pallet::set_fee_rate`].
     */
    "set_fee_rate": Anonymize<I4a37j1kii1e1b>;
}>;
export type I4a37j1kii1e1b = {
    "domain": number;
    "asset": Anonymize<Ic00osfu517iss>;
    "fee_rate_basis_point": number;
    "fee_lower_bound": bigint;
    "fee_upper_bound": bigint;
};
export type Ifkvdoemdb4o58 = AnonymousEnum<{
    /**
     *See [`Pallet::force_add_worker`].
     */
    "force_add_worker": Anonymize<Iem2tclvr85h3e>;
    /**
     *See [`Pallet::force_remove_worker`].
     */
    "force_remove_worker": Anonymize<Iem2tclvr85h3e>;
    /**
     *See [`Pallet::deposit_task`].
     */
    "deposit_task": Anonymize<I5tq7j96upc637>;
    /**
     *See [`Pallet::claim_task`].
     */
    "claim_task": Anonymize<Ireognj60ejo1>;
}>;
export type I5tq7j96upc637 = {
    "asset": Anonymize<Ic00osfu517iss>;
    "amount": bigint;
    "recipient": Binary;
    "worker": SS58String;
    "task_id": FixedSizeBinary<32>;
    "task": Binary;
};
export type Ireognj60ejo1 = {
    "task_id": FixedSizeBinary<32>;
    "fee": bigint;
};
export type Ibjfaoj07vq7bm = {
    "price": bigint;
    "start": number;
    "length": number;
    "delay": number;
    "repeat": boolean;
};
export type I2jh6l2jh6e48q = [number, Anonymize<I3d3qku31qb8k1>];
export type I3d3qku31qb8k1 = Array<FixedSizeBinary<2>>;
export type Ietn1p3svqp9bc = {
    "votes_for": Anonymize<Ia2lhg7l2hilo3>;
    "votes_against": Anonymize<Ia2lhg7l2hilo3>;
    "status": Anonymize<Icvdqu2r4sg24n>;
    "expiry": number;
};
export type Icvdqu2r4sg24n = AnonymousEnum<{
    "Initiated": undefined;
    "Approved": undefined;
    "Rejected": undefined;
}>;
export type I4n1sf6u0corfl = [number, Anonymize<I6gnqcn5jn25ie>];
export type I6gnqcn5jn25ie = [bigint, TxCallData];
export type I8bmte156jvcnb = Array<Anonymize<I3cveq6g16af13>>;
export type I3cveq6g16af13 = AnonymousEnum<{
    "FungibleTransfer": Anonymize<I6o5gj873rg52t>;
    "NonFungibleTransfer": Anonymize<Icfvncndiepf13>;
    "GenericTransfer": Anonymize<I5hfier3p0p9jc>;
}>;
export type Icb3gfdt6hp40h = Array<Anonymize<I9l5q144eifduc>>;
export type I53b09cgcnercs = {
    "pubkey": FixedSizeBinary<32>;
    "ecdh_pubkey": FixedSizeBinary<32>;
    "runtime_version": number;
    "last_updated": bigint;
    "operator"?: Anonymize<Ihfphjolmsqq1>;
    "attestation_provider"?: Anonymize<Ifh3cr97t023rt>;
    "confidence_level": number;
    "initial_score"?: Anonymize<I4arjljr6dpflb>;
    "features": Anonymize<Icgljjb6j82uhn>;
};
export type I8olmuvp76k6ru = {
    "version": number;
    "count": number;
};
export type Idnnprtrknpgsn = {
    "state": Anonymize<I3tungbmnj09bi>;
    "ve": bigint;
    "v": bigint;
    "v_updated_at": bigint;
    "benchmark": Anonymize<Iacb82714f0iof>;
    "cool_down_start": bigint;
    "stats": bigint;
};
export type I3tungbmnj09bi = AnonymousEnum<{
    "Ready": undefined;
    "WorkerIdle": undefined;
    "_Unused": undefined;
    "WorkerUnresponsive": undefined;
    "WorkerCoolingDown": undefined;
}>;
export type Iacb82714f0iof = {
    "p_init": number;
    "p_instant": number;
    "iterations": bigint;
    "working_start_time": bigint;
    "challenge_time_last": bigint;
};
export type I2p59kvukfmhga = {
    "pid": bigint;
    "owner": SS58String;
    "payout_commission"?: Anonymize<I4arjljr6dpflb>;
    "owner_reward": bigint;
    "cap"?: Anonymize<I35p85j063s0il>;
    "reward_acc": bigint;
    "total_shares": bigint;
    "total_stake": bigint;
    "free_stake": bigint;
    "releasing_stake": bigint;
    "workers": Anonymize<Ic5m5lp1oioo8r>;
    "withdraw_queue": Anonymize<I7ucr93317m71r>;
};
export type I7ucr93317m71r = Array<Anonymize<I7e2gshinik2of>>;
export type I7e2gshinik2of = {
    "user": SS58String;
    "shares": bigint;
    "start_time": bigint;
};
export type I7mctunsj2ck9l = {
    "user": SS58String;
    "locked": bigint;
    "shares": bigint;
    "available_rewards": bigint;
    "reward_debt": bigint;
};
export type I96rqo4i9p11oo = [bigint, SS58String];
export type I9huuk9esp2bq8 = {
    "location": Anonymize<Idpatrs8teqg2g>;
    "reserve_location"?: Anonymize<Ias74o62k4go4m>;
    "enabled_bridges": Anonymize<I7mareidhrd7gv>;
    "properties": Anonymize<Ia47pat0p8ipkl>;
    "execution_price"?: Anonymize<I35p85j063s0il>;
};
export type I7mareidhrd7gv = Array<Anonymize<Icnjf6716vnuhf>>;
export type Icnjf6716vnuhf = {
    "config": Anonymize<I5vt9dadjkismp>;
    "metadata": Binary;
};
export type I5vt9dadjkismp = AnonymousEnum<{
    "Xcmp": undefined;
    "ChainBridge": Anonymize<Ibktidrbdo3hrd>;
    "SygmaBridge": Anonymize<Ia89som140dmmk>;
}>;
export type Ibktidrbdo3hrd = {
    "chain_id": number;
    "resource_id": FixedSizeBinary<32>;
    "reserve_account": FixedSizeBinary<32>;
    "is_mintable": boolean;
};
export type Ia89som140dmmk = {
    "dest_domain": number;
    "resource_id": FixedSizeBinary<32>;
    "is_mintable": boolean;
};
export type I954gj183hquv6 = {
    "invest_pools": Anonymize<Ifip05kcrl65am>;
    "locked": bigint;
};
export type I9as49fv9bga0l = AnonymousEnum<{
    "StakePool": Anonymize<Ikaodmflelk40>;
    "Vault": Anonymize<I4r75la228km6h>;
}>;
export type Ikaodmflelk40 = {
    "basepool": Anonymize<I4hdo12qcroolo>;
    "payout_commission"?: Anonymize<I4arjljr6dpflb>;
    "cap"?: Anonymize<I35p85j063s0il>;
    "workers": Anonymize<Ic5m5lp1oioo8r>;
    "cd_workers": Anonymize<Ic5m5lp1oioo8r>;
    "lock_account": SS58String;
    "owner_reward_account": SS58String;
};
export type I4hdo12qcroolo = {
    "pid": bigint;
    "owner": SS58String;
    "total_shares": bigint;
    "total_value": bigint;
    "withdraw_queue": Anonymize<I12btb7f2qjfof>;
    "value_subscribers": Anonymize<Iafqnechp3omqg>;
    "cid": number;
    "pool_account_id": SS58String;
};
export type I12btb7f2qjfof = Array<Anonymize<Ibu1l1d6f99416>>;
export type Ibu1l1d6f99416 = {
    "user": SS58String;
    "start_time": bigint;
    "nft_id": number;
};
export type I4r75la228km6h = {
    "basepool": Anonymize<I4hdo12qcroolo>;
    "last_share_price_checkpoint": bigint;
    "commission"?: Anonymize<I4arjljr6dpflb>;
    "owner_shares": bigint;
    "invest_pools": Anonymize<Iafqnechp3omqg>;
};
export type I1oea0vf2lc6sk = {
    "issuer": SS58String;
    "metadata": Binary;
    "max"?: Anonymize<I4arjljr6dpflb>;
    "symbol": Binary;
    "nfts_count": number;
};
export type Ic602a40m2hqqe = {
    "owner": Anonymize<I4g7te25vr8u12>;
    "royalty"?: Anonymize<I7gf8qq59rrghk>;
    "metadata": Binary;
    "equipped"?: Anonymize<Iep7au1720bm0e>;
    "pending": boolean;
    "transferable": boolean;
};
export type I2mi8ncqesoi0m = FixedSizeArray<2, Anonymize<I9jd27rnpm8ttv>>;
export type I6ivjcn7a8nega = {
    "id": number;
    "resource": Anonymize<Ic317ui0teiihc>;
    "pending": boolean;
    "pending_removal": boolean;
};
export type If0s55733jsdoi = FixedSizeArray<5, number>;
export type I78ifo46cgtb7u = [Anonymize<Idap45qa17pms2>, undefined];
export type Iacclqe3n26duv = {
    "issuer": SS58String;
    "base_type": Binary;
    "symbol": Binary;
};
export type I2774fobohragd = [Anonymize<I9jd27rnpm8ttv>, number, number];
export type I727g4u99tm30m = [number, Binary, Binary];
export type I6frph631evdvn = {
    "listed_by": SS58String;
    "amount": bigint;
    "expires"?: Anonymize<I4arjljr6dpflb>;
};
export type I6rb1c153e044t = {
    "maker": SS58String;
    "amount": bigint;
    "expires"?: Anonymize<I4arjljr6dpflb>;
};
export type I7dihovo5r7fhs = [Anonymize<I9jd27rnpm8ttv>, SS58String];
export type I2ji5ngcinrr99 = {
    "owner": SS58String;
    "race": Anonymize<I822rk526sun2n>;
    "career": Anonymize<I2p6ke7vsu6rp3>;
    "metadata": Binary;
};
export type I3mavkmult2ul = {
    "race_count": number;
    "race_for_sale_count": number;
    "race_giveaway_count": number;
    "race_reserved_count": number;
};
export type I6ifph2vu3nms8 = [Anonymize<Iefk0q8nig47ud>, Anonymize<I822rk526sun2n>];
export type I6tq0tphooerdr = {
    "era": bigint;
    "origin_of_shells_fed": Anonymize<I9380h876gml74>;
    "food_left": number;
};
export type I9380h876gml74 = Array<Anonymize<Idls8vg34n6mjo>>;
export type Idls8vg34n6mjo = [Anonymize<I9jd27rnpm8ttv>, number];
export type I7tig2insibk1a = [bigint, Anonymize<I9jd27rnpm8ttv>];
export type I91fho98huiaik = [number, Anonymize<Ic00osfu517iss>];
export type I6sqre0udfgkem = [number, bigint, bigint];
export type Iea4cdk1e0kthe = Array<Anonymize<I453obcrpts60a>>;
export type I453obcrpts60a = [Anonymize<Ic00osfu517iss>, SS58String];
export type Ib7p1rvns4ds3o = ResultPayload<Anonymize<I50tr9ehhcjc1m>, TransactionValidityError>;
export type Ic5qeob75mc8ik = ResultPayload<Anonymize<I7j6ncl0o1j4gp>, Anonymize<I3dsucu19hnc49>>;
export type I7j6ncl0o1j4gp = (Anonymize<I1oea0vf2lc6sk>) | undefined;
export type I4ippb3t5fdvn1 = ResultPayload<Anonymize<Ia3v3galad03fn>, Anonymize<I3dsucu19hnc49>>;
export type Ia3v3galad03fn = (Anonymize<Ic602a40m2hqqe>) | undefined;
export type Idblndb3v7c6g5 = ResultPayload<Anonymize<Icgljjb6j82uhn>, Anonymize<I3dsucu19hnc49>>;
export type I8o6qdd57075de = ResultPayload<Anonymize<Ioleo0dfgsd3a>, Anonymize<I3dsucu19hnc49>>;
export type Ioleo0dfgsd3a = Array<Anonymize<Idap45qa17pms2>>;
export type Icfm6esve5sckl = (Anonymize<Itom7fk49o0c9>) | undefined;
export type I51utcj0o25bqq = ResultPayload<Anonymize<I4t3is9dal31u5>, Anonymize<I3dsucu19hnc49>>;
export type Iab0g6bja2v9r2 = ResultPayload<Anonymize<If4pub18hj00hu>, Anonymize<I3dsucu19hnc49>>;
export type If4pub18hj00hu = Array<Anonymize<I6ivjcn7a8nega>>;
export type Ibf372n8n7iabl = ResultPayload<Anonymize<I4arjljr6dpflb>, Anonymize<I3dsucu19hnc49>>;
export type I1bg4nvjfo332q = ResultPayload<Anonymize<I28ck56vk28ahl>, Anonymize<I3dsucu19hnc49>>;
export type I28ck56vk28ahl = (Anonymize<Iacclqe3n26duv>) | undefined;
export type Ifvam1degpv8h0 = ResultPayload<Anonymize<I5r8tbpuflb7st>, Anonymize<I3dsucu19hnc49>>;
export type Ijpkt04gjtbar = ResultPayload<Anonymize<Itom7fk49o0c9>, Anonymize<I3dsucu19hnc49>>;
export type I6vbjdubst9nn = ResultPayload<Anonymize<Ib9ofhf5n219c2>, Anonymize<I3dsucu19hnc49>>;
export type Ib9ofhf5n219c2 = (Anonymize<I6m6qv93vunp83>) | undefined;
export type I809k12j7rapsg = Array<Anonymize<I7jb1fl6av093n>>;
export type I7jb1fl6av093n = {
    "phase": Phase;
    "event": Anonymize<I5dtf2br8ccbab>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I5dtf2br8ccbab = AnonymousEnum<{
    "System": Anonymize<I1g311cun8narg>;
    "Utility": Anonymize<Iamdmjvd10br3b>;
    "Multisig": Anonymize<Igk9hi6m3stli>;
    "Proxy": Anonymize<Ic9ofpk0uqj4pi>;
    "Vesting": VestingEvent;
    "Scheduler": Anonymize<I849qc42dsneq2>;
    "Preimage": PreimageEvent;
    "ParachainSystem": Anonymize<Iattscgt3q8j3r>;
    "XcmpQueue": Anonymize<I8umj05c18ked4>;
    "CumulusXcm": Anonymize<I4f9jlfai43i7r>;
    "DmpQueue": Anonymize<I5s7k7819l2j41>;
    "PolkadotXcm": Anonymize<I4r0b7tct6o9ht>;
    "Balances": Anonymize<Ipa3jfc46ilad>;
    "TransactionPayment": TransactionPaymentEvent;
    "Assets": AssetsEvent;
    "CollatorSelection": Anonymize<I2k46ltub59oi1>;
    "Session": SessionEvent;
    "Identity": Anonymize<Ifugjudpfm708s>;
    "Democracy": Anonymize<Icfq8ap3e5p73t>;
    "Council": Anonymize<I9kobsgge5ohd7>;
    "Treasury": Anonymize<I3ul3cf3die25m>;
    "Bounties": Anonymize<Ialepu0vuuvje8>;
    "Lottery": Anonymize<I8vg8ohhden12t>;
    "TechnicalCommittee": Anonymize<I9kobsgge5ohd7>;
    "TechnicalMembership": Anonymize<Ibraem55mlft17>;
    "PhragmenElection": Anonymize<I4iamd5rd51ec2>;
    "Tips": Anonymize<Imaosic05it19>;
    "ChildBounties": ChildBountiesEvent;
    "ChainBridge": Anonymize<I6rkaq3ijqb566>;
    "XcmBridge": Anonymize<Idne7u2n7hrn30>;
    "XTransfer": Anonymize<Ianiea8edkp6ug>;
    "AssetsRegistry": Anonymize<I1s920gna6mfcj>;
    "PhalaRegistry": Anonymize<I2b6kch0pgc7sh>;
    "PhalaComputation": Anonymize<I1s2h7uolcs2gt>;
    "PhalaStakePool": undefined;
    "PhalaStakePoolv2": Anonymize<I9tg40g9qio0cs>;
    "PhalaVault": Anonymize<I9q81qthauhnqf>;
    "PhalaWrappedBalances": Anonymize<Ibnbjoj89lbu9t>;
    "PhalaBasePool": Anonymize<Iaadtb30eflmf3>;
    "PhalaPhatContracts": Anonymize<Ieb5gqmo85068n>;
    "PhalaPhatTokenomic": Anonymize<I386aenq2njirj>;
    "Uniques": Anonymize<Ia0j71vjrjqu9p>;
    "RmrkCore": Anonymize<I55o5eqokdpfpg>;
    "RmrkEquip": Anonymize<I9it0aqsa2gi7p>;
    "RmrkMarket": Anonymize<I18cu0963032lj>;
    "SygmaAccessSegregator": Anonymize<I5m28oic15nfhj>;
    "SygmaBasicFeeHandler": Anonymize<I1ak528ok7k6jk>;
    "SygmaBridge": Anonymize<I61mboln29qs8v>;
    "SygmaFeeHandlerRouter": Anonymize<I1qdt16l0lgv0>;
    "SygmaWrapper": Anonymize<Idne7u2n7hrn30>;
    "SygmaPercentageFeeHandler": Anonymize<I8cm7e3mlhvjjh>;
    "PalletIndex": Anonymize<I1e6fpb3424k9c>;
}>;
export type I1g311cun8narg = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I1f4bk2e0gtk55>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
}>;
export type I1f4bk2e0gtk55 = {
    "dispatch_error": Anonymize<Iemlsb8m0gkj0a>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type Iemlsb8m0gkj0a = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I7i5v3r3gse86n>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I7i5v3r3gse86n = AnonymousEnum<{
    "System": Anonymize<I2b5jj3f5ebo54>;
    "Timestamp": undefined;
    "RandomnessCollectiveFlip": undefined;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Preimage": Anonymize<I4cfhml1prt4lu>;
    "ParachainInfo": undefined;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "XcmpQueue": Anonymize<Idcmk0ovgq4f24>;
    "CumulusXcm": undefined;
    "DmpQueue": Anonymize<I5634m9tbik43k>;
    "PolkadotXcm": Anonymize<I93avf3rpkhb2d>;
    "Balances": Anonymize<Ife9031aj6on0k>;
    "TransactionPayment": undefined;
    "Assets": Anonymize<Ifn5p2ma236tv1>;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I1ud9but9pj0h0>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "Identity": Anonymize<I4burhm31qmut2>;
    "Democracy": Anonymize<I67neb7i10udig>;
    "Council": Anonymize<Icapevgbpfn5p9>;
    "Treasury": Anonymize<I4emjcpgu2307d>;
    "Bounties": Anonymize<Ibfvjqqblobf53>;
    "Lottery": Anonymize<I3r9fkqeo720fm>;
    "TechnicalCommittee": Anonymize<Icapevgbpfn5p9>;
    "TechnicalMembership": Anonymize<Ie3flrv31mi7gh>;
    "PhragmenElection": Anonymize<I96u72l8br1ego>;
    "Tips": Anonymize<Ia73kduq8om790>;
    "ChildBounties": Anonymize<I4u5ou5u3tthff>;
    "ChainBridge": Anonymize<I6rumhm0lt7lum>;
    "XcmBridge": Anonymize<I19ql3b6g5vlqo>;
    "XTransfer": Anonymize<If31v6pr89o48n>;
    "AssetsRegistry": Anonymize<Ibkijdkm7reooc>;
    "PhalaMq": Anonymize<I7csuhl0hj3bi4>;
    "PhalaRegistry": Anonymize<Icsrhcrbb4d80s>;
    "PhalaComputation": Anonymize<Ifut0meo4rqdhn>;
    "PhalaStakePool": undefined;
    "PhalaStakePoolv2": Anonymize<I1kjdkesqojce1>;
    "PhalaVault": Anonymize<I8t4petgo43mkr>;
    "PhalaWrappedBalances": Anonymize<I84uo43qg6m16c>;
    "PhalaBasePool": Anonymize<Iddaquu1algj03>;
    "PhalaPhatContracts": Anonymize<I3mgau09m6p4l2>;
    "PhalaPhatTokenomic": Anonymize<I97jvm95i4rhjh>;
    "Uniques": Anonymize<Ienq2ge2rhv4jm>;
    "RmrkCore": Anonymize<I3759m0a96qion>;
    "RmrkEquip": Anonymize<Ilglkdu2iq348>;
    "RmrkMarket": Anonymize<I9oopoegfb4dgg>;
    "SygmaAccessSegregator": Anonymize<I1l9ih8mo83ar8>;
    "SygmaBasicFeeHandler": Anonymize<I8j0hqauqvv5ds>;
    "SygmaBridge": Anonymize<I1gfd31lmg2dnr>;
    "SygmaFeeHandlerRouter": Anonymize<I8j0hqauqvv5ds>;
    "SygmaWrapper": Anonymize<I2h6542dinnsrc>;
    "SygmaPercentageFeeHandler": Anonymize<Iefm1ab9pcog4k>;
    "PalletIndex": Anonymize<I2u1uo8mu67sq2>;
}>;
export type I3mgau09m6p4l2 = AnonymousEnum<{
    "CodeNotFound": undefined;
    "ClusterNotFound": undefined;
    "ClusterNotDeployed": undefined;
    "ClusterPermissionDenied": undefined;
    "DuplicatedContract": undefined;
    "DuplicatedDeployment": undefined;
    "NoWorkerSpecified": undefined;
    "InvalidSender": undefined;
    "WorkerNotFound": undefined;
    "PayloadTooLarge": undefined;
    "NoPinkSystemCode": undefined;
    "ContractNotFound": undefined;
    "WorkerIsBusy": undefined;
}>;
export type I97jvm95i4rhjh = AnonymousEnum<{
    "InvalidAmountOfStake": undefined;
}>;
export type Iamdmjvd10br3b = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<Ieu3q3iifakcb8>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I8fs4df378mcpp>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Iaec871uechrcf>;
}>;
export type Ieu3q3iifakcb8 = {
    "index": number;
    "error": Anonymize<Iemlsb8m0gkj0a>;
};
export type I8fs4df378mcpp = {
    "error": Anonymize<Iemlsb8m0gkj0a>;
};
export type Iaec871uechrcf = {
    "result": Anonymize<Idni38icb8f49g>;
};
export type Idni38icb8f49g = ResultPayload<undefined, Anonymize<Iemlsb8m0gkj0a>>;
export type Igk9hi6m3stli = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<Iddd9dh9c7bplc>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type Iddd9dh9c7bplc = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Idni38icb8f49g>;
};
export type Ic9ofpk0uqj4pi = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Iaec871uechrcf>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<I3losnoicnf24b>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I222ob4fvnhvmb>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I222ob4fvnhvmb>;
}>;
export type I849qc42dsneq2 = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<I2dam96ptgp9i4>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type I2dam96ptgp9i4 = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<Idni38icb8f49g>;
};
export type I9kobsgge5ohd7 = AnonymousEnum<{
    /**
     *A motion (given hash) has been proposed (by given account) with a threshold (given
     *`MemberCount`).
     */
    "Proposed": Anonymize<Ift6f10887nk72>;
    /**
     *A motion (given hash) has been voted on by given account, leaving
     *a tally (yes votes and no votes given respectively as `MemberCount`).
     */
    "Voted": Anonymize<I7qc53b1tvqjg2>;
    /**
     *A motion was approved by the required threshold.
     */
    "Approved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was not approved by the required threshold.
     */
    "Disapproved": Anonymize<I2ev73t79f46tb>;
    /**
     *A motion was executed; result will be `Ok` if it returned without error.
     */
    "Executed": Anonymize<I7h7qtdsbfcb4v>;
    /**
     *A single member did some action; result will be `Ok` if it returned without error.
     */
    "MemberExecuted": Anonymize<I7h7qtdsbfcb4v>;
    /**
     *A proposal was closed because its threshold was reached or after its duration was up.
     */
    "Closed": Anonymize<Iak7fhrgb9jnnq>;
}>;
export type I7h7qtdsbfcb4v = {
    "proposal_hash": FixedSizeBinary<32>;
    "result": Anonymize<Idni38icb8f49g>;
};
export type Ieb5gqmo85068n = AnonymousEnum<{
    "ClusterCreated": Anonymize<I8qju7m3hstakb>;
    "ClusterPubkeyAvailable": Anonymize<I6913n2585e5v4>;
    "ClusterDeployed": Anonymize<I2am6a50bsgodv>;
    "ClusterDeploymentFailed": Anonymize<Ia79dd8827p5d7>;
    "Instantiating": Anonymize<If2nonba72deue>;
    "ContractPubkeyAvailable": Anonymize<I82fnm31ss836o>;
    "Instantiated": Anonymize<I1focoio9oicr1>;
    "ClusterDestroyed": Anonymize<Ics9h14l9rgrav>;
    "Transfered": Anonymize<Iffu89avbjtc5o>;
    "WorkerAddedToCluster": Anonymize<Ia79dd8827p5d7>;
    "WorkerRemovedFromCluster": Anonymize<Ia79dd8827p5d7>;
}>;
export type I8qju7m3hstakb = {
    "cluster": FixedSizeBinary<32>;
    "system_contract": FixedSizeBinary<32>;
};
export type I6913n2585e5v4 = {
    "cluster": FixedSizeBinary<32>;
    "pubkey": FixedSizeBinary<32>;
};
export type I2am6a50bsgodv = {
    "cluster": FixedSizeBinary<32>;
    "pubkey": FixedSizeBinary<32>;
    "worker": FixedSizeBinary<32>;
};
export type Ia79dd8827p5d7 = {
    "cluster": FixedSizeBinary<32>;
    "worker": FixedSizeBinary<32>;
};
export type If2nonba72deue = {
    "contract": FixedSizeBinary<32>;
    "cluster": FixedSizeBinary<32>;
    "deployer": SS58String;
};
export type I82fnm31ss836o = {
    "contract": FixedSizeBinary<32>;
    "cluster": FixedSizeBinary<32>;
    "pubkey": FixedSizeBinary<32>;
};
export type I1focoio9oicr1 = {
    "contract": FixedSizeBinary<32>;
    "cluster": FixedSizeBinary<32>;
    "deployer": FixedSizeBinary<32>;
};
export type Ics9h14l9rgrav = {
    "cluster": FixedSizeBinary<32>;
};
export type Iffu89avbjtc5o = {
    "cluster": FixedSizeBinary<32>;
    "account": FixedSizeBinary<32>;
    "amount": bigint;
};
export type I386aenq2njirj = AnonymousEnum<{
    "ContractDepositChanged": Anonymize<Ie2og8nuo133e>;
    "UserStakeChanged": Anonymize<Ickvb9esgisdvp>;
}>;
export type Ie2og8nuo133e = {
    "cluster"?: Anonymize<I4s6vifaf8k998>;
    "contract": FixedSizeBinary<32>;
    "deposit": bigint;
};
export type Ickvb9esgisdvp = {
    "cluster"?: Anonymize<I4s6vifaf8k998>;
    "account": SS58String;
    "contract": FixedSizeBinary<32>;
    "stake": bigint;
};
export type I497ltikio29qi = AnonymousEnum<{
    "System": Anonymize<Iccjej82b2j3c5>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Utility": Anonymize<Idphun67ikc4m>;
    "Multisig": Anonymize<I5n12bfctqhar5>;
    "Proxy": Anonymize<I3tb27s5sgusmn>;
    "Vesting": Anonymize<Ifd9d47pq35o0o>;
    "Scheduler": Anonymize<I6j5j6an3praqj>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "XcmpQueue": Anonymize<I57tqg8fvt7f6m>;
    "DmpQueue": Anonymize<I3lfpt1qictomp>;
    "PolkadotXcm": Anonymize<Ia6ktlm9tkn8j6>;
    "Balances": Anonymize<I1uvhaq3q54bet>;
    "Assets": Anonymize<Ideusanoto4b1j>;
    "CollatorSelection": Anonymize<I5c9voacr9gah8>;
    "Session": Anonymize<I77dda7hps0u37>;
    "Identity": Anonymize<I9r781s58svp6k>;
    "Democracy": Anonymize<I10dimmis6musr>;
    "Council": Anonymize<Ifd4k147otp54r>;
    "Treasury": Anonymize<I8pvomobr0rgmg>;
    "Bounties": Anonymize<I91kpi5kjh9on2>;
    "Lottery": Anonymize<Ib0ojpui5unv4m>;
    "TechnicalCommittee": Anonymize<Ifd4k147otp54r>;
    "TechnicalMembership": Anonymize<I6tsknu13e0euf>;
    "PhragmenElection": Anonymize<I3d851pnneuhv8>;
    "Tips": Anonymize<Ifmtsab3vbnv10>;
    "ChildBounties": Anonymize<I1b6drdhvt5hl9>;
    "ChainBridge": Anonymize<I1hdj8n8uatb27>;
    "XTransfer": Anonymize<I8d1rs27iurnan>;
    "AssetsRegistry": Anonymize<Id2vn8p7c328up>;
    "PhalaMq": Anonymize<Iecinmgkn2ids0>;
    "PhalaRegistry": Anonymize<I389ljd813gkvi>;
    "PhalaComputation": Anonymize<I79bb2pdcfefoc>;
    "PhalaStakePoolv2": Anonymize<I9s8pr1bb02go>;
    "PhalaVault": Anonymize<I9sicj360dvif8>;
    "PhalaWrappedBalances": Anonymize<I5346mu4igb8nj>;
    "PhalaBasePool": Anonymize<Iam36odngl5jju>;
    "PhalaPhatContracts": Anonymize<I8pt3q5huu9v0q>;
    "PhalaPhatTokenomic": Anonymize<I76b30opkk2l7o>;
    "Uniques": Anonymize<I7g34e4vegl9s4>;
    "RmrkCore": Anonymize<I6unlhbittuj3b>;
    "RmrkEquip": Anonymize<I9c5kqlsb7n82j>;
    "RmrkMarket": Anonymize<Iag2lfjshi8c8s>;
    "SygmaAccessSegregator": Anonymize<I4m46aem8c6ueq>;
    "SygmaBasicFeeHandler": Anonymize<Ieqaalig8ljrel>;
    "SygmaBridge": Anonymize<I5fijo62u5802j>;
    "SygmaFeeHandlerRouter": Anonymize<I742jl84cif6uo>;
    "SygmaPercentageFeeHandler": Anonymize<I6a4e2ah19v6k4>;
    "PalletIndex": Anonymize<Ifkvdoemdb4o58>;
}>;
export type Idphun67ikc4m = AnonymousEnum<{
    /**
     *See [`Pallet::batch`].
     */
    "batch": Anonymize<I6d5372cq6g7rp>;
    /**
     *See [`Pallet::as_derivative`].
     */
    "as_derivative": Anonymize<Ibh6lctsfq1715>;
    /**
     *See [`Pallet::batch_all`].
     */
    "batch_all": Anonymize<I6d5372cq6g7rp>;
    /**
     *See [`Pallet::dispatch_as`].
     */
    "dispatch_as": Anonymize<Iddkhb9kg4rrbf>;
    /**
     *See [`Pallet::force_batch`].
     */
    "force_batch": Anonymize<I6d5372cq6g7rp>;
    /**
     *See [`Pallet::with_weight`].
     */
    "with_weight": Anonymize<I1cevpuh25tqlr>;
}>;
export type I6d5372cq6g7rp = {
    "calls": Anonymize<I8bim912a7a1g6>;
};
export type I8bim912a7a1g6 = Array<TxCallData>;
export type Ibh6lctsfq1715 = {
    "index": number;
    "call": TxCallData;
};
export type Iddkhb9kg4rrbf = {
    "as_origin": Anonymize<Idcg7jnap6cfdj>;
    "call": TxCallData;
};
export type I1cevpuh25tqlr = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I5n12bfctqhar5 = AnonymousEnum<{
    /**
     *See [`Pallet::as_multi_threshold_1`].
     */
    "as_multi_threshold_1": Anonymize<I90ptamk4ecadd>;
    /**
     *See [`Pallet::as_multi`].
     */
    "as_multi": Anonymize<Ia2bjakfooella>;
    /**
     *See [`Pallet::approve_as_multi`].
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *See [`Pallet::cancel_as_multi`].
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type I90ptamk4ecadd = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Ia2bjakfooella = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I3tb27s5sgusmn = AnonymousEnum<{
    /**
     *See [`Pallet::proxy`].
     */
    "proxy": Anonymize<Ie5nj113re5t7v>;
    /**
     *See [`Pallet::add_proxy`].
     */
    "add_proxy": Anonymize<If4tj1q0g38fjg>;
    /**
     *See [`Pallet::remove_proxy`].
     */
    "remove_proxy": Anonymize<If4tj1q0g38fjg>;
    /**
     *See [`Pallet::remove_proxies`].
     */
    "remove_proxies": undefined;
    /**
     *See [`Pallet::create_pure`].
     */
    "create_pure": Anonymize<I213kjmutgr2fi>;
    /**
     *See [`Pallet::kill_pure`].
     */
    "kill_pure": Anonymize<Ia4iqoohe2opk8>;
    /**
     *See [`Pallet::announce`].
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *See [`Pallet::remove_announcement`].
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *See [`Pallet::reject_announcement`].
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *See [`Pallet::proxy_announced`].
     */
    "proxy_announced": Anonymize<Ifqvt461f7nsdv>;
}>;
export type Ie5nj113re5t7v = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ibplma4li8dhkt>;
    "call": TxCallData;
};
export type Ifqvt461f7nsdv = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ibplma4li8dhkt>;
    "call": TxCallData;
};
export type I6j5j6an3praqj = AnonymousEnum<{
    /**
     *See [`Pallet::schedule`].
     */
    "schedule": Anonymize<I7kbs6obd7pstn>;
    /**
     *See [`Pallet::cancel`].
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *See [`Pallet::schedule_named`].
     */
    "schedule_named": Anonymize<I2k4ud9u51f7rm>;
    /**
     *See [`Pallet::cancel_named`].
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *See [`Pallet::schedule_after`].
     */
    "schedule_after": Anonymize<Icj0lvb4va50a9>;
    /**
     *See [`Pallet::schedule_named_after`].
     */
    "schedule_named_after": Anonymize<I8kbubdhufokf8>;
}>;
export type I7kbs6obd7pstn = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I2k4ud9u51f7rm = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Icj0lvb4va50a9 = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I8kbubdhufokf8 = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ifd4k147otp54r = AnonymousEnum<{
    /**
     *See [`Pallet::set_members`].
     */
    "set_members": Anonymize<I38jfk5li8iang>;
    /**
     *See [`Pallet::execute`].
     */
    "execute": Anonymize<I4hmsdfa39av1f>;
    /**
     *See [`Pallet::propose`].
     */
    "propose": Anonymize<I1sq2b4jsjfck0>;
    /**
     *See [`Pallet::vote`].
     */
    "vote": Anonymize<I2dtrijkm5601t>;
    /**
     *See [`Pallet::disapprove_proposal`].
     */
    "disapprove_proposal": Anonymize<I2ev73t79f46tb>;
    /**
     *See [`Pallet::close`].
     */
    "close": Anonymize<Ib2obgji960euh>;
}>;
export type I4hmsdfa39av1f = {
    "proposal": TxCallData;
    "length_bound": number;
};
export type I1sq2b4jsjfck0 = {
    "threshold": number;
    "proposal": TxCallData;
    "length_bound": number;
};
export type Ib0ojpui5unv4m = AnonymousEnum<{
    /**
     *See [`Pallet::buy_ticket`].
     */
    "buy_ticket": Anonymize<Iah01oofl8tuo9>;
    /**
     *See [`Pallet::set_calls`].
     */
    "set_calls": Anonymize<I6d5372cq6g7rp>;
    /**
     *See [`Pallet::start_lottery`].
     */
    "start_lottery": Anonymize<Iacbtv7bdkku2a>;
    /**
     *See [`Pallet::stop_repeat`].
     */
    "stop_repeat": undefined;
}>;
export type Iah01oofl8tuo9 = {
    "call": TxCallData;
};
export type I1hdj8n8uatb27 = AnonymousEnum<{
    /**
     *See [`Pallet::set_threshold`].
     */
    "set_threshold": Anonymize<I9pfbl6m798rk2>;
    /**
     *See [`Pallet::whitelist_chain`].
     */
    "whitelist_chain": Anonymize<Ic5b47dj4coa3r>;
    /**
     *See [`Pallet::add_relayer`].
     */
    "add_relayer": Anonymize<Ibmkshvkdhh06f>;
    /**
     *See [`Pallet::remove_relayer`].
     */
    "remove_relayer": Anonymize<Ibmkshvkdhh06f>;
    /**
     *See [`Pallet::update_fee`].
     */
    "update_fee": Anonymize<I9p8b8lamchikq>;
    /**
     *See [`Pallet::acknowledge_proposal`].
     */
    "acknowledge_proposal": Anonymize<Ibd6glo8oakrtd>;
    /**
     *See [`Pallet::reject_proposal`].
     */
    "reject_proposal": Anonymize<Ibd6glo8oakrtd>;
    /**
     *See [`Pallet::eval_vote_state`].
     */
    "eval_vote_state": Anonymize<I7mker2n05rfmr>;
    /**
     *See [`Pallet::handle_fungible_transfer`].
     */
    "handle_fungible_transfer": Anonymize<I9md9er0ggas34>;
}>;
export type Ibd6glo8oakrtd = {
    "nonce": bigint;
    "src_id": number;
    "r_id": FixedSizeBinary<32>;
    "call": TxCallData;
};
export type I7mker2n05rfmr = {
    "nonce": bigint;
    "src_id": number;
    "prop": TxCallData;
};
export type I8pt3q5huu9v0q = AnonymousEnum<{
    /**
     *See [`Pallet::add_cluster`].
     */
    "add_cluster": Anonymize<I7p2tv37l911cg>;
    /**
     *See [`Pallet::cluster_upload_resource`].
     */
    "cluster_upload_resource": Anonymize<Iah5k3ggvcdj9j>;
    /**
     *See [`Pallet::transfer_to_cluster`].
     */
    "transfer_to_cluster": Anonymize<Ilfjnkdvr6eb2>;
    /**
     *See [`Pallet::push_contract_message`].
     */
    "push_contract_message": Anonymize<Ibqbi21r6gl2kt>;
    /**
     *See [`Pallet::instantiate_contract`].
     */
    "instantiate_contract": Anonymize<Ieh4ftquu8iia3>;
    /**
     *See [`Pallet::cluster_destroy`].
     */
    "cluster_destroy": Anonymize<Ics9h14l9rgrav>;
    /**
     *See [`Pallet::set_pink_system_code`].
     */
    "set_pink_system_code": Anonymize<I6pjjpfvhvcfru>;
    /**
     *See [`Pallet::set_pink_runtime_version`].
     */
    "set_pink_runtime_version": Anonymize<I1faoarphn2s32>;
    /**
     *See [`Pallet::add_worker_to_cluster`].
     */
    "add_worker_to_cluster": Anonymize<I2jh8ggfgmkeo0>;
    /**
     *See [`Pallet::remove_worker_from_cluster`].
     */
    "remove_worker_from_cluster": Anonymize<I2jh8ggfgmkeo0>;
    /**
     *See [`Pallet::cleanup_removed_workers`].
     */
    "cleanup_removed_workers": Anonymize<Iabj7fklqpbosu>;
}>;
export type I7p2tv37l911cg = {
    "owner": SS58String;
    "permission": Anonymize<Ibaffgq0455dhs>;
    "deploy_workers": Anonymize<Ic5m5lp1oioo8r>;
    "deposit": bigint;
    "gas_price": bigint;
    "deposit_per_item": bigint;
    "deposit_per_byte": bigint;
    "treasury_account": SS58String;
};
export type Ibaffgq0455dhs = AnonymousEnum<{
    "Public": undefined;
    "OnlyOwner": SS58String;
}>;
export type Iah5k3ggvcdj9j = {
    "cluster_id": FixedSizeBinary<32>;
    "resource_type": Anonymize<I3rj9jokftpvat>;
    "resource_data": Binary;
};
export type I3rj9jokftpvat = AnonymousEnum<{
    "InkCode": undefined;
    "SidevmCode": undefined;
    "IndeterministicInkCode": undefined;
}>;
export type Ilfjnkdvr6eb2 = {
    "amount": bigint;
    "cluster_id": FixedSizeBinary<32>;
    "dest_account": SS58String;
};
export type Ibqbi21r6gl2kt = {
    "contract_id": FixedSizeBinary<32>;
    "payload": Binary;
    "deposit": bigint;
};
export type Ieh4ftquu8iia3 = {
    "code_index": Anonymize<Id2jmksir7cu69>;
    "data": Binary;
    "salt": Binary;
    "cluster_id": FixedSizeBinary<32>;
    "transfer": bigint;
    "gas_limit": bigint;
    "storage_deposit_limit"?: Anonymize<I35p85j063s0il>;
    "deposit": bigint;
};
export type Id2jmksir7cu69 = AnonymousEnum<{
    "WasmCode": FixedSizeBinary<32>;
}>;
export type I1faoarphn2s32 = {
    "version": Anonymize<I9jd27rnpm8ttv>;
};
export type I2jh8ggfgmkeo0 = {
    "worker_pubkey": FixedSizeBinary<32>;
    "cluster_id": FixedSizeBinary<32>;
};
export type Iabj7fklqpbosu = {
    "cluster_id": FixedSizeBinary<32>;
};
export type I76b30opkk2l7o = AnonymousEnum<{
    /**
     *See [`Pallet::adjust_stake`].
     */
    "adjust_stake": Anonymize<Ic312np0jtnd0o>;
}>;
export type Ic312np0jtnd0o = {
    "contract": FixedSizeBinary<32>;
    "amount": bigint;
};
export type Ieshol306jk7hn = [number, Anonymize<I9hkkgp8kd9dnv>];
export type I9hkkgp8kd9dnv = [bigint, TxCallData];
export type Ieadvls69m2nhd = {
    "deployer": SS58String;
    "cluster": FixedSizeBinary<32>;
};
export type Ibu9mlecf9ndjt = {
    "owner": SS58String;
    "permission": Anonymize<Ibaffgq0455dhs>;
    "system_contract": FixedSizeBinary<32>;
    "gas_price": bigint;
    "deposit_per_item": bigint;
    "deposit_per_byte": bigint;
};
export type Ia80jl3tjleac5 = ResultPayload<Anonymize<Idni38icb8f49g>, TransactionValidityError>;
export type Id181dbjj1tdf3 = ResultPayload<Anonymize<I7j6ncl0o1j4gp>, Anonymize<Iemlsb8m0gkj0a>>;
export type Ifee01a9g3rt24 = ResultPayload<Anonymize<Ia3v3galad03fn>, Anonymize<Iemlsb8m0gkj0a>>;
export type Ic0d5ujpem0f1u = ResultPayload<Anonymize<Icgljjb6j82uhn>, Anonymize<Iemlsb8m0gkj0a>>;
export type I291qb692j5j75 = ResultPayload<Anonymize<Ioleo0dfgsd3a>, Anonymize<Iemlsb8m0gkj0a>>;
export type Icj5jam18ja0de = ResultPayload<Anonymize<I4t3is9dal31u5>, Anonymize<Iemlsb8m0gkj0a>>;
export type I1i2n12vu9icg5 = ResultPayload<Anonymize<If4pub18hj00hu>, Anonymize<Iemlsb8m0gkj0a>>;
export type I1uas0i0nvg00e = ResultPayload<Anonymize<I4arjljr6dpflb>, Anonymize<Iemlsb8m0gkj0a>>;
export type Ibf6ecleurvs3c = ResultPayload<Anonymize<I28ck56vk28ahl>, Anonymize<Iemlsb8m0gkj0a>>;
export type I9gma1k4b4n01 = ResultPayload<Anonymize<I5r8tbpuflb7st>, Anonymize<Iemlsb8m0gkj0a>>;
export type Idpvt3t6spl9s5 = ResultPayload<Anonymize<Itom7fk49o0c9>, Anonymize<Iemlsb8m0gkj0a>>;
export type If5srre49dgeim = ResultPayload<Anonymize<Ib9ofhf5n219c2>, Anonymize<Iemlsb8m0gkj0a>>;
export type I1vvo02p441lej = Array<Anonymize<I568d1bmok1rr8>>;
export type I568d1bmok1rr8 = {
    "phase": Phase;
    "event": Anonymize<Icc4nq9v4a8q13>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type Icc4nq9v4a8q13 = AnonymousEnum<{
    "System": Anonymize<I64s5gksjrni1e>;
    "Scheduler": Anonymize<Id4dkv40caraoa>;
    "Preimage": PreimageEvent;
    "Indices": Anonymize<IndicesEvent>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "Staking": StakingEvent;
    "Offences": OffencesEvent;
    "Session": SessionEvent;
    "Grandpa": GrandpaEvent;
    "Treasury": Anonymize<Iceo3qo846468b>;
    "ConvictionVoting": ConvictionVotingEvent;
    "Referenda": Anonymize<Idfraa3b4eu018>;
    "Whitelist": Anonymize<Ie7tutcomc1psu>;
    "Claims": CommonClaimsEvent;
    "Vesting": VestingEvent;
    "Utility": Anonymize<Ibt04qq4qk25a9>;
    "Proxy": Anonymize<I382arq7don94o>;
    "Multisig": Anonymize<I80hgm6bm4g706>;
    "Bounties": BountiesEvent;
    "ChildBounties": ChildBountiesEvent;
    "ElectionProviderMultiPhase": ElectionProviderMultiPhaseEvent;
    "VoterList": BagsListEvent;
    "NominationPools": NominationPoolsEvent;
    "FastUnstake": Anonymize<I64anae7dga9ep>;
    "ParaInclusion": ParachainsInclusionEvent;
    "Paras": ParachainsParasEvent;
    "Hrmp": ParachainsHrmpEvent;
    "ParasDisputes": ParachainsDisputesEvent;
    "OnDemand": Anonymize<Icuu6jjue8o6eb>;
    "Registrar": CommonParasRegistrarEvent;
    "Slots": CommonSlotsEvent;
    "Auctions": CommonAuctionsEvent;
    "Crowdloan": Anonymize<I8hr54t5br5gqu>;
    "Coretime": PolkadotRuntimeParachainsCoretimeEvent;
    "StateTrieMigration": Anonymize<I61dksvl51aujo>;
    "XcmPallet": Anonymize<I5ce1ru810vv9d>;
    "MessageQueue": Anonymize<I13vul90391uuv>;
    "AssetRate": AssetRateEvent;
    "Sudo": Anonymize<Its8rjbgrjia2>;
}>;
export type I64s5gksjrni1e = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I3689gln6i9tq9>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I3689gln6i9tq9 = {
    "dispatch_error": Anonymize<If0pv33ekpq7b5>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type If0pv33ekpq7b5 = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<I9qsirb4pmpb98>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type I9qsirb4pmpb98 = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Preimage": Anonymize<I1iknkudsdnbks>;
    "Babe": Anonymize<Ib6q602k6o213a>;
    "Timestamp": undefined;
    "Indices": Anonymize<Icq1825fru3di2>;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "Staking": Anonymize<I11137r14aka6n>;
    "Offences": undefined;
    "Historical": undefined;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Grandpa": Anonymize<I7q8i0pp1gkas6>;
    "AuthorityDiscovery": undefined;
    "Treasury": Anonymize<I36uss0m9fpcsf>;
    "ConvictionVoting": Anonymize<Idfa8k8ikssbsf>;
    "Referenda": Anonymize<I84u4ul208g742>;
    "Origins": undefined;
    "Whitelist": Anonymize<I15nctscutpbeh>;
    "Claims": Anonymize<Ijh2jbbqvb176>;
    "Vesting": Anonymize<Icof2acl69lq3c>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Bounties": Anonymize<Ibfvjqqblobf53>;
    "ChildBounties": Anonymize<I4u5ou5u3tthff>;
    "ElectionProviderMultiPhase": Anonymize<Idb84kfjd998sl>;
    "VoterList": Anonymize<Ic35l5bgiij29p>;
    "NominationPools": Anonymize<Ic4cmf9id3qcei>;
    "FastUnstake": Anonymize<Iau9bur8dc3bec>;
    "ParachainsOrigin": undefined;
    "Configuration": Anonymize<In1jctfv299lm>;
    "ParasShared": undefined;
    "ParaInclusion": Anonymize<Iat8btfaeiq1le>;
    "ParaInherent": Anonymize<Idfqgoii3heb2f>;
    "ParaScheduler": undefined;
    "Paras": Anonymize<Ieo97unb4d08rl>;
    "Initializer": undefined;
    "Dmp": undefined;
    "Hrmp": Anonymize<Ibns95nfmm92df>;
    "ParaSessionInfo": undefined;
    "ParasDisputes": Anonymize<Iakburbqot4g58>;
    "ParasSlashing": Anonymize<I1v70p1j0r2q1j>;
    "OnDemand": Anonymize<I8htscm3ert491>;
    "CoretimeAssignmentProvider": Anonymize<Ie3b9qd0nd59gs>;
    "Registrar": Anonymize<I97vkspnd0b8bh>;
    "Slots": Anonymize<Iers095sa65pbg>;
    "Auctions": Anonymize<I4kgo47o2v3701>;
    "Crowdloan": Anonymize<I9o6l1c4r4qc3s>;
    "Coretime": Anonymize<Ifju0orssp9h7o>;
    "StateTrieMigration": Anonymize<I96objte63brjr>;
    "XcmPallet": Anonymize<I87j95aq93d7dq>;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "AssetRate": Anonymize<I3qgd61cgli6cp>;
    "Beefy": Anonymize<Ib6q602k6o213a>;
    "Mmr": undefined;
    "BeefyMmrLeaf": undefined;
    "ParaSudoWrapper": Anonymize<Ieq0677kv2oqb2>;
    "Sudo": Anonymize<Iaug04qjhbli00>;
}>;
export type Id4dkv40caraoa = AnonymousEnum<{
    /**
     *Scheduled some task.
     */
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    /**
     *Canceled some task.
     */
    "Canceled": Anonymize<I5n4sebgkfr760>;
    /**
     *Dispatched some task.
     */
    "Dispatched": Anonymize<I7o53b5bpl8gk6>;
    /**
     *Set a retry configuration for some task.
     */
    "RetrySet": Anonymize<Ia3c82eadg79bj>;
    /**
     *Cancel a retry configuration for some task.
     */
    "RetryCancelled": Anonymize<Ienusoeb625ftq>;
    /**
     *The call for the provided hash was not found so the task has been aborted.
     */
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be renewed since the agenda is full at that block.
     */
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task was unable to be retried since the agenda is full at that block or there
     *was not enough weight to reschedule it.
     */
    "RetryFailed": Anonymize<Ienusoeb625ftq>;
    /**
     *The given task can never be executed since it is overweight.
     */
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type I7o53b5bpl8gk6 = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<I2qrnqvlap8u57>;
};
export type I2qrnqvlap8u57 = ResultPayload<undefined, Anonymize<If0pv33ekpq7b5>>;
export type Ie7tutcomc1psu = AnonymousEnum<{
    "CallWhitelisted": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallRemoved": Anonymize<I1adbcfi5uc62r>;
    "WhitelistedCallDispatched": Anonymize<I6lhccdv0fa448>;
}>;
export type I6lhccdv0fa448 = {
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I9e8s51h62oemf>;
};
export type I9e8s51h62oemf = ResultPayload<Anonymize<Ia1u1r3n74r13c>, Anonymize<I67t4cc7aikp0p>>;
export type I67t4cc7aikp0p = {
    "post_info": Anonymize<Ia1u1r3n74r13c>;
    "error": Anonymize<If0pv33ekpq7b5>;
};
export type Ibt04qq4qk25a9 = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<Iffsb935hig642>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I28ueki8b0gabo>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Ickgf8osuqr5f2>;
}>;
export type Iffsb935hig642 = {
    "index": number;
    "error": Anonymize<If0pv33ekpq7b5>;
};
export type I28ueki8b0gabo = {
    "error": Anonymize<If0pv33ekpq7b5>;
};
export type Ickgf8osuqr5f2 = {
    "result": Anonymize<I2qrnqvlap8u57>;
};
export type I382arq7don94o = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Ickgf8osuqr5f2>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<Ifqt0l2jtnansm>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<Ib5do5c9nfeb64>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<Ib5do5c9nfeb64>;
}>;
export type I80hgm6bm4g706 = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<Ibf9frae7asqbk>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type Ibf9frae7asqbk = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I2qrnqvlap8u57>;
};
export type I64anae7dga9ep = AnonymousEnum<{
    /**
     *A staker was unstaked.
     */
    "Unstaked": Anonymize<Idpcrjnq1nio58>;
    /**
     *A staker was slashed for requesting fast-unstake whilst being exposed.
     */
    "Slashed": Anonymize<Ifk8eme5o7mukf>;
    /**
     *A batch was partially checked for the given eras, but the process did not finish.
     */
    "BatchChecked": Anonymize<Ic0he9tlf9ll0u>;
    /**
     *A batch of a given size was terminated.
     *
     *This is always follows by a number of `Unstaked` or `Slashed` events, marking the end
     *of the batch. A new batch will be created upon next block.
     */
    "BatchFinished": Anonymize<I54umskavgc9du>;
    /**
     *An internal error happened. Operations will be paused now.
     */
    "InternalError": undefined;
}>;
export type Idpcrjnq1nio58 = {
    "stash": SS58String;
    "result": Anonymize<I2qrnqvlap8u57>;
};
export type I8hr54t5br5gqu = AnonymousEnum<{
    /**
     *Create a new crowdloaning campaign.
     */
    "Created": Anonymize<I37r4bdai8o9mp>;
    /**
     *Contributed to a crowd sale.
     */
    "Contributed": Anonymize<I8ve4g3egaln6a>;
    /**
     *Withdrew full balance of a contributor.
     */
    "Withdrew": Anonymize<I8ve4g3egaln6a>;
    /**
     *The loans in a fund have been partially dissolved, i.e. there are some left
     *over child keys that still need to be killed.
     */
    "PartiallyRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *All loans in a fund have been refunded.
     */
    "AllRefunded": Anonymize<I37r4bdai8o9mp>;
    /**
     *Fund is dissolved.
     */
    "Dissolved": Anonymize<I37r4bdai8o9mp>;
    /**
     *The result of trying to submit a new bid to the Slots pallet.
     */
    "HandleBidResult": Anonymize<I1h7uujar0incg>;
    /**
     *The configuration to a crowdloan has been edited.
     */
    "Edited": Anonymize<I37r4bdai8o9mp>;
    /**
     *A memo has been updated.
     */
    "MemoUpdated": Anonymize<If4hvqaeoqq5us>;
    /**
     *A parachain has been moved to `NewRaise`
     */
    "AddedToNewRaise": Anonymize<I37r4bdai8o9mp>;
}>;
export type I1h7uujar0incg = {
    "para_id": number;
    "result": Anonymize<I2qrnqvlap8u57>;
};
export type Its8rjbgrjia2 = AnonymousEnum<{
    /**
     *A sudo call just took place.
     */
    "Sudid": Anonymize<Ianqf682jarebd>;
    /**
     *The sudo key has been updated.
     */
    "KeyChanged": Anonymize<I5rtkmhm2dng4u>;
    /**
     *The key was permanently removed.
     */
    "KeyRemoved": undefined;
    /**
     *A [sudo_as](Pallet::sudo_as) call just took place.
     */
    "SudoAsDone": Anonymize<Ianqf682jarebd>;
}>;
export type Ianqf682jarebd = {
    /**
     *The result of the call made by the sudo user.
     */
    "sudo_result": Anonymize<I2qrnqvlap8u57>;
};
export type Iavegmqvi6qne4 = AnonymousEnum<{
    /**
     *Anonymously schedule a task.
     */
    "schedule": Anonymize<I73126slucvpuf>;
    /**
     *Cancel an anonymously scheduled task.
     */
    "cancel": Anonymize<I5n4sebgkfr760>;
    /**
     *Schedule a named task.
     */
    "schedule_named": Anonymize<I77i5j3iemk22>;
    /**
     *Cancel a named scheduled task.
     */
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    /**
     *Anonymously schedule a task after a delay.
     */
    "schedule_after": Anonymize<I1dkg53celaqa8>;
    /**
     *Schedule a named task after a delay.
     */
    "schedule_named_after": Anonymize<I8hin5gmmld933>;
    /**
     *Set a retry configuration for a task so that, in case its scheduled run fails, it will
     *be retried after `period` blocks, for a total amount of `retries` retries or until it
     *succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry": Anonymize<Ieg3fd8p4pkt10>;
    /**
     *Set a retry configuration for a named task so that, in case its scheduled run fails, it
     *will be retried after `period` blocks, for a total amount of `retries` retries or until
     *it succeeds.
     *
     *Tasks which need to be scheduled for a retry are still subject to weight metering and
     *agenda space, same as a regular task. If a periodic task fails, it will be scheduled
     *normally while the task is retrying.
     *
     *Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
     *clones of the original task. Their retry configuration will be derived from the
     *original task's configuration, but will have a lower value for `remaining` than the
     *original `total_retries`.
     */
    "set_retry_named": Anonymize<I8kg5ll427kfqq>;
    /**
     *Removes the retry configuration of a task.
     */
    "cancel_retry": Anonymize<I467333262q1l9>;
    /**
     *Cancel the retry configuration of a named task.
     */
    "cancel_retry_named": Anonymize<Ifs1i5fk9cqvr6>;
}>;
export type I73126slucvpuf = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I77i5j3iemk22 = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I1dkg53celaqa8 = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I8hin5gmmld933 = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ie46tm6q3qlj4f = AnonymousEnum<{
    "whitelist_call": Anonymize<I1adbcfi5uc62r>;
    "remove_whitelisted_call": Anonymize<I1adbcfi5uc62r>;
    "dispatch_whitelisted_call": Anonymize<Ibf6ucefn8fh49>;
    "dispatch_whitelisted_call_with_preimage": Anonymize<I7noh5k172rouo>;
}>;
export type I7noh5k172rouo = {
    "call": TxCallData;
};
export type I1lgu73o98n4fm = AnonymousEnum<{
    /**
     *Send a batch of dispatch calls.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     *
     *This will return `Ok` in all circumstances. To determine the success of the batch, an
     *event is deposited. If a call failed and the batch was interrupted, then the
     *`BatchInterrupted` event is deposited, along with the number of successful calls made
     *and the error of the failed call. If all were successful, then the `BatchCompleted`
     *event is deposited.
     */
    "batch": Anonymize<Iaqrom4mlmsjot>;
    /**
     *Send a call through an indexed pseudonym of the sender.
     *
     *Filter from origin are passed along. The call will be dispatched with an origin which
     *use the same filter as the origin of this call.
     *
     *NOTE: If you need to ensure that any account-based filtering is not honored (i.e.
     *because you expect `proxy` to have been used prior in the call stack and you do not want
     *the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`
     *in the Multisig pallet instead.
     *
     *NOTE: Prior to version *12, this was called `as_limited_sub`.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "as_derivative": Anonymize<Ie8r4ba69bdtup>;
    /**
     *Send a batch of dispatch calls and atomically execute them.
     *The whole transaction will rollback and fail if any of the calls failed.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatched without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "batch_all": Anonymize<Iaqrom4mlmsjot>;
    /**
     *Dispatches a function call with a provided origin.
     *
     *The dispatch origin for this call must be _Root_.
     *
     *## Complexity
     *- O(1).
     */
    "dispatch_as": Anonymize<I8vki1305cdnah>;
    /**
     *Send a batch of dispatch calls.
     *Unlike `batch`, it allows errors and won't interrupt.
     *
     *May be called from any origin except `None`.
     *
     *- `calls`: The calls to be dispatched from the same origin. The number of call must not
     *  exceed the constant: `batched_calls_limit` (available in constant metadata).
     *
     *If origin is root then the calls are dispatch without checking origin filter. (This
     *includes bypassing `frame_system::Config::BaseCallFilter`).
     *
     *## Complexity
     *- O(C) where C is the number of calls to be batched.
     */
    "force_batch": Anonymize<Iaqrom4mlmsjot>;
    /**
     *Dispatch a function call with a specified weight.
     *
     *This function does not check the weight of the call, and instead allows the
     *Root origin to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Root_.
     */
    "with_weight": Anonymize<Ia3188aj4712q8>;
}>;
export type Iaqrom4mlmsjot = {
    "calls": Anonymize<I99mllv712g0s7>;
};
export type I99mllv712g0s7 = Array<TxCallData>;
export type Ie8r4ba69bdtup = {
    "index": number;
    "call": TxCallData;
};
export type I8vki1305cdnah = {
    "as_origin": PolkadotRuntimeOriginCaller;
    "call": TxCallData;
};
export type Ia3188aj4712q8 = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I9goigi3ol0kak = AnonymousEnum<{
    /**
     *Dispatch the given `call` from an account that the sender is authorised for through
     *`add_proxy`.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy": Anonymize<Ig7n7v23i71s2>;
    /**
     *Register a proxy account for the sender that is able to make calls on its behalf.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to make a proxy.
     *- `proxy_type`: The permissions allowed for this proxy account.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     */
    "add_proxy": Anonymize<Ifhl1ihpl9i99m>;
    /**
     *Unregister a proxy account for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `proxy`: The account that the `caller` would like to remove as a proxy.
     *- `proxy_type`: The permissions currently enabled for the removed proxy account.
     */
    "remove_proxy": Anonymize<Ifhl1ihpl9i99m>;
    /**
     *Unregister all proxy accounts for the sender.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *WARNING: This may be called on accounts created by `pure`, however if done, then
     *the unreserved fees will be inaccessible. **All access to this account will be lost.**
     */
    "remove_proxies": undefined;
    /**
     *Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
     *initialize it with a proxy of `proxy_type` for `origin` sender.
     *
     *Requires a `Signed` origin.
     *
     *- `proxy_type`: The type of the proxy that the sender will be registered as over the
     *new account. This will almost always be the most permissive `ProxyType` possible to
     *allow for maximum flexibility.
     *- `index`: A disambiguation index, in case this is called multiple times in the same
     *transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just
     *want to use `0`.
     *- `delay`: The announcement period required of the initial proxy. Will generally be
     *zero.
     *
     *Fails with `Duplicate` if this has already been called in this transaction, from the
     *same sender, with the same parameters.
     *
     *Fails if there are insufficient funds to pay for deposit.
     */
    "create_pure": Anonymize<Iav2q7hjio8n98>;
    /**
     *Removes a previously spawned pure proxy.
     *
     *WARNING: **All access to this account will be lost.** Any funds held in it will be
     *inaccessible.
     *
     *Requires a `Signed` origin, and the sender account must have been created by a call to
     *`pure` with corresponding parameters.
     *
     *- `spawner`: The account that originally called `pure` to create this account.
     *- `index`: The disambiguation index originally passed to `pure`. Probably `0`.
     *- `proxy_type`: The proxy type originally passed to `pure`.
     *- `height`: The height of the chain when the call to `pure` was processed.
     *- `ext_index`: The extrinsic index in which the call to `pure` was processed.
     *
     *Fails with `NoPermission` in case the caller is not a previously created pure
     *account whose `pure` call has corresponding parameters.
     */
    "kill_pure": Anonymize<I1m2ifb0h8d0r8>;
    /**
     *Publish the hash of a proxy-call that will be made in the future.
     *
     *This must be called some number of blocks before the corresponding `proxy` is attempted
     *if the delay associated with the proxy relationship is greater than zero.
     *
     *No more than `MaxPending` announcements may be made at any one time.
     *
     *This will take a deposit of `AnnouncementDepositFactor` as well as
     *`AnnouncementDepositBase` if there are no other pending announcements.
     *
     *The dispatch origin for this call must be _Signed_ and a proxy of `real`.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove a given announcement.
     *
     *May be called by a proxy account to remove a call they previously announced and return
     *the deposit.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `call_hash`: The hash of the call to be made by the `real` account.
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *Remove the given announcement of a delegate.
     *
     *May be called by a target (proxied) account to remove a call that one of their delegates
     *(`delegate`) has announced they want to execute. The deposit is returned.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `delegate`: The account that previously announced the call.
     *- `call_hash`: The hash of the call to be made.
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *Dispatch the given `call` from an account that the sender is authorized for through
     *`add_proxy`.
     *
     *Removes any corresponding announcement(s).
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *Parameters:
     *- `real`: The account that the proxy will make a call on behalf of.
     *- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.
     *- `call`: The call to be made by the `real` account.
     */
    "proxy_announced": Anonymize<I1t4kr90l8je9i>;
}>;
export type Ig7n7v23i71s2 = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ict2klpa3v9sc0>;
    "call": TxCallData;
};
export type I1t4kr90l8je9i = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Ict2klpa3v9sc0>;
    "call": TxCallData;
};
export type I93om1po2q3soq = AnonymousEnum<{
    /**
     *Immediately dispatch a multi-signature call using a single approval from the caller.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `other_signatories`: The accounts (other than the sender) who are part of the
     *multi-signature, but do not participate in the approval process.
     *- `call`: The call to be executed.
     *
     *Result is equivalent to the dispatched result.
     *
     *## Complexity
     *O(Z + C) where Z is the length of the call and C its execution weight.
     */
    "as_multi_threshold_1": Anonymize<Ie73bij49asb91>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *If there are enough, then dispatch the call.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call`: The call to be executed.
     *
     *NOTE: Unless this is the final approval, you will generally want to use
     *`approve_as_multi` instead, since it only requires a hash of the call.
     *
     *Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise
     *on success, result is `Ok` and the result from the interior call, if it was executed,
     *may be found in the deposited `MultisigExecuted` event.
     *
     *## Complexity
     *- `O(S + Z + Call)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- The weight of the `call`.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "as_multi": Anonymize<Inav2g368qh7k>;
    /**
     *Register approval for a dispatch to be made from a deterministic composite account if
     *approved by a total of `threshold - 1` of `other_signatories`.
     *
     *Payment: `DepositBase` will be reserved if this is the first approval, plus
     *`threshold` times `DepositFactor`. It is returned once this dispatch happens or
     *is cancelled.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is
     *not the first approval, then it must be `Some`, with the timepoint (block number and
     *transaction index) of the first approval transaction.
     *- `call_hash`: The hash of the call to be executed.
     *
     *NOTE: If this is the final approval, you will want to use `as_multi` instead.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- Up to one binary search and insert (`O(logS + S)`).
     *- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
     *- One event.
     *- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit
     *  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously
     *for this operation will be unreserved on success.
     *
     *The dispatch origin for this call must be _Signed_.
     *
     *- `threshold`: The total number of approvals for this dispatch before it is executed.
     *- `other_signatories`: The accounts (other than the sender) who can approve this
     *dispatch. May not be empty.
     *- `timepoint`: The timepoint (block number and transaction index) of the first approval
     *transaction for this dispatch.
     *- `call_hash`: The hash of the call to be executed.
     *
     *## Complexity
     *- `O(S)`.
     *- Up to one balance-reserve or unreserve operation.
     *- One passthrough operation, one insert, both `O(S)` where `S` is the number of
     *  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
     *- One encode & hash, both of complexity `O(S)`.
     *- One event.
     *- I/O: 1 read `O(S)`, one remove.
     *- Storage: removes one item.
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type Ie73bij49asb91 = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Inav2g368qh7k = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I380fj43fsmroh = AnonymousEnum<{
    /**
     *Authenticates the sudo key and dispatches a function call with `Root` origin.
     */
    "sudo": Anonymize<I7noh5k172rouo>;
    /**
     *Authenticates the sudo key and dispatches a function call with `Root` origin.
     *This function does not check the weight of the call, and instead allows the
     *Sudo user to specify the weight of the call.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "sudo_unchecked_weight": Anonymize<Ia3188aj4712q8>;
    /**
     *Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo
     *key.
     */
    "set_key": Anonymize<I8k3rnvpeeh4hv>;
    /**
     *Authenticates the sudo key and dispatches a function call with `Signed` origin from
     *a given account.
     *
     *The dispatch origin for this call must be _Signed_.
     */
    "sudo_as": Anonymize<I7tdo0vb9c4t6p>;
    /**
     *Permanently removes the sudo key.
     *
     ***This cannot be un-done.**
     */
    "remove_key": undefined;
}>;
export type I7tdo0vb9c4t6p = {
    "who": MultiAddress;
    "call": TxCallData;
};
export type I4hjtdpi14ipua = ResultPayload<Anonymize<I2qrnqvlap8u57>, TransactionValidityError>;
export type I9i8mi5mpp29ok = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "Scheduler": Anonymize<Iavegmqvi6qne4>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "Babe": Anonymize<I1jeo0dpbkma5g>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Indices": Anonymize<I66vlm8f4l1oll>;
    "Balances": Anonymize<I9svldsp29mh87>;
    "Staking": Anonymize<I5jvuh9dlbdd20>;
    "Session": Anonymize<Iceajactc9a8pc>;
    "Grandpa": Anonymize<I5u9ggmn8umfqm>;
    "Treasury": Anonymize<I1s28h18nhih63>;
    "ConvictionVoting": Anonymize<Ie5kd08tutk56t>;
    "Referenda": Anonymize<I657vbelok0a1m>;
    "Whitelist": Anonymize<Ie46tm6q3qlj4f>;
    "Claims": Anonymize<Id0dj18ct09hlp>;
    "Vesting": Anonymize<Icgf8vmtkbnu4u>;
    "Utility": Anonymize<I1lgu73o98n4fm>;
    "Proxy": Anonymize<I9goigi3ol0kak>;
    "Multisig": Anonymize<I93om1po2q3soq>;
    "Bounties": Anonymize<I91kpi5kjh9on2>;
    "ChildBounties": Anonymize<I1b6drdhvt5hl9>;
    "ElectionProviderMultiPhase": Anonymize<I15soeogelbbbh>;
    "VoterList": Anonymize<Ifvfo1l0vu2o7e>;
    "NominationPools": Anonymize<I57mljkkr28m9p>;
    "FastUnstake": Anonymize<I44snhj1gahvrd>;
    "Configuration": Anonymize<Ia9ptue949ognv>;
    "ParasShared": undefined;
    "ParaInclusion": undefined;
    "ParaInherent": Anonymize<Id5l4f3jqtnb0u>;
    "Paras": Anonymize<Ie2dden5k4kk7t>;
    "Initializer": Anonymize<Ieggtnkc96vvt7>;
    "Hrmp": Anonymize<I45adic8nko129>;
    "ParasDisputes": Anonymize<Ifkh1ep7g9h3rv>;
    "ParasSlashing": Anonymize<I3jj054kp2bjol>;
    "OnDemand": Anonymize<I9s7urueli180g>;
    "Registrar": Anonymize<Icclqj5sge2nc7>;
    "Slots": Anonymize<Iafhis924j14hg>;
    "Auctions": Anonymize<I4a8qeimc5p3qn>;
    "Crowdloan": Anonymize<Iaj4q75nu5v2i2>;
    "Coretime": Anonymize<Idu7bbtd2jtnb9>;
    "StateTrieMigration": Anonymize<I39l72gdmkk30t>;
    "XcmPallet": Anonymize<I9nbjvlrb9bp1g>;
    "MessageQueue": Anonymize<I3lic4llm6egbr>;
    "AssetRate": Anonymize<I85dm8mgt48css>;
    "Beefy": Anonymize<I918ie8roegt3d>;
    "ParaSudoWrapper": Anonymize<I8tnfu4hpnpsg>;
    "Sudo": Anonymize<I380fj43fsmroh>;
}>;
export type I10ii6moj74u99 = ResultPayload<Anonymize<Igelipin95c2s>, Anonymize<I55ku9c5gk50hb>>;
export type Igelipin95c2s = {
    "execution_result": Anonymize<I9e8s51h62oemf>;
    "emitted_events": Anonymize<I72ll00u7d1ecq>;
    "local_xcm"?: Anonymize<I3i0ce56p044d2>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I72ll00u7d1ecq = Array<Anonymize<Icc4nq9v4a8q13>>;
export type I5b3uuje2hqfp8 = ResultPayload<Anonymize<I3f6m3f6tcf2fv>, Anonymize<I55ku9c5gk50hb>>;
export type I3f6m3f6tcf2fv = {
    "execution_result": XcmV4TraitsOutcome;
    "emitted_events": Anonymize<I72ll00u7d1ecq>;
    "forwarded_xcms": Anonymize<I47tkk5e5nm6g7>;
};
export type I41mpj4cv3t85p = Array<Anonymize<I7p580b75euka8>>;
export type I7p580b75euka8 = {
    "phase": Phase;
    "event": Anonymize<I502r297f2ac0b>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type I502r297f2ac0b = AnonymousEnum<{
    "System": Anonymize<Iptqnsfeiu2og>;
    "Scheduler": Anonymize<I9n9m2rpvl544u>;
    "Utility": Anonymize<I1l8qor574vnqn>;
    "Multisig": Anonymize<I9571gp57h5edr>;
    "Proxy": Anonymize<I20dmohooe7pf6>;
    "TransactionPause": Anonymize<I6njdqjbmmv2at>;
    "IdleScheduler": Anonymize<I4iprt7cq9tf25>;
    "Preimage": PreimageEvent;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "Tokens": Anonymize<I6kqr550eg9nvg>;
    "Currencies": Anonymize<I3tjtdihk3p16t>;
    "Vesting": Anonymize<I3jgv45gfqgi7c>;
    "TransactionPayment": Anonymize<I6uncvhp13qtk8>;
    "Treasury": Anonymize<I3f75km8j5v1nd>;
    "Bounties": BountiesEvent;
    "Tips": Anonymize<Imaosic05it19>;
    "CollatorSelection": Anonymize<I9v1ragmhic15e>;
    "Session": SessionEvent;
    "SessionManager": Anonymize<I7pr3d7cllohhc>;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "XTokens": Anonymize<Ie93bvvt769opj>;
    "UnknownTokens": Anonymize<Ia2698nr6jkt>;
    "OrmlXcm": Anonymize<I1615emstntqta>;
    "MessageQueue": Anonymize<Idrvf3ouahq8la>;
    "Authority": Anonymize<Id5sdd4cjck1sb>;
    "GeneralCouncil": Anonymize<I3nul9262f1lhh>;
    "GeneralCouncilMembership": Anonymize<Ibraem55mlft17>;
    "FinancialCouncil": Anonymize<I3nul9262f1lhh>;
    "FinancialCouncilMembership": Anonymize<Ibraem55mlft17>;
    "HomaCouncil": Anonymize<I3nul9262f1lhh>;
    "HomaCouncilMembership": Anonymize<Ibraem55mlft17>;
    "TechnicalCommittee": Anonymize<I3nul9262f1lhh>;
    "TechnicalCommitteeMembership": Anonymize<Ibraem55mlft17>;
    "Democracy": Anonymize<Icfq8ap3e5p73t>;
    "AcalaOracle": Anonymize<I281qrcj3lcctu>;
    "OperatorMembershipAcala": Anonymize<Ibraem55mlft17>;
    "Auction": Anonymize<I8t8c5g5mb07dj>;
    "Parameters": Anonymize<Ic2evjd2h9llvi>;
    "Prices": Anonymize<I7p9r25qd9bq9b>;
    "Dex": Anonymize<I7n0i3i3p4vr8c>;
    "Earning": Anonymize<I3i2n7jl2jtltv>;
    "AuctionManager": Anonymize<Id6iha5fcetvfg>;
    "Loans": Anonymize<Iamndureq493gd>;
    "Honzon": Anonymize<Iq5evhsehbpd1>;
    "CdpTreasury": Anonymize<Idca0dq7fhjm0o>;
    "CdpEngine": Anonymize<Ie9jiikmqiulaf>;
    "EmergencyShutdown": Anonymize<I8g0phju2b4tbe>;
    "Homa": Anonymize<I998teosh6nuof>;
    "XcmInterface": Anonymize<I4u5g4cp02m76k>;
    "Incentives": Anonymize<I7lq2hr3sbmjo3>;
    "NFT": Anonymize<Ie1614psavc5rq>;
    "AssetRegistry": Anonymize<Ib8gbpocdk2sk>;
    "LiquidCrowdloan": Anonymize<I3fns75mk0kk3i>;
    "EVM": Anonymize<Icakrsl7kmo1gj>;
    "EvmAccounts": Anonymize<I470djjc7lcqi6>;
    "StableAsset": Anonymize<I6rvhvkc4ff2pn>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "Sudo": Anonymize<Ib9det81devhcc>;
}>;
export type Iptqnsfeiu2og = AnonymousEnum<{
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    "ExtrinsicFailed": Anonymize<I4iak6d0gp76pq>;
    "CodeUpdated": undefined;
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I4iak6d0gp76pq = {
    "dispatch_error": Anonymize<Icpinkc2ap1trn>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type Icpinkc2ap1trn = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<Ie02h6rf0t8t88>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type Ie02h6rf0t8t88 = AnonymousEnum<{
    "System": Anonymize<I5o0s7c8q1cc9b>;
    "Timestamp": undefined;
    "Scheduler": Anonymize<If7oa8fprnilo5>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "TransactionPause": Anonymize<Id5u5g31v9a5pp>;
    "IdleScheduler": undefined;
    "Preimage": Anonymize<I4cfhml1prt4lu>;
    "Balances": Anonymize<Idj13i7adlomht>;
    "Tokens": Anonymize<Icc7o7ep6n36h2>;
    "Currencies": Anonymize<I9rb2cvuv7f67e>;
    "Vesting": Anonymize<Ifkcmnj410r9fh>;
    "TransactionPayment": Anonymize<I2r5h4ph0tuqil>;
    "Treasury": Anonymize<I7dodf8ccnun1b>;
    "Bounties": Anonymize<Ibfvjqqblobf53>;
    "Tips": Anonymize<I8c24qlovva8mi>;
    "ParachainInfo": undefined;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<Ifshe4abo1tjje>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "SessionManager": Anonymize<Ic5397f0589g09>;
    "XcmpQueue": Anonymize<I9aoshicggice1>;
    "PolkadotXcm": Anonymize<I4s86iefmp2rcu>;
    "CumulusXcm": undefined;
    "XTokens": Anonymize<I8g8tbk0anjali>;
    "UnknownTokens": Anonymize<I5llpdov40t5vu>;
    "OrmlXcm": Anonymize<Ifv4efjta13rhe>;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Authority": Anonymize<Ics46ed78iu8vn>;
    "GeneralCouncil": Anonymize<Icapevgbpfn5p9>;
    "GeneralCouncilMembership": Anonymize<Ie3flrv31mi7gh>;
    "FinancialCouncil": Anonymize<Icapevgbpfn5p9>;
    "FinancialCouncilMembership": Anonymize<Ie3flrv31mi7gh>;
    "HomaCouncil": Anonymize<Icapevgbpfn5p9>;
    "HomaCouncilMembership": Anonymize<Ie3flrv31mi7gh>;
    "TechnicalCommittee": Anonymize<Icapevgbpfn5p9>;
    "TechnicalCommitteeMembership": Anonymize<Ie3flrv31mi7gh>;
    "Democracy": Anonymize<I67neb7i10udig>;
    "AcalaOracle": Anonymize<Ibbhs1otrrm5i1>;
    "OperatorMembershipAcala": Anonymize<Ie3flrv31mi7gh>;
    "Auction": Anonymize<Ie2nrl4g6udtah>;
    "Rewards": Anonymize<Ibjqbbkcktcdb8>;
    "OrmlNFT": Anonymize<I48mtdch2mj91f>;
    "Parameters": undefined;
    "Prices": Anonymize<Iffb14vhuoadvg>;
    "Dex": Anonymize<Ib65do8qi1a3j7>;
    "DexOracle": Anonymize<I5pgtenpob7uh3>;
    "AggregatedDex": Anonymize<Iejp8ib9ffsv4r>;
    "Earning": Anonymize<I2ljc7qj86cqrh>;
    "AuctionManager": Anonymize<I19l0tk33gh2vk>;
    "Loans": Anonymize<I798980mec1184>;
    "Honzon": Anonymize<Iadikuqdcf1gnc>;
    "CdpTreasury": Anonymize<Idn84j650gl7lj>;
    "CdpEngine": Anonymize<I91tv9fg45eppp>;
    "EmergencyShutdown": Anonymize<I76oa2nnt30kn9>;
    "Homa": Anonymize<I81oeu7b0ngb8u>;
    "XcmInterface": Anonymize<Icfjhj3t396mgp>;
    "Incentives": Anonymize<Idpj0pdlgmtt73>;
    "NFT": Anonymize<Iaa37dno33rpvv>;
    "AssetRegistry": Anonymize<I1rmea75ec96a7>;
    "LiquidCrowdloan": undefined;
    "EVM": Anonymize<I8805lkusol2uq>;
    "EVMBridge": Anonymize<I4pdesg0akjphl>;
    "EvmAccounts": Anonymize<I1dvfd5t61ggsq>;
    "StableAsset": Anonymize<Ingbms6uh06j9>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "Sudo": Anonymize<Iaug04qjhbli00>;
}>;
export type Id5u5g31v9a5pp = AnonymousEnum<{
    "CannotPause": undefined;
    "InvalidCharacter": undefined;
}>;
export type I9rb2cvuv7f67e = AnonymousEnum<{
    "AmountIntoBalanceFailed": undefined;
    "BalanceTooLow": undefined;
    "Erc20InvalidOperation": undefined;
    "EvmAccountNotFound": undefined;
    "RealOriginNotFound": undefined;
    "DepositFailed": undefined;
}>;
export type I2r5h4ph0tuqil = AnonymousEnum<{
    "InvalidSwapPath": undefined;
    "InvalidBalance": undefined;
    "InvalidRate": undefined;
    "InvalidToken": undefined;
    "DexNotAvailable": undefined;
    "ChargeFeePoolAlreadyExisted": undefined;
}>;
export type Ifshe4abo1tjje = AnonymousEnum<{
    "MaxCandidatesExceeded": undefined;
    "BelowCandidatesMin": undefined;
    "StillLocked": undefined;
    "Unknown": undefined;
    "Permission": undefined;
    "AlreadyCandidate": undefined;
    "NotCandidate": undefined;
    "NotNonCandidate": undefined;
    "NothingToWithdraw": undefined;
    "RequireSessionKey": undefined;
    "AlreadyInvulnerable": undefined;
    "InvalidProof": undefined;
    "MaxInvulnerablesExceeded": undefined;
}>;
export type Ic5397f0589g09 = AnonymousEnum<{
    "InvalidSession": undefined;
    "InvalidDuration": undefined;
    "EstimateNextSessionFailed": undefined;
}>;
export type Ics46ed78iu8vn = AnonymousEnum<{
    "FailedToSchedule": undefined;
    "FailedToCancel": undefined;
    "FailedToFastTrack": undefined;
    "FailedToDelay": undefined;
    "CallNotAuthorized": undefined;
    "TriggerCallNotPermitted": undefined;
    "WrongCallWeightBound": undefined;
}>;
export type Ie2nrl4g6udtah = AnonymousEnum<{
    "AuctionNotExist": undefined;
    "AuctionNotStarted": undefined;
    "BidNotAccepted": undefined;
    "InvalidBidPrice": undefined;
    "NoAvailableAuctionId": undefined;
}>;
export type Ibjqbbkcktcdb8 = AnonymousEnum<{
    "PoolDoesNotExist": undefined;
    "ShareDoesNotExist": undefined;
    "CanSplitOnlyLessThanShare": undefined;
    "ShareBelowMinimal": undefined;
}>;
export type I48mtdch2mj91f = AnonymousEnum<{
    "NoAvailableClassId": undefined;
    "NoAvailableTokenId": undefined;
    "TokenNotFound": undefined;
    "ClassNotFound": undefined;
    "NoPermission": undefined;
    "CannotDestroyClass": undefined;
    "MaxMetadataExceeded": undefined;
}>;
export type Iffb14vhuoadvg = AnonymousEnum<{
    "AccessPriceFailed": undefined;
    "NoLockedPrice": undefined;
}>;
export type Ib65do8qi1a3j7 = AnonymousEnum<{
    "AlreadyEnabled": undefined;
    "MustBeEnabled": undefined;
    "MustBeProvisioning": undefined;
    "MustBeDisabled": undefined;
    "NotAllowedList": undefined;
    "InvalidContributionIncrement": undefined;
    "InvalidLiquidityIncrement": undefined;
    "InvalidCurrencyId": undefined;
    "InvalidTradingPathLength": undefined;
    "InsufficientTargetAmount": undefined;
    "ExcessiveSupplyAmount": undefined;
    "InsufficientLiquidity": undefined;
    "ZeroSupplyAmount": undefined;
    "ZeroTargetAmount": undefined;
    "UnacceptableShareIncrement": undefined;
    "UnacceptableLiquidityWithdrawn": undefined;
    "InvariantCheckFailed": undefined;
    "UnqualifiedProvision": undefined;
    "StillProvisioning": undefined;
    "AssetUnregistered": undefined;
    "InvalidTradingPath": undefined;
    "NotAllowedRefund": undefined;
    "CannotSwap": undefined;
}>;
export type I5pgtenpob7uh3 = AnonymousEnum<{
    "AveragePriceAlreadyEnabled": undefined;
    "AveragePriceMustBeEnabled": undefined;
    "InvalidPool": undefined;
    "InvalidCurrencyId": undefined;
    "IntervalIsZero": undefined;
}>;
export type Iejp8ib9ffsv4r = AnonymousEnum<{
    "CannotSwap": undefined;
    "InvalidPoolId": undefined;
    "InvalidTokenIndex": undefined;
    "InvalidSwapPath": undefined;
}>;
export type I2ljc7qj86cqrh = AnonymousEnum<{
    "BelowMinBondThreshold": undefined;
    "MaxUnlockChunksExceeded": undefined;
    "NotBonded": undefined;
    "NotAllowed": undefined;
}>;
export type I19l0tk33gh2vk = AnonymousEnum<{
    "AuctionNotExists": undefined;
    "InReverseStage": undefined;
    "InvalidFeedPrice": undefined;
    "MustAfterShutdown": undefined;
    "InvalidBidPrice": undefined;
    "InvalidAmount": undefined;
}>;
export type I798980mec1184 = AnonymousEnum<{
    "AmountConvertFailed": undefined;
}>;
export type Iadikuqdcf1gnc = AnonymousEnum<{
    "NoPermission": undefined;
    "AlreadyShutdown": undefined;
    "AuthorizationNotExists": undefined;
    "AlreadyAuthorized": undefined;
}>;
export type Idn84j650gl7lj = AnonymousEnum<{
    "CollateralNotEnough": undefined;
    "SurplusPoolNotEnough": undefined;
    "DebitPoolNotEnough": undefined;
    "CannotSwap": undefined;
    "NotDexShare": undefined;
}>;
export type I91tv9fg45eppp = AnonymousEnum<{
    "ExceedDebitValueHardCap": undefined;
    "BelowRequiredCollateralRatio": undefined;
    "BelowLiquidationRatio": undefined;
    "MustBeUnsafe": undefined;
    "MustBeSafe": undefined;
    "InvalidCollateralType": undefined;
    "RemainDebitValueTooSmall": undefined;
    "CollateralAmountBelowMinimum": undefined;
    "InvalidFeedPrice": undefined;
    "NoDebitValue": undefined;
    "AlreadyShutdown": undefined;
    "MustAfterShutdown": undefined;
    "CollateralNotEnough": undefined;
    "NotEnoughDebitDecrement": undefined;
    "ConvertDebitBalanceFailed": undefined;
    "LiquidationFailed": undefined;
    "TooManyLiquidationContracts": undefined;
    "CollateralContractNotFound": undefined;
    "InvalidRate": undefined;
}>;
export type I76oa2nnt30kn9 = AnonymousEnum<{
    "AlreadyShutdown": undefined;
    "MustAfterShutdown": undefined;
    "CanNotRefund": undefined;
    "ExistPotentialSurplus": undefined;
    "ExistUnhandledDebit": undefined;
}>;
export type I81oeu7b0ngb8u = AnonymousEnum<{
    "BelowMintThreshold": undefined;
    "BelowRedeemThreshold": undefined;
    "ExceededStakingCurrencySoftCap": undefined;
    "InsufficientUnclaimedRedemption": undefined;
    "OutdatedEraIndex": undefined;
    "FastMatchIsNotAllowed": undefined;
    "CannotCompletelyFastMatch": undefined;
    "InvalidRate": undefined;
    "InvalidLastEraBumpedBlock": undefined;
}>;
export type Icfjhj3t396mgp = AnonymousEnum<{
    "XcmFailed": undefined;
}>;
export type Idpj0pdlgmtt73 = AnonymousEnum<{
    "NotEnough": undefined;
    "InvalidCurrencyId": undefined;
    "InvalidPoolId": undefined;
    "InvalidRate": undefined;
}>;
export type Iaa37dno33rpvv = AnonymousEnum<{
    "ClassIdNotFound": undefined;
    "TokenIdNotFound": undefined;
    "NoPermission": undefined;
    "InvalidQuantity": undefined;
    "NonTransferable": undefined;
    "NonBurnable": undefined;
    "NonMintable": undefined;
    "CannotDestroyClass": undefined;
    "Immutable": undefined;
    "AttributesTooLarge": undefined;
    "IncorrectTokenId": undefined;
}>;
export type I1rmea75ec96a7 = AnonymousEnum<{
    "BadLocation": undefined;
    "LocationExisted": undefined;
    "AssetIdNotExists": undefined;
    "AssetIdExisted": undefined;
}>;
export type I8805lkusol2uq = AnonymousEnum<{
    "AddressNotMapped": undefined;
    "ContractNotFound": undefined;
    "NoPermission": undefined;
    "ContractDevelopmentNotEnabled": undefined;
    "ContractDevelopmentAlreadyEnabled": undefined;
    "ContractAlreadyPublished": undefined;
    "ContractExceedsMaxCodeSize": undefined;
    "ContractAlreadyExisted": undefined;
    "OutOfStorage": undefined;
    "ChargeFeeFailed": undefined;
    "CannotKillContract": undefined;
    "ReserveStorageFailed": undefined;
    "UnreserveStorageFailed": undefined;
    "ChargeStorageFailed": undefined;
    "InvalidDecimals": undefined;
    "StrictCallFailed": undefined;
    "NotEOA": undefined;
}>;
export type I4pdesg0akjphl = AnonymousEnum<{
    "ExecutionFail": undefined;
    "ExecutionRevert": undefined;
    "ExecutionFatal": undefined;
    "ExecutionError": undefined;
    "InvalidReturnValue": undefined;
}>;
export type I1dvfd5t61ggsq = AnonymousEnum<{
    "AccountIdHasMapped": undefined;
    "EthAddressHasMapped": undefined;
    "BadSignature": undefined;
    "InvalidSignature": undefined;
    "NonZeroRefCount": undefined;
}>;
export type Ingbms6uh06j9 = AnonymousEnum<{
    "InconsistentStorage": undefined;
    "InvalidPoolAsset": undefined;
    "ArgumentsMismatch": undefined;
    "ArgumentsError": undefined;
    "PoolNotFound": undefined;
    "Math": undefined;
    "InvalidPoolValue": undefined;
    "MintUnderMin": undefined;
    "SwapUnderMin": undefined;
    "RedeemUnderMin": undefined;
    "RedeemOverMax": undefined;
}>;
export type I9n9m2rpvl544u = AnonymousEnum<{
    "Scheduled": Anonymize<I5n4sebgkfr760>;
    "Canceled": Anonymize<I5n4sebgkfr760>;
    "Dispatched": Anonymize<Iijbt89g7a8bm>;
    "RetrySet": Anonymize<Ia3c82eadg79bj>;
    "RetryCancelled": Anonymize<Ienusoeb625ftq>;
    "CallUnavailable": Anonymize<Ienusoeb625ftq>;
    "PeriodicFailed": Anonymize<Ienusoeb625ftq>;
    "RetryFailed": Anonymize<Ienusoeb625ftq>;
    "PermanentlyOverweight": Anonymize<Ienusoeb625ftq>;
}>;
export type Iijbt89g7a8bm = {
    "task": Anonymize<I9jd27rnpm8ttv>;
    "id"?: Anonymize<I4s6vifaf8k998>;
    "result": Anonymize<I69ohckvreqpd>;
};
export type I69ohckvreqpd = ResultPayload<undefined, Anonymize<Icpinkc2ap1trn>>;
export type I1l8qor574vnqn = AnonymousEnum<{
    "BatchInterrupted": Anonymize<I25bljl8ut97eo>;
    "BatchCompleted": undefined;
    "BatchCompletedWithErrors": undefined;
    "ItemCompleted": undefined;
    "ItemFailed": Anonymize<I6mjba3f9cfcrp>;
    "DispatchedAs": Anonymize<Ic65reh6p4slbe>;
}>;
export type I25bljl8ut97eo = {
    "index": number;
    "error": Anonymize<Icpinkc2ap1trn>;
};
export type I6mjba3f9cfcrp = {
    "error": Anonymize<Icpinkc2ap1trn>;
};
export type Ic65reh6p4slbe = {
    "result": Anonymize<I69ohckvreqpd>;
};
export type I9571gp57h5edr = AnonymousEnum<{
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    "MultisigExecuted": Anonymize<Idur6qso079kn2>;
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type Idur6qso079kn2 = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<I69ohckvreqpd>;
};
export type I20dmohooe7pf6 = AnonymousEnum<{
    "ProxyExecuted": Anonymize<Ic65reh6p4slbe>;
    "PureCreated": Anonymize<I62vuqhqnrh3ct>;
    "Announced": Anonymize<I2ur0oeqg495j8>;
    "ProxyAdded": Anonymize<I5ra2f4tk0pbpo>;
    "ProxyRemoved": Anonymize<I5ra2f4tk0pbpo>;
}>;
export type I62vuqhqnrh3ct = {
    "pure": SS58String;
    "who": SS58String;
    "proxy_type": Anonymize<Ife6j97dnan3f4>;
    "disambiguation_index": number;
};
export type Ife6j97dnan3f4 = AnonymousEnum<{
    "Any": undefined;
    "CancelProxy": undefined;
    "Governance": undefined;
    "Auction": undefined;
    "Swap": undefined;
    "Loan": undefined;
    "DexLiquidity": undefined;
    "StableAssetSwap": undefined;
    "StableAssetLiquidity": undefined;
    "Homa": undefined;
}>;
export type I5ra2f4tk0pbpo = {
    "delegator": SS58String;
    "delegatee": SS58String;
    "proxy_type": Anonymize<Ife6j97dnan3f4>;
    "delay": number;
};
export type I6njdqjbmmv2at = AnonymousEnum<{
    "TransactionPaused": Anonymize<I193fovq1blcqu>;
    "TransactionUnpaused": Anonymize<I193fovq1blcqu>;
    "EvmPrecompilePaused": Anonymize<Itmchvgqfl28g>;
    "EvmPrecompileUnpaused": Anonymize<Itmchvgqfl28g>;
}>;
export type I4iprt7cq9tf25 = AnonymousEnum<{
    "TaskDispatched": Anonymize<Ivfk29ifghh65>;
    "TaskAdded": Anonymize<Ieb7f8831td64a>;
}>;
export type Ivfk29ifghh65 = {
    "task_id": number;
    "result": Anonymize<I69ohckvreqpd>;
};
export type Ieb7f8831td64a = {
    "task_id": number;
    "task": Anonymize<Iafhl3qnbl655q>;
};
export type Iafhl3qnbl655q = AnonymousEnum<{
    "EvmTask": Anonymize<Ibgqb2esvc0ub3>;
}>;
export type Ibgqb2esvc0ub3 = AnonymousEnum<{
    "Schedule": Anonymize<I3aa6ma59qpd01>;
    "Remove": Anonymize<I5cil60eqtva6k>;
}>;
export type I3aa6ma59qpd01 = {
    "from": FixedSizeBinary<20>;
    "target": FixedSizeBinary<20>;
    "input": Binary;
    "value": bigint;
    "gas_limit": bigint;
    "storage_limit": number;
};
export type I5cil60eqtva6k = {
    "caller": FixedSizeBinary<20>;
    "contract": FixedSizeBinary<20>;
    "maintainer": FixedSizeBinary<20>;
};
export type I6kqr550eg9nvg = AnonymousEnum<{
    "Endowed": Anonymize<Iesfs62l0emo0u>;
    "DustLost": Anonymize<Iesfs62l0emo0u>;
    "Transfer": Anonymize<I8l5kvre4urt6i>;
    "Reserved": Anonymize<Iesfs62l0emo0u>;
    "Unreserved": Anonymize<Iesfs62l0emo0u>;
    "ReserveRepatriated": Anonymize<I1e4oietgoviv9>;
    "BalanceSet": Anonymize<I31t3g4hk9vbij>;
    "TotalIssuanceSet": Anonymize<If82ef6cjv8bf6>;
    "Withdrawn": Anonymize<Iesfs62l0emo0u>;
    "Slashed": Anonymize<Ief502srmm35a5>;
    "Deposited": Anonymize<Iesfs62l0emo0u>;
    "LockSet": Anonymize<Icmj165ef4r8q7>;
    "LockRemoved": Anonymize<I5audd19ntmm34>;
    "Locked": Anonymize<Iesfs62l0emo0u>;
    "Unlocked": Anonymize<Iesfs62l0emo0u>;
    "Issued": Anonymize<If82ef6cjv8bf6>;
    "Rescinded": Anonymize<If82ef6cjv8bf6>;
}>;
export type Iesfs62l0emo0u = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "who": SS58String;
    "amount": bigint;
};
export type I75otreomvjlo4 = AnonymousEnum<{
    "Token": Anonymize<I96spdclkbvofa>;
    "DexShare": Anonymize<If5treqv3i7qjs>;
    "Erc20": FixedSizeBinary<20>;
    "StableAssetPoolToken": number;
    "LiquidCrowdloan": number;
    "ForeignAsset": number;
}>;
export type I96spdclkbvofa = AnonymousEnum<{
    "ACA": undefined;
    "AUSD": undefined;
    "DOT": undefined;
    "LDOT": undefined;
    "TAP": undefined;
    "KAR": undefined;
    "KUSD": undefined;
    "KSM": undefined;
    "LKSM": undefined;
    "TAI": undefined;
    "BNC": undefined;
    "VSKSM": undefined;
    "PHA": undefined;
    "KINT": undefined;
    "KBTC": undefined;
}>;
export type If5treqv3i7qjs = FixedSizeArray<2, Anonymize<Idgrjgq5t8b4lp>>;
export type Idgrjgq5t8b4lp = AnonymousEnum<{
    "Token": Anonymize<I96spdclkbvofa>;
    "Erc20": FixedSizeBinary<20>;
    "LiquidCrowdloan": number;
    "ForeignAsset": number;
    "StableAssetPoolToken": number;
}>;
export type I8l5kvre4urt6i = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
};
export type I1e4oietgoviv9 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "from": SS58String;
    "to": SS58String;
    "amount": bigint;
    "status": BalanceStatus;
};
export type I31t3g4hk9vbij = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "who": SS58String;
    "free": bigint;
    "reserved": bigint;
};
export type If82ef6cjv8bf6 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
};
export type Ief502srmm35a5 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "who": SS58String;
    "free_amount": bigint;
    "reserved_amount": bigint;
};
export type Icmj165ef4r8q7 = {
    "lock_id": FixedSizeBinary<8>;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "who": SS58String;
    "amount": bigint;
};
export type I5audd19ntmm34 = {
    "lock_id": FixedSizeBinary<8>;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "who": SS58String;
};
export type I3tjtdihk3p16t = AnonymousEnum<{
    "Transferred": Anonymize<I8l5kvre4urt6i>;
    "Withdrawn": Anonymize<Iesfs62l0emo0u>;
    "Deposited": Anonymize<Iesfs62l0emo0u>;
    "DustSwept": Anonymize<Iesfs62l0emo0u>;
}>;
export type I6uncvhp13qtk8 = AnonymousEnum<{
    "ChargeFeePoolEnabled": Anonymize<I56bf0an7gbtfd>;
    "ChargeFeePoolSwapped": Anonymize<If2i2d0sfbq0jg>;
    "ChargeFeePoolDisabled": Anonymize<Ibgp85oael1km5>;
    "TransactionFeePaid": Anonymize<Iatcmglh3trnbe>;
}>;
export type I56bf0an7gbtfd = {
    "sub_account": SS58String;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "exchange_rate": bigint;
    "pool_size": bigint;
    "swap_threshold": bigint;
};
export type If2i2d0sfbq0jg = {
    "sub_account": SS58String;
    "supply_currency_id": Anonymize<I75otreomvjlo4>;
    "old_exchange_rate": bigint;
    "swap_exchange_rate": bigint;
    "new_exchange_rate": bigint;
    "new_pool_size": bigint;
};
export type Ibgp85oael1km5 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "foreign_amount": bigint;
    "native_amount": bigint;
};
export type Iatcmglh3trnbe = {
    "who": SS58String;
    "actual_fee": bigint;
    "actual_tip": bigint;
    "actual_surplus": bigint;
};
export type I9v1ragmhic15e = AnonymousEnum<{
    "NewInvulnerables": Anonymize<I71p4hrp3dn9lm>;
    "NewDesiredCandidates": Anonymize<I955v10i1smj2g>;
    "NewCandidacyBond": Anonymize<I9jl00225t93sl>;
    "CandidateAdded": Anonymize<Ic6up6jb6qdvvj>;
    "CandidateRemoved": Anonymize<I4cbvqmqadhrea>;
}>;
export type I71p4hrp3dn9lm = {
    "new_invulnerables": Anonymize<Ia2lhg7l2hilo3>;
};
export type I955v10i1smj2g = {
    "new_desired_candidates": number;
};
export type I9jl00225t93sl = {
    "new_candidacy_bond": bigint;
};
export type Ic6up6jb6qdvvj = {
    "who": SS58String;
    "bond": bigint;
};
export type I7pr3d7cllohhc = AnonymousEnum<{
    "ScheduledSessionDuration": Anonymize<I1k25afngad6j6>;
}>;
export type I1k25afngad6j6 = {
    "block_number": number;
    "session_index": number;
    "session_duration": number;
};
export type Id5sdd4cjck1sb = AnonymousEnum<{
    "Dispatched": Anonymize<Ic65reh6p4slbe>;
    "Scheduled": Anonymize<Ie57lonvscburs>;
    "FastTracked": Anonymize<I35hd3t2u29eq9>;
    "Delayed": Anonymize<I35hd3t2u29eq9>;
    "Cancelled": Anonymize<Ie57lonvscburs>;
    "AuthorizedCall": Anonymize<I7l6ub3smnjto4>;
    "RemovedAuthorizedCall": Anonymize<I1jm8m1rh9e20v>;
    "TriggeredCallBy": Anonymize<I84g38rnlg29op>;
}>;
export type Ie57lonvscburs = {
    "origin": Anonymize<I4t1a1tfkqf9nh>;
    "index": number;
};
export type I4t1a1tfkqf9nh = AnonymousEnum<{
    "system": DispatchRawOrigin;
    "PolkadotXcm": XcmPalletOrigin;
    "CumulusXcm": Anonymize<I3in0d0lb61qi8>;
    "Authority": Anonymize<I1ljvmv776je7b>;
    "GeneralCouncil": Anonymize<I637q9f60cmh3e>;
    "FinancialCouncil": Anonymize<I637q9f60cmh3e>;
    "HomaCouncil": Anonymize<I637q9f60cmh3e>;
    "TechnicalCommittee": Anonymize<I637q9f60cmh3e>;
    "Void": undefined;
}>;
export type I1ljvmv776je7b = {
    "delay": number;
    "origin": Anonymize<I4t1a1tfkqf9nh>;
};
export type I35hd3t2u29eq9 = {
    "origin": Anonymize<I4t1a1tfkqf9nh>;
    "index": number;
    "when": number;
};
export type I7l6ub3smnjto4 = {
    "hash": FixedSizeBinary<32>;
    "caller"?: Anonymize<Ihfphjolmsqq1>;
};
export type I84g38rnlg29op = {
    "hash": FixedSizeBinary<32>;
    "caller": SS58String;
};
export type I3nul9262f1lhh = AnonymousEnum<{
    "Proposed": Anonymize<Ift6f10887nk72>;
    "Voted": Anonymize<I7qc53b1tvqjg2>;
    "Approved": Anonymize<I2ev73t79f46tb>;
    "Disapproved": Anonymize<I2ev73t79f46tb>;
    "Executed": Anonymize<I5ufdtfmbt08vq>;
    "MemberExecuted": Anonymize<I5ufdtfmbt08vq>;
    "Closed": Anonymize<Iak7fhrgb9jnnq>;
}>;
export type I5ufdtfmbt08vq = {
    "proposal_hash": FixedSizeBinary<32>;
    "result": Anonymize<I69ohckvreqpd>;
};
export type I281qrcj3lcctu = AnonymousEnum<{
    "NewFeedData": Anonymize<Iduq4ed8skcjjm>;
}>;
export type Iduq4ed8skcjjm = {
    "sender": SS58String;
    "values": Anonymize<Ia9eqjc3anbc6q>;
};
export type Ia9eqjc3anbc6q = Array<Anonymize<I1n3k9l483qn44>>;
export type I1n3k9l483qn44 = [Anonymize<I75otreomvjlo4>, bigint];
export type I8t8c5g5mb07dj = AnonymousEnum<{
    "Bid": Anonymize<I9mlal0k97k542>;
}>;
export type I9mlal0k97k542 = {
    "auction_id": number;
    "bidder": SS58String;
    "amount": bigint;
};
export type Ic2evjd2h9llvi = AnonymousEnum<{
    "Updated": Anonymize<I1fll11jqhjobd>;
}>;
export type I1fll11jqhjobd = {
    "key_value": Anonymize<I5a2miu0ssfugo>;
};
export type I5a2miu0ssfugo = AnonymousEnum<{
    "Earning": Anonymize<Id7h9g152osqm5>;
}>;
export type Id7h9g152osqm5 = AnonymousEnum<{
    "InstantUnstakeFee": Anonymize<Idqsmalvqe2q98>;
}>;
export type Idqsmalvqe2q98 = FixedSizeArray<1, Anonymize<I4arjljr6dpflb>>;
export type I7p9r25qd9bq9b = AnonymousEnum<{
    "LockPrice": Anonymize<If7h819bbagi7e>;
    "UnlockPrice": Anonymize<I98i83boqc476c>;
}>;
export type If7h819bbagi7e = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "locked_price": bigint;
};
export type I98i83boqc476c = {
    "currency_id": Anonymize<I75otreomvjlo4>;
};
export type I7n0i3i3p4vr8c = AnonymousEnum<{
    "AddProvision": Anonymize<I470t9q5rbko1v>;
    "AddLiquidity": Anonymize<Ichdo0c08k9mdo>;
    "RemoveLiquidity": Anonymize<Ieb8d9j6dd5mra>;
    "Swap": Anonymize<I2ahpksvlo9d9c>;
    "EnableTradingPair": Anonymize<Iadl3hi6a95mjv>;
    "ListProvisioning": Anonymize<Iadl3hi6a95mjv>;
    "DisableTradingPair": Anonymize<Iadl3hi6a95mjv>;
    "ProvisioningToEnabled": Anonymize<I8sfstv2v3gf30>;
    "RefundProvision": Anonymize<I470t9q5rbko1v>;
    "ProvisioningAborted": Anonymize<I4kd1gd18imvib>;
}>;
export type I470t9q5rbko1v = {
    "who": SS58String;
    "currency_0": Anonymize<I75otreomvjlo4>;
    "contribution_0": bigint;
    "currency_1": Anonymize<I75otreomvjlo4>;
    "contribution_1": bigint;
};
export type Ichdo0c08k9mdo = {
    "who": SS58String;
    "currency_0": Anonymize<I75otreomvjlo4>;
    "pool_0": bigint;
    "currency_1": Anonymize<I75otreomvjlo4>;
    "pool_1": bigint;
    "share_increment": bigint;
};
export type Ieb8d9j6dd5mra = {
    "who": SS58String;
    "currency_0": Anonymize<I75otreomvjlo4>;
    "pool_0": bigint;
    "currency_1": Anonymize<I75otreomvjlo4>;
    "pool_1": bigint;
    "share_decrement": bigint;
};
export type I2ahpksvlo9d9c = {
    "trader": SS58String;
    "path": Anonymize<I58e1c2iddvge>;
    "liquidity_changes": Anonymize<Iafqnechp3omqg>;
};
export type I58e1c2iddvge = Array<Anonymize<I75otreomvjlo4>>;
export type Iadl3hi6a95mjv = {
    "trading_pair": Anonymize<I31j35h89naqah>;
};
export type I31j35h89naqah = FixedSizeArray<2, Anonymize<I75otreomvjlo4>>;
export type I8sfstv2v3gf30 = {
    "trading_pair": Anonymize<I31j35h89naqah>;
    "pool_0": bigint;
    "pool_1": bigint;
    "share_amount": bigint;
};
export type I4kd1gd18imvib = {
    "trading_pair": Anonymize<I31j35h89naqah>;
    "accumulated_provision_0": bigint;
    "accumulated_provision_1": bigint;
};
export type I3i2n7jl2jtltv = AnonymousEnum<{
    "Bonded": Anonymize<Id5fm4p8lj5qgi>;
    "Unbonded": Anonymize<Id5fm4p8lj5qgi>;
    "InstantUnbonded": Anonymize<I7t7f15a41rr75>;
    "Rebonded": Anonymize<Id5fm4p8lj5qgi>;
    "Withdrawn": Anonymize<Id5fm4p8lj5qgi>;
}>;
export type I7t7f15a41rr75 = {
    "who": SS58String;
    "amount": bigint;
    "fee": bigint;
};
export type Id6iha5fcetvfg = AnonymousEnum<{
    "NewCollateralAuction": Anonymize<Ia8o2edr1f864s>;
    "CancelAuction": Anonymize<If6710ddu1n5c0>;
    "CollateralAuctionDealt": Anonymize<I4rcb77auq9un9>;
    "DEXTakeCollateralAuction": Anonymize<Icpdatq862viq1>;
    "CollateralAuctionAborted": Anonymize<I9ov9qusrr22m7>;
}>;
export type Ia8o2edr1f864s = {
    "auction_id": number;
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "collateral_amount": bigint;
    "target_bid_price": bigint;
};
export type If6710ddu1n5c0 = {
    "auction_id": number;
};
export type I4rcb77auq9un9 = {
    "auction_id": number;
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "collateral_amount": bigint;
    "winner": SS58String;
    "payment_amount": bigint;
};
export type Icpdatq862viq1 = {
    "auction_id": number;
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "collateral_amount": bigint;
    "supply_collateral_amount": bigint;
    "target_stable_amount": bigint;
};
export type I9ov9qusrr22m7 = {
    "auction_id": number;
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "collateral_amount": bigint;
    "target_stable_amount": bigint;
    "refund_recipient": SS58String;
};
export type Iamndureq493gd = AnonymousEnum<{
    "PositionUpdated": Anonymize<I4sv4h17bn2s7l>;
    "ConfiscateCollateralAndDebit": Anonymize<Iel10h7jkamd36>;
    "TransferLoan": Anonymize<I256nf8mbq2ji2>;
}>;
export type I4sv4h17bn2s7l = {
    "owner": SS58String;
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "collateral_adjustment": bigint;
    "debit_adjustment": bigint;
};
export type Iel10h7jkamd36 = {
    "owner": SS58String;
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "confiscated_collateral_amount": bigint;
    "deduct_debit_amount": bigint;
};
export type I256nf8mbq2ji2 = {
    "from": SS58String;
    "to": SS58String;
    "currency_id": Anonymize<I75otreomvjlo4>;
};
export type Iq5evhsehbpd1 = AnonymousEnum<{
    "Authorization": Anonymize<Icld8n4p4164so>;
    "UnAuthorization": Anonymize<Icld8n4p4164so>;
    "UnAuthorizationAll": Anonymize<Idretbt0ads77s>;
    "TransferDebit": Anonymize<Iec98km9p5pief>;
}>;
export type Icld8n4p4164so = {
    "authorizer": SS58String;
    "authorizee": SS58String;
    "collateral_type": Anonymize<I75otreomvjlo4>;
};
export type Idretbt0ads77s = {
    "authorizer": SS58String;
};
export type Iec98km9p5pief = {
    "from_currency": Anonymize<I75otreomvjlo4>;
    "to_currency": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
};
export type Idca0dq7fhjm0o = AnonymousEnum<{
    "ExpectedCollateralAuctionSizeUpdated": Anonymize<I3jii2muob6ghq>;
    "DebitOffsetBufferUpdated": Anonymize<I3qt1hgg4djhgb>;
}>;
export type I3jii2muob6ghq = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "new_size": bigint;
};
export type Ie9jiikmqiulaf = AnonymousEnum<{
    "LiquidateUnsafeCDP": Anonymize<Iapna56s3m0ifu>;
    "SettleCDPInDebit": Anonymize<I2m484u5grs9t6>;
    "CloseCDPInDebitByDEX": Anonymize<I1isi013g6qer3>;
    "InterestRatePerSecUpdated": Anonymize<I1tsoaordg68dn>;
    "LiquidationRatioUpdated": Anonymize<Ia75kq0pe5tv9f>;
    "LiquidationPenaltyUpdated": Anonymize<Iaukv957beuu35>;
    "RequiredCollateralRatioUpdated": Anonymize<I4tudb0ce02mk6>;
    "MaximumTotalDebitValueUpdated": Anonymize<I736uosa90ai8o>;
    "LiquidationContractRegistered": Anonymize<Itmchvgqfl28g>;
    "LiquidationContractDeregistered": Anonymize<Itmchvgqfl28g>;
}>;
export type Iapna56s3m0ifu = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "owner": SS58String;
    "collateral_amount": bigint;
    "bad_debt_value": bigint;
    "target_amount": bigint;
};
export type I2m484u5grs9t6 = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "owner": SS58String;
};
export type I1isi013g6qer3 = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "owner": SS58String;
    "sold_collateral_amount": bigint;
    "refund_collateral_amount": bigint;
    "debit_value": bigint;
};
export type I1tsoaordg68dn = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "new_interest_rate_per_sec"?: Anonymize<I35p85j063s0il>;
};
export type Ia75kq0pe5tv9f = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "new_liquidation_ratio"?: Anonymize<I35p85j063s0il>;
};
export type Iaukv957beuu35 = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "new_liquidation_penalty"?: Anonymize<I35p85j063s0il>;
};
export type I4tudb0ce02mk6 = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "new_required_collateral_ratio"?: Anonymize<I35p85j063s0il>;
};
export type I736uosa90ai8o = {
    "collateral_type": Anonymize<I75otreomvjlo4>;
    "new_total_debit_value": bigint;
};
export type I8g0phju2b4tbe = AnonymousEnum<{
    "Shutdown": Anonymize<Ibe6clpska8jpe>;
    "OpenRefund": Anonymize<Ibe6clpska8jpe>;
    "Refund": Anonymize<If4cacupn5dljo>;
}>;
export type Ibe6clpska8jpe = {
    "block_number": number;
};
export type If4cacupn5dljo = {
    "who": SS58String;
    "stable_coin_amount": bigint;
    "refund_list": Anonymize<Ia9eqjc3anbc6q>;
};
export type I998teosh6nuof = AnonymousEnum<{
    "Minted": Anonymize<I8dsi8mk6ckogi>;
    "RequestedRedeem": Anonymize<I655sh5mkv30oh>;
    "RedeemRequestCancelled": Anonymize<If7vs929oo0tq1>;
    "RedeemedByFastMatch": Anonymize<Icninh3otlaqnf>;
    "RedeemedByUnbond": Anonymize<I9bs07r2l4sohg>;
    "WithdrawRedemption": Anonymize<I2jbsbaa0plh1m>;
    "CurrentEraBumped": Anonymize<Ibjhdvo42j8ooc>;
    "CurrentEraReset": Anonymize<Ibjhdvo42j8ooc>;
    "LedgerBondedReset": Anonymize<Ib2h8tf2j486ge>;
    "LedgerUnlockingReset": Anonymize<I24o93rg071u0r>;
    "SoftBondedCapPerSubAccountUpdated": Anonymize<I9f1ag3dummf1d>;
    "EstimatedRewardRatePerEraUpdated": Anonymize<I7mbq68faol6f0>;
    "CommissionRateUpdated": Anonymize<Ibsr7s7f6m5e3v>;
    "FastMatchFeeRateUpdated": Anonymize<I7k8ovj1bnotd8>;
    "LastEraBumpedBlockUpdated": Anonymize<I8tir9pdto2iig>;
    "BumpEraFrequencyUpdated": Anonymize<Iq38juhlnqpti>;
}>;
export type I8dsi8mk6ckogi = {
    "minter": SS58String;
    "staking_currency_amount": bigint;
    "liquid_amount_received": bigint;
    "liquid_amount_added_to_void": bigint;
};
export type I655sh5mkv30oh = {
    "redeemer": SS58String;
    "liquid_amount": bigint;
    "allow_fast_match": boolean;
};
export type If7vs929oo0tq1 = {
    "redeemer": SS58String;
    "cancelled_liquid_amount": bigint;
};
export type Icninh3otlaqnf = {
    "redeemer": SS58String;
    "matched_liquid_amount": bigint;
    "fee_in_liquid": bigint;
    "redeemed_staking_amount": bigint;
};
export type I9bs07r2l4sohg = {
    "redeemer": SS58String;
    "era_index_when_unbond": number;
    "liquid_amount": bigint;
    "unbonding_staking_amount": bigint;
};
export type I2jbsbaa0plh1m = {
    "redeemer": SS58String;
    "redemption_amount": bigint;
};
export type Ibjhdvo42j8ooc = {
    "new_era_index": number;
};
export type Ib2h8tf2j486ge = {
    "sub_account_index": number;
    "new_bonded_amount": bigint;
};
export type I24o93rg071u0r = {
    "sub_account_index": number;
    "new_unlocking": Anonymize<I9nc4v1upo2c8e>;
};
export type I9f1ag3dummf1d = {
    "cap_amount": bigint;
};
export type I7mbq68faol6f0 = {
    "reward_rate": bigint;
};
export type Ibsr7s7f6m5e3v = {
    "commission_rate": bigint;
};
export type I7k8ovj1bnotd8 = {
    "fast_match_fee_rate": bigint;
};
export type I8tir9pdto2iig = {
    "last_era_bumped_block": number;
};
export type Iq38juhlnqpti = {
    "frequency": number;
};
export type I4u5g4cp02m76k = AnonymousEnum<{
    "XcmDestWeightUpdated": Anonymize<Idvipclfc4pej8>;
    "XcmFeeUpdated": Anonymize<I9gjj9chf4ekgk>;
}>;
export type Idvipclfc4pej8 = {
    "xcm_operation": Anonymize<Ieert180gaet6h>;
    "new_xcm_dest_weight": Anonymize<I4q39t5hn830vp>;
};
export type Ieert180gaet6h = AnonymousEnum<{
    "XtokensTransfer": undefined;
    "HomaWithdrawUnbonded": undefined;
    "HomaBondExtra": undefined;
    "HomaUnbond": undefined;
    "ParachainFee": Anonymize<I4c0s5cioidn76>;
    "ProxyReserveTransferAssets": undefined;
}>;
export type I9gjj9chf4ekgk = {
    "xcm_operation": Anonymize<Ieert180gaet6h>;
    "new_xcm_dest_weight": bigint;
};
export type I7lq2hr3sbmjo3 = AnonymousEnum<{
    "DepositDexShare": Anonymize<Ic7o4tlgoouvkj>;
    "WithdrawDexShare": Anonymize<I5qobcllfklbjm>;
    "ClaimRewards": Anonymize<Iatnr3londg4j9>;
    "IncentiveRewardAmountUpdated": Anonymize<I3imtacjnsgh1r>;
    "ClaimRewardDeductionRateUpdated": Anonymize<I8002qd532bgbp>;
    "ClaimRewardDeductionCurrencyUpdated": Anonymize<Ices4nh6e7so3t>;
}>;
export type Ic7o4tlgoouvkj = {
    "who": SS58String;
    "dex_share_type": Anonymize<I75otreomvjlo4>;
    "deposit": bigint;
};
export type I5qobcllfklbjm = {
    "who": SS58String;
    "dex_share_type": Anonymize<I75otreomvjlo4>;
    "withdraw": bigint;
};
export type Iatnr3londg4j9 = {
    "who": SS58String;
    "pool": Anonymize<I8v76mqrb0l78g>;
    "reward_currency_id": Anonymize<I75otreomvjlo4>;
    "actual_amount": bigint;
    "deduction_amount": bigint;
};
export type I8v76mqrb0l78g = AnonymousEnum<{
    "Loans": Anonymize<I75otreomvjlo4>;
    "Dex": Anonymize<I75otreomvjlo4>;
    "Earning": Anonymize<I75otreomvjlo4>;
}>;
export type I3imtacjnsgh1r = {
    "pool": Anonymize<I8v76mqrb0l78g>;
    "reward_currency_id": Anonymize<I75otreomvjlo4>;
    "reward_amount_per_period": bigint;
};
export type I8002qd532bgbp = {
    "pool": Anonymize<I8v76mqrb0l78g>;
    "deduction_rate": bigint;
};
export type Ices4nh6e7so3t = {
    "pool": Anonymize<I8v76mqrb0l78g>;
    "currency"?: Anonymize<Ifhbdeq666mc65>;
};
export type Ifhbdeq666mc65 = (Anonymize<I75otreomvjlo4>) | undefined;
export type Ie1614psavc5rq = AnonymousEnum<{
    "CreatedClass": Anonymize<I7vtgav0u6d8sk>;
    "MintedToken": Anonymize<Ictprchp8m3ig7>;
    "TransferredToken": Anonymize<I7cm08des6caup>;
    "BurnedToken": Anonymize<Ifohblgil17v5c>;
    "BurnedTokenWithRemark": Anonymize<I18u7irfkprqtc>;
    "DestroyedClass": Anonymize<I7vtgav0u6d8sk>;
}>;
export type I7vtgav0u6d8sk = {
    "owner": SS58String;
    "class_id": number;
};
export type Ictprchp8m3ig7 = {
    "from": SS58String;
    "to": SS58String;
    "class_id": number;
    "quantity": number;
};
export type I7cm08des6caup = {
    "from": SS58String;
    "to": SS58String;
    "class_id": number;
    "token_id": bigint;
};
export type Ifohblgil17v5c = {
    "owner": SS58String;
    "class_id": number;
    "token_id": bigint;
};
export type I18u7irfkprqtc = {
    "owner": SS58String;
    "class_id": number;
    "token_id": bigint;
    "remark_hash": FixedSizeBinary<32>;
};
export type Ib8gbpocdk2sk = AnonymousEnum<{
    "ForeignAssetRegistered": Anonymize<Iedmlp2ihnd9ih>;
    "ForeignAssetUpdated": Anonymize<Iedmlp2ihnd9ih>;
    "AssetRegistered": Anonymize<I7pi88vnts2427>;
    "AssetUpdated": Anonymize<I7pi88vnts2427>;
}>;
export type Iedmlp2ihnd9ih = {
    "asset_id": number;
    "asset_address": Anonymize<I4c0s5cioidn76>;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type I7pi88vnts2427 = {
    "asset_id": Anonymize<Ifkabnqvg455ag>;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type Ifkabnqvg455ag = AnonymousEnum<{
    "Erc20": FixedSizeBinary<20>;
    "StableAssetId": number;
    "ForeignAssetId": number;
    "NativeAssetId": Anonymize<I75otreomvjlo4>;
}>;
export type I3fns75mk0kk3i = AnonymousEnum<{
    "Redeemed": Anonymize<If82ef6cjv8bf6>;
    "TransferFromCrowdloanVaultRequested": Anonymize<I3qt1hgg4djhgb>;
    "RedeemCurrencyIdUpdated": Anonymize<I98i83boqc476c>;
}>;
export type Icakrsl7kmo1gj = AnonymousEnum<{
    "Created": Anonymize<Ia8flqh0ukcd6d>;
    "CreatedFailed": Anonymize<I2sof9mrmjhllk>;
    "Executed": Anonymize<Ia8flqh0ukcd6d>;
    "ExecutedFailed": Anonymize<Ifi3pfbdu7hk3f>;
    "TransferredMaintainer": Anonymize<I2b1121ufu9vsp>;
    "ContractDevelopmentEnabled": Anonymize<I4cbvqmqadhrea>;
    "ContractDevelopmentDisabled": Anonymize<I4cbvqmqadhrea>;
    "ContractPublished": Anonymize<Ics51ctc9oasbt>;
    "ContractSetCode": Anonymize<Ics51ctc9oasbt>;
    "ContractSelfdestructed": Anonymize<Ics51ctc9oasbt>;
}>;
export type Ia8flqh0ukcd6d = {
    "from": FixedSizeBinary<20>;
    "contract": FixedSizeBinary<20>;
    "logs": Anonymize<Ids7ng2qsv7snu>;
    "used_gas": bigint;
    "used_storage": number;
};
export type I2sof9mrmjhllk = {
    "from": FixedSizeBinary<20>;
    "contract": FixedSizeBinary<20>;
    "exit_reason": Anonymize<Iag9iovb9j5ijo>;
    "logs": Anonymize<Ids7ng2qsv7snu>;
    "used_gas": bigint;
    "used_storage": number;
};
export type Ifi3pfbdu7hk3f = {
    "from": FixedSizeBinary<20>;
    "contract": FixedSizeBinary<20>;
    "exit_reason": Anonymize<Iag9iovb9j5ijo>;
    "output": Binary;
    "logs": Anonymize<Ids7ng2qsv7snu>;
    "used_gas": bigint;
    "used_storage": number;
};
export type I2b1121ufu9vsp = {
    "contract": FixedSizeBinary<20>;
    "new_maintainer": FixedSizeBinary<20>;
};
export type Ics51ctc9oasbt = {
    "contract": FixedSizeBinary<20>;
};
export type I470djjc7lcqi6 = AnonymousEnum<{
    "ClaimAccount": Anonymize<I55ji04hkqqfb>;
}>;
export type I55ji04hkqqfb = {
    "account_id": SS58String;
    "evm_address": FixedSizeBinary<20>;
};
export type I6rvhvkc4ff2pn = AnonymousEnum<{
    "CreatePool": Anonymize<I54dj4621btbog>;
    "Minted": Anonymize<I8eeivtdimg5sg>;
    "TokenSwapped": Anonymize<Ia53lkiao1udji>;
    "RedeemedProportion": Anonymize<Ie26sa5pkqc7lh>;
    "RedeemedSingle": Anonymize<I7sn2bldv48ck8>;
    "RedeemedMulti": Anonymize<It3rcku7atiln>;
    "BalanceUpdated": Anonymize<I2e6ar36i5p9qo>;
    "YieldCollected": Anonymize<Ifssptimng3fig>;
    "FeeCollected": Anonymize<I2d4kqt7h8dvva>;
    "AModified": Anonymize<I6ou90sd9g7cje>;
    "FeeModified": Anonymize<I3dqh1v95db76q>;
    "RecipientModified": Anonymize<Iec84e3i3f9e7f>;
}>;
export type Ia53lkiao1udji = {
    "swapper": SS58String;
    "pool_id": number;
    "a": bigint;
    "input_asset": Anonymize<I75otreomvjlo4>;
    "output_asset": Anonymize<I75otreomvjlo4>;
    "input_amount": bigint;
    "min_output_amount": bigint;
    "balances": Anonymize<Iafqnechp3omqg>;
    "total_supply": bigint;
    "output_amount": bigint;
};
export type I7sn2bldv48ck8 = {
    "redeemer": SS58String;
    "pool_id": number;
    "a": bigint;
    "input_amount": bigint;
    "output_asset": Anonymize<I75otreomvjlo4>;
    "min_output_amount": bigint;
    "balances": Anonymize<Iafqnechp3omqg>;
    "total_supply": bigint;
    "fee_amount": bigint;
    "output_amount": bigint;
};
export type Ib9det81devhcc = AnonymousEnum<{
    "Sudid": Anonymize<Ib790qnltjsdhl>;
    "KeyChanged": Anonymize<I5rtkmhm2dng4u>;
    "KeyRemoved": undefined;
    "SudoAsDone": Anonymize<Ib790qnltjsdhl>;
}>;
export type Ib790qnltjsdhl = {
    "sudo_result": Anonymize<I69ohckvreqpd>;
};
export type I2d3nnk39kh2oc = Array<Anonymize<I2ugs1rgi3nkrd>>;
export type I2ugs1rgi3nkrd = (Anonymize<Iav8qf94p0aof8>) | undefined;
export type Iav8qf94p0aof8 = {
    "maybe_id"?: Anonymize<I4s6vifaf8k998>;
    "priority": number;
    "call": PreimagesBounded;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "origin": Anonymize<I4t1a1tfkqf9nh>;
};
export type Iemen6nrhpgh4n = [Anonymize<I4vpuvce0it97n>, bigint];
export type I4vpuvce0it97n = Array<Anonymize<Idrvvk7jq1rrni>>;
export type Idrvvk7jq1rrni = {
    "delegate": SS58String;
    "proxy_type": Anonymize<Ife6j97dnan3f4>;
    "delay": number;
};
export type I6af8s65ktiqmm = Array<Anonymize<Icttfjlcvt5bin>>;
export type Icttfjlcvt5bin = {
    "id": Anonymize<I7ho79i2shhdb5>;
    "amount": bigint;
};
export type I7ho79i2shhdb5 = AnonymousEnum<{
    "CollatorSelection": undefined;
    "EvmStorageDeposit": undefined;
    "EvmDeveloperDeposit": undefined;
    "Honzon": undefined;
    "Nft": undefined;
    "TransactionPayment": undefined;
    "TransactionPaymentDeposit": undefined;
    "Count": undefined;
}>;
export type I2nsn38vj5mvnv = [SS58String, Anonymize<I75otreomvjlo4>];
export type I571mt39tli22b = AnonymousEnum<{
    "FeeCurrency": Anonymize<I75otreomvjlo4>;
    "FeeAggregatedPath": Anonymize<Ibf4p6a31758t8>;
}>;
export type Ibf4p6a31758t8 = Array<Anonymize<I8mir0lgoomvt8>>;
export type I8mir0lgoomvt8 = AnonymousEnum<{
    "Dex": Anonymize<I58e1c2iddvge>;
    "Taiga": Anonymize<Ielgh4t8o7rcvt>;
}>;
export type I49qfpo41ua99 = [TxCallData, Anonymize<Ihfphjolmsqq1>];
export type I87i62vbq153jd = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "Scheduler": Anonymize<I349nr0bhmb5hv>;
    "Utility": Anonymize<Ibgc5db80rort4>;
    "Multisig": Anonymize<Ibvhilomssv0th>;
    "Proxy": Anonymize<Ifs1bai2cjauv7>;
    "TransactionPause": Anonymize<I84ckpqpp2lcrm>;
    "IdleScheduler": Anonymize<I9061s5bnev35k>;
    "Preimage": Anonymize<If81ks88t5mpk5>;
    "Balances": Anonymize<Idncdj2oa0qq00>;
    "Currencies": Anonymize<I4qiq4hu66hiu0>;
    "Vesting": Anonymize<Ie4na1287dtsbn>;
    "TransactionPayment": Anonymize<I5he0dpb3jfnki>;
    "Treasury": Anonymize<Iasjt9hjajd80h>;
    "Bounties": Anonymize<Id3i1hd0p5rkpe>;
    "Tips": Anonymize<I7a907m1tvsric>;
    "CollatorSelection": Anonymize<I5e4mu2jfpt5ev>;
    "Session": Anonymize<I77dda7hps0u37>;
    "SessionManager": Anonymize<I5b58nqrlp9fcf>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I31e92o4qn3nku>;
    "XTokens": Anonymize<Ielj17n1192f67>;
    "OrmlXcm": Anonymize<I9r7qbm7jckmoe>;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Authority": Anonymize<Id9qkp6r3gpea5>;
    "GeneralCouncil": Anonymize<Ifhujnmd9gpthp>;
    "GeneralCouncilMembership": Anonymize<I3ndh4r2ep15q9>;
    "FinancialCouncil": Anonymize<Ifhujnmd9gpthp>;
    "FinancialCouncilMembership": Anonymize<I3ndh4r2ep15q9>;
    "HomaCouncil": Anonymize<Ifhujnmd9gpthp>;
    "HomaCouncilMembership": Anonymize<I3ndh4r2ep15q9>;
    "TechnicalCommittee": Anonymize<Ifhujnmd9gpthp>;
    "TechnicalCommitteeMembership": Anonymize<I3ndh4r2ep15q9>;
    "Democracy": Anonymize<I4hnic0gfvfj0p>;
    "AcalaOracle": Anonymize<I99jhdrs8b3mf4>;
    "OperatorMembershipAcala": Anonymize<I3ndh4r2ep15q9>;
    "Auction": Anonymize<I64n3t7ur1bjia>;
    "Parameters": Anonymize<I1h6rijqbnjrpg>;
    "Prices": Anonymize<If5aqcevt41kti>;
    "Dex": Anonymize<I42qb1brnpcfa8>;
    "DexOracle": Anonymize<I8fvl6cmi4tfag>;
    "AggregatedDex": Anonymize<I4crjml3uumeoi>;
    "Earning": Anonymize<Ie6l3ft3jqemma>;
    "AuctionManager": Anonymize<I4957agrpid07b>;
    "Loans": undefined;
    "Honzon": Anonymize<I5vvnussmvemqa>;
    "CdpTreasury": Anonymize<I8le1n3ahugu1m>;
    "CdpEngine": Anonymize<I58tdal8i5c3oo>;
    "EmergencyShutdown": Anonymize<Idf45vlcbdcf86>;
    "Homa": Anonymize<Im4k8tb6tqbbe>;
    "XcmInterface": Anonymize<I8hk8oc6ikjdog>;
    "Incentives": Anonymize<I3ssv4rjt3ma5q>;
    "NFT": Anonymize<Idbmt7h7jspun5>;
    "AssetRegistry": Anonymize<I9quv7mggml4g4>;
    "LiquidCrowdloan": Anonymize<I1cs65hqthkhcs>;
    "EVM": Anonymize<I60beq1ost81sl>;
    "EvmAccounts": Anonymize<Ieo4ca1j9c6nm2>;
    "StableAsset": Anonymize<I9eorb7pjeqvmr>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "Sudo": Anonymize<Ie4sjobueaod0u>;
}>;
export type I349nr0bhmb5hv = AnonymousEnum<{
    "schedule": Anonymize<Iej6d7sg4e9i0s>;
    "cancel": Anonymize<I5n4sebgkfr760>;
    "schedule_named": Anonymize<Iataphgmg35ne7>;
    "cancel_named": Anonymize<Ifs1i5fk9cqvr6>;
    "schedule_after": Anonymize<Iba78va8008lje>;
    "schedule_named_after": Anonymize<I7k6a0t03qhftf>;
    "set_retry": Anonymize<Ieg3fd8p4pkt10>;
    "set_retry_named": Anonymize<I8kg5ll427kfqq>;
    "cancel_retry": Anonymize<I467333262q1l9>;
    "cancel_retry_named": Anonymize<Ifs1i5fk9cqvr6>;
}>;
export type Iej6d7sg4e9i0s = {
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Iataphgmg35ne7 = {
    "id": FixedSizeBinary<32>;
    "when": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Iba78va8008lje = {
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type I7k6a0t03qhftf = {
    "id": FixedSizeBinary<32>;
    "after": number;
    "maybe_periodic"?: Anonymize<Iep7au1720bm0e>;
    "priority": number;
    "call": TxCallData;
};
export type Ibgc5db80rort4 = AnonymousEnum<{
    "batch": Anonymize<Ie8g4l9tfuesvh>;
    "as_derivative": Anonymize<I7q6tel1epm4gp>;
    "batch_all": Anonymize<Ie8g4l9tfuesvh>;
    "dispatch_as": Anonymize<I6c1519t4ts0pv>;
    "force_batch": Anonymize<Ie8g4l9tfuesvh>;
    "with_weight": Anonymize<Ib37rjf9trauc9>;
}>;
export type Ie8g4l9tfuesvh = {
    "calls": Anonymize<Ifids6putmpupj>;
};
export type Ifids6putmpupj = Array<TxCallData>;
export type I7q6tel1epm4gp = {
    "index": number;
    "call": TxCallData;
};
export type I6c1519t4ts0pv = {
    "as_origin": Anonymize<I4t1a1tfkqf9nh>;
    "call": TxCallData;
};
export type Ib37rjf9trauc9 = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type Ibvhilomssv0th = AnonymousEnum<{
    "as_multi_threshold_1": Anonymize<I4jjc98iufp5bv>;
    "as_multi": Anonymize<I103h8go0c1ad6>;
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type I4jjc98iufp5bv = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type I103h8go0c1ad6 = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type Ifs1bai2cjauv7 = AnonymousEnum<{
    "proxy": Anonymize<I89rm9kilmbc7s>;
    "add_proxy": Anonymize<Ivie26fuehncb>;
    "remove_proxy": Anonymize<Ivie26fuehncb>;
    "remove_proxies": undefined;
    "create_pure": Anonymize<I4fec6prusb0fr>;
    "kill_pure": Anonymize<I621kiehb37mud>;
    "announce": Anonymize<Idj9faf6hgsdur>;
    "remove_announcement": Anonymize<Idj9faf6hgsdur>;
    "reject_announcement": Anonymize<I8mj1nm903hpts>;
    "proxy_announced": Anonymize<I2mbguigr12p1c>;
}>;
export type I89rm9kilmbc7s = {
    "real": Anonymize<I4su1fqci7afjt>;
    "force_proxy_type"?: Anonymize<Ic98tt0qsas0vb>;
    "call": TxCallData;
};
export type Ic98tt0qsas0vb = (Anonymize<Ife6j97dnan3f4>) | undefined;
export type Ivie26fuehncb = {
    "delegate": Anonymize<I4su1fqci7afjt>;
    "proxy_type": Anonymize<Ife6j97dnan3f4>;
    "delay": number;
};
export type I4fec6prusb0fr = {
    "proxy_type": Anonymize<Ife6j97dnan3f4>;
    "delay": number;
    "index": number;
};
export type I621kiehb37mud = {
    "spawner": Anonymize<I4su1fqci7afjt>;
    "proxy_type": Anonymize<Ife6j97dnan3f4>;
    "index": number;
    "height": number;
    "ext_index": number;
};
export type I2mbguigr12p1c = {
    "delegate": Anonymize<I4su1fqci7afjt>;
    "real": Anonymize<I4su1fqci7afjt>;
    "force_proxy_type"?: Anonymize<Ic98tt0qsas0vb>;
    "call": TxCallData;
};
export type I84ckpqpp2lcrm = AnonymousEnum<{
    "pause_transaction": Anonymize<Ian208gj7nqkdo>;
    "unpause_transaction": Anonymize<Ian208gj7nqkdo>;
    "pause_evm_precompile": Anonymize<Itmchvgqfl28g>;
    "unpause_evm_precompile": Anonymize<Itmchvgqfl28g>;
}>;
export type I9061s5bnev35k = AnonymousEnum<{
    "schedule_task": Anonymize<I1du4va7rkp1fr>;
}>;
export type I1du4va7rkp1fr = {
    "task": Anonymize<Iafhl3qnbl655q>;
};
export type Idncdj2oa0qq00 = AnonymousEnum<{
    "transfer_allow_death": Anonymize<I65i612een2ak>;
    "force_transfer": Anonymize<I5vvf47ira6s09>;
    "transfer_keep_alive": Anonymize<I65i612een2ak>;
    "transfer_all": Anonymize<I5ns79ftlq8cnl>;
    "force_unreserve": Anonymize<I59ofijoau4bjh>;
    "upgrade_accounts": Anonymize<Ibmr18suc9ikh9>;
    "force_set_balance": Anonymize<Ieka2e164ntfss>;
    "force_adjust_total_issuance": Anonymize<I5u8olqbbvfnvf>;
}>;
export type I4qiq4hu66hiu0 = AnonymousEnum<{
    "transfer": Anonymize<Iolfpkdqipcbi>;
    "transfer_native_currency": Anonymize<Id064ak9i4tutv>;
    "update_balance": Anonymize<I873jn3roc1gvm>;
    "sweep_dust": Anonymize<Ie2d199vs205js>;
    "force_set_lock": Anonymize<Ivqv0db9u70av>;
    "force_remove_lock": Anonymize<I3ppsnoe8uuhrj>;
}>;
export type Iolfpkdqipcbi = {
    "dest": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
};
export type Id064ak9i4tutv = {
    "dest": Anonymize<I4su1fqci7afjt>;
    "amount": bigint;
};
export type I873jn3roc1gvm = {
    "who": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
};
export type Ie2d199vs205js = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "accounts": Anonymize<Ia2lhg7l2hilo3>;
};
export type Ivqv0db9u70av = {
    "who": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
    "lock_id": FixedSizeBinary<8>;
};
export type I3ppsnoe8uuhrj = {
    "who": Anonymize<I4su1fqci7afjt>;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "lock_id": FixedSizeBinary<8>;
};
export type Ie4na1287dtsbn = AnonymousEnum<{
    "claim": undefined;
    "vested_transfer": Anonymize<I1i6n6oid188lm>;
    "update_vesting_schedules": Anonymize<Idfjjcf93r74ng>;
    "claim_for": Anonymize<I91tliuq1e49u6>;
}>;
export type I1i6n6oid188lm = {
    "dest": Anonymize<I4su1fqci7afjt>;
    "schedule": Anonymize<I6k9mlgqa572np>;
};
export type Idfjjcf93r74ng = {
    "who": Anonymize<I4su1fqci7afjt>;
    "vesting_schedules": Anonymize<I199nnq793ql30>;
};
export type I91tliuq1e49u6 = {
    "dest": Anonymize<I4su1fqci7afjt>;
};
export type I5he0dpb3jfnki = AnonymousEnum<{
    "set_alternative_fee_swap_path": Anonymize<Idc54030dbq1f7>;
    "enable_charge_fee_pool": Anonymize<Ia05o1uc7d7tm9>;
    "disable_charge_fee_pool": Anonymize<I98i83boqc476c>;
    "with_fee_path": Anonymize<Ivcm9ai11rb2u>;
    "with_fee_currency": Anonymize<I127rdknngb3lr>;
    "with_fee_aggregated_path": Anonymize<I1c7rq47pt010g>;
}>;
export type Idc54030dbq1f7 = {
    "fee_swap_path"?: Anonymize<I4amn7p5qvds0s>;
};
export type I4amn7p5qvds0s = (Anonymize<I58e1c2iddvge>) | undefined;
export type Ia05o1uc7d7tm9 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "pool_size": bigint;
    "swap_threshold": bigint;
};
export type Ivcm9ai11rb2u = {
    "fee_swap_path": Anonymize<I58e1c2iddvge>;
    "call": TxCallData;
};
export type I127rdknngb3lr = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "call": TxCallData;
};
export type I1c7rq47pt010g = {
    "fee_aggregated_path": Anonymize<Ibf4p6a31758t8>;
    "call": TxCallData;
};
export type Id3i1hd0p5rkpe = AnonymousEnum<{
    "propose_bounty": Anonymize<I2a839vbf5817q>;
    "approve_bounty": Anonymize<Ia9p5bg6p18r0i>;
    "propose_curator": Anonymize<I5rlb1eesbovji>;
    "unassign_curator": Anonymize<Ia9p5bg6p18r0i>;
    "accept_curator": Anonymize<Ia9p5bg6p18r0i>;
    "award_bounty": Anonymize<Ia96ru6pujbas0>;
    "claim_bounty": Anonymize<Ia9p5bg6p18r0i>;
    "close_bounty": Anonymize<Ia9p5bg6p18r0i>;
    "extend_bounty_expiry": Anonymize<I90n6nnkpdahrh>;
}>;
export type I5rlb1eesbovji = {
    "bounty_id": number;
    "curator": Anonymize<I4su1fqci7afjt>;
    "fee": bigint;
};
export type Ia96ru6pujbas0 = {
    "bounty_id": number;
    "beneficiary": Anonymize<I4su1fqci7afjt>;
};
export type I7a907m1tvsric = AnonymousEnum<{
    "report_awesome": Anonymize<I4q8pj89cjg46e>;
    "retract_tip": Anonymize<I1jm8m1rh9e20v>;
    "tip_new": Anonymize<I2tctnk2vr8moa>;
    "tip": Anonymize<I1pm30k3i4438u>;
    "close_tip": Anonymize<I1jm8m1rh9e20v>;
    "slash_tip": Anonymize<I1jm8m1rh9e20v>;
}>;
export type I4q8pj89cjg46e = {
    "reason": Binary;
    "who": Anonymize<I4su1fqci7afjt>;
};
export type I2tctnk2vr8moa = {
    "reason": Binary;
    "who": Anonymize<I4su1fqci7afjt>;
    "tip_value": bigint;
};
export type I5e4mu2jfpt5ev = AnonymousEnum<{
    "set_invulnerables": Anonymize<Ifccifqltb5obi>;
    "set_desired_candidates": Anonymize<Iadtsfv699cq8b>;
    "set_candidacy_bond": Anonymize<Ialpmgmhr3gk5r>;
    "register_as_candidate": undefined;
    "register_candidate": Anonymize<I7uokuu569ccbo>;
    "leave_intent": undefined;
    "withdraw_bond": undefined;
}>;
export type I7uokuu569ccbo = {
    "new_candidate": SS58String;
};
export type I5b58nqrlp9fcf = AnonymousEnum<{
    "schedule_session_duration": Anonymize<Id9o20o60vogf2>;
}>;
export type Id9o20o60vogf2 = {
    "start_session": number;
    "duration": number;
};
export type I31e92o4qn3nku = AnonymousEnum<{
    "send": Anonymize<I9paqujeb1fpv6>;
    "teleport_assets": Anonymize<Iakevv83i18n4r>;
    "reserve_transfer_assets": Anonymize<Iakevv83i18n4r>;
    "execute": Anonymize<If2ssl12kcglhg>;
    "force_xcm_version": Anonymize<Iabk8ljl5g8c86>;
    "force_default_xcm_version": Anonymize<Ic76kfh5ebqkpl>;
    "force_subscribe_version_notify": Anonymize<Icrujen33bbibf>;
    "force_unsubscribe_version_notify": Anonymize<Icrujen33bbibf>;
    "limited_reserve_transfer_assets": Anonymize<I5gi8h3e5lkbeq>;
    "limited_teleport_assets": Anonymize<I5gi8h3e5lkbeq>;
    "force_suspension": Anonymize<Ibgm4rnf22lal1>;
    "transfer_assets": Anonymize<I5gi8h3e5lkbeq>;
    "claim_assets": Anonymize<I8mmaab8je28oo>;
}>;
export type Ielj17n1192f67 = AnonymousEnum<{
    "transfer": Anonymize<I5u4rht6cqt8gn>;
    "transfer_multiasset": Anonymize<Idu1ujel33jksu>;
    "transfer_with_fee": Anonymize<I58dlh7d3khdo>;
    "transfer_multiasset_with_fee": Anonymize<I40fog3d0qlub1>;
    "transfer_multicurrencies": Anonymize<Ib4691jt3qnb97>;
    "transfer_multiassets": Anonymize<Iaif2nhfhk9qc0>;
}>;
export type I5u4rht6cqt8gn = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type I58dlh7d3khdo = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
    "fee": bigint;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type Ib4691jt3qnb97 = {
    "currencies": Anonymize<Ia9eqjc3anbc6q>;
    "fee_item": number;
    "dest": XcmVersionedLocation;
    "dest_weight_limit": XcmV3WeightLimit;
};
export type Id9qkp6r3gpea5 = AnonymousEnum<{
    "dispatch_as": Anonymize<I9n3utis0e5rr5>;
    "schedule_dispatch": Anonymize<I342omrgb8mrol>;
    "fast_track_scheduled_dispatch": Anonymize<Ifshuvu6ph2fvg>;
    "delay_scheduled_dispatch": Anonymize<Idju6aft93dvsp>;
    "cancel_scheduled_dispatch": Anonymize<Ifdq7r9tkem3dm>;
    "authorize_call": Anonymize<I7ak4sbgoc0b1q>;
    "remove_authorized_call": Anonymize<I1jm8m1rh9e20v>;
    "trigger_call": Anonymize<Ia2mrt26qb3lcq>;
}>;
export type I9n3utis0e5rr5 = {
    "as_origin": Anonymize<Ifbl20lchs0rjf>;
    "call": TxCallData;
};
export type Ifbl20lchs0rjf = AnonymousEnum<{
    "Root": undefined;
    "Treasury": undefined;
    "HonzonTreasury": undefined;
    "HomaTreasury": undefined;
    "TreasuryReserve": undefined;
}>;
export type I342omrgb8mrol = {
    "when": TraitsScheduleDispatchTime;
    "priority": number;
    "with_delayed_origin": boolean;
    "call": TxCallData;
};
export type Ifshuvu6ph2fvg = {
    "initial_origin": Anonymize<I4t1a1tfkqf9nh>;
    "task_id": number;
    "when": TraitsScheduleDispatchTime;
};
export type Idju6aft93dvsp = {
    "initial_origin": Anonymize<I4t1a1tfkqf9nh>;
    "task_id": number;
    "additional_delay": number;
};
export type Ifdq7r9tkem3dm = {
    "initial_origin": Anonymize<I4t1a1tfkqf9nh>;
    "task_id": number;
};
export type I7ak4sbgoc0b1q = {
    "call": TxCallData;
    "caller"?: Anonymize<Ihfphjolmsqq1>;
};
export type Ia2mrt26qb3lcq = {
    "hash": FixedSizeBinary<32>;
    "call_weight_bound": Anonymize<I4q39t5hn830vp>;
};
export type Ifhujnmd9gpthp = AnonymousEnum<{
    "set_members": Anonymize<I38jfk5li8iang>;
    "execute": Anonymize<I8551vvghi2irk>;
    "propose": Anonymize<I8jt6ldsplhg8i>;
    "vote": Anonymize<I2dtrijkm5601t>;
    "disapprove_proposal": Anonymize<I2ev73t79f46tb>;
    "close": Anonymize<Ib2obgji960euh>;
}>;
export type I8551vvghi2irk = {
    "proposal": TxCallData;
    "length_bound": number;
};
export type I8jt6ldsplhg8i = {
    "threshold": number;
    "proposal": TxCallData;
    "length_bound": number;
};
export type I99jhdrs8b3mf4 = AnonymousEnum<{
    "feed_values": Anonymize<I5g83hbjlt4g7d>;
}>;
export type I5g83hbjlt4g7d = {
    "values": Anonymize<Ia9eqjc3anbc6q>;
};
export type I64n3t7ur1bjia = AnonymousEnum<{
    "bid": Anonymize<Ie2qs571usasls>;
}>;
export type Ie2qs571usasls = {
    "id": number;
    "value": bigint;
};
export type I1h6rijqbnjrpg = AnonymousEnum<{
    "set_parameter": Anonymize<I1fll11jqhjobd>;
}>;
export type If5aqcevt41kti = AnonymousEnum<{
    "lock_price": Anonymize<I98i83boqc476c>;
    "unlock_price": Anonymize<I98i83boqc476c>;
}>;
export type I42qb1brnpcfa8 = AnonymousEnum<{
    "swap_with_exact_supply": Anonymize<I3688il5c49f7a>;
    "swap_with_exact_target": Anonymize<I4kgns97nm19us>;
    "add_liquidity": Anonymize<I93l14uap9cben>;
    "add_provision": Anonymize<I648auksndla9n>;
    "claim_dex_share": Anonymize<I5rpu8e0bev51b>;
    "remove_liquidity": Anonymize<Ie9cme7sjl2h5a>;
    "list_provisioning": Anonymize<I5pchq1uevta1p>;
    "update_provisioning_parameters": Anonymize<I5pchq1uevta1p>;
    "end_provisioning": Anonymize<I2j4oeihu6vlh4>;
    "enable_trading_pair": Anonymize<I2j4oeihu6vlh4>;
    "disable_trading_pair": Anonymize<I2j4oeihu6vlh4>;
    "refund_provision": Anonymize<I5rpu8e0bev51b>;
    "abort_provisioning": Anonymize<I2j4oeihu6vlh4>;
}>;
export type I3688il5c49f7a = {
    "path": Anonymize<I58e1c2iddvge>;
    "supply_amount": bigint;
    "min_target_amount": bigint;
};
export type I4kgns97nm19us = {
    "path": Anonymize<I58e1c2iddvge>;
    "target_amount": bigint;
    "max_supply_amount": bigint;
};
export type I93l14uap9cben = {
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
    "max_amount_a": bigint;
    "max_amount_b": bigint;
    "min_share_increment": bigint;
    "stake_increment_share": boolean;
};
export type I648auksndla9n = {
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
    "amount_a": bigint;
    "amount_b": bigint;
};
export type I5rpu8e0bev51b = {
    "owner": SS58String;
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
};
export type Ie9cme7sjl2h5a = {
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
    "remove_share": bigint;
    "min_withdrawn_a": bigint;
    "min_withdrawn_b": bigint;
    "by_unstake": boolean;
};
export type I5pchq1uevta1p = {
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
    "min_contribution_a": bigint;
    "min_contribution_b": bigint;
    "target_provision_a": bigint;
    "target_provision_b": bigint;
    "not_before": number;
};
export type I2j4oeihu6vlh4 = {
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
};
export type I8fvl6cmi4tfag = AnonymousEnum<{
    "enable_average_price": Anonymize<I2ngi4geus866u>;
    "disable_average_price": Anonymize<I2j4oeihu6vlh4>;
    "update_average_price_interval": Anonymize<I3nkmpr3dlb5ma>;
}>;
export type I2ngi4geus866u = {
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
    "interval": bigint;
};
export type I3nkmpr3dlb5ma = {
    "currency_id_a": Anonymize<I75otreomvjlo4>;
    "currency_id_b": Anonymize<I75otreomvjlo4>;
    "new_interval": bigint;
};
export type I4crjml3uumeoi = AnonymousEnum<{
    "swap_with_exact_supply": Anonymize<I8oimeqepjooed>;
    "swap_with_exact_target": Anonymize<Ibc5mquirka4r9>;
    "update_aggregated_swap_paths": Anonymize<I77usuakd9hv15>;
}>;
export type I8oimeqepjooed = {
    "paths": Anonymize<Ibf4p6a31758t8>;
    "supply_amount": bigint;
    "min_target_amount": bigint;
};
export type Ibc5mquirka4r9 = {
    "paths": Anonymize<Ibf4p6a31758t8>;
    "target_amount": bigint;
    "max_supply_amount": bigint;
};
export type I77usuakd9hv15 = {
    "updates": Anonymize<I6rgln6i054ef5>;
};
export type I6rgln6i054ef5 = Array<Anonymize<I4roev8j4pv51v>>;
export type I4roev8j4pv51v = [Anonymize<I31j35h89naqah>, Anonymize<I1q8621cjg1a80>];
export type I1q8621cjg1a80 = (Anonymize<Ibf4p6a31758t8>) | undefined;
export type Ie6l3ft3jqemma = AnonymousEnum<{
    "bond": Anonymize<I3qt1hgg4djhgb>;
    "unbond": Anonymize<I3qt1hgg4djhgb>;
    "unbond_instant": Anonymize<I3qt1hgg4djhgb>;
    "rebond": Anonymize<I3qt1hgg4djhgb>;
    "withdraw_unbonded": undefined;
}>;
export type I4957agrpid07b = AnonymousEnum<{
    "cancel": Anonymize<Ic5b47dj4coa3r>;
}>;
export type I5vvnussmvemqa = AnonymousEnum<{
    "adjust_loan": Anonymize<Ia6m2mqatie4c8>;
    "close_loan_has_debit_by_dex": Anonymize<I4169336hu4big>;
    "transfer_loan_from": Anonymize<I18tsj730b9hcm>;
    "authorize": Anonymize<I2mbd1rmb00d2c>;
    "unauthorize": Anonymize<I2mbd1rmb00d2c>;
    "unauthorize_all": undefined;
    "expand_position_collateral": Anonymize<I1b2tth8h1odgg>;
    "shrink_position_debit": Anonymize<I3p80babids0fu>;
    "adjust_loan_by_debit_value": Anonymize<I52q1abqhemsoj>;
    "transfer_debit": Anonymize<I1kpabdmb2r0c5>;
}>;
export type Ia6m2mqatie4c8 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "collateral_adjustment": bigint;
    "debit_adjustment": bigint;
};
export type I4169336hu4big = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "max_collateral_amount": bigint;
};
export type I18tsj730b9hcm = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "from": Anonymize<I4su1fqci7afjt>;
};
export type I2mbd1rmb00d2c = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "to": Anonymize<I4su1fqci7afjt>;
};
export type I1b2tth8h1odgg = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "increase_debit_value": bigint;
    "min_increase_collateral": bigint;
};
export type I3p80babids0fu = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "decrease_collateral": bigint;
    "min_decrease_debit_value": bigint;
};
export type I52q1abqhemsoj = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "collateral_adjustment": bigint;
    "debit_value_adjustment": bigint;
};
export type I1kpabdmb2r0c5 = {
    "from_currency": Anonymize<I75otreomvjlo4>;
    "to_currency": Anonymize<I75otreomvjlo4>;
    "debit_transfer": bigint;
};
export type I8le1n3ahugu1m = AnonymousEnum<{
    "extract_surplus_to_treasury": Anonymize<I3qt1hgg4djhgb>;
    "auction_collateral": Anonymize<Ifgs07rgphbqv0>;
    "exchange_collateral_to_stable": Anonymize<Idvsf5cbunj7r8>;
    "set_expected_collateral_auction_size": Anonymize<I12504d0vc9lp1>;
    "set_debit_offset_buffer": Anonymize<I3qt1hgg4djhgb>;
}>;
export type Ifgs07rgphbqv0 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
    "target": bigint;
    "splited": boolean;
};
export type Idvsf5cbunj7r8 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "swap_limit": Anonymize<I658e5flscc6oe>;
};
export type I658e5flscc6oe = AnonymousEnum<{
    "ExactSupply": Anonymize<I200n1ov5tbcvr>;
    "ExactTarget": Anonymize<I200n1ov5tbcvr>;
}>;
export type I12504d0vc9lp1 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "size": bigint;
};
export type I58tdal8i5c3oo = AnonymousEnum<{
    "liquidate": Anonymize<Id29418nin4lfn>;
    "settle": Anonymize<Id29418nin4lfn>;
    "set_collateral_params": Anonymize<Icjd1uv2fqhidu>;
    "register_liquidation_contract": Anonymize<Itmchvgqfl28g>;
    "deregister_liquidation_contract": Anonymize<Itmchvgqfl28g>;
}>;
export type Id29418nin4lfn = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "who": Anonymize<I4su1fqci7afjt>;
};
export type Icjd1uv2fqhidu = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "interest_rate_per_sec": Anonymize<I64oen8f52fkov>;
    "liquidation_ratio": Anonymize<I64oen8f52fkov>;
    "liquidation_penalty": Anonymize<I64oen8f52fkov>;
    "required_collateral_ratio": Anonymize<I64oen8f52fkov>;
    "maximum_total_debit_value": Anonymize<I46n7coccsjfhd>;
};
export type I64oen8f52fkov = AnonymousEnum<{
    "NoChange": undefined;
    "NewValue"?: Anonymize<I35p85j063s0il>;
}>;
export type I46n7coccsjfhd = AnonymousEnum<{
    "NoChange": undefined;
    "NewValue": bigint;
}>;
export type Idf45vlcbdcf86 = AnonymousEnum<{
    "emergency_shutdown": undefined;
    "open_collateral_refund": undefined;
    "refund_collaterals": Anonymize<I3qt1hgg4djhgb>;
}>;
export type Im4k8tb6tqbbe = AnonymousEnum<{
    "mint": Anonymize<I3qt1hgg4djhgb>;
    "request_redeem": Anonymize<I91gje44h95np5>;
    "fast_match_redeems": Anonymize<I9fss5aulbml64>;
    "claim_redemption": Anonymize<I7d5l1aam61hfj>;
    "update_homa_params": Anonymize<Ieucctmr7s3nr1>;
    "update_bump_era_params": Anonymize<I53ph05vu6nvda>;
    "reset_ledgers": Anonymize<Ie0bccjhtmt5ep>;
    "reset_current_era": Anonymize<I849qe2r3bkhgs>;
    "force_bump_current_era": Anonymize<Ie5du4befecojp>;
    "fast_match_redeems_completely": Anonymize<I9fss5aulbml64>;
}>;
export type I91gje44h95np5 = {
    "amount": bigint;
    "allow_fast_match": boolean;
};
export type I9fss5aulbml64 = {
    "redeemer_list": Anonymize<Ia2lhg7l2hilo3>;
};
export type I7d5l1aam61hfj = {
    "redeemer": SS58String;
};
export type Ieucctmr7s3nr1 = {
    "soft_bonded_cap_per_sub_account"?: Anonymize<I35p85j063s0il>;
    "estimated_reward_rate_per_era"?: Anonymize<I35p85j063s0il>;
    "commission_rate"?: Anonymize<I35p85j063s0il>;
    "fast_match_fee_rate"?: Anonymize<I35p85j063s0il>;
};
export type I53ph05vu6nvda = {
    "last_era_bumped_block"?: Anonymize<I4arjljr6dpflb>;
    "frequency"?: Anonymize<I4arjljr6dpflb>;
};
export type Ie0bccjhtmt5ep = {
    "updates": Anonymize<I3icu98v3s3k66>;
};
export type I3icu98v3s3k66 = Array<Anonymize<I84ta4cmj6tcnb>>;
export type I84ta4cmj6tcnb = [number, Anonymize<I35p85j063s0il>, Anonymize<I7m7tbddr7qika>];
export type I849qe2r3bkhgs = {
    "era_index": number;
};
export type Ie5du4befecojp = {
    "bump_amount": number;
};
export type I8hk8oc6ikjdog = AnonymousEnum<{
    "update_xcm_dest_weight_and_fee": Anonymize<Iaqcdtcg1n6r1b>;
}>;
export type Iaqcdtcg1n6r1b = {
    "updates": Anonymize<Iptu04kicr4d7>;
};
export type Iptu04kicr4d7 = Array<Anonymize<Ib5od8uen79psp>>;
export type Ib5od8uen79psp = [Anonymize<Ieert180gaet6h>, Anonymize<Iasb8k6ash5mjn>, Anonymize<I35p85j063s0il>];
export type I3ssv4rjt3ma5q = AnonymousEnum<{
    "deposit_dex_share": Anonymize<I4eus13q90k99b>;
    "withdraw_dex_share": Anonymize<I4eus13q90k99b>;
    "claim_rewards": Anonymize<I3tl8ogjncpm2c>;
    "update_incentive_rewards": Anonymize<I7jqtdmsfv7o4u>;
    "update_claim_reward_deduction_rates": Anonymize<If8009mb874sp7>;
    "update_claim_reward_deduction_currency": Anonymize<I29k1t0l9q4ot2>;
}>;
export type I4eus13q90k99b = {
    "lp_currency_id": Anonymize<I75otreomvjlo4>;
    "amount": bigint;
};
export type I3tl8ogjncpm2c = {
    "pool_id": Anonymize<I8v76mqrb0l78g>;
};
export type I7jqtdmsfv7o4u = {
    "updates": Anonymize<I7kj1487idgqi3>;
};
export type I7kj1487idgqi3 = Array<Anonymize<Icq7i8fobqqdek>>;
export type Icq7i8fobqqdek = [Anonymize<I8v76mqrb0l78g>, Anonymize<Ia9eqjc3anbc6q>];
export type If8009mb874sp7 = {
    "updates": Anonymize<Ie7cbtddo0p3ma>;
};
export type Ie7cbtddo0p3ma = Array<Anonymize<I6cpscumpclsd>>;
export type I6cpscumpclsd = [Anonymize<I8v76mqrb0l78g>, bigint];
export type I29k1t0l9q4ot2 = {
    "pool_id": Anonymize<I8v76mqrb0l78g>;
    "currency_id"?: Anonymize<Ifhbdeq666mc65>;
};
export type Idbmt7h7jspun5 = AnonymousEnum<{
    "create_class": Anonymize<Idoneaqv7bn270>;
    "mint": Anonymize<Ifqotmmbsrrn2t>;
    "transfer": Anonymize<I702l6ro52co4b>;
    "burn": Anonymize<I3aq6nd1rsiec4>;
    "burn_with_remark": Anonymize<I9lnema8c5781i>;
    "destroy_class": Anonymize<I7vau02iuv06ti>;
    "update_class_properties": Anonymize<Id7bb1kbm6hd7o>;
}>;
export type Idoneaqv7bn270 = {
    "metadata": Binary;
    "properties": number;
    "attributes": Anonymize<I6pi5ou8r1hblk>;
};
export type Ifqotmmbsrrn2t = {
    "to": Anonymize<I4su1fqci7afjt>;
    "class_id": number;
    "metadata": Binary;
    "attributes": Anonymize<I6pi5ou8r1hblk>;
    "quantity": number;
};
export type I702l6ro52co4b = {
    "to": Anonymize<I4su1fqci7afjt>;
    "token": Anonymize<I4ojmnsk1dchql>;
};
export type I3aq6nd1rsiec4 = {
    "token": Anonymize<I4ojmnsk1dchql>;
};
export type I9lnema8c5781i = {
    "token": Anonymize<I4ojmnsk1dchql>;
    "remark": Binary;
};
export type I7vau02iuv06ti = {
    "class_id": number;
    "dest": Anonymize<I4su1fqci7afjt>;
};
export type Id7bb1kbm6hd7o = {
    "class_id": number;
    "properties": number;
};
export type I9quv7mggml4g4 = AnonymousEnum<{
    "register_foreign_asset": Anonymize<I91l6q9oikoe57>;
    "update_foreign_asset": Anonymize<I3h4ohbkb8vmbe>;
    "register_stable_asset": Anonymize<I1n28f4ceil09b>;
    "update_stable_asset": Anonymize<Iagv0u89un0nso>;
    "register_erc20_asset": Anonymize<Ie6ivrj6iniahu>;
    "update_erc20_asset": Anonymize<I6g2l34laajq1g>;
    "register_native_asset": Anonymize<I6vbob3jrlktb7>;
    "update_native_asset": Anonymize<I6vbob3jrlktb7>;
}>;
export type I91l6q9oikoe57 = {
    "location": XcmVersionedLocation;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type I3h4ohbkb8vmbe = {
    "foreign_asset_id": number;
    "location": XcmVersionedLocation;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type Iagv0u89un0nso = {
    "stable_asset_id": number;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type Ie6ivrj6iniahu = {
    "contract": FixedSizeBinary<20>;
    "minimal_balance": bigint;
};
export type I6g2l34laajq1g = {
    "contract": FixedSizeBinary<20>;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type I6vbob3jrlktb7 = {
    "currency_id": Anonymize<I75otreomvjlo4>;
    "metadata": Anonymize<Ievgjq5dn6rae7>;
};
export type I1cs65hqthkhcs = AnonymousEnum<{
    "redeem": Anonymize<I3qt1hgg4djhgb>;
    "transfer_from_crowdloan_vault": Anonymize<I3qt1hgg4djhgb>;
    "set_redeem_currency_id": Anonymize<I98i83boqc476c>;
}>;
export type I60beq1ost81sl = AnonymousEnum<{
    "eth_call": Anonymize<I68hvq39cv9bhg>;
    "eth_call_v2": Anonymize<Id1vdg5glf32bv>;
    "call": Anonymize<I34e4t3tquuabp>;
    "scheduled_call": Anonymize<I3b100panba8pt>;
    "create": Anonymize<I76pnvsgv4su6l>;
    "create2": Anonymize<I1grn1khr0a3i8>;
    "create_nft_contract": Anonymize<I76pnvsgv4su6l>;
    "create_predeploy_contract": Anonymize<I34e4t3tquuabp>;
    "transfer_maintainer": Anonymize<I2b1121ufu9vsp>;
    "publish_contract": Anonymize<Ics51ctc9oasbt>;
    "publish_free": Anonymize<Ics51ctc9oasbt>;
    "enable_contract_development": undefined;
    "disable_contract_development": undefined;
    "set_code": Anonymize<Ifadgbhtqk8muc>;
    "selfdestruct": Anonymize<Ics51ctc9oasbt>;
    "strict_call": Anonymize<I34e4t3tquuabp>;
}>;
export type I68hvq39cv9bhg = {
    "action": Anonymize<I2do93a3gr3ege>;
    "input": Binary;
    "value": bigint;
    "gas_limit": bigint;
    "storage_limit": number;
    "access_list": Anonymize<Ieap15h2pjii9u>;
    "valid_until": number;
};
export type Id1vdg5glf32bv = {
    "action": Anonymize<I2do93a3gr3ege>;
    "input": Binary;
    "value": bigint;
    "gas_price": bigint;
    "gas_limit": bigint;
    "access_list": Anonymize<Ieap15h2pjii9u>;
};
export type I34e4t3tquuabp = {
    "target": FixedSizeBinary<20>;
    "input": Binary;
    "value": bigint;
    "gas_limit": bigint;
    "storage_limit": number;
    "access_list": Anonymize<Ieap15h2pjii9u>;
};
export type I3b100panba8pt = {
    "from": FixedSizeBinary<20>;
    "target": FixedSizeBinary<20>;
    "input": Binary;
    "value": bigint;
    "gas_limit": bigint;
    "storage_limit": number;
    "access_list": Anonymize<Ieap15h2pjii9u>;
};
export type I76pnvsgv4su6l = {
    "input": Binary;
    "value": bigint;
    "gas_limit": bigint;
    "storage_limit": number;
    "access_list": Anonymize<Ieap15h2pjii9u>;
};
export type I1grn1khr0a3i8 = {
    "input": Binary;
    "salt": FixedSizeBinary<32>;
    "value": bigint;
    "gas_limit": bigint;
    "storage_limit": number;
    "access_list": Anonymize<Ieap15h2pjii9u>;
};
export type Ifadgbhtqk8muc = {
    "contract": FixedSizeBinary<20>;
    "code": Binary;
};
export type Ieo4ca1j9c6nm2 = AnonymousEnum<{
    "claim_account": Anonymize<I498b35h1tosb3>;
    "claim_default_account": undefined;
}>;
export type I498b35h1tosb3 = {
    "eth_address": FixedSizeBinary<20>;
    "eth_signature": FixedSizeBinary<65>;
};
export type I9eorb7pjeqvmr = AnonymousEnum<{
    "create_pool": Anonymize<Id97r7dv4sbp2r>;
    "mint": Anonymize<I4r3lr1hp3q5vu>;
    "swap": Anonymize<I26sb21rohuspe>;
    "redeem_proportion": Anonymize<Id846uvbhv0ups>;
    "redeem_single": Anonymize<Iel8d6vl7kun8s>;
    "redeem_multi": Anonymize<Ia5vm4875s01on>;
    "modify_a": Anonymize<I1io386vc3pmlf>;
    "modify_fees": Anonymize<Idnoja8d5k0dtr>;
    "modify_recipients": Anonymize<I95j99jsac0h95>;
}>;
export type Id97r7dv4sbp2r = {
    "pool_asset": Anonymize<I75otreomvjlo4>;
    "assets": Anonymize<I58e1c2iddvge>;
    "precisions": Anonymize<Iafqnechp3omqg>;
    "mint_fee": bigint;
    "swap_fee": bigint;
    "redeem_fee": bigint;
    "initial_a": bigint;
    "fee_recipient": SS58String;
    "yield_recipient": SS58String;
    "precision": bigint;
};
export type I26sb21rohuspe = {
    "pool_id": number;
    "i": number;
    "j": number;
    "dx": bigint;
    "min_dy": bigint;
    "asset_length": number;
};
export type Ie4sjobueaod0u = AnonymousEnum<{
    "sudo": Anonymize<I2j9vnhvdvfhmj>;
    "sudo_unchecked_weight": Anonymize<Ib37rjf9trauc9>;
    "set_key": Anonymize<I79cmnv5q6b3p>;
    "sudo_as": Anonymize<I5p323njmi171p>;
    "remove_key": undefined;
}>;
export type I2j9vnhvdvfhmj = {
    "call": TxCallData;
};
export type I5p323njmi171p = {
    "who": Anonymize<I4su1fqci7afjt>;
    "call": TxCallData;
};
export type Iaik0jbkkg779m = {
    "bid"?: Anonymize<I92hdo1clkbp4g>;
    "start": number;
    "end"?: Anonymize<I4arjljr6dpflb>;
};
export type Ifh402tk60vb2r = {
    "total_shares": bigint;
    "rewards": Anonymize<I2teqt0gtdujj6>;
};
export type I2teqt0gtdujj6 = Array<Anonymize<I9bhsgnmb2llas>>;
export type I9bhsgnmb2llas = [Anonymize<I75otreomvjlo4>, Anonymize<I200n1ov5tbcvr>];
export type Iecq6vfvo7aje1 = [bigint, Anonymize<Ia9eqjc3anbc6q>];
export type Ibj768ddeq2abm = [Anonymize<I8v76mqrb0l78g>, SS58String];
export type Iep2ornlr21i3f = {
    "metadata": Binary;
    "total_issuance": bigint;
    "owner": SS58String;
    "data": Anonymize<Ifsk4l8u54383v>;
};
export type Ifsk4l8u54383v = {
    "deposit": bigint;
    "properties": number;
    "attributes": Anonymize<I6pi5ou8r1hblk>;
};
export type Ieec4jfmfdjf37 = {
    "metadata": Binary;
    "owner": SS58String;
    "data": Anonymize<I53ij3jj3onnn>;
};
export type I53ij3jj3onnn = {
    "deposit": bigint;
    "attributes": Anonymize<I6pi5ou8r1hblk>;
};
export type If5p57vivem5dc = AnonymousEnum<{
    "Earning": Anonymize<I6k4smaac62hde>;
}>;
export type I6k4smaac62hde = AnonymousEnum<{
    "InstantUnstakeFee": number;
}>;
export type Idd1r3dt7gtgrb = AnonymousEnum<{
    "Earning": Anonymize<I5d5v1dt213c09>;
}>;
export type I5d5v1dt213c09 = AnonymousEnum<{
    "InstantUnstakeFee": undefined;
}>;
export type Ie2hk3u79d6ui9 = AnonymousEnum<{
    "Disabled": undefined;
    "Provisioning": Anonymize<Iau6ru9anpp35q>;
    "Enabled": undefined;
}>;
export type Iau6ru9anpp35q = {
    "min_contribution": Anonymize<I200n1ov5tbcvr>;
    "target_provision": Anonymize<I200n1ov5tbcvr>;
    "accumulated_provision": Anonymize<I200n1ov5tbcvr>;
    "not_before": number;
};
export type I9g4ppuluumr6k = [Anonymize<I31j35h89naqah>, SS58String];
export type I1es2n69lqf2kp = [Anonymize<I4totqt881mlti>, Anonymize<I4totqt881mlti>, bigint];
export type Ifr86mieei7nd = [bigint, bigint, Anonymize<I4totqt881mlti>, Anonymize<I4totqt881mlti>, bigint, bigint];
export type I9o18bnq52aqup = {
    "total": bigint;
    "active": bigint;
    "unlocking": Anonymize<I1s85pq0114oei>;
};
export type I1s85pq0114oei = Array<Anonymize<Ie73itgsrsf4nj>>;
export type Ie73itgsrsf4nj = {
    "value": bigint;
    "unlock_at": number;
};
export type Icqshsmhmf8luq = {
    "refund_recipient": SS58String;
    "currency_id": Anonymize<I75otreomvjlo4>;
    "initial_amount": bigint;
    "amount": bigint;
    "target": bigint;
    "start_time": number;
};
export type Idkp0k6d3u2eoo = {
    "collateral": bigint;
    "debit": bigint;
};
export type Ie9mstr0r014t5 = [Anonymize<I75otreomvjlo4>, SS58String];
export type Id8mv3he1igtks = [SS58String, Anonymize<Ie9mstr0r014t5>];
export type If30c7eb3adnl = {
    "maximum_total_debit_value": bigint;
    "interest_rate_per_sec"?: Anonymize<I35p85j063s0il>;
    "liquidation_ratio"?: Anonymize<I35p85j063s0il>;
    "liquidation_penalty"?: Anonymize<I35p85j063s0il>;
    "required_collateral_ratio"?: Anonymize<I35p85j063s0il>;
};
export type I4gqmlq9k6jlk3 = Array<FixedSizeBinary<20>>;
export type Ip0haf6u0s2dh = {
    "bonded": bigint;
    "unlocking": Anonymize<I9nc4v1upo2c8e>;
};
export type I8spksjhs283ao = [bigint, boolean];
export type I8dq9q5tjv83o = [Anonymize<I8v76mqrb0l78g>, Anonymize<I75otreomvjlo4>];
export type Ibpgnl08ma89n = {
    "nonce": number;
    "contract_info"?: Anonymize<Ie1g8eg1nfglo7>;
};
export type Ie1g8eg1nfglo7 = (Anonymize<I339ush74md6ed>) | undefined;
export type I339ush74md6ed = {
    "code_hash": FixedSizeBinary<32>;
    "maintainer": FixedSizeBinary<20>;
    "published": boolean;
};
export type Ib40pprbfm23eg = {
    "code_size": number;
    "ref_count": number;
};
export type Ie2flgovr1b4r6 = {
    "pool_asset": Anonymize<I75otreomvjlo4>;
    "assets": Anonymize<I58e1c2iddvge>;
    "precisions": Anonymize<Iafqnechp3omqg>;
    "mint_fee": bigint;
    "swap_fee": bigint;
    "redeem_fee": bigint;
    "total_supply": bigint;
    "a": bigint;
    "a_block": number;
    "future_a": bigint;
    "future_a_block": number;
    "balances": Anonymize<Iafqnechp3omqg>;
    "fee_recipient": SS58String;
    "account_id": SS58String;
    "yield_recipient": SS58String;
    "precision": bigint;
};
export type I2esdqcrfg1au7 = Array<Anonymize<I58e1c2iddvge>>;
export type I7auvdvt5epl7s = ResultPayload<Anonymize<I69ohckvreqpd>, TransactionValidityError>;
export type Id1tj560j5ungu = AnonymousEnum<{
    "Aggregated": undefined;
    "Acala": undefined;
}>;
export type I974rv7q5bvln8 = (Anonymize<I9055m3udr8982>) | undefined;
export type I5vun5pfncmibi = Array<Anonymize<Ifb6rviu7edf3o>>;
export type Ifb6rviu7edf3o = [Anonymize<I75otreomvjlo4>, Anonymize<I974rv7q5bvln8>];
export type I6n992ikreen29 = (Anonymize<Ieap15h2pjii9u>) | undefined;
export type Iau3fg1ag3dn6c = ResultPayload<Anonymize<Idsg04lk196s9f>, Anonymize<Icpinkc2ap1trn>>;
export type Idsg04lk196s9f = {
    "exit_reason": Anonymize<Iag9iovb9j5ijo>;
    "value": Binary;
    "used_gas": Anonymize<I4totqt881mlti>;
    "used_storage": number;
    "logs": Anonymize<Ids7ng2qsv7snu>;
};
export type Id2dj0p9r1hd24 = ResultPayload<Anonymize<Ibtppptg6ufbee>, Anonymize<Icpinkc2ap1trn>>;
export type Ibtppptg6ufbee = {
    "exit_reason": Anonymize<Iag9iovb9j5ijo>;
    "value": FixedSizeBinary<20>;
    "used_gas": Anonymize<I4totqt881mlti>;
    "used_storage": number;
    "logs": Anonymize<Ids7ng2qsv7snu>;
};
export type I3iaubjm1mnjl7 = ResultPayload<Anonymize<I379qnq4d95rt>, Anonymize<Icpinkc2ap1trn>>;
export type I379qnq4d95rt = {
    "from"?: Anonymize<If7b8240vgt2q5>;
    "to"?: Anonymize<If7b8240vgt2q5>;
    "gas_limit"?: Anonymize<I35p85j063s0il>;
    "storage_limit"?: Anonymize<I4arjljr6dpflb>;
    "value"?: Anonymize<I35p85j063s0il>;
    "data"?: Anonymize<Iabpgqcjikia83>;
    "access_list"?: Anonymize<I6n992ikreen29>;
};
export type I9dnd2gpp3ceom = {
    "max_gas_limit": bigint;
    "max_storage_limit": number;
};
export type Ie62kuckmfbjet = Array<Anonymize<Ib998i6ak45rfp>>;
export type Ib998i6ak45rfp = {
    "phase": Phase;
    "event": Anonymize<Idk70c4pkab627>;
    "topics": Anonymize<Ic5m5lp1oioo8r>;
};
export type Idk70c4pkab627 = AnonymousEnum<{
    "System": Anonymize<Ik1jqgu7k2nhb>;
    "ParachainSystem": Anonymize<Icbsekf57miplo>;
    "Balances": Anonymize<Iao8h4hv7atnq3>;
    "TransactionPayment": TransactionPaymentEvent;
    "CollatorSelection": Anonymize<I4srakrmf0fspo>;
    "Session": SessionEvent;
    "XcmpQueue": Anonymize<Idsqc7mhp6nnle>;
    "PolkadotXcm": Anonymize<I5ce1ru810vv9d>;
    "CumulusXcm": Anonymize<Ibvp9t1gqae5ct>;
    "MessageQueue": Anonymize<Idrvf3ouahq8la>;
    "Utility": Anonymize<Iem08rmnq7n903>;
    "Multisig": Anonymize<I4ap4ibr7egv0r>;
    "Proxy": Anonymize<Ial6ie5rsolhen>;
    "Identity": Anonymize<Ibju6hjiipokne>;
    "IdentityMigrator": PolkadotRuntimeCommonIdentityMigratorEvent;
}>;
export type Ik1jqgu7k2nhb = AnonymousEnum<{
    /**
     *An extrinsic completed successfully.
     */
    "ExtrinsicSuccess": Anonymize<Ia82mnkmeo2rhc>;
    /**
     *An extrinsic failed.
     */
    "ExtrinsicFailed": Anonymize<I4o78c7pg7u4h3>;
    /**
     *`:code` was updated.
     */
    "CodeUpdated": undefined;
    /**
     *A new account was created.
     */
    "NewAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *An account was reaped.
     */
    "KilledAccount": Anonymize<Icbccs0ug47ilf>;
    /**
     *On on-chain remark happened.
     */
    "Remarked": Anonymize<I855j4i3kr8ko1>;
    /**
     *An upgrade was authorized.
     */
    "UpgradeAuthorized": Anonymize<Ibgl04rn6nbfm6>;
}>;
export type I4o78c7pg7u4h3 = {
    "dispatch_error": Anonymize<Ie0bod29l7788n>;
    "dispatch_info": Anonymize<Ic9s8f85vjtncc>;
};
export type Ie0bod29l7788n = AnonymousEnum<{
    "Other": undefined;
    "CannotLookup": undefined;
    "BadOrigin": undefined;
    "Module": Anonymize<Ieqacr4v5h76qp>;
    "ConsumerRemaining": undefined;
    "NoProviders": undefined;
    "TooManyConsumers": undefined;
    "Token": TokenError;
    "Arithmetic": ArithmeticError;
    "Transactional": TransactionalError;
    "Exhausted": undefined;
    "Corruption": undefined;
    "Unavailable": undefined;
    "RootNotAllowed": undefined;
}>;
export type Ieqacr4v5h76qp = AnonymousEnum<{
    "System": Anonymize<I1s2t6elcah93o>;
    "ParachainSystem": Anonymize<I9p95gln24a0rn>;
    "Timestamp": undefined;
    "ParachainInfo": undefined;
    "Balances": Anonymize<Idj13i7adlomht>;
    "TransactionPayment": undefined;
    "Authorship": undefined;
    "CollatorSelection": Anonymize<I36bcffk2387dv>;
    "Session": Anonymize<I1e07dgbaqd1sq>;
    "Aura": undefined;
    "AuraExt": undefined;
    "XcmpQueue": Anonymize<I9aoshicggice1>;
    "PolkadotXcm": Anonymize<I4s86iefmp2rcu>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<I5iupade5ag2dp>;
    "Utility": Anonymize<I8dt2g2hcrgh36>;
    "Multisig": Anonymize<Ia76qmhhg4jvb9>;
    "Proxy": Anonymize<Iuvt54ei4cehc>;
    "Identity": Anonymize<I9mq328955mgb8>;
    "IdentityMigrator": undefined;
}>;
export type Iem08rmnq7n903 = AnonymousEnum<{
    /**
     *Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     *well as the error.
     */
    "BatchInterrupted": Anonymize<I1rppdtg3gl2e6>;
    /**
     *Batch of dispatches completed fully with no error.
     */
    "BatchCompleted": undefined;
    /**
     *Batch of dispatches completed but has errors.
     */
    "BatchCompletedWithErrors": undefined;
    /**
     *A single item within a Batch of dispatches has completed with no error.
     */
    "ItemCompleted": undefined;
    /**
     *A single item within a Batch of dispatches has completed with error.
     */
    "ItemFailed": Anonymize<I6nt490kobvdj4>;
    /**
     *A call was dispatched.
     */
    "DispatchedAs": Anonymize<Ieusrlv9sc7fdl>;
}>;
export type I1rppdtg3gl2e6 = {
    "index": number;
    "error": Anonymize<Ie0bod29l7788n>;
};
export type I6nt490kobvdj4 = {
    "error": Anonymize<Ie0bod29l7788n>;
};
export type Ieusrlv9sc7fdl = {
    "result": Anonymize<Iaf4bp6hbtsbjq>;
};
export type Iaf4bp6hbtsbjq = ResultPayload<undefined, Anonymize<Ie0bod29l7788n>>;
export type I4ap4ibr7egv0r = AnonymousEnum<{
    /**
     *A new multisig operation has begun.
     */
    "NewMultisig": Anonymize<Iep27ialq4a7o7>;
    /**
     *A multisig operation has been approved by someone.
     */
    "MultisigApproval": Anonymize<Iasu5jvoqr43mv>;
    /**
     *A multisig operation has been executed.
     */
    "MultisigExecuted": Anonymize<Ic5mma107scadr>;
    /**
     *A multisig operation has been cancelled.
     */
    "MultisigCancelled": Anonymize<I5qolde99acmd1>;
}>;
export type Ic5mma107scadr = {
    "approving": SS58String;
    "timepoint": Anonymize<Itvprrpb0nm3o>;
    "multisig": SS58String;
    "call_hash": FixedSizeBinary<32>;
    "result": Anonymize<Iaf4bp6hbtsbjq>;
};
export type Ial6ie5rsolhen = AnonymousEnum<{
    /**
     *A proxy was executed correctly, with the given.
     */
    "ProxyExecuted": Anonymize<Ieusrlv9sc7fdl>;
    /**
     *A pure account has been created by new proxy with given
     *disambiguation index and proxy type.
     */
    "PureCreated": Anonymize<I7ntcg8dtn6d9g>;
    /**
     *An announcement was placed to make a call in the future.
     */
    "Announced": Anonymize<I2ur0oeqg495j8>;
    /**
     *A proxy was added.
     */
    "ProxyAdded": Anonymize<I8v2su1f60qoae>;
    /**
     *A proxy was removed.
     */
    "ProxyRemoved": Anonymize<I8v2su1f60qoae>;
}>;
export type Ifeomfrr0ptj5b = AnonymousEnum<{
    /**
     *See [`Pallet::transfer_allow_death`].
     */
    "transfer_allow_death": Anonymize<I4ktuaksf5i1gk>;
    /**
     *See [`Pallet::force_transfer`].
     */
    "force_transfer": Anonymize<I9bqtpv2ii35mp>;
    /**
     *See [`Pallet::transfer_keep_alive`].
     */
    "transfer_keep_alive": Anonymize<I4ktuaksf5i1gk>;
    /**
     *See [`Pallet::transfer_all`].
     */
    "transfer_all": Anonymize<I9j7pagd6d4bda>;
    /**
     *See [`Pallet::force_unreserve`].
     */
    "force_unreserve": Anonymize<I2h9pmio37r7fb>;
    /**
     *See [`Pallet::upgrade_accounts`].
     */
    "upgrade_accounts": Anonymize<Ibmr18suc9ikh9>;
    /**
     *See [`Pallet::force_set_balance`].
     */
    "force_set_balance": Anonymize<I9iq22t0burs89>;
    /**
     *See [`Pallet::force_adjust_total_issuance`].
     */
    "force_adjust_total_issuance": Anonymize<I5u8olqbbvfnvf>;
}>;
export type I1qcarr7oajctp = AnonymousEnum<{
    /**
     *See [`Pallet::batch`].
     */
    "batch": Anonymize<I31us5krqr5m63>;
    /**
     *See [`Pallet::as_derivative`].
     */
    "as_derivative": Anonymize<I7mf7o26ckr36d>;
    /**
     *See [`Pallet::batch_all`].
     */
    "batch_all": Anonymize<I31us5krqr5m63>;
    /**
     *See [`Pallet::dispatch_as`].
     */
    "dispatch_as": Anonymize<If6a4i9ib1jm0p>;
    /**
     *See [`Pallet::force_batch`].
     */
    "force_batch": Anonymize<I31us5krqr5m63>;
    /**
     *See [`Pallet::with_weight`].
     */
    "with_weight": Anonymize<Ieghlm0vct4gj8>;
}>;
export type I31us5krqr5m63 = {
    "calls": Anonymize<Ia8777cfapsuem>;
};
export type Ia8777cfapsuem = Array<TxCallData>;
export type I7mf7o26ckr36d = {
    "index": number;
    "call": TxCallData;
};
export type If6a4i9ib1jm0p = {
    "as_origin": Anonymize<I48v5riethqckl>;
    "call": TxCallData;
};
export type Ieghlm0vct4gj8 = {
    "call": TxCallData;
    "weight": Anonymize<I4q39t5hn830vp>;
};
export type I9gj1f96duo3sb = AnonymousEnum<{
    /**
     *See [`Pallet::as_multi_threshold_1`].
     */
    "as_multi_threshold_1": Anonymize<I6h3vmg2d344j0>;
    /**
     *See [`Pallet::as_multi`].
     */
    "as_multi": Anonymize<Idoojq6ktd7ug>;
    /**
     *See [`Pallet::approve_as_multi`].
     */
    "approve_as_multi": Anonymize<Ideaemvoneh309>;
    /**
     *See [`Pallet::cancel_as_multi`].
     */
    "cancel_as_multi": Anonymize<I3d9o9d7epp66v>;
}>;
export type I6h3vmg2d344j0 = {
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "call": TxCallData;
};
export type Idoojq6ktd7ug = {
    "threshold": number;
    "other_signatories": Anonymize<Ia2lhg7l2hilo3>;
    "maybe_timepoint"?: Anonymize<I95jfd8j5cr5eh>;
    "call": TxCallData;
    "max_weight": Anonymize<I4q39t5hn830vp>;
};
export type I5mkidjj9mbg5 = AnonymousEnum<{
    /**
     *See [`Pallet::proxy`].
     */
    "proxy": Anonymize<I7lfpqlbl62ea8>;
    /**
     *See [`Pallet::add_proxy`].
     */
    "add_proxy": Anonymize<I6hk7temg1mga7>;
    /**
     *See [`Pallet::remove_proxy`].
     */
    "remove_proxy": Anonymize<I6hk7temg1mga7>;
    /**
     *See [`Pallet::remove_proxies`].
     */
    "remove_proxies": undefined;
    /**
     *See [`Pallet::create_pure`].
     */
    "create_pure": Anonymize<I2lbmfajhc5gdu>;
    /**
     *See [`Pallet::kill_pure`].
     */
    "kill_pure": Anonymize<I2siheq6f2djrd>;
    /**
     *See [`Pallet::announce`].
     */
    "announce": Anonymize<I2eb501t8s6hsq>;
    /**
     *See [`Pallet::remove_announcement`].
     */
    "remove_announcement": Anonymize<I2eb501t8s6hsq>;
    /**
     *See [`Pallet::reject_announcement`].
     */
    "reject_announcement": Anonymize<Ianmuoljk2sk1u>;
    /**
     *See [`Pallet::proxy_announced`].
     */
    "proxy_announced": Anonymize<I162mv98348k9l>;
}>;
export type I7lfpqlbl62ea8 = {
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Icdvjlkfnoshag>;
    "call": TxCallData;
};
export type I162mv98348k9l = {
    "delegate": MultiAddress;
    "real": MultiAddress;
    "force_proxy_type"?: Anonymize<Icdvjlkfnoshag>;
    "call": TxCallData;
};
export type I20qf36cfkp1uq = ResultPayload<Anonymize<Iaf4bp6hbtsbjq>, TransactionValidityError>;
export type I74dmh6pbhq27s = AnonymousEnum<{
    "System": Anonymize<Iekve0i6djpd9f>;
    "ParachainSystem": Anonymize<I3jmip7qjlcqot>;
    "Timestamp": Anonymize<I7d75gqfg6jh9c>;
    "ParachainInfo": undefined;
    "Balances": Anonymize<Ifeomfrr0ptj5b>;
    "CollatorSelection": Anonymize<I9dpq5287dur8b>;
    "Session": Anonymize<I77dda7hps0u37>;
    "XcmpQueue": Anonymize<Ib7tahn20bvsep>;
    "PolkadotXcm": Anonymize<I9nbjvlrb9bp1g>;
    "CumulusXcm": undefined;
    "MessageQueue": Anonymize<Ic2uoe7jdksosp>;
    "Utility": Anonymize<I1qcarr7oajctp>;
    "Multisig": Anonymize<I9gj1f96duo3sb>;
    "Proxy": Anonymize<I5mkidjj9mbg5>;
    "Identity": Anonymize<Ids8vscs1lcqvc>;
    "IdentityMigrator": Anonymize<I67t4bps9r5c4k>;
}>;
export {};
