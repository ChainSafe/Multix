name: multix/stage/deploy

on:
  push:
    paths:
      - 'packages/squid/**'
      - '.github/workflows/deploy-squid-stage.yaml'
    branches:
      - main
      - ci/* # run this workflow if the branch starts with ci/*

env:
  # secrets are listed here to simplify the readability
  AWS_REGION: '${{ secrets.AWS_REGION }}'
  AWS_ACCOUNT_ID: '${{ secrets.AWS_ACCOUNT_ID }}'
  AWS_ROLE_NAME: '${{ secrets.AWS_ROLE_NAME }}'
  GHCR_TOKEN: '${{ secrets.GHCR_TOKEN }}'
  APP_STAGE: 'stage'
  DOCKER_REGISTRY: 'ghcr.io'
  DOCKER_TAG: 'latest'
  ENV_FILE: '${{ secrets.ENV_FILE }}'

jobs:
#  push:
#    name: push
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        target: [ 'squid-indexer', 'graphql-server' ]
#
#    permissions:
#      contents: read
#      id-token: write
#
#    steps:
#      - name: checkout the source code
#        uses: actions/checkout@v3
#
#      - name: setup docker buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: login to ghcr
#        uses: docker/login-action@v2
#        with:
#          registry: ${{ env.DOCKER_REGISTRY }}
#          username: ${{ github.repository_owner }}
#          password: ${{ env.GHCR_TOKEN }}
#
#      - name: docker build image
#        uses: docker/build-push-action@v4
#        env:
#          BUILDX_NO_DEFAULT_ATTESTATIONS: 1
#        with:
#          context: .
#          push: true
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
#          provenance: false
#          target: ${{ matrix.target }}
#          platforms: |
#            linux/amd64
#          tags: |
#            ${{ env.DOCKER_REGISTRY }}/chainsafe/multix-${{ matrix.target }}:${{ env.DOCKER_TAG }}
#            ${{ env.DOCKER_REGISTRY }}/chainsafe/multix-${{ matrix.target }}:${{ github.sha }}

  deploy:
#    needs: push
    name: deploy
    runs-on: ubuntu-multix
    strategy:
      matrix:
        network: [ 'rococo', 'kusama' ]

    permissions:
      contents: read
      id-token: write

    steps:
      - name: checkout the source code
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: ${{ env.AWS_ROLE_NAME }}

      - name: generate database credentials
        env:
          SECRET_NAME: '${{ env.APP_STAGE }}/multix/${{ matrix.network }}'
        run: | 
          generate-credentials "${{ env.SECRET_NAME }}" "${{ env.AWS_REGION }}"
          source "${{ env.ENV_FILE }}"

#      - name: dump database
#        env:
#          DATABASE_NAME: 'multix-${{ env.APP_STAGE }}-${{ matrix.network }}'
#        run: psql

      - name: run migrations and start again
        run: npm run squid:migrate

#      - name: update cluster service
#        env:
#          AWS_CLUSTER_NAME: 'multix-${{ env.APP_STAGE }}'
#        run: aws ecs update-service --force-new-deployment --cluster ${{ env.AWS_CLUSTER_NAME }} --service ${{ matrix.network }} --region ${{ env.AWS_REGION }} > output.txt

      - name: cleanup credentials
        run: |
          cleanup-credentials
          source "${{ env.ENV_FILE }}"
          rm -f "${{ env.ENV_FILE }}"
        
