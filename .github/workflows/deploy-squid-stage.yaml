# naming convention: <project>/<environment>/<task>
name: multix/stage/deploy

on:
  push:
    paths:
      - 'packages/squid/**'
      - '.github/workflows/deploy-squid-stage.yaml'
    branches:
      - main
      - drop-tables/* # run this workflow if the branch starts with drop/* and drop the db
      - ci/* # run this workflow if the branch starts with ci/*

env:
  # secrets are listed here to simplify the readability
  AWS_REGION: '${{ secrets.AWS_REGION }}'
  AWS_ACCOUNT_ID: '${{ secrets.AWS_ACCOUNT_ID }}'
  AWS_ROLE_NAME: '${{ secrets.AWS_ROLE_NAME }}'
  GHCR_TOKEN: '${{ secrets.GHCR_TOKEN }}'
  APP_STAGE: 'stage'
  DOCKER_REGISTRY: 'ghcr.io'
  DOCKER_TAG: 'latest'
  ENV_FILE: '${{ secrets.ENV_FILE }}'

jobs:
  push:
    name: push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ['squid-indexer', 'graphql-server']

    permissions:
      contents: read
      id-token: write

    steps:
      - name: checkout the source code
        uses: actions/checkout@v3

      - name: setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ env.GHCR_TOKEN }}

      - name: docker build image
        uses: docker/build-push-action@v4
        env:
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          target: ${{ matrix.target }}
          platforms: |
            linux/amd64
          tags: |
            ${{ env.DOCKER_REGISTRY }}/chainsafe/multix-${{ matrix.target }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_REGISTRY }}/chainsafe/multix-${{ matrix.target }}:${{ github.sha }}

  deploy:
    needs: push
    name: deploy
    runs-on: self-hosted
    strategy:
      matrix:
        network: ['rococo', 'kusama']

    permissions:
      contents: read
      id-token: write

    steps:
      - name: checkout the source code
        uses: actions/checkout@v3

      - name: setup nodejs with yarn cache
        uses: actions/setup-node@v3
        continue-on-error: true
        with:
          node-version-file: '.node-version'
          cache: 'yarn'

      - name: install dependencies in root and squid package
        run: |
          corepack enable
          yarn workspaces focus multix-squid

      - name: generate squid code
        run: yarn workspace multix-squid codegen

      - name: build the squid package
        run: yarn workspace multix-squid build

      - name: generate database credentials
        env:
          SECRET_NAME: '${{ env.APP_STAGE }}/multix/${{ matrix.network }}'
        run: generate-credentials "${{ env.SECRET_NAME }}" "${{ env.AWS_REGION }}"

      - name: stop current service
        env:
          AWS_CLUSTER_NAME: 'multix-${{ env.APP_STAGE }}'
        run: stop-service "${{ env.AWS_CLUSTER_NAME }}" "${{ matrix.network }}" "${{ env.AWS_REGION }}"

      - name: dump database
        if: ${{ contains(github.event.pull_request.labels.*.name, 'drop-tables')}}
        run: drop-tables

      - name: run migration
        if: ${{ contains(github.event.pull_request.labels.*.name, 'drop-tables')}}
        run: |
          source "${{ env.ENV_FILE }}"
          yarn workspace multix-squid db:migrate

      - name: cleanup credentials
        if: always()
        run: cleanup-credentials
